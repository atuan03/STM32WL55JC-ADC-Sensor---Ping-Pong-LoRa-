
SubGHz_Phy_PingPong_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008508  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08008640  08008640  00009640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a50  08008a50  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  08008a50  08008a50  00009a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a58  08008a58  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008a58  08008a58  00009a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008a60  08008a60  00009a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008a68  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  20000018  08008a80  0000a018  2**2
                  ALLOC
 10 RAM1_region   00000000  20000748  20000748  0000a018  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  0000a018  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  20000748  20000748  0000a748  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030ad4  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007285  00000000  00000000  0003ab16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000d4b3  00000000  00000000  00041d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001b10  00000000  00000000  0004f250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001500  00000000  00000000  00050d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002514e  00000000  00000000  00052260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00030b15  00000000  00000000  000773ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cf1fd  00000000  00000000  000a7ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001770c0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000044dc  00000000  00000000  00177104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000af  00000000  00000000  0017b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000018 	.word	0x20000018
 8000154:	00000000 	.word	0x00000000
 8000158:	08008628 	.word	0x08008628

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000001c 	.word	0x2000001c
 8000174:	08008628 	.word	0x08008628

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b96a 	b.w	8000474 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460c      	mov	r4, r1
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d14e      	bne.n	8000262 <__udivmoddi4+0xaa>
 80001c4:	4694      	mov	ip, r2
 80001c6:	458c      	cmp	ip, r1
 80001c8:	4686      	mov	lr, r0
 80001ca:	fab2 f282 	clz	r2, r2
 80001ce:	d962      	bls.n	8000296 <__udivmoddi4+0xde>
 80001d0:	b14a      	cbz	r2, 80001e6 <__udivmoddi4+0x2e>
 80001d2:	f1c2 0320 	rsb	r3, r2, #32
 80001d6:	4091      	lsls	r1, r2
 80001d8:	fa20 f303 	lsr.w	r3, r0, r3
 80001dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e0:	4319      	orrs	r1, r3
 80001e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ea:	fa1f f68c 	uxth.w	r6, ip
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001f6:	fb07 1114 	mls	r1, r7, r4, r1
 80001fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fe:	fb04 f106 	mul.w	r1, r4, r6
 8000202:	4299      	cmp	r1, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	eb1c 0303 	adds.w	r3, ip, r3
 800020a:	f104 30ff 	add.w	r0, r4, #4294967295
 800020e:	f080 8112 	bcs.w	8000436 <__udivmoddi4+0x27e>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 810f 	bls.w	8000436 <__udivmoddi4+0x27e>
 8000218:	3c02      	subs	r4, #2
 800021a:	4463      	add	r3, ip
 800021c:	1a59      	subs	r1, r3, r1
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800022e:	fb00 f606 	mul.w	r6, r0, r6
 8000232:	429e      	cmp	r6, r3
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x94>
 8000236:	eb1c 0303 	adds.w	r3, ip, r3
 800023a:	f100 31ff 	add.w	r1, r0, #4294967295
 800023e:	f080 80fc 	bcs.w	800043a <__udivmoddi4+0x282>
 8000242:	429e      	cmp	r6, r3
 8000244:	f240 80f9 	bls.w	800043a <__udivmoddi4+0x282>
 8000248:	4463      	add	r3, ip
 800024a:	3802      	subs	r0, #2
 800024c:	1b9b      	subs	r3, r3, r6
 800024e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa6>
 8000256:	40d3      	lsrs	r3, r2
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xba>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb4>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa6>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x150>
 800027a:	42a3      	cmp	r3, r4
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xcc>
 800027e:	4290      	cmp	r0, r2
 8000280:	f0c0 80f0 	bcc.w	8000464 <__udivmoddi4+0x2ac>
 8000284:	1a86      	subs	r6, r0, r2
 8000286:	eb64 0303 	sbc.w	r3, r4, r3
 800028a:	2001      	movs	r0, #1
 800028c:	2d00      	cmp	r5, #0
 800028e:	d0e6      	beq.n	800025e <__udivmoddi4+0xa6>
 8000290:	e9c5 6300 	strd	r6, r3, [r5]
 8000294:	e7e3      	b.n	800025e <__udivmoddi4+0xa6>
 8000296:	2a00      	cmp	r2, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x204>
 800029c:	eba1 040c 	sub.w	r4, r1, ip
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	fa1f f78c 	uxth.w	r7, ip
 80002a8:	2101      	movs	r1, #1
 80002aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ba:	fb07 f006 	mul.w	r0, r7, r6
 80002be:	4298      	cmp	r0, r3
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x11c>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x11a>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2b4>
 80002d2:	4626      	mov	r6, r4
 80002d4:	1a1c      	subs	r4, r3, r0
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002e6:	fb00 f707 	mul.w	r7, r0, r7
 80002ea:	429f      	cmp	r7, r3
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x148>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x146>
 80002f8:	429f      	cmp	r7, r3
 80002fa:	f200 80b0 	bhi.w	800045e <__udivmoddi4+0x2a6>
 80002fe:	4620      	mov	r0, r4
 8000300:	1bdb      	subs	r3, r3, r7
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x9c>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa20 fc06 	lsr.w	ip, r0, r6
 8000318:	fa04 f301 	lsl.w	r3, r4, r1
 800031c:	ea43 030c 	orr.w	r3, r3, ip
 8000320:	40f4      	lsrs	r4, r6
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	0c38      	lsrs	r0, r7, #16
 8000328:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800032c:	fbb4 fef0 	udiv	lr, r4, r0
 8000330:	fa1f fc87 	uxth.w	ip, r7
 8000334:	fb00 441e 	mls	r4, r0, lr, r4
 8000338:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800033c:	fb0e f90c 	mul.w	r9, lr, ip
 8000340:	45a1      	cmp	r9, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x1a6>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800034e:	f080 8084 	bcs.w	800045a <__udivmoddi4+0x2a2>
 8000352:	45a1      	cmp	r9, r4
 8000354:	f240 8081 	bls.w	800045a <__udivmoddi4+0x2a2>
 8000358:	f1ae 0e02 	sub.w	lr, lr, #2
 800035c:	443c      	add	r4, r7
 800035e:	eba4 0409 	sub.w	r4, r4, r9
 8000362:	fa1f f983 	uxth.w	r9, r3
 8000366:	fbb4 f3f0 	udiv	r3, r4, r0
 800036a:	fb00 4413 	mls	r4, r0, r3, r4
 800036e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000372:	fb03 fc0c 	mul.w	ip, r3, ip
 8000376:	45a4      	cmp	ip, r4
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x1d2>
 800037a:	193c      	adds	r4, r7, r4
 800037c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000380:	d267      	bcs.n	8000452 <__udivmoddi4+0x29a>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0x29a>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800038e:	fba0 9302 	umull	r9, r3, r0, r2
 8000392:	eba4 040c 	sub.w	r4, r4, ip
 8000396:	429c      	cmp	r4, r3
 8000398:	46ce      	mov	lr, r9
 800039a:	469c      	mov	ip, r3
 800039c:	d351      	bcc.n	8000442 <__udivmoddi4+0x28a>
 800039e:	d04e      	beq.n	800043e <__udivmoddi4+0x286>
 80003a0:	b155      	cbz	r5, 80003b8 <__udivmoddi4+0x200>
 80003a2:	ebb8 030e 	subs.w	r3, r8, lr
 80003a6:	eb64 040c 	sbc.w	r4, r4, ip
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	40cb      	lsrs	r3, r1
 80003b0:	431e      	orrs	r6, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c5 6400 	strd	r6, r4, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e750      	b.n	800025e <__udivmoddi4+0xa6>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f103 	lsr.w	r1, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	fa24 f303 	lsr.w	r3, r4, r3
 80003cc:	4094      	lsls	r4, r2
 80003ce:	430c      	orrs	r4, r1
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d8:	fa1f f78c 	uxth.w	r7, ip
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3110 	mls	r1, r8, r0, r3
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x24c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29e>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29e>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb3 f1f8 	udiv	r1, r3, r8
 800040c:	fb08 3311 	mls	r3, r8, r1, r3
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x276>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x296>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x296>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e739      	b.n	80002aa <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f0      	b.n	800021c <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e706      	b.n	800024c <__udivmoddi4+0x94>
 800043e:	45c8      	cmp	r8, r9
 8000440:	d2ae      	bcs.n	80003a0 <__udivmoddi4+0x1e8>
 8000442:	ebb9 0e02 	subs.w	lr, r9, r2
 8000446:	eb63 0c07 	sbc.w	ip, r3, r7
 800044a:	3801      	subs	r0, #1
 800044c:	e7a8      	b.n	80003a0 <__udivmoddi4+0x1e8>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x276>
 8000452:	4603      	mov	r3, r0
 8000454:	e799      	b.n	800038a <__udivmoddi4+0x1d2>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x24c>
 800045a:	46d6      	mov	lr, sl
 800045c:	e77f      	b.n	800035e <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74d      	b.n	8000300 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e70f      	b.n	800028c <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e730      	b.n	80002d4 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000478:	b500      	push	{lr}
 800047a:	b085      	sub	sp, #20

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800047c:	4819      	ldr	r0, [pc, #100]	@ (80004e4 <MX_ADC_Init+0x6c>)
 800047e:	4b1a      	ldr	r3, [pc, #104]	@ (80004e8 <MX_ADC_Init+0x70>)
 8000480:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000482:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000486:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000488:	2300      	movs	r3, #0
 800048a:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800048c:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800048e:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000490:	2204      	movs	r2, #4
 8000492:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000494:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000496:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000498:	2101      	movs	r1, #1
 800049a:	7681      	strb	r1, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 800049c:	61c1      	str	r1, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800049e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a2:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004a4:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004a6:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004aa:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 80004ac:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_19CYCLES_5;
 80004ae:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80004b0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80004b4:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004b6:	f001 f817 	bl	80014e8 <HAL_ADC_Init>
 80004ba:	b968      	cbnz	r0, 80004d8 <MX_ADC_Init+0x60>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /* Cấu hình kênh ADC */
  ADC_ChannelConfTypeDef sConfig = {0};
 80004bc:	2300      	movs	r3, #0
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	9302      	str	r3, [sp, #8]
 80004c2:	9303      	str	r3, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_1;  // Chọn kênh ADC 1 (PB14)
 80004c4:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <MX_ADC_Init+0x74>)
 80004c6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;  // Thiết lập thứ tự chuyển đổi
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;  // Chọn thời gian lấy mẫu

  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004c8:	a901      	add	r1, sp, #4
 80004ca:	4806      	ldr	r0, [pc, #24]	@ (80004e4 <MX_ADC_Init+0x6c>)
 80004cc:	f001 fa3e 	bl	800194c <HAL_ADC_ConfigChannel>
 80004d0:	b928      	cbnz	r0, 80004de <MX_ADC_Init+0x66>
    Error_Handler();  // Báo lỗi nếu cấu hình thất bại
  }

  /* USER CODE END ADC_Init 2 */

}
 80004d2:	b005      	add	sp, #20
 80004d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80004d8:	f000 f8f2 	bl	80006c0 <Error_Handler>
 80004dc:	e7ee      	b.n	80004bc <MX_ADC_Init+0x44>
    Error_Handler();  // Báo lỗi nếu cấu hình thất bại
 80004de:	f000 f8ef 	bl	80006c0 <Error_Handler>
}
 80004e2:	e7f6      	b.n	80004d2 <MX_ADC_Init+0x5a>
 80004e4:	20000034 	.word	0x20000034
 80004e8:	40012400 	.word	0x40012400
 80004ec:	04000002 	.word	0x04000002

080004f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004f0:	b500      	push	{lr}
 80004f2:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	2300      	movs	r3, #0
 80004f6:	9303      	str	r3, [sp, #12]
 80004f8:	9304      	str	r3, [sp, #16]
 80004fa:	9305      	str	r3, [sp, #20]
 80004fc:	9306      	str	r3, [sp, #24]
 80004fe:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC)
 8000500:	6802      	ldr	r2, [r0, #0]
 8000502:	4b16      	ldr	r3, [pc, #88]	@ (800055c <HAL_ADC_MspInit+0x6c>)
 8000504:	429a      	cmp	r2, r3
 8000506:	d002      	beq.n	800050e <HAL_ADC_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000508:	b009      	add	sp, #36	@ 0x24
 800050a:	f85d fb04 	ldr.w	pc, [sp], #4
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800050e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000512:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000518:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800051a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800051c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000520:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000522:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000524:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000526:	f042 0202 	orr.w	r2, r2, #2
 800052a:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000534:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000536:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800053a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800053c:	2303      	movs	r3, #3
 800053e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000540:	a903      	add	r1, sp, #12
 8000542:	4807      	ldr	r0, [pc, #28]	@ (8000560 <HAL_ADC_MspInit+0x70>)
 8000544:	f001 ffc8 	bl	80024d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	4611      	mov	r1, r2
 800054c:	2012      	movs	r0, #18
 800054e:	f001 fd25 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000552:	2012      	movs	r0, #18
 8000554:	f001 fd32 	bl	8001fbc <HAL_NVIC_EnableIRQ>
}
 8000558:	e7d6      	b.n	8000508 <HAL_ADC_MspInit+0x18>
 800055a:	bf00      	nop
 800055c:	40012400 	.word	0x40012400
 8000560:	48000400 	.word	0x48000400

08000564 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000564:	b508      	push	{r3, lr}

  if(adcHandle->Instance==ADC)
 8000566:	6802      	ldr	r2, [r0, #0]
 8000568:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <HAL_ADC_MspDeInit+0x2c>)
 800056a:	429a      	cmp	r2, r3
 800056c:	d000      	beq.n	8000570 <HAL_ADC_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800056e:	bd08      	pop	{r3, pc}
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000570:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000574:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8000576:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800057a:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 800057c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000580:	4804      	ldr	r0, [pc, #16]	@ (8000594 <HAL_ADC_MspDeInit+0x30>)
 8000582:	f002 f87b 	bl	800267c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8000586:	2012      	movs	r0, #18
 8000588:	f001 fd1c 	bl	8001fc4 <HAL_NVIC_DisableIRQ>
}
 800058c:	e7ef      	b.n	800056e <HAL_ADC_MspDeInit+0xa>
 800058e:	bf00      	nop
 8000590:	40012400 	.word	0x40012400
 8000594:	48000400 	.word	0x48000400

08000598 <HAL_ADC_ConvCpltCallback>:
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    HAL_ResumeTick();  // Kích hoạt lại SysTick khi thức dậy
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000598:	b500      	push	{lr}
 800059a:	b083      	sub	sp, #12
    uint16_t adcValue = HAL_ADC_GetValue(hadc);
 800059c:	f001 f91b 	bl	80017d6 <HAL_ADC_GetValue>
    APP_LOG(TS_OFF, VLEVEL_M, "ADC IRQ Value: %d\n\r", adcValue);
 80005a0:	b280      	uxth	r0, r0
 80005a2:	9000      	str	r0, [sp, #0]
 80005a4:	4b04      	ldr	r3, [pc, #16]	@ (80005b8 <HAL_ADC_ConvCpltCallback+0x20>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	4611      	mov	r1, r2
 80005aa:	2002      	movs	r0, #2
 80005ac:	f007 fafe 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
}
 80005b0:	b003      	add	sp, #12
 80005b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80005b6:	bf00      	nop
 80005b8:	08008680 	.word	0x08008680

080005bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005bc:	b500      	push	{lr}
 80005be:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80005c6:	f042 0204 	orr.w	r2, r2, #4
 80005ca:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80005ce:	f002 0204 	and.w	r2, r2, #4
 80005d2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80005d4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80005d8:	f042 0201 	orr.w	r2, r2, #1
 80005dc:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80005e6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2102      	movs	r1, #2
 80005ec:	200f      	movs	r0, #15
 80005ee:	f001 fcd5 	bl	8001f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005f2:	200f      	movs	r0, #15
 80005f4:	f001 fce2 	bl	8001fbc <HAL_NVIC_EnableIRQ>

}
 80005f8:	b003      	add	sp, #12
 80005fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000604:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	2400      	movs	r4, #0
 8000608:	9403      	str	r4, [sp, #12]
 800060a:	9404      	str	r4, [sp, #16]
 800060c:	9405      	str	r4, [sp, #20]
 800060e:	9406      	str	r4, [sp, #24]
 8000610:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000616:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000618:	f042 0202 	orr.w	r2, r2, #2
 800061c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800061e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000620:	f002 0202 	and.w	r2, r2, #2
 8000624:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000626:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000628:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800062a:	f042 0204 	orr.w	r2, r2, #4
 800062e:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000630:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000632:	f002 0204 	and.w	r2, r2, #4
 8000636:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000638:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800063a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800063c:	f042 0201 	orr.w	r2, r2, #1
 8000640:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800064a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 800064c:	4e1a      	ldr	r6, [pc, #104]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 800064e:	4622      	mov	r2, r4
 8000650:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 8000654:	4630      	mov	r0, r6
 8000656:	f002 f88f 	bl	8002778 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800065a:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 800065e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2501      	movs	r5, #1
 8000662:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	2302      	movs	r3, #2
 8000668:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	a903      	add	r1, sp, #12
 800066c:	4630      	mov	r0, r6
 800066e:	f001 ff33 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8000672:	f04f 0803 	mov.w	r8, #3
 8000676:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800067a:	f44f 1704 	mov.w	r7, #2162688	@ 0x210000
 800067e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000680:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	a903      	add	r1, sp, #12
 8000684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000688:	f001 ff26 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROB2_Pin PROB1_Pin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 800068c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000690:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000696:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	a903      	add	r1, sp, #12
 800069c:	4630      	mov	r0, r6
 800069e:	f001 ff1b 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT3_Pin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80006a2:	2340      	movs	r3, #64	@ 0x40
 80006a4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80006aa:	a903      	add	r1, sp, #12
 80006ac:	4803      	ldr	r0, [pc, #12]	@ (80006bc <MX_GPIO_Init+0xbc>)
 80006ae:	f001 ff13 	bl	80024d8 <HAL_GPIO_Init>

}
 80006b2:	b008      	add	sp, #32
 80006b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006b8:	48000400 	.word	0x48000400
 80006bc:	48000800 	.word	0x48000800

080006c0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <Error_Handler+0x2>

080006c4 <SystemClock_Config>:
{
 80006c4:	b510      	push	{r4, lr}
 80006c6:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c8:	2248      	movs	r2, #72	@ 0x48
 80006ca:	2100      	movs	r1, #0
 80006cc:	a808      	add	r0, sp, #32
 80006ce:	f007 ff7f 	bl	80085d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d2:	2400      	movs	r4, #0
 80006d4:	9401      	str	r4, [sp, #4]
 80006d6:	9402      	str	r4, [sp, #8]
 80006d8:	9403      	str	r4, [sp, #12]
 80006da:	9404      	str	r4, [sp, #16]
 80006dc:	9405      	str	r4, [sp, #20]
 80006de:	9406      	str	r4, [sp, #24]
 80006e0:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80006e2:	f002 f84f 	bl	8002784 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80006e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80006ee:	f023 0318 	bic.w	r3, r3, #24
 80006f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80006fa:	6813      	ldr	r3, [r2, #0]
 80006fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000700:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	6813      	ldr	r3, [r2, #0]
 8000708:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000710:	2306      	movs	r3, #6
 8000712:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000714:	2381      	movs	r3, #129	@ 0x81
 8000716:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800071c:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	2340      	movs	r3, #64	@ 0x40
 8000720:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000722:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	a808      	add	r0, sp, #32
 8000726:	f002 fa4f 	bl	8002bc8 <HAL_RCC_OscConfig>
 800072a:	b978      	cbnz	r0, 800074c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800072c:	234f      	movs	r3, #79	@ 0x4f
 800072e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000730:	2301      	movs	r3, #1
 8000732:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800073c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073e:	2102      	movs	r1, #2
 8000740:	a801      	add	r0, sp, #4
 8000742:	f002 fd73 	bl	800322c <HAL_RCC_ClockConfig>
 8000746:	b918      	cbnz	r0, 8000750 <SystemClock_Config+0x8c>
}
 8000748:	b01a      	add	sp, #104	@ 0x68
 800074a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800074c:	f7ff ffb8 	bl	80006c0 <Error_Handler>
    Error_Handler();
 8000750:	f7ff ffb6 	bl	80006c0 <Error_Handler>

08000754 <main>:
{
 8000754:	b508      	push	{r3, lr}
  HAL_Init();
 8000756:	f000 fe8b 	bl	8001470 <HAL_Init>
  SystemClock_Config();
 800075a:	f7ff ffb3 	bl	80006c4 <SystemClock_Config>
  MX_GPIO_Init();
 800075e:	f7ff ff4f 	bl	8000600 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8000762:	f000 fc80 	bl	8001066 <MX_SubGHz_Phy_Init>
  MX_ADC_Init();
 8000766:	f7ff fe87 	bl	8000478 <MX_ADC_Init>
    MX_SubGHz_Phy_Process();
 800076a:	f000 fc82 	bl	8001072 <MX_SubGHz_Phy_Process>
  while (1)
 800076e:	e7fc      	b.n	800076a <main+0x16>

08000770 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000770:	b500      	push	{lr}
 8000772:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000774:	222c      	movs	r2, #44	@ 0x2c
 8000776:	2100      	movs	r1, #0
 8000778:	a801      	add	r0, sp, #4
 800077a:	f007 ff29 	bl	80085d0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800077e:	4819      	ldr	r0, [pc, #100]	@ (80007e4 <MX_RTC_Init+0x74>)
 8000780:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_RTC_Init+0x78>)
 8000782:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000784:	231f      	movs	r3, #31
 8000786:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800078c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800078e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000794:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000796:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000798:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800079c:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800079e:	f003 f891 	bl	80038c4 <HAL_RTC_Init>
 80007a2:	b9a8      	cbnz	r0, 80007d0 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80007a4:	480f      	ldr	r0, [pc, #60]	@ (80007e4 <MX_RTC_Init+0x74>)
 80007a6:	f003 f9d1 	bl	8003b4c <HAL_RTCEx_SetSSRU_IT>
 80007aa:	b9a0      	cbnz	r0, 80007d6 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80007ac:	2200      	movs	r2, #0
 80007ae:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007b0:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007b2:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80007b4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007b8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80007ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007be:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80007c0:	a901      	add	r1, sp, #4
 80007c2:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <MX_RTC_Init+0x74>)
 80007c4:	f003 f8e6 	bl	8003994 <HAL_RTC_SetAlarm_IT>
 80007c8:	b940      	cbnz	r0, 80007dc <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007ca:	b00d      	add	sp, #52	@ 0x34
 80007cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007d0:	f7ff ff76 	bl	80006c0 <Error_Handler>
 80007d4:	e7e6      	b.n	80007a4 <MX_RTC_Init+0x34>
    Error_Handler();
 80007d6:	f7ff ff73 	bl	80006c0 <Error_Handler>
 80007da:	e7e7      	b.n	80007ac <MX_RTC_Init+0x3c>
    Error_Handler();
 80007dc:	f7ff ff70 	bl	80006c0 <Error_Handler>
}
 80007e0:	e7f3      	b.n	80007ca <MX_RTC_Init+0x5a>
 80007e2:	bf00      	nop
 80007e4:	20000098 	.word	0x20000098
 80007e8:	40002800 	.word	0x40002800

080007ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007ec:	b510      	push	{r4, lr}
 80007ee:	b090      	sub	sp, #64	@ 0x40
 80007f0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f2:	2238      	movs	r2, #56	@ 0x38
 80007f4:	2100      	movs	r1, #0
 80007f6:	a802      	add	r0, sp, #8
 80007f8:	f007 feea 	bl	80085d0 <memset>
  if(rtcHandle->Instance==RTC)
 80007fc:	6822      	ldr	r2, [r4, #0]
 80007fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <HAL_RTC_MspInit+0x7c>)
 8000800:	429a      	cmp	r2, r3
 8000802:	d001      	beq.n	8000808 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000804:	b010      	add	sp, #64	@ 0x40
 8000806:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800080c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800080e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000812:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000814:	a802      	add	r0, sp, #8
 8000816:	f002 fe6d 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	bb08      	cbnz	r0, 8000860 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800081c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000820:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000824:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 800082c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800082e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000832:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800083a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800083c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	4611      	mov	r1, r2
 8000842:	2002      	movs	r0, #2
 8000844:	f001 fbaa 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000848:	2002      	movs	r0, #2
 800084a:	f001 fbb7 	bl	8001fbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	4611      	mov	r1, r2
 8000852:	202a      	movs	r0, #42	@ 0x2a
 8000854:	f001 fba2 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000858:	202a      	movs	r0, #42	@ 0x2a
 800085a:	f001 fbaf 	bl	8001fbc <HAL_NVIC_EnableIRQ>
}
 800085e:	e7d1      	b.n	8000804 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8000860:	f7ff ff2e 	bl	80006c0 <Error_Handler>
 8000864:	e7da      	b.n	800081c <HAL_RTC_MspInit+0x30>
 8000866:	bf00      	nop
 8000868:	40002800 	.word	0x40002800

0800086c <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800086c:	4770      	bx	lr

0800086e <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800086e:	4770      	bx	lr

08000870 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000872:	f000 fe13 	bl	800149c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000876:	2001      	movs	r0, #1
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <PWR_EnterStopMode+0x14>)
 800087a:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800087e:	f002 f86d 	bl	800295c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000882:	bd08      	pop	{r3, pc}
 8000884:	58000400 	.word	0x58000400

08000888 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8000888:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800088a:	f000 fe0e 	bl	80014aa <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800088e:	bd08      	pop	{r3, pc}

08000890 <PWR_ExitStopMode>:
{
 8000890:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8000892:	f000 fe0a 	bl	80014aa <HAL_ResumeTick>
  vcom_Resume();
 8000896:	f000 fb7d 	bl	8000f94 <vcom_Resume>
}
 800089a:	bd08      	pop	{r3, pc}

0800089c <PWR_EnterSleepMode>:
{
 800089c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800089e:	f000 fdfd 	bl	800149c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80008a2:	2101      	movs	r1, #1
 80008a4:	2000      	movs	r0, #0
 80008a6:	f001 ffb7 	bl	8002818 <HAL_PWR_EnterSLEEPMode>
}
 80008aa:	bd08      	pop	{r3, pc}

080008ac <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ac:	4770      	bx	lr

080008ae <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <NMI_Handler>

080008b0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <HardFault_Handler>

080008b2 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <MemManage_Handler>

080008b4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <BusFault_Handler>

080008b6 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <UsageFault_Handler>

080008b8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008be:	4770      	bx	lr

080008c0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80008c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80008c2:	4802      	ldr	r0, [pc, #8]	@ (80008cc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 80008c4:	f003 f96e 	bl	8003ba4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80008c8:	bd08      	pop	{r3, pc}
 80008ca:	bf00      	nop
 80008cc:	20000098 	.word	0x20000098

080008d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80008d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008d2:	4802      	ldr	r0, [pc, #8]	@ (80008dc <DMA1_Channel5_IRQHandler+0xc>)
 80008d4:	f001 fd78 	bl	80023c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80008d8:	bd08      	pop	{r3, pc}
 80008da:	bf00      	nop
 80008dc:	200000e8 	.word	0x200000e8

080008e0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 80008e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80008e2:	4802      	ldr	r0, [pc, #8]	@ (80008ec <ADC_IRQHandler+0xc>)
 80008e4:	f000 ff7c 	bl	80017e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80008e8:	bd08      	pop	{r3, pc}
 80008ea:	bf00      	nop
 80008ec:	20000034 	.word	0x20000034

080008f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80008f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008f2:	4802      	ldr	r0, [pc, #8]	@ (80008fc <USART2_IRQHandler+0xc>)
 80008f4:	f003 fe18 	bl	8004528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008f8:	bd08      	pop	{r3, pc}
 80008fa:	bf00      	nop
 80008fc:	20000148 	.word	0x20000148

08000900 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000900:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000902:	4802      	ldr	r0, [pc, #8]	@ (800090c <RTC_Alarm_IRQHandler+0xc>)
 8000904:	f002 ff58 	bl	80037b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000908:	bd08      	pop	{r3, pc}
 800090a:	bf00      	nop
 800090c:	20000098 	.word	0x20000098

08000910 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000910:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000912:	4802      	ldr	r0, [pc, #8]	@ (800091c <SUBGHZ_Radio_IRQHandler+0xc>)
 8000914:	f003 fbfe 	bl	8004114 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000918:	bd08      	pop	{r3, pc}
 800091a:	bf00      	nop
 800091c:	200000d0 	.word	0x200000d0

08000920 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000920:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_SUBGHZ_Init+0x18>)
 8000924:	2308      	movs	r3, #8
 8000926:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000928:	f003 f972 	bl	8003c10 <HAL_SUBGHZ_Init>
 800092c:	b900      	cbnz	r0, 8000930 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800092e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000930:	f7ff fec6 	bl	80006c0 <Error_Handler>
}
 8000934:	e7fb      	b.n	800092e <MX_SUBGHZ_Init+0xe>
 8000936:	bf00      	nop
 8000938:	200000d0 	.word	0x200000d0

0800093c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800093c:	b500      	push	{lr}
 800093e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000944:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000946:	f042 0201 	orr.w	r2, r2, #1
 800094a:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800094c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000954:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	4611      	mov	r1, r2
 800095a:	2032      	movs	r0, #50	@ 0x32
 800095c:	f001 fb1e 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000960:	2032      	movs	r0, #50	@ 0x32
 8000962:	f001 fb2b 	bl	8001fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000966:	b003      	add	sp, #12
 8000968:	f85d fb04 	ldr.w	pc, [sp], #4

0800096c <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800096c:	b40c      	push	{r2, r3}
 800096e:	b500      	push	{lr}
 8000970:	b083      	sub	sp, #12
 8000972:	ab04      	add	r3, sp, #16
 8000974:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000978:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800097a:	f007 fd65 	bl	8008448 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800097e:	b003      	add	sp, #12
 8000980:	f85d eb04 	ldr.w	lr, [sp], #4
 8000984:	b002      	add	sp, #8
 8000986:	4770      	bx	lr

08000988 <TimestampNow>:
{
 8000988:	b530      	push	{r4, r5, lr}
 800098a:	b085      	sub	sp, #20
 800098c:	4604      	mov	r4, r0
 800098e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8000990:	a802      	add	r0, sp, #8
 8000992:	f007 fb2f 	bl	8007ff4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000996:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	9b02      	ldr	r3, [sp, #8]
 800099e:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <TimestampNow+0x2c>)
 80009a0:	2110      	movs	r1, #16
 80009a2:	4620      	mov	r0, r4
 80009a4:	f7ff ffe2 	bl	800096c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80009a8:	4620      	mov	r0, r4
 80009aa:	f7ff fbe5 	bl	8000178 <strlen>
 80009ae:	8028      	strh	r0, [r5, #0]
}
 80009b0:	b005      	add	sp, #20
 80009b2:	bd30      	pop	{r4, r5, pc}
 80009b4:	080086ac 	.word	0x080086ac

080009b8 <SystemApp_Init>:
{
 80009b8:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80009ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009be:	6893      	ldr	r3, [r2, #8]
 80009c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009c4:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 80009c6:	f007 fb37 	bl	8008038 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80009ca:	2401      	movs	r4, #1
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <SystemApp_Init+0x3c>)
 80009ce:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 80009d0:	f000 f83c 	bl	8000a4c <DBG_Init>
  UTIL_ADV_TRACE_Init();
 80009d4:	f007 f876 	bl	8007ac4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80009d8:	4807      	ldr	r0, [pc, #28]	@ (80009f8 <SystemApp_Init+0x40>)
 80009da:	f007 f88d 	bl	8007af8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80009de:	2002      	movs	r0, #2
 80009e0:	f007 f890 	bl	8007b04 <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 80009e4:	f007 f99e 	bl	8007d24 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80009e8:	4621      	mov	r1, r4
 80009ea:	4620      	mov	r0, r4
 80009ec:	f007 f9ba 	bl	8007d64 <UTIL_LPM_SetOffMode>
}
 80009f0:	bd10      	pop	{r4, pc}
 80009f2:	bf00      	nop
 80009f4:	200000dc 	.word	0x200000dc
 80009f8:	08000989 	.word	0x08000989

080009fc <UTIL_SEQ_Idle>:
{
 80009fc:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80009fe:	f007 f9c7 	bl	8007d90 <UTIL_LPM_EnterLowPower>
}
 8000a02:	bd08      	pop	{r3, pc}

08000a04 <UTIL_ADV_TRACE_PreSendHook>:
{
 8000a04:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000a06:	2101      	movs	r1, #1
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f007 f995 	bl	8007d38 <UTIL_LPM_SetStopMode>
}
 8000a0e:	bd08      	pop	{r3, pc}

08000a10 <UTIL_ADV_TRACE_PostSendHook>:
{
 8000a10:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000a12:	2100      	movs	r1, #0
 8000a14:	2002      	movs	r0, #2
 8000a16:	f007 f98f 	bl	8007d38 <UTIL_LPM_SetStopMode>
}
 8000a1a:	bd08      	pop	{r3, pc}

08000a1c <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	4770      	bx	lr

08000a20 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000a20:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000a22:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <HAL_GetTick+0x14>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b90b      	cbnz	r3, 8000a2c <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8000a28:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8000a2a:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8000a2c:	f000 f87c 	bl	8000b28 <TIMER_IF_GetTimerValue>
 8000a30:	e7fb      	b.n	8000a2a <HAL_GetTick+0xa>
 8000a32:	bf00      	nop
 8000a34:	200000dc 	.word	0x200000dc

08000a38 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000a38:	b500      	push	{lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000a3e:	9801      	ldr	r0, [sp, #4]
 8000a40:	f000 f958 	bl	8000cf4 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000a44:	b003      	add	sp, #12
 8000a46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000a4c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4e:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8000a50:	f000 fd32 	bl	80014b8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000a54:	f000 fd38 	bl	80014c8 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000a58:	f000 fd3e 	bl	80014d8 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	9403      	str	r4, [sp, #12]
 8000a60:	9404      	str	r4, [sp, #16]
 8000a62:	9405      	str	r4, [sp, #20]
 8000a64:	9406      	str	r4, [sp, #24]
 8000a66:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a76:	f042 0202 	orr.w	r2, r2, #2
 8000a7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a7e:	f002 0202 	and.w	r2, r2, #2
 8000a82:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000a84:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a88:	f042 0202 	orr.w	r2, r2, #2
 8000a8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a96:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000a98:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8000a9c:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000a9e:	4d0c      	ldr	r5, [pc, #48]	@ (8000ad0 <DBG_Init+0x84>)
 8000aa0:	a903      	add	r1, sp, #12
 8000aa2:	4628      	mov	r0, r5
 8000aa4:	f001 fd18 	bl	80024d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000aa8:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8000aac:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000aae:	a903      	add	r1, sp, #12
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	f001 fd11 	bl	80024d8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000ab6:	4622      	mov	r2, r4
 8000ab8:	4639      	mov	r1, r7
 8000aba:	4628      	mov	r0, r5
 8000abc:	f001 fe5c 	bl	8002778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000ac0:	4622      	mov	r2, r4
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	f001 fe57 	bl	8002778 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000aca:	b009      	add	sp, #36	@ 0x24
 8000acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <TIMER_IF_SetTimerContext+0x1c>)
 8000ad6:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000ad8:	e001      	b.n	8000ade <TIMER_IF_SetTimerContext+0xa>
 8000ada:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <TIMER_IF_SetTimerContext+0x1c>)
 8000adc:	6898      	ldr	r0, [r3, #8]
 8000ade:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <TIMER_IF_SetTimerContext+0x1c>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	4283      	cmp	r3, r0
 8000ae4:	d1f9      	bne.n	8000ada <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8000ae6:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8000ae8:	4b02      	ldr	r3, [pc, #8]	@ (8000af4 <TIMER_IF_SetTimerContext+0x20>)
 8000aea:	6018      	str	r0, [r3, #0]
}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40002800 	.word	0x40002800
 8000af4:	200000e0 	.word	0x200000e0

08000af8 <TIMER_IF_GetTimerContext>:
}
 8000af8:	4b01      	ldr	r3, [pc, #4]	@ (8000b00 <TIMER_IF_GetTimerContext+0x8>)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000e0 	.word	0x200000e0

08000b04 <TIMER_IF_GetTimerElapsedTime>:
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000b06:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000b08:	e001      	b.n	8000b0e <TIMER_IF_GetTimerElapsedTime+0xa>
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000b0c:	6898      	ldr	r0, [r3, #8]
 8000b0e:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	4283      	cmp	r3, r0
 8000b14:	d1f9      	bne.n	8000b0a <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8000b16:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000b18:	4b02      	ldr	r3, [pc, #8]	@ (8000b24 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	1ac0      	subs	r0, r0, r3
 8000b1e:	4770      	bx	lr
 8000b20:	40002800 	.word	0x40002800
 8000b24:	200000e0 	.word	0x200000e0

08000b28 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <TIMER_IF_GetTimerValue+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b153      	cbz	r3, 8000b44 <TIMER_IF_GetTimerValue+0x1c>
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <TIMER_IF_GetTimerValue+0x24>)
 8000b30:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000b32:	e001      	b.n	8000b38 <TIMER_IF_GetTimerValue+0x10>
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <TIMER_IF_GetTimerValue+0x24>)
 8000b36:	6898      	ldr	r0, [r3, #8]
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <TIMER_IF_GetTimerValue+0x24>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4283      	cmp	r3, r0
 8000b3e:	d1f9      	bne.n	8000b34 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8000b40:	43c0      	mvns	r0, r0
 8000b42:	4770      	bx	lr
  uint32_t ret = 0;
 8000b44:	2000      	movs	r0, #0
}
 8000b46:	4770      	bx	lr
 8000b48:	200000e4 	.word	0x200000e4
 8000b4c:	40002800 	.word	0x40002800

08000b50 <TIMER_IF_GetMinimumTimeout>:
}
 8000b50:	2003      	movs	r0, #3
 8000b52:	4770      	bx	lr

08000b54 <TIMER_IF_Convert_ms2Tick>:
{
 8000b54:	b508      	push	{r3, lr}
 8000b56:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000b58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	0280      	lsls	r0, r0, #10
 8000b60:	0d89      	lsrs	r1, r1, #22
 8000b62:	f7ff fb11 	bl	8000188 <__aeabi_uldivmod>
}
 8000b66:	bd08      	pop	{r3, pc}

08000b68 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000b68:	0ec2      	lsrs	r2, r0, #27
 8000b6a:	0143      	lsls	r3, r0, #5
 8000b6c:	1a1b      	subs	r3, r3, r0
 8000b6e:	f162 0200 	sbc.w	r2, r2, #0
 8000b72:	0092      	lsls	r2, r2, #2
 8000b74:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	181b      	adds	r3, r3, r0
 8000b7c:	f142 0000 	adc.w	r0, r2, #0
 8000b80:	00c0      	lsls	r0, r0, #3
 8000b82:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8000b86:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8000b8a:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8000b8e:	4770      	bx	lr

08000b90 <TIMER_IF_StopTimer>:
{
 8000b90:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <TIMER_IF_StopTimer+0x20>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000b98:	4c06      	ldr	r4, [pc, #24]	@ (8000bb4 <TIMER_IF_StopTimer+0x24>)
 8000b9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	f002 fdca 	bl	8003738 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8000baa:	2000      	movs	r0, #0
 8000bac:	bd10      	pop	{r4, pc}
 8000bae:	bf00      	nop
 8000bb0:	40002800 	.word	0x40002800
 8000bb4:	20000098 	.word	0x20000098

08000bb8 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8000bb8:	b508      	push	{r3, lr}
 8000bba:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8000bc0:	f003 f805 	bl	8003bce <HAL_RTCEx_BKUPWrite>
}
 8000bc4:	bd08      	pop	{r3, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000098 	.word	0x20000098

08000bcc <TIMER_IF_Init>:
{
 8000bcc:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <TIMER_IF_Init+0x40>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b10b      	cbz	r3, 8000bd8 <TIMER_IF_Init+0xc>
}
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8000c10 <TIMER_IF_Init+0x44>)
 8000bda:	f04f 35ff 	mov.w	r5, #4294967295
 8000bde:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8000be0:	f7ff fdc6 	bl	8000770 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8000be4:	f7ff ffd4 	bl	8000b90 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000be8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bec:	4620      	mov	r0, r4
 8000bee:	f002 fda3 	bl	8003738 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000bf2:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f002 ff89 	bl	8003b0c <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff ffdc 	bl	8000bb8 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8000c00:	f7ff ff68 	bl	8000ad4 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8000c04:	4b01      	ldr	r3, [pc, #4]	@ (8000c0c <TIMER_IF_Init+0x40>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e7e3      	b.n	8000bd4 <TIMER_IF_Init+0x8>
 8000c0c:	200000e4 	.word	0x200000e4
 8000c10:	20000098 	.word	0x20000098

08000c14 <TIMER_IF_BkUp_Write_Seconds>:
{
 8000c14:	b508      	push	{r3, lr}
 8000c16:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8000c1c:	f002 ffd7 	bl	8003bce <HAL_RTCEx_BKUPWrite>
}
 8000c20:	bd08      	pop	{r3, pc}
 8000c22:	bf00      	nop
 8000c24:	20000098 	.word	0x20000098

08000c28 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8000c28:	b508      	push	{r3, lr}
 8000c2a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8000c30:	f002 ffcd 	bl	8003bce <HAL_RTCEx_BKUPWrite>
}
 8000c34:	bd08      	pop	{r3, pc}
 8000c36:	bf00      	nop
 8000c38:	20000098 	.word	0x20000098

08000c3c <TIMER_IF_StartTimer>:
{
 8000c3c:	b510      	push	{r4, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8000c42:	222c      	movs	r2, #44	@ 0x2c
 8000c44:	2100      	movs	r1, #0
 8000c46:	a801      	add	r0, sp, #4
 8000c48:	f007 fcc2 	bl	80085d0 <memset>
  TIMER_IF_StopTimer();
 8000c4c:	f7ff ffa0 	bl	8000b90 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <TIMER_IF_StartTimer+0x48>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000c56:	2300      	movs	r3, #0
 8000c58:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000c5a:	43e4      	mvns	r4, r4
 8000c5c:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c5e:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000c60:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c64:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c6a:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	a901      	add	r1, sp, #4
 8000c70:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <TIMER_IF_StartTimer+0x4c>)
 8000c72:	f002 fe8f 	bl	8003994 <HAL_RTC_SetAlarm_IT>
 8000c76:	b910      	cbnz	r0, 8000c7e <TIMER_IF_StartTimer+0x42>
}
 8000c78:	2000      	movs	r0, #0
 8000c7a:	b00c      	add	sp, #48	@ 0x30
 8000c7c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c7e:	f7ff fd1f 	bl	80006c0 <Error_Handler>
 8000c82:	e7f9      	b.n	8000c78 <TIMER_IF_StartTimer+0x3c>
 8000c84:	200000e0 	.word	0x200000e0
 8000c88:	20000098 	.word	0x20000098

08000c8c <TIMER_IF_BkUp_Read_MSBticks>:
{
 8000c8c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8000c8e:	2102      	movs	r1, #2
 8000c90:	4801      	ldr	r0, [pc, #4]	@ (8000c98 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8000c92:	f002 ffa3 	bl	8003bdc <HAL_RTCEx_BKUPRead>
}
 8000c96:	bd08      	pop	{r3, pc}
 8000c98:	20000098 	.word	0x20000098

08000c9c <TIMER_IF_GetTime>:
{
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4605      	mov	r5, r0
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <TIMER_IF_GetTime+0x34>)
 8000ca2:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000ca4:	e001      	b.n	8000caa <TIMER_IF_GetTime+0xe>
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <TIMER_IF_GetTime+0x34>)
 8000ca8:	689c      	ldr	r4, [r3, #8]
 8000caa:	4a09      	ldr	r2, [pc, #36]	@ (8000cd0 <TIMER_IF_GetTime+0x34>)
 8000cac:	6892      	ldr	r2, [r2, #8]
 8000cae:	42a2      	cmp	r2, r4
 8000cb0:	d1f9      	bne.n	8000ca6 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8000cb2:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000cb4:	f7ff ffea 	bl	8000c8c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000cb8:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000cba:	0aa4      	lsrs	r4, r4, #10
 8000cbc:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000cc0:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8000cc4:	f7ff ff50 	bl	8000b68 <TIMER_IF_Convert_Tick2ms>
 8000cc8:	8028      	strh	r0, [r5, #0]
}
 8000cca:	4620      	mov	r0, r4
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}
 8000cce:	bf00      	nop
 8000cd0:	40002800 	.word	0x40002800

08000cd4 <TIMER_IF_BkUp_Read_Seconds>:
{
 8000cd4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4801      	ldr	r0, [pc, #4]	@ (8000ce0 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8000cda:	f002 ff7f 	bl	8003bdc <HAL_RTCEx_BKUPRead>
}
 8000cde:	bd08      	pop	{r3, pc}
 8000ce0:	20000098 	.word	0x20000098

08000ce4 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8000ce4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4801      	ldr	r0, [pc, #4]	@ (8000cf0 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8000cea:	f002 ff77 	bl	8003bdc <HAL_RTCEx_BKUPRead>
}
 8000cee:	bd08      	pop	{r3, pc}
 8000cf0:	20000098 	.word	0x20000098

08000cf4 <TIMER_IF_DelayMs>:
{
 8000cf4:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000cf6:	f7ff ff2d 	bl	8000b54 <TIMER_IF_Convert_ms2Tick>
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <TIMER_IF_DelayMs+0x3c>)
 8000cfc:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000cfe:	e001      	b.n	8000d04 <TIMER_IF_DelayMs+0x10>
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <TIMER_IF_DelayMs+0x3c>)
 8000d02:	6899      	ldr	r1, [r3, #8]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <TIMER_IF_DelayMs+0x3c>)
 8000d06:	6892      	ldr	r2, [r2, #8]
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	d1f9      	bne.n	8000d00 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8000d0c:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000d0e:	e00a      	b.n	8000d26 <TIMER_IF_DelayMs+0x32>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <TIMER_IF_DelayMs+0x3c>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	4a06      	ldr	r2, [pc, #24]	@ (8000d30 <TIMER_IF_DelayMs+0x3c>)
 8000d16:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d1f9      	bne.n	8000d10 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8000d1c:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000d1e:	1a5b      	subs	r3, r3, r1
 8000d20:	4283      	cmp	r3, r0
 8000d22:	d203      	bcs.n	8000d2c <TIMER_IF_DelayMs+0x38>
    __NOP();
 8000d24:	bf00      	nop
 8000d26:	4b02      	ldr	r3, [pc, #8]	@ (8000d30 <TIMER_IF_DelayMs+0x3c>)
 8000d28:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000d2a:	e7f3      	b.n	8000d14 <TIMER_IF_DelayMs+0x20>
}
 8000d2c:	bd08      	pop	{r3, pc}
 8000d2e:	bf00      	nop
 8000d30:	40002800 	.word	0x40002800

08000d34 <HAL_RTC_AlarmAEventCallback>:
{
 8000d34:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000d36:	f007 faa3 	bl	8008280 <UTIL_TIMER_IRQ_Handler>
}
 8000d3a:	bd08      	pop	{r3, pc}

08000d3c <HAL_RTCEx_SSRUEventCallback>:
{
 8000d3c:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000d3e:	f7ff ffa5 	bl	8000c8c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000d42:	3001      	adds	r0, #1
 8000d44:	f7ff ff38 	bl	8000bb8 <TIMER_IF_BkUp_Write_MSBticks>
}
 8000d48:	bd08      	pop	{r3, pc}
	...

08000d4c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d4c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d4e:	4817      	ldr	r0, [pc, #92]	@ (8000dac <MX_USART2_UART_Init+0x60>)
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <MX_USART2_UART_Init+0x64>)
 8000d52:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000d54:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000d58:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d5e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d60:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d62:	220c      	movs	r2, #12
 8000d64:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d6c:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d70:	f004 fa92 	bl	8005298 <HAL_UART_Init>
 8000d74:	b970      	cbnz	r0, 8000d94 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d76:	2100      	movs	r1, #0
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_USART2_UART_Init+0x60>)
 8000d7a:	f004 fc42 	bl	8005602 <HAL_UARTEx_SetTxFifoThreshold>
 8000d7e:	b960      	cbnz	r0, 8000d9a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	480a      	ldr	r0, [pc, #40]	@ (8000dac <MX_USART2_UART_Init+0x60>)
 8000d84:	f004 fc62 	bl	800564c <HAL_UARTEx_SetRxFifoThreshold>
 8000d88:	b950      	cbnz	r0, 8000da0 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8000d8a:	4808      	ldr	r0, [pc, #32]	@ (8000dac <MX_USART2_UART_Init+0x60>)
 8000d8c:	f004 fc15 	bl	80055ba <HAL_UARTEx_EnableFifoMode>
 8000d90:	b948      	cbnz	r0, 8000da6 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d92:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d94:	f7ff fc94 	bl	80006c0 <Error_Handler>
 8000d98:	e7ed      	b.n	8000d76 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8000d9a:	f7ff fc91 	bl	80006c0 <Error_Handler>
 8000d9e:	e7ef      	b.n	8000d80 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8000da0:	f7ff fc8e 	bl	80006c0 <Error_Handler>
 8000da4:	e7f1      	b.n	8000d8a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8000da6:	f7ff fc8b 	bl	80006c0 <Error_Handler>
}
 8000daa:	e7f2      	b.n	8000d92 <MX_USART2_UART_Init+0x46>
 8000dac:	20000148 	.word	0x20000148
 8000db0:	40004400 	.word	0x40004400

08000db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db4:	b530      	push	{r4, r5, lr}
 8000db6:	b097      	sub	sp, #92	@ 0x5c
 8000db8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	2100      	movs	r1, #0
 8000dbc:	9111      	str	r1, [sp, #68]	@ 0x44
 8000dbe:	9112      	str	r1, [sp, #72]	@ 0x48
 8000dc0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8000dc2:	9114      	str	r1, [sp, #80]	@ 0x50
 8000dc4:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc6:	2238      	movs	r2, #56	@ 0x38
 8000dc8:	a803      	add	r0, sp, #12
 8000dca:	f007 fc01 	bl	80085d0 <memset>
  if(uartHandle->Instance==USART2)
 8000dce:	6822      	ldr	r2, [r4, #0]
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e88 <HAL_UART_MspInit+0xd4>)
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d001      	beq.n	8000dda <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dd6:	b017      	add	sp, #92	@ 0x5c
 8000dd8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000dde:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <HAL_UART_MspInit+0xd8>)
 8000de0:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	a803      	add	r0, sp, #12
 8000de4:	f002 fb86 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d144      	bne.n	8000e76 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000df2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000df6:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000df8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000dfa:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000dfe:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000e00:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e04:	f042 0201 	orr.w	r2, r2, #1
 8000e08:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000e12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8000e14:	230c      	movs	r3, #12
 8000e16:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2500      	movs	r5, #0
 8000e1e:	9513      	str	r5, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e24:	2307      	movs	r3, #7
 8000e26:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	a911      	add	r1, sp, #68	@ 0x44
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2e:	f001 fb53 	bl	80024d8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8000e32:	4817      	ldr	r0, [pc, #92]	@ (8000e90 <HAL_UART_MspInit+0xdc>)
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <HAL_UART_MspInit+0xe0>)
 8000e36:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000e38:	2314      	movs	r3, #20
 8000e3a:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e40:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e46:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e48:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e4a:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e4c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e4e:	f001 f92d 	bl	80020ac <HAL_DMA_Init>
 8000e52:	b998      	cbnz	r0, 8000e7c <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e54:	2110      	movs	r1, #16
 8000e56:	480e      	ldr	r0, [pc, #56]	@ (8000e90 <HAL_UART_MspInit+0xdc>)
 8000e58:	f001 fb2a 	bl	80024b0 <HAL_DMA_ConfigChannelAttributes>
 8000e5c:	b988      	cbnz	r0, 8000e82 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <HAL_UART_MspInit+0xdc>)
 8000e60:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8000e62:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2102      	movs	r1, #2
 8000e68:	2025      	movs	r0, #37	@ 0x25
 8000e6a:	f001 f897 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e6e:	2025      	movs	r0, #37	@ 0x25
 8000e70:	f001 f8a4 	bl	8001fbc <HAL_NVIC_EnableIRQ>
}
 8000e74:	e7af      	b.n	8000dd6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000e76:	f7ff fc23 	bl	80006c0 <Error_Handler>
 8000e7a:	e7b7      	b.n	8000dec <HAL_UART_MspInit+0x38>
      Error_Handler();
 8000e7c:	f7ff fc20 	bl	80006c0 <Error_Handler>
 8000e80:	e7e8      	b.n	8000e54 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8000e82:	f7ff fc1d 	bl	80006c0 <Error_Handler>
 8000e86:	e7ea      	b.n	8000e5e <HAL_UART_MspInit+0xaa>
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	000c0004 	.word	0x000c0004
 8000e90:	200000e8 	.word	0x200000e8
 8000e94:	40020058 	.word	0x40020058

08000e98 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8000e98:	6802      	ldr	r2, [r0, #0]
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <HAL_UART_MspDeInit+0x34>)
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d000      	beq.n	8000ea2 <HAL_UART_MspDeInit+0xa>
 8000ea0:	4770      	bx	lr
{
 8000ea2:	b510      	push	{r4, lr}
 8000ea4:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000ea6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eaa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8000eac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000eb0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8000eb2:	210c      	movs	r1, #12
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb8:	f001 fbe0 	bl	800267c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8000ebc:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8000ebe:	f001 f967 	bl	8002190 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000ec2:	2025      	movs	r0, #37	@ 0x25
 8000ec4:	f001 f87e 	bl	8001fc4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8000ec8:	bd10      	pop	{r4, pc}
 8000eca:	bf00      	nop
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8000ed0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <vcom_Init+0x20>)
 8000ed4:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8000ed6:	f7ff fb71 	bl	80005bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eda:	f7ff ff37 	bl	8000d4c <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <vcom_Init+0x24>)
 8000ee0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8000ee4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000ee8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8000eec:	2000      	movs	r0, #0
 8000eee:	bd08      	pop	{r3, pc}
 8000ef0:	200001e0 	.word	0x200001e0
 8000ef4:	58000800 	.word	0x58000800

08000ef8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8000ef8:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8000efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000efe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f00:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000f04:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8000f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f08:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8000f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8000f0e:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <vcom_DeInit+0x28>)
 8000f10:	f7ff ffc2 	bl	8000e98 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8000f14:	200f      	movs	r0, #15
 8000f16:	f001 f855 	bl	8001fc4 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	bd08      	pop	{r3, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000148 	.word	0x20000148

08000f24 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8000f24:	b508      	push	{r3, lr}
 8000f26:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8000f28:	4601      	mov	r1, r0
 8000f2a:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <vcom_Trace_DMA+0x10>)
 8000f2c:	f003 fa38 	bl	80043a0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8000f30:	2000      	movs	r0, #0
 8000f32:	bd08      	pop	{r3, pc}
 8000f34:	20000148 	.word	0x20000148

08000f38 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <vcom_ReceiveInit+0x50>)
 8000f3e:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8000f40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f44:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8000f46:	ab02      	add	r3, sp, #8
 8000f48:	e913 0006 	ldmdb	r3, {r1, r2}
 8000f4c:	480f      	ldr	r0, [pc, #60]	@ (8000f8c <vcom_ReceiveInit+0x54>)
 8000f4e:	f004 fadc 	bl	800550a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <vcom_ReceiveInit+0x54>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	69da      	ldr	r2, [r3, #28]
 8000f58:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8000f5c:	d1f9      	bne.n	8000f52 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8000f64:	d0fb      	beq.n	8000f5e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000f6c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8000f6e:	4c07      	ldr	r4, [pc, #28]	@ (8000f8c <vcom_ReceiveInit+0x54>)
 8000f70:	4620      	mov	r0, r4
 8000f72:	f004 fb0b 	bl	800558c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	4905      	ldr	r1, [pc, #20]	@ (8000f90 <vcom_ReceiveInit+0x58>)
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f004 fa5e 	bl	800543c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8000f80:	2000      	movs	r0, #0
 8000f82:	b002      	add	sp, #8
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	bf00      	nop
 8000f88:	200001dc 	.word	0x200001dc
 8000f8c:	20000148 	.word	0x20000148
 8000f90:	200001e4 	.word	0x200001e4

08000f94 <vcom_Resume>:

void vcom_Resume(void)
{
 8000f94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f96:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <vcom_Resume+0x20>)
 8000f98:	f004 f97e 	bl	8005298 <HAL_UART_Init>
 8000f9c:	b920      	cbnz	r0, 8000fa8 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f9e:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <vcom_Resume+0x24>)
 8000fa0:	f001 f884 	bl	80020ac <HAL_DMA_Init>
 8000fa4:	b918      	cbnz	r0, 8000fae <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8000fa6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fa8:	f7ff fb8a 	bl	80006c0 <Error_Handler>
 8000fac:	e7f7      	b.n	8000f9e <vcom_Resume+0xa>
    Error_Handler();
 8000fae:	f7ff fb87 	bl	80006c0 <Error_Handler>
}
 8000fb2:	e7f8      	b.n	8000fa6 <vcom_Resume+0x12>
 8000fb4:	20000148 	.word	0x20000148
 8000fb8:	200000e8 	.word	0x200000e8

08000fbc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8000fbe:	6802      	ldr	r2, [r0, #0]
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <HAL_UART_TxCpltCallback+0x18>)
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d000      	beq.n	8000fc8 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8000fc6:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <HAL_UART_TxCpltCallback+0x1c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2000      	movs	r0, #0
 8000fce:	4798      	blx	r3
}
 8000fd0:	e7f9      	b.n	8000fc6 <HAL_UART_TxCpltCallback+0xa>
 8000fd2:	bf00      	nop
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	200001e0 	.word	0x200001e0

08000fdc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8000fdc:	6802      	ldr	r2, [r0, #0]
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_UART_RxCpltCallback+0x2c>)
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d000      	beq.n	8000fe6 <HAL_UART_RxCpltCallback+0xa>
 8000fe4:	4770      	bx	lr
{
 8000fe6:	b510      	push	{r4, lr}
 8000fe8:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_UART_RxCpltCallback+0x30>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	b12b      	cbz	r3, 8000ffc <HAL_UART_RxCpltCallback+0x20>
 8000ff0:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 8000ff4:	b912      	cbnz	r2, 8000ffc <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <HAL_UART_RxCpltCallback+0x34>)
 8000ffa:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4904      	ldr	r1, [pc, #16]	@ (8001010 <HAL_UART_RxCpltCallback+0x34>)
 8001000:	4620      	mov	r0, r4
 8001002:	f004 fa1b 	bl	800543c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001006:	bd10      	pop	{r4, pc}
 8001008:	40004400 	.word	0x40004400
 800100c:	200001dc 	.word	0x200001dc
 8001010:	200001e4 	.word	0x200001e4

08001014 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	@ (800104c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f000 fa29 	bl	800146e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001042:	f007 facd 	bl	80085e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001046:	f7ff fb85 	bl	8000754 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   r0, =_estack
 800104c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001058:	08008a68 	.word	0x08008a68
  ldr r2, =_sbss
 800105c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001060:	20000748 	.word	0x20000748

08001064 <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <AES_IRQHandler>

08001066 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8001066:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8001068:	f7ff fca6 	bl	80009b8 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800106c:	f000 f8c8 	bl	8001200 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8001070:	bd08      	pop	{r3, pc}

08001072 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8001072:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f006 fef6 	bl	8007e68 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800107c:	bd08      	pop	{r3, pc}

0800107e <OnRxDone>:
}

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
    /* Không xử lý thêm */
}
 800107e:	4770      	bx	lr

08001080 <OnRxTimeout>:
}

static void OnRxTimeout(void)
{
    /* Không xử lý thêm */
}
 8001080:	4770      	bx	lr

08001082 <OnRxError>:

static void OnRxError(void)
{
    /* Không xử lý thêm */
}
 8001082:	4770      	bx	lr

08001084 <ReInit_Peripherals>:

    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
}

static void ReInit_Peripherals(void)
{
 8001084:	b530      	push	{r4, r5, lr}
 8001086:	b08b      	sub	sp, #44	@ 0x2c
    /* Re-init ADC */
    hadc.Instance = ADC;
 8001088:	4816      	ldr	r0, [pc, #88]	@ (80010e4 <ReInit_Peripherals+0x60>)
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <ReInit_Peripherals+0x64>)
 800108c:	6003      	str	r3, [r0, #0]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800108e:	2300      	movs	r3, #0
 8001090:	6083      	str	r3, [r0, #8]
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8001092:	f000 fa29 	bl	80014e8 <HAL_ADC_Init>
 8001096:	bb08      	cbnz	r0, 80010dc <ReInit_Peripherals+0x58>
        Error_Handler();
    }

    /* Re-init Radio */
    Radio.Init(&RadioEvents);
 8001098:	4d14      	ldr	r5, [pc, #80]	@ (80010ec <ReInit_Peripherals+0x68>)
 800109a:	682b      	ldr	r3, [r5, #0]
 800109c:	4814      	ldr	r0, [pc, #80]	@ (80010f0 <ReInit_Peripherals+0x6c>)
 800109e:	4798      	blx	r3
    Radio.SetChannel(RF_FREQUENCY);
 80010a0:	68eb      	ldr	r3, [r5, #12]
 80010a2:	4814      	ldr	r0, [pc, #80]	@ (80010f4 <ReInit_Peripherals+0x70>)
 80010a4:	4798      	blx	r3

#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
    Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80010a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80010aa:	9308      	str	r3, [sp, #32]
 80010ac:	2200      	movs	r2, #0
 80010ae:	9207      	str	r2, [sp, #28]
 80010b0:	9206      	str	r2, [sp, #24]
 80010b2:	9205      	str	r2, [sp, #20]
 80010b4:	2401      	movs	r4, #1
 80010b6:	9404      	str	r4, [sp, #16]
 80010b8:	9203      	str	r2, [sp, #12]
 80010ba:	2308      	movs	r3, #8
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	9401      	str	r4, [sp, #4]
 80010c0:	2307      	movs	r3, #7
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	210e      	movs	r1, #14
 80010c8:	4620      	mov	r0, r4
 80010ca:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 80010ce:	47e0      	blx	ip
                      LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                      LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                      true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);
    Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 80010d0:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80010d2:	2132      	movs	r1, #50	@ 0x32
 80010d4:	4620      	mov	r0, r4
 80010d6:	4798      	blx	r3
                      FSK_DATARATE, 0,
                      FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
                      true, 0, 0, 0, TX_TIMEOUT_VALUE);
    Radio.SetMaxPayloadLength(MODEM_FSK, MAX_APP_BUFFER_SIZE);
#endif
}
 80010d8:	b00b      	add	sp, #44	@ 0x2c
 80010da:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 80010dc:	f7ff faf0 	bl	80006c0 <Error_Handler>
 80010e0:	e7da      	b.n	8001098 <ReInit_Peripherals+0x14>
 80010e2:	bf00      	nop
 80010e4:	20000034 	.word	0x20000034
 80010e8:	40012400 	.word	0x40012400
 80010ec:	080088a8 	.word	0x080088a8
 80010f0:	200001e8 	.word	0x200001e8
 80010f4:	19de5080 	.word	0x19de5080

080010f8 <PingPong_Process>:
{
 80010f8:	b570      	push	{r4, r5, r6, lr}
    HAL_ADC_Start(&hadc);
 80010fa:	4d0d      	ldr	r5, [pc, #52]	@ (8001130 <PingPong_Process+0x38>)
 80010fc:	4628      	mov	r0, r5
 80010fe:	f000 fde7 	bl	8001cd0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, 1000);
 8001102:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001106:	4628      	mov	r0, r5
 8001108:	f000 fb06 	bl	8001718 <HAL_ADC_PollForConversion>
    uint16_t adcValue = HAL_ADC_GetValue(&hadc);
 800110c:	4628      	mov	r0, r5
 800110e:	f000 fb62 	bl	80017d6 <HAL_ADC_GetValue>
 8001112:	4604      	mov	r4, r0
 8001114:	b286      	uxth	r6, r0
    HAL_ADC_Stop(&hadc);
 8001116:	4628      	mov	r0, r5
 8001118:	f000 feb6 	bl	8001e88 <HAL_ADC_Stop>
    BufferTx[0] = (adcValue >> 8) & 0xFF;
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <PingPong_Process+0x3c>)
 800111e:	0a36      	lsrs	r6, r6, #8
 8001120:	7006      	strb	r6, [r0, #0]
    BufferTx[1] = adcValue & 0xFF;
 8001122:	7044      	strb	r4, [r0, #1]
    Radio.Send(BufferTx, PAYLOAD_LEN);
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <PingPong_Process+0x40>)
 8001126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001128:	2140      	movs	r1, #64	@ 0x40
 800112a:	4798      	blx	r3
}
 800112c:	bd70      	pop	{r4, r5, r6, pc}
 800112e:	bf00      	nop
 8001130:	20000034 	.word	0x20000034
 8001134:	20000204 	.word	0x20000204
 8001138:	080088a8 	.word	0x080088a8

0800113c <OnTxTimeout>:
{
 800113c:	b508      	push	{r3, lr}
    APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <OnTxTimeout+0x3c>)
 8001140:	2201      	movs	r2, #1
 8001142:	2100      	movs	r1, #0
 8001144:	4610      	mov	r0, r2
 8001146:	f006 fd31 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
    HAL_ADC_DeInit(&hadc);
 800114a:	480c      	ldr	r0, [pc, #48]	@ (800117c <OnTxTimeout+0x40>)
 800114c:	f000 fe3c 	bl	8001dc8 <HAL_ADC_DeInit>
    Radio.Sleep();
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <OnTxTimeout+0x44>)
 8001152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001154:	4798      	blx	r3
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_All);
 8001156:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800115a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115e:	f001 fa8d 	bl	800267c <HAL_GPIO_DeInit>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001162:	2101      	movs	r1, #1
 8001164:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001168:	f001 fb7c 	bl	8002864 <HAL_PWR_EnterSTOPMode>
    SystemClock_Config();
 800116c:	f7ff faaa 	bl	80006c4 <SystemClock_Config>
    ReInit_Peripherals();
 8001170:	f7ff ff88 	bl	8001084 <ReInit_Peripherals>
}
 8001174:	bd08      	pop	{r3, pc}
 8001176:	bf00      	nop
 8001178:	08008708 	.word	0x08008708
 800117c:	20000034 	.word	0x20000034
 8001180:	080088a8 	.word	0x080088a8

08001184 <OnTxDone>:
{
 8001184:	b508      	push	{r3, lr}
    APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <OnTxDone+0x3c>)
 8001188:	2201      	movs	r2, #1
 800118a:	2100      	movs	r1, #0
 800118c:	4610      	mov	r0, r2
 800118e:	f006 fd0d 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
    HAL_ADC_DeInit(&hadc);
 8001192:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <OnTxDone+0x40>)
 8001194:	f000 fe18 	bl	8001dc8 <HAL_ADC_DeInit>
    Radio.Sleep();
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <OnTxDone+0x44>)
 800119a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119c:	4798      	blx	r3
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_All);
 800119e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a6:	f001 fa69 	bl	800267c <HAL_GPIO_DeInit>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80011aa:	2101      	movs	r1, #1
 80011ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80011b0:	f001 fb58 	bl	8002864 <HAL_PWR_EnterSTOPMode>
    SystemClock_Config();
 80011b4:	f7ff fa86 	bl	80006c4 <SystemClock_Config>
    ReInit_Peripherals();
 80011b8:	f7ff ff64 	bl	8001084 <ReInit_Peripherals>
}
 80011bc:	bd08      	pop	{r3, pc}
 80011be:	bf00      	nop
 80011c0:	08008718 	.word	0x08008718
 80011c4:	20000034 	.word	0x20000034
 80011c8:	080088a8 	.word	0x080088a8

080011cc <MX_PVD_Init>:
{
 80011cc:	b510      	push	{r4, lr}
 80011ce:	b082      	sub	sp, #8
    PWR_PVDTypeDef sConfigPVD = {0};
 80011d0:	2400      	movs	r4, #0
 80011d2:	9400      	str	r4, [sp, #0]
 80011d4:	9401      	str	r4, [sp, #4]
    sConfigPVD.PVDLevel = PWR_PVDLEVEL_5; // Cài mức ~2.8V
 80011d6:	230a      	movs	r3, #10
 80011d8:	9300      	str	r3, [sp, #0]
    sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 80011da:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80011de:	9301      	str	r3, [sp, #4]
    HAL_PWR_ConfigPVD(&sConfigPVD);
 80011e0:	4668      	mov	r0, sp
 80011e2:	f001 fad7 	bl	8002794 <HAL_PWR_ConfigPVD>
    HAL_PWR_EnablePVD();
 80011e6:	f001 fb0f 	bl	8002808 <HAL_PWR_EnablePVD>
    HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 80011ea:	4622      	mov	r2, r4
 80011ec:	4621      	mov	r1, r4
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 fed4 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f000 fee1 	bl	8001fbc <HAL_NVIC_EnableIRQ>
}
 80011fa:	b002      	add	sp, #8
 80011fc:	bd10      	pop	{r4, pc}
	...

08001200 <SubghzApp_Init>:
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	b08b      	sub	sp, #44	@ 0x2c
    RadioEvents.TxDone    = OnTxDone;
 8001204:	4830      	ldr	r0, [pc, #192]	@ (80012c8 <SubghzApp_Init+0xc8>)
 8001206:	4b31      	ldr	r3, [pc, #196]	@ (80012cc <SubghzApp_Init+0xcc>)
 8001208:	6003      	str	r3, [r0, #0]
    RadioEvents.RxDone    = OnRxDone;
 800120a:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <SubghzApp_Init+0xd0>)
 800120c:	6083      	str	r3, [r0, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800120e:	4b31      	ldr	r3, [pc, #196]	@ (80012d4 <SubghzApp_Init+0xd4>)
 8001210:	6043      	str	r3, [r0, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <SubghzApp_Init+0xd8>)
 8001214:	60c3      	str	r3, [r0, #12]
    RadioEvents.RxError   = OnRxError;
 8001216:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <SubghzApp_Init+0xdc>)
 8001218:	6103      	str	r3, [r0, #16]
    Radio.Init(&RadioEvents);
 800121a:	4e31      	ldr	r6, [pc, #196]	@ (80012e0 <SubghzApp_Init+0xe0>)
 800121c:	6833      	ldr	r3, [r6, #0]
 800121e:	4798      	blx	r3
    Radio.SetChannel(RF_FREQUENCY);
 8001220:	68f3      	ldr	r3, [r6, #12]
 8001222:	4830      	ldr	r0, [pc, #192]	@ (80012e4 <SubghzApp_Init+0xe4>)
 8001224:	4798      	blx	r3
    APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 8001226:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <SubghzApp_Init+0xe8>)
 8001228:	2200      	movs	r2, #0
 800122a:	4611      	mov	r1, r2
 800122c:	2002      	movs	r0, #2
 800122e:	f006 fcbd 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 8001232:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <SubghzApp_Init+0xec>)
 8001234:	2200      	movs	r2, #0
 8001236:	4611      	mov	r1, r2
 8001238:	2002      	movs	r0, #2
 800123a:	f006 fcb7 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800123e:	237d      	movs	r3, #125	@ 0x7d
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <SubghzApp_Init+0xf0>)
 8001244:	2200      	movs	r2, #0
 8001246:	4611      	mov	r1, r2
 8001248:	2002      	movs	r0, #2
 800124a:	f006 fcaf 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800124e:	2707      	movs	r7, #7
 8001250:	9700      	str	r7, [sp, #0]
 8001252:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <SubghzApp_Init+0xf4>)
 8001254:	2200      	movs	r2, #0
 8001256:	4611      	mov	r1, r2
 8001258:	2002      	movs	r0, #2
 800125a:	f006 fca7 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
    Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800125e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001262:	9308      	str	r3, [sp, #32]
 8001264:	2400      	movs	r4, #0
 8001266:	9407      	str	r4, [sp, #28]
 8001268:	9406      	str	r4, [sp, #24]
 800126a:	9405      	str	r4, [sp, #20]
 800126c:	2501      	movs	r5, #1
 800126e:	9504      	str	r5, [sp, #16]
 8001270:	9403      	str	r4, [sp, #12]
 8001272:	2308      	movs	r3, #8
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	9501      	str	r5, [sp, #4]
 8001278:	9700      	str	r7, [sp, #0]
 800127a:	4623      	mov	r3, r4
 800127c:	4622      	mov	r2, r4
 800127e:	210e      	movs	r1, #14
 8001280:	4628      	mov	r0, r5
 8001282:	69f7      	ldr	r7, [r6, #28]
 8001284:	47b8      	blx	r7
    Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8001286:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8001288:	2132      	movs	r1, #50	@ 0x32
 800128a:	4628      	mov	r0, r5
 800128c:	4798      	blx	r3
    hadc.Instance = ADC;
 800128e:	481a      	ldr	r0, [pc, #104]	@ (80012f8 <SubghzApp_Init+0xf8>)
 8001290:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <SubghzApp_Init+0xfc>)
 8001292:	6003      	str	r3, [r0, #0]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001294:	6084      	str	r4, [r0, #8]
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8001296:	f000 f927 	bl	80014e8 <HAL_ADC_Init>
 800129a:	b988      	cbnz	r0, 80012c0 <SubghzApp_Init+0xc0>
    MX_PVD_Init();
 800129c:	f7ff ff96 	bl	80011cc <MX_PVD_Init>
    memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 80012a0:	2232      	movs	r2, #50	@ 0x32
 80012a2:	2100      	movs	r1, #0
 80012a4:	4816      	ldr	r0, [pc, #88]	@ (8001300 <SubghzApp_Init+0x100>)
 80012a6:	f007 f993 	bl	80085d0 <memset>
    UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 80012aa:	4a16      	ldr	r2, [pc, #88]	@ (8001304 <SubghzApp_Init+0x104>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	2001      	movs	r0, #1
 80012b0:	f006 fe70 	bl	8007f94 <UTIL_SEQ_RegTask>
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2001      	movs	r0, #1
 80012b8:	f006 fda2 	bl	8007e00 <UTIL_SEQ_SetTask>
}
 80012bc:	b00b      	add	sp, #44	@ 0x2c
 80012be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Error_Handler();
 80012c0:	f7ff f9fe 	bl	80006c0 <Error_Handler>
 80012c4:	e7ea      	b.n	800129c <SubghzApp_Init+0x9c>
 80012c6:	bf00      	nop
 80012c8:	200001e8 	.word	0x200001e8
 80012cc:	08001185 	.word	0x08001185
 80012d0:	0800107f 	.word	0x0800107f
 80012d4:	0800113d 	.word	0x0800113d
 80012d8:	08001081 	.word	0x08001081
 80012dc:	08001083 	.word	0x08001083
 80012e0:	080088a8 	.word	0x080088a8
 80012e4:	19de5080 	.word	0x19de5080
 80012e8:	08008724 	.word	0x08008724
 80012ec:	08008738 	.word	0x08008738
 80012f0:	0800874c 	.word	0x0800874c
 80012f4:	08008760 	.word	0x08008760
 80012f8:	20000034 	.word	0x20000034
 80012fc:	40012400 	.word	0x40012400
 8001300:	20000204 	.word	0x20000204
 8001304:	080010f9 	.word	0x080010f9

08001308 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001308:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800130a:	f000 f815 	bl	8001338 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800130e:	bd08      	pop	{r3, pc}

08001310 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001310:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001312:	f000 f853 	bl	80013bc <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001316:	bd08      	pop	{r3, pc}

08001318 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001318:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800131a:	f000 f89d 	bl	8001458 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800131e:	bd08      	pop	{r3, pc}

08001320 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001320:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8001322:	f000 f89b 	bl	800145c <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001326:	bd08      	pop	{r3, pc}

08001328 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001328:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800132a:	f000 f899 	bl	8001460 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800132e:	bd08      	pop	{r3, pc}

08001330 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8001330:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8001332:	f000 f897 	bl	8001464 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8001336:	bd08      	pop	{r3, pc}

08001338 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800133c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800133e:	2400      	movs	r4, #0
 8001340:	9401      	str	r4, [sp, #4]
 8001342:	9402      	str	r4, [sp, #8]
 8001344:	9403      	str	r4, [sp, #12]
 8001346:	9404      	str	r4, [sp, #16]
 8001348:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001350:	f042 0204 	orr.w	r2, r2, #4
 8001354:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800135e:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001360:	2710      	movs	r7, #16
 8001362:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800136c:	4d12      	ldr	r5, [pc, #72]	@ (80013b8 <BSP_RADIO_Init+0x80>)
 800136e:	a901      	add	r1, sp, #4
 8001370:	4628      	mov	r0, r5
 8001372:	f001 f8b1 	bl	80024d8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001376:	f04f 0820 	mov.w	r8, #32
 800137a:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800137e:	a901      	add	r1, sp, #4
 8001380:	4628      	mov	r0, r5
 8001382:	f001 f8a9 	bl	80024d8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001386:	2608      	movs	r6, #8
 8001388:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800138a:	a901      	add	r1, sp, #4
 800138c:	4628      	mov	r0, r5
 800138e:	f001 f8a3 	bl	80024d8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001392:	4622      	mov	r2, r4
 8001394:	4641      	mov	r1, r8
 8001396:	4628      	mov	r0, r5
 8001398:	f001 f9ee 	bl	8002778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800139c:	4622      	mov	r2, r4
 800139e:	4639      	mov	r1, r7
 80013a0:	4628      	mov	r0, r5
 80013a2:	f001 f9e9 	bl	8002778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80013a6:	4622      	mov	r2, r4
 80013a8:	4631      	mov	r1, r6
 80013aa:	4628      	mov	r0, r5
 80013ac:	f001 f9e4 	bl	8002778 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80013b0:	4620      	mov	r0, r4
 80013b2:	b006      	add	sp, #24
 80013b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013b8:	48000800 	.word	0x48000800

080013bc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80013bc:	b510      	push	{r4, lr}
  switch (Config)
 80013be:	2803      	cmp	r0, #3
 80013c0:	d813      	bhi.n	80013ea <BSP_RADIO_ConfigRFSwitch+0x2e>
 80013c2:	e8df f000 	tbb	[pc, r0]
 80013c6:	1402      	.short	0x1402
 80013c8:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80013ca:	4c22      	ldr	r4, [pc, #136]	@ (8001454 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	2108      	movs	r1, #8
 80013d0:	4620      	mov	r0, r4
 80013d2:	f001 f9d1 	bl	8002778 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2110      	movs	r1, #16
 80013da:	4620      	mov	r0, r4
 80013dc:	f001 f9cc 	bl	8002778 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2120      	movs	r1, #32
 80013e4:	4620      	mov	r0, r4
 80013e6:	f001 f9c7 	bl	8002778 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 80013ea:	2000      	movs	r0, #0
 80013ec:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80013ee:	4c19      	ldr	r4, [pc, #100]	@ (8001454 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	2108      	movs	r1, #8
 80013f4:	4620      	mov	r0, r4
 80013f6:	f001 f9bf 	bl	8002778 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80013fa:	2201      	movs	r2, #1
 80013fc:	2110      	movs	r1, #16
 80013fe:	4620      	mov	r0, r4
 8001400:	f001 f9ba 	bl	8002778 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001404:	2200      	movs	r2, #0
 8001406:	2120      	movs	r1, #32
 8001408:	4620      	mov	r0, r4
 800140a:	f001 f9b5 	bl	8002778 <HAL_GPIO_WritePin>
      break;
 800140e:	e7ec      	b.n	80013ea <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001410:	4c10      	ldr	r4, [pc, #64]	@ (8001454 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001412:	2201      	movs	r2, #1
 8001414:	2108      	movs	r1, #8
 8001416:	4620      	mov	r0, r4
 8001418:	f001 f9ae 	bl	8002778 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800141c:	2201      	movs	r2, #1
 800141e:	2110      	movs	r1, #16
 8001420:	4620      	mov	r0, r4
 8001422:	f001 f9a9 	bl	8002778 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001426:	2201      	movs	r2, #1
 8001428:	2120      	movs	r1, #32
 800142a:	4620      	mov	r0, r4
 800142c:	f001 f9a4 	bl	8002778 <HAL_GPIO_WritePin>
      break;
 8001430:	e7db      	b.n	80013ea <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001432:	4c08      	ldr	r4, [pc, #32]	@ (8001454 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001434:	2201      	movs	r2, #1
 8001436:	2108      	movs	r1, #8
 8001438:	4620      	mov	r0, r4
 800143a:	f001 f99d 	bl	8002778 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800143e:	2200      	movs	r2, #0
 8001440:	2110      	movs	r1, #16
 8001442:	4620      	mov	r0, r4
 8001444:	f001 f998 	bl	8002778 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001448:	2201      	movs	r2, #1
 800144a:	2120      	movs	r1, #32
 800144c:	4620      	mov	r0, r4
 800144e:	f001 f993 	bl	8002778 <HAL_GPIO_WritePin>
      break;
 8001452:	e7ca      	b.n	80013ea <BSP_RADIO_ConfigRFSwitch+0x2e>
 8001454:	48000800 	.word	0x48000800

08001458 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8001458:	2000      	movs	r0, #0
 800145a:	4770      	bx	lr

0800145c <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 800145c:	2001      	movs	r0, #1
 800145e:	4770      	bx	lr

08001460 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8001460:	2001      	movs	r0, #1
 8001462:	4770      	bx	lr

08001464 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001464:	b908      	cbnz	r0, 800146a <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001466:	200f      	movs	r0, #15
 8001468:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800146a:	2016      	movs	r0, #22
  }

  return ret;
}
 800146c:	4770      	bx	lr

0800146e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800146e:	4770      	bx	lr

08001470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001472:	2003      	movs	r0, #3
 8001474:	f000 fd80 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001478:	f001 fb96 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_Init+0x28>)
 800147e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001480:	200f      	movs	r0, #15
 8001482:	f7ff facb 	bl	8000a1c <HAL_InitTick>
 8001486:	b110      	cbz	r0, 800148e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001488:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800148a:	4620      	mov	r0, r4
 800148c:	bd10      	pop	{r4, pc}
 800148e:	4604      	mov	r4, r0
    HAL_MspInit();
 8001490:	f7ff fa0c 	bl	80008ac <HAL_MspInit>
 8001494:	e7f9      	b.n	800148a <HAL_Init+0x1a>
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000

0800149c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800149c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80014a0:	6913      	ldr	r3, [r2, #16]
 80014a2:	f023 0302 	bic.w	r3, r3, #2
 80014a6:	6113      	str	r3, [r2, #16]
}
 80014a8:	4770      	bx	lr

080014aa <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80014aa:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80014ae:	6913      	ldr	r3, [r2, #16]
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6113      	str	r3, [r2, #16]
}
 80014b6:	4770      	bx	lr

080014b8 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80014b8:	4a02      	ldr	r2, [pc, #8]	@ (80014c4 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80014ba:	6853      	ldr	r3, [r2, #4]
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 80014c2:	4770      	bx	lr
 80014c4:	e0042000 	.word	0xe0042000

080014c8 <HAL_DBGMCU_DisableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80014c8:	4a02      	ldr	r2, [pc, #8]	@ (80014d4 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80014ca:	6853      	ldr	r3, [r2, #4]
 80014cc:	f023 0302 	bic.w	r3, r3, #2
 80014d0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 80014d2:	4770      	bx	lr
 80014d4:	e0042000 	.word	0xe0042000

080014d8 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80014d8:	4a02      	ldr	r2, [pc, #8]	@ (80014e4 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80014da:	6853      	ldr	r3, [r2, #4]
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 80014e2:	4770      	bx	lr
 80014e4:	e0042000 	.word	0xe0042000

080014e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e8:	b530      	push	{r4, r5, lr}
 80014ea:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80014f0:	2800      	cmp	r0, #0
 80014f2:	f000 8106 	beq.w	8001702 <HAL_ADC_Init+0x21a>
 80014f6:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80014fa:	b1bb      	cbz	r3, 800152c <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014fc:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014fe:	6893      	ldr	r3, [r2, #8]
 8001500:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001504:	d11f      	bne.n	8001546 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8001506:	6893      	ldr	r3, [r2, #8]
 8001508:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800150c:	f023 0317 	bic.w	r3, r3, #23
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001516:	4b7c      	ldr	r3, [pc, #496]	@ (8001708 <HAL_ADC_Init+0x220>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	099b      	lsrs	r3, r3, #6
 800151c:	4a7b      	ldr	r2, [pc, #492]	@ (800170c <HAL_ADC_Init+0x224>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	099b      	lsrs	r3, r3, #6
 8001524:	3301      	adds	r3, #1
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800152a:	e009      	b.n	8001540 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 800152c:	f7fe ffe0 	bl	80004f0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001530:	2300      	movs	r3, #0
 8001532:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001534:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8001538:	e7e0      	b.n	80014fc <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800153a:	9b01      	ldr	r3, [sp, #4]
 800153c:	3b01      	subs	r3, #1
 800153e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001540:	9b01      	ldr	r3, [sp, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f9      	bne.n	800153a <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001546:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001548:	6893      	ldr	r3, [r2, #8]
 800154a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800154e:	f040 809a 	bne.w	8001686 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001552:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001562:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001564:	6893      	ldr	r3, [r2, #8]
 8001566:	f013 0304 	ands.w	r3, r3, #4
 800156a:	d000      	beq.n	800156e <HAL_ADC_Init+0x86>
 800156c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800156e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001570:	f011 0f10 	tst.w	r1, #16
 8001574:	f040 80be 	bne.w	80016f4 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 80bb 	bne.w	80016f4 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800157e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001580:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800158a:	6893      	ldr	r3, [r2, #8]
 800158c:	f013 0f01 	tst.w	r3, #1
 8001590:	d14f      	bne.n	8001632 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001592:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001594:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001596:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800159a:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800159c:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015a0:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015a2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015a6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80015a8:	b109      	cbz	r1, 80015ae <HAL_ADC_Init+0xc6>
 80015aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015ae:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 80015b0:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015b2:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015b4:	6921      	ldr	r1, [r4, #16]
 80015b6:	2900      	cmp	r1, #0
 80015b8:	db67      	blt.n	800168a <HAL_ADC_Init+0x1a2>
 80015ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 80015be:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015c0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015c4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c8:	f894 1020 	ldrb.w	r1, [r4, #32]
 80015cc:	2901      	cmp	r1, #1
 80015ce:	d05f      	beq.n	8001690 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80015d2:	b121      	cbz	r1, 80015de <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015d4:	f401 71e0 	and.w	r1, r1, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80015d8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015da:	4329      	orrs	r1, r5
 80015dc:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015de:	68d1      	ldr	r1, [r2, #12]
 80015e0:	f421 31fe 	bic.w	r1, r1, #130048	@ 0x1fc00
 80015e4:	f421 71ff 	bic.w	r1, r1, #510	@ 0x1fe
 80015e8:	4319      	orrs	r1, r3
 80015ea:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015ec:	6863      	ldr	r3, [r4, #4]
 80015ee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80015f2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015f4:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80015f6:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 80015fa:	2901      	cmp	r1, #1
 80015fc:	d055      	beq.n	80016aa <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80015fe:	6821      	ldr	r1, [r4, #0]
 8001600:	690d      	ldr	r5, [r1, #16]
 8001602:	4b43      	ldr	r3, [pc, #268]	@ (8001710 <HAL_ADC_Init+0x228>)
 8001604:	402b      	ands	r3, r5
 8001606:	4313      	orrs	r3, r2
 8001608:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800160a:	6863      	ldr	r3, [r4, #4]
 800160c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001610:	d00f      	beq.n	8001632 <HAL_ADC_Init+0x14a>
 8001612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001616:	d00c      	beq.n	8001632 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800161c:	d009      	beq.n	8001632 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800161e:	493d      	ldr	r1, [pc, #244]	@ (8001714 <HAL_ADC_Init+0x22c>)
 8001620:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 8001624:	f422 1270 	bic.w	r2, r2, #3932160	@ 0x3c0000
 8001628:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800162c:	4313      	orrs	r3, r2
 800162e:	f8c1 3708 	str.w	r3, [r1, #1800]	@ 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001632:	6821      	ldr	r1, [r4, #0]
 8001634:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 8001636:	694a      	ldr	r2, [r1, #20]
 8001638:	f022 0207 	bic.w	r2, r2, #7
 800163c:	4313      	orrs	r3, r2
 800163e:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001644:	6953      	ldr	r3, [r2, #20]
 8001646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800164a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800164e:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001650:	6923      	ldr	r3, [r4, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d133      	bne.n	80016be <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800165a:	f063 030f 	orn	r3, r3, #15
 800165e:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001660:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8001668:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800166a:	429a      	cmp	r2, r3
 800166c:	d039      	beq.n	80016e2 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800166e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001670:	f023 0312 	bic.w	r3, r3, #18
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001682:	2001      	movs	r0, #1
 8001684:	e03b      	b.n	80016fe <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001686:	2000      	movs	r0, #0
 8001688:	e76c      	b.n	8001564 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800168a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800168e:	e796      	b.n	80015be <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001690:	b915      	cbnz	r5, 8001698 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001696:	e79b      	b.n	80015d0 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001698:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800169a:	f041 0120 	orr.w	r1, r1, #32
 800169e:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a0:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80016a2:	f041 0101 	orr.w	r1, r1, #1
 80016a6:	65e1      	str	r1, [r4, #92]	@ 0x5c
 80016a8:	e792      	b.n	80015d0 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 80016aa:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016ac:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 80016ae:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80016b0:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 80016b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80016b4:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80016b6:	431a      	orrs	r2, r3
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	e79f      	b.n	80015fe <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80016c2:	d1cd      	bne.n	8001660 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 80016c4:	6821      	ldr	r1, [r4, #0]
 80016c6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80016c8:	69e3      	ldr	r3, [r4, #28]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	f003 031c 	and.w	r3, r3, #28
 80016d2:	f06f 020f 	mvn.w	r2, #15
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80016dc:	4313      	orrs	r3, r2
 80016de:	628b      	str	r3, [r1, #40]	@ 0x28
 80016e0:	e7be      	b.n	8001660 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 80016e2:	2300      	movs	r3, #0
 80016e4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80016e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80016e8:	f023 0303 	bic.w	r3, r3, #3
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80016f2:	e004      	b.n	80016fe <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80016fe:	b003      	add	sp, #12
 8001700:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001702:	2001      	movs	r0, #1
 8001704:	e7fb      	b.n	80016fe <HAL_ADC_Init+0x216>
 8001706:	bf00      	nop
 8001708:	20000000 	.word	0x20000000
 800170c:	053e2d63 	.word	0x053e2d63
 8001710:	1ffffc02 	.word	0x1ffffc02
 8001714:	40012000 	.word	0x40012000

08001718 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	4604      	mov	r4, r0
 800171c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800171e:	6946      	ldr	r6, [r0, #20]
 8001720:	2e08      	cmp	r6, #8
 8001722:	d005      	beq.n	8001730 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001724:	6803      	ldr	r3, [r0, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f013 0f01 	tst.w	r3, #1
 800172c:	d11e      	bne.n	800176c <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800172e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001730:	f7ff f976 	bl	8000a20 <HAL_GetTick>
 8001734:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4232      	tst	r2, r6
 800173c:	d11c      	bne.n	8001778 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800173e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001742:	d0f8      	beq.n	8001736 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001744:	f7ff f96c 	bl	8000a20 <HAL_GetTick>
 8001748:	1bc3      	subs	r3, r0, r7
 800174a:	42ab      	cmp	r3, r5
 800174c:	d801      	bhi.n	8001752 <HAL_ADC_PollForConversion+0x3a>
 800174e:	2d00      	cmp	r5, #0
 8001750:	d1f1      	bne.n	8001736 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4233      	tst	r3, r6
 8001758:	d1ed      	bne.n	8001736 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800175a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	65a3      	str	r3, [r4, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001762:	2300      	movs	r3, #0
 8001764:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001768:	2003      	movs	r0, #3
 800176a:	e028      	b.n	80017be <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800176e:	f043 0320 	orr.w	r3, r3, #32
 8001772:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 8001774:	2001      	movs	r0, #1
 8001776:	e022      	b.n	80017be <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001778:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800177a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800177e:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001786:	d115      	bne.n	80017b4 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001788:	7ea2      	ldrb	r2, [r4, #26]
 800178a:	b99a      	cbnz	r2, 80017b4 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	f012 0f08 	tst.w	r2, #8
 8001792:	d00f      	beq.n	80017b4 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	f012 0f04 	tst.w	r2, #4
 800179a:	d111      	bne.n	80017c0 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	f022 020c 	bic.w	r2, r2, #12
 80017a2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80017a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80017a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80017b4:	7e20      	ldrb	r0, [r4, #24]
 80017b6:	b960      	cbnz	r0, 80017d2 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80017be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80017c2:	f043 0320 	orr.w	r3, r3, #32
 80017c6:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80017d0:	e7f0      	b.n	80017b4 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80017d2:	2000      	movs	r0, #0
 80017d4:	e7f3      	b.n	80017be <HAL_ADC_PollForConversion+0xa6>

080017d6 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017d6:	6803      	ldr	r3, [r0, #0]
 80017d8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80017da:	4770      	bx	lr

080017dc <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80017dc:	4770      	bx	lr

080017de <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017de:	4770      	bx	lr

080017e0 <HAL_ADC_IRQHandler>:
{
 80017e0:	b570      	push	{r4, r5, r6, lr}
 80017e2:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017e4:	6803      	ldr	r3, [r0, #0]
 80017e6:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017e8:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80017ea:	f016 0f02 	tst.w	r6, #2
 80017ee:	d010      	beq.n	8001812 <HAL_ADC_IRQHandler+0x32>
 80017f0:	f015 0f02 	tst.w	r5, #2
 80017f4:	d00d      	beq.n	8001812 <HAL_ADC_IRQHandler+0x32>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017f6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80017f8:	f013 0f10 	tst.w	r3, #16
 80017fc:	d103      	bne.n	8001806 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80017fe:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001800:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001804:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001806:	4620      	mov	r0, r4
 8001808:	f000 fb60 	bl	8001ecc <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	2202      	movs	r2, #2
 8001810:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001812:	f016 0f04 	tst.w	r6, #4
 8001816:	d002      	beq.n	800181e <HAL_ADC_IRQHandler+0x3e>
 8001818:	f015 0f04 	tst.w	r5, #4
 800181c:	d105      	bne.n	800182a <HAL_ADC_IRQHandler+0x4a>
 800181e:	f016 0f08 	tst.w	r6, #8
 8001822:	d02b      	beq.n	800187c <HAL_ADC_IRQHandler+0x9c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001824:	f015 0f08 	tst.w	r5, #8
 8001828:	d028      	beq.n	800187c <HAL_ADC_IRQHandler+0x9c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800182a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800182c:	f013 0f10 	tst.w	r3, #16
 8001830:	d103      	bne.n	800183a <HAL_ADC_IRQHandler+0x5a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001832:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001834:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001838:	65a3      	str	r3, [r4, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800183a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001842:	d115      	bne.n	8001870 <HAL_ADC_IRQHandler+0x90>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001844:	7ea2      	ldrb	r2, [r4, #26]
 8001846:	b99a      	cbnz	r2, 8001870 <HAL_ADC_IRQHandler+0x90>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	f012 0f08 	tst.w	r2, #8
 800184e:	d00f      	beq.n	8001870 <HAL_ADC_IRQHandler+0x90>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	f012 0f04 	tst.w	r2, #4
 8001856:	d145      	bne.n	80018e4 <HAL_ADC_IRQHandler+0x104>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	f022 020c 	bic.w	r2, r2, #12
 800185e:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001860:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001862:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001870:	4620      	mov	r0, r4
 8001872:	f7fe fe91 	bl	8000598 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	220c      	movs	r2, #12
 800187a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800187c:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001880:	d002      	beq.n	8001888 <HAL_ADC_IRQHandler+0xa8>
 8001882:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001886:	d136      	bne.n	80018f6 <HAL_ADC_IRQHandler+0x116>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001888:	f416 7f80 	tst.w	r6, #256	@ 0x100
 800188c:	d002      	beq.n	8001894 <HAL_ADC_IRQHandler+0xb4>
 800188e:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8001892:	d13b      	bne.n	800190c <HAL_ADC_IRQHandler+0x12c>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001894:	f416 7f00 	tst.w	r6, #512	@ 0x200
 8001898:	d002      	beq.n	80018a0 <HAL_ADC_IRQHandler+0xc0>
 800189a:	f415 7f00 	tst.w	r5, #512	@ 0x200
 800189e:	d141      	bne.n	8001924 <HAL_ADC_IRQHandler+0x144>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80018a0:	f016 0f10 	tst.w	r6, #16
 80018a4:	d017      	beq.n	80018d6 <HAL_ADC_IRQHandler+0xf6>
 80018a6:	f015 0f10 	tst.w	r5, #16
 80018aa:	d014      	beq.n	80018d6 <HAL_ADC_IRQHandler+0xf6>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80018ae:	b123      	cbz	r3, 80018ba <HAL_ADC_IRQHandler+0xda>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80018b0:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f013 0f03 	tst.w	r3, #3
 80018b8:	d00a      	beq.n	80018d0 <HAL_ADC_IRQHandler+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80018bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c0:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018c2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff ff87 	bl	80017de <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	2210      	movs	r2, #16
 80018d4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80018d6:	f416 5f00 	tst.w	r6, #8192	@ 0x2000
 80018da:	d002      	beq.n	80018e2 <HAL_ADC_IRQHandler+0x102>
 80018dc:	f415 5f00 	tst.w	r5, #8192	@ 0x2000
 80018e0:	d12c      	bne.n	800193c <HAL_ADC_IRQHandler+0x15c>
}
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80018e6:	f043 0320 	orr.w	r3, r3, #32
 80018ea:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ec:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80018f4:	e7bc      	b.n	8001870 <HAL_ADC_IRQHandler+0x90>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fc:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018fe:	4620      	mov	r0, r4
 8001900:	f7ff ff6c 	bl	80017dc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e7bd      	b.n	8001888 <HAL_ADC_IRQHandler+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800190c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800190e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001912:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001914:	4620      	mov	r0, r4
 8001916:	f000 fad7 	bl	8001ec8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e7b7      	b.n	8001894 <HAL_ADC_IRQHandler+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001924:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001926:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800192a:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800192c:	4620      	mov	r0, r4
 800192e:	f000 facc 	bl	8001eca <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	e7b1      	b.n	80018a0 <HAL_ADC_IRQHandler+0xc0>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800193c:	4620      	mov	r0, r4
 800193e:	f000 fac6 	bl	8001ece <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001948:	601a      	str	r2, [r3, #0]
}
 800194a:	e7ca      	b.n	80018e2 <HAL_ADC_IRQHandler+0x102>

0800194c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800194c:	b470      	push	{r4, r5, r6}
 800194e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001950:	2200      	movs	r2, #0
 8001952:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001954:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001956:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 800195a:	2a01      	cmp	r2, #1
 800195c:	f000 8103 	beq.w	8001b66 <HAL_ADC_ConfigChannel+0x21a>
 8001960:	4603      	mov	r3, r0
 8001962:	2201      	movs	r2, #1
 8001964:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001968:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800196a:	6890      	ldr	r0, [r2, #8]
 800196c:	f010 0f04 	tst.w	r0, #4
 8001970:	d00a      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001972:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001974:	f042 0220 	orr.w	r2, r2, #32
 8001978:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800197a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
}
 8001982:	b003      	add	sp, #12
 8001984:	bc70      	pop	{r4, r5, r6}
 8001986:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8001988:	6848      	ldr	r0, [r1, #4]
 800198a:	2802      	cmp	r0, #2
 800198c:	f000 809c 	beq.w	8001ac8 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001990:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8001994:	d027      	beq.n	80019e6 <HAL_ADC_ConfigChannel+0x9a>
 8001996:	4d75      	ldr	r5, [pc, #468]	@ (8001b6c <HAL_ADC_ConfigChannel+0x220>)
 8001998:	42ac      	cmp	r4, r5
 800199a:	d024      	beq.n	80019e6 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800199c:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800199e:	f000 001f 	and.w	r0, r0, #31
 80019a2:	250f      	movs	r5, #15
 80019a4:	4085      	lsls	r5, r0
 80019a6:	ea24 0505 	bic.w	r5, r4, r5
 80019aa:	680c      	ldr	r4, [r1, #0]
 80019ac:	f3c4 0611 	ubfx	r6, r4, #0, #18
 80019b0:	2e00      	cmp	r6, #0
 80019b2:	d131      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0xcc>
 80019b4:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80019b8:	4084      	lsls	r4, r0
 80019ba:	432c      	orrs	r4, r5
 80019bc:	661c      	str	r4, [r3, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80019be:	684c      	ldr	r4, [r1, #4]
 80019c0:	08a0      	lsrs	r0, r4, #2
 80019c2:	3001      	adds	r0, #1
 80019c4:	69dd      	ldr	r5, [r3, #28]
 80019c6:	42a8      	cmp	r0, r5
 80019c8:	d813      	bhi.n	80019f2 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80019ca:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80019cc:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 80019ce:	f004 041f 	and.w	r4, r4, #31
 80019d2:	260f      	movs	r6, #15
 80019d4:	40a6      	lsls	r6, r4
 80019d6:	ea20 0006 	bic.w	r0, r0, r6
 80019da:	f3c5 6583 	ubfx	r5, r5, #26, #4
 80019de:	40a5      	lsls	r5, r4
 80019e0:	4328      	orrs	r0, r5
 80019e2:	6290      	str	r0, [r2, #40]	@ 0x28
}
 80019e4:	e005      	b.n	80019f2 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80019e6:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019e8:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 80019ea:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80019ee:	4320      	orrs	r0, r4
 80019f0:	6290      	str	r0, [r2, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	680d      	ldr	r5, [r1, #0]
 80019f6:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80019f8:	6960      	ldr	r0, [r4, #20]
 80019fa:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 80019fe:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8001a02:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8001a06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a0a:	4302      	orrs	r2, r0
 8001a0c:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a0e:	680a      	ldr	r2, [r1, #0]
 8001a10:	2a00      	cmp	r2, #0
 8001a12:	db09      	blt.n	8001a28 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a14:	2000      	movs	r0, #0
 8001a16:	e7b1      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a1c:	b114      	cbz	r4, 8001a24 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001a1e:	fab4 f484 	clz	r4, r4
 8001a22:	e7c9      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8001a24:	2420      	movs	r4, #32
 8001a26:	e7c7      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a28:	4951      	ldr	r1, [pc, #324]	@ (8001b70 <HAL_ADC_ConfigChannel+0x224>)
 8001a2a:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
 8001a2e:	f000 71e0 	and.w	r1, r0, #29360128	@ 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a32:	4c50      	ldr	r4, [pc, #320]	@ (8001b74 <HAL_ADC_ConfigChannel+0x228>)
 8001a34:	42a2      	cmp	r2, r4
 8001a36:	d007      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a38:	4c4f      	ldr	r4, [pc, #316]	@ (8001b78 <HAL_ADC_ConfigChannel+0x22c>)
 8001a3a:	42a2      	cmp	r2, r4
 8001a3c:	d026      	beq.n	8001a8c <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a3e:	4c4f      	ldr	r4, [pc, #316]	@ (8001b7c <HAL_ADC_ConfigChannel+0x230>)
 8001a40:	42a2      	cmp	r2, r4
 8001a42:	d032      	beq.n	8001aaa <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2000      	movs	r0, #0
 8001a46:	e799      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a48:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8001a4c:	d1f4      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a4e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a52:	4847      	ldr	r0, [pc, #284]	@ (8001b70 <HAL_ADC_ConfigChannel+0x224>)
 8001a54:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8001a58:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a62:	4a47      	ldr	r2, [pc, #284]	@ (8001b80 <HAL_ADC_ConfigChannel+0x234>)
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	0992      	lsrs	r2, r2, #6
 8001a68:	4946      	ldr	r1, [pc, #280]	@ (8001b84 <HAL_ADC_ConfigChannel+0x238>)
 8001a6a:	fba1 1202 	umull	r1, r2, r1, r2
 8001a6e:	0992      	lsrs	r2, r2, #6
 8001a70:	3201      	adds	r2, #1
 8001a72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001a7a:	e002      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8001a7c:	9a01      	ldr	r2, [sp, #4]
 8001a7e:	3a01      	subs	r2, #1
 8001a80:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001a82:	9a01      	ldr	r2, [sp, #4]
 8001a84:	2a00      	cmp	r2, #0
 8001a86:	d1f9      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a88:	2000      	movs	r0, #0
 8001a8a:	e777      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a8c:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8001a90:	d1d5      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a92:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8001a96:	4836      	ldr	r0, [pc, #216]	@ (8001b70 <HAL_ADC_ConfigChannel+0x224>)
 8001a98:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8001a9c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001aa0:	4311      	orrs	r1, r2
 8001aa2:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa6:	2000      	movs	r0, #0
}
 8001aa8:	e768      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001aaa:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 8001aae:	d158      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ab0:	f441 0280 	orr.w	r2, r1, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ab4:	482e      	ldr	r0, [pc, #184]	@ (8001b70 <HAL_ADC_ConfigChannel+0x224>)
 8001ab6:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8001aba:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2000      	movs	r0, #0
}
 8001ac6:	e759      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ac8:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8001acc:	d002      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0x188>
 8001ace:	4827      	ldr	r0, [pc, #156]	@ (8001b6c <HAL_ADC_ConfigChannel+0x220>)
 8001ad0:	4284      	cmp	r4, r0
 8001ad2:	d106      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ad4:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ad6:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8001ad8:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8001adc:	ea20 0004 	bic.w	r0, r0, r4
 8001ae0:	6290      	str	r0, [r2, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ae2:	680a      	ldr	r2, [r1, #0]
 8001ae4:	2a00      	cmp	r2, #0
 8001ae6:	db01      	blt.n	8001aec <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2000      	movs	r0, #0
 8001aea:	e747      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aec:	4920      	ldr	r1, [pc, #128]	@ (8001b70 <HAL_ADC_ConfigChannel+0x224>)
 8001aee:	f8d1 1708 	ldr.w	r1, [r1, #1800]	@ 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001af2:	4820      	ldr	r0, [pc, #128]	@ (8001b74 <HAL_ADC_ConfigChannel+0x228>)
 8001af4:	4282      	cmp	r2, r0
 8001af6:	d007      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001af8:	481f      	ldr	r0, [pc, #124]	@ (8001b78 <HAL_ADC_ConfigChannel+0x22c>)
 8001afa:	4282      	cmp	r2, r0
 8001afc:	d013      	beq.n	8001b26 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001afe:	481f      	ldr	r0, [pc, #124]	@ (8001b7c <HAL_ADC_ConfigChannel+0x230>)
 8001b00:	4282      	cmp	r2, r0
 8001b02:	d01f      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2000      	movs	r0, #0
 8001b06:	e739      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b08:	f001 71a0 	and.w	r1, r1, #20971520	@ 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b0c:	f100 4010 	add.w	r0, r0, #2415919104	@ 0x90000000
 8001b10:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 8001b14:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8001b18:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b22:	2000      	movs	r0, #0
}
 8001b24:	e72a      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b26:	f401 0240 	and.w	r2, r1, #12582912	@ 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b2a:	f100 4008 	add.w	r0, r0, #2281701376	@ 0x88000000
 8001b2e:	f500 4060 	add.w	r0, r0, #57344	@ 0xe000
 8001b32:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8001b36:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b40:	2000      	movs	r0, #0
}
 8001b42:	e71b      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b44:	f001 72c0 	and.w	r2, r1, #25165824	@ 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b48:	f100 400c 	add.w	r0, r0, #2348810240	@ 0x8c000000
 8001b4c:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8001b50:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8001b54:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5e:	2000      	movs	r0, #0
}
 8001b60:	e70c      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
 8001b62:	2000      	movs	r0, #0
 8001b64:	e70a      	b.n	800197c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8001b66:	2002      	movs	r0, #2
 8001b68:	e70b      	b.n	8001982 <HAL_ADC_ConfigChannel+0x36>
 8001b6a:	bf00      	nop
 8001b6c:	80000004 	.word	0x80000004
 8001b70:	40012000 	.word	0x40012000
 8001b74:	b0001000 	.word	0xb0001000
 8001b78:	b8004000 	.word	0xb8004000
 8001b7c:	b4002000 	.word	0xb4002000
 8001b80:	20000000 	.word	0x20000000
 8001b84:	053e2d63 	.word	0x053e2d63

08001b88 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001b88:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001b8a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	f012 0f04 	tst.w	r2, #4
 8001b92:	d02a      	beq.n	8001bea <ADC_ConversionStop+0x62>
 8001b94:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	f012 0f02 	tst.w	r2, #2
 8001b9c:	d107      	bne.n	8001bae <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ba4:	f022 0217 	bic.w	r2, r2, #23
 8001ba8:	f042 0210 	orr.w	r2, r2, #16
 8001bac:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bae:	f7fe ff37 	bl	8000a20 <HAL_GetTick>
 8001bb2:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f013 0f04 	tst.w	r3, #4
 8001bbc:	d013      	beq.n	8001be6 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001bbe:	f7fe ff2f 	bl	8000a20 <HAL_GetTick>
 8001bc2:	1b43      	subs	r3, r0, r5
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d9f5      	bls.n	8001bb4 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f013 0f04 	tst.w	r3, #4
 8001bd0:	d0f0      	beq.n	8001bb4 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001bd4:	f043 0310 	orr.w	r3, r3, #16
 8001bd8:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bda:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8001be2:	2001      	movs	r0, #1
 8001be4:	e002      	b.n	8001bec <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001be6:	2000      	movs	r0, #0
 8001be8:	e000      	b.n	8001bec <ADC_ConversionStop+0x64>
 8001bea:	2000      	movs	r0, #0
}
 8001bec:	bd38      	pop	{r3, r4, r5, pc}
	...

08001bf0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001bf0:	b530      	push	{r4, r5, lr}
 8001bf2:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	f012 0f01 	tst.w	r2, #1
 8001c00:	d15b      	bne.n	8001cba <ADC_Enable+0xca>
 8001c02:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc0 <ADC_Enable+0xd0>)
 8001c08:	4211      	tst	r1, r2
 8001c0a:	d117      	bne.n	8001c3c <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c12:	f022 0217 	bic.w	r2, r2, #23
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c1c:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <ADC_Enable+0xd4>)
 8001c1e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001c22:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8001c26:	d019      	beq.n	8001c5c <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c28:	4b27      	ldr	r3, [pc, #156]	@ (8001cc8 <ADC_Enable+0xd8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	4a27      	ldr	r2, [pc, #156]	@ (8001ccc <ADC_Enable+0xdc>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001c38:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001c3a:	e00c      	b.n	8001c56 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001c3e:	f043 0310 	orr.w	r3, r3, #16
 8001c42:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c44:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	e035      	b.n	8001cbc <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8001c50:	9b01      	ldr	r3, [sp, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001c56:	9b01      	ldr	r3, [sp, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f9      	bne.n	8001c50 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c5c:	7e63      	ldrb	r3, [r4, #25]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c62:	2000      	movs	r0, #0
 8001c64:	e02a      	b.n	8001cbc <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8001c66:	f7fe fedb 	bl	8000a20 <HAL_GetTick>
 8001c6a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	f012 0f01 	tst.w	r2, #1
 8001c74:	d11f      	bne.n	8001cb6 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	f012 0f01 	tst.w	r2, #1
 8001c7c:	d107      	bne.n	8001c8e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c84:	f022 0217 	bic.w	r2, r2, #23
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c8e:	f7fe fec7 	bl	8000a20 <HAL_GetTick>
 8001c92:	1b40      	subs	r0, r0, r5
 8001c94:	2802      	cmp	r0, #2
 8001c96:	d9e9      	bls.n	8001c6c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f013 0f01 	tst.w	r3, #1
 8001ca0:	d1e4      	bne.n	8001c6c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001caa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	e002      	b.n	8001cbc <ADC_Enable+0xcc>
  return HAL_OK;
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	e000      	b.n	8001cbc <ADC_Enable+0xcc>
 8001cba:	2000      	movs	r0, #0
}
 8001cbc:	b003      	add	sp, #12
 8001cbe:	bd30      	pop	{r4, r5, pc}
 8001cc0:	80000017 	.word	0x80000017
 8001cc4:	40012000 	.word	0x40012000
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	053e2d63 	.word	0x053e2d63

08001cd0 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f013 0f04 	tst.w	r3, #4
 8001cd8:	d128      	bne.n	8001d2c <HAL_ADC_Start+0x5c>
{
 8001cda:	b510      	push	{r4, lr}
 8001cdc:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8001cde:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d024      	beq.n	8001d30 <HAL_ADC_Start+0x60>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8001cec:	f7ff ff80 	bl	8001bf0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001cf0:	b9c0      	cbnz	r0, 8001d24 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8001cf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001cf4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d00:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8001d02:	2300      	movs	r3, #0
 8001d04:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d06:	6822      	ldr	r2, [r4, #0]
 8001d08:	211c      	movs	r1, #28
 8001d0a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001d0c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d10:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001d12:	6893      	ldr	r3, [r2, #8]
 8001d14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d18:	f023 0317 	bic.w	r3, r3, #23
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6093      	str	r3, [r2, #8]
}
 8001d22:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8001d24:	2300      	movs	r3, #0
 8001d26:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8001d2a:	e7fa      	b.n	8001d22 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8001d2c:	2002      	movs	r0, #2
}
 8001d2e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8001d30:	2002      	movs	r0, #2
 8001d32:	e7f6      	b.n	8001d22 <HAL_ADC_Start+0x52>

08001d34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d38:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d3a:	6893      	ldr	r3, [r2, #8]
 8001d3c:	f013 0302 	ands.w	r3, r3, #2
 8001d40:	d000      	beq.n	8001d44 <ADC_Disable+0x10>
 8001d42:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d44:	6891      	ldr	r1, [r2, #8]
 8001d46:	f011 0f01 	tst.w	r1, #1
 8001d4a:	d039      	beq.n	8001dc0 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d139      	bne.n	8001dc4 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001d50:	6893      	ldr	r3, [r2, #8]
 8001d52:	f003 0305 	and.w	r3, r3, #5
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d009      	beq.n	8001d6e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d5c:	f043 0310 	orr.w	r3, r3, #16
 8001d60:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	e029      	b.n	8001dc2 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8001d6e:	6893      	ldr	r3, [r2, #8]
 8001d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d74:	f023 0317 	bic.w	r3, r3, #23
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	2203      	movs	r2, #3
 8001d82:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d84:	f7fe fe4c 	bl	8000a20 <HAL_GetTick>
 8001d88:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f013 0f01 	tst.w	r3, #1
 8001d92:	d013      	beq.n	8001dbc <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d94:	f7fe fe44 	bl	8000a20 <HAL_GetTick>
 8001d98:	1b40      	subs	r0, r0, r5
 8001d9a:	2802      	cmp	r0, #2
 8001d9c:	d9f5      	bls.n	8001d8a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f013 0f01 	tst.w	r3, #1
 8001da6:	d0f0      	beq.n	8001d8a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
 8001dba:	e002      	b.n	8001dc2 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	e000      	b.n	8001dc2 <ADC_Disable+0x8e>
 8001dc0:	2000      	movs	r0, #0
}
 8001dc2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e7fc      	b.n	8001dc2 <ADC_Disable+0x8e>

08001dc8 <HAL_ADC_DeInit>:
{
 8001dc8:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	d056      	beq.n	8001e7c <HAL_ADC_DeInit+0xb4>
 8001dce:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001dd0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001dd8:	f7ff fed6 	bl	8001b88 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001ddc:	4606      	mov	r6, r0
 8001dde:	2800      	cmp	r0, #0
 8001de0:	d03d      	beq.n	8001e5e <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8001de2:	6822      	ldr	r2, [r4, #0]
 8001de4:	6853      	ldr	r3, [r2, #4]
 8001de6:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	f240 329f 	movw	r2, #927	@ 0x39f
 8001df6:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8001df8:	6822      	ldr	r2, [r4, #0]
 8001dfa:	68d1      	ldr	r1, [r2, #12]
 8001dfc:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <HAL_ADC_DeInit+0xb8>)
 8001dfe:	400b      	ands	r3, r1
 8001e00:	60d3      	str	r3, [r2, #12]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	6953      	ldr	r3, [r2, #20]
 8001e06:	f023 0307 	bic.w	r3, r3, #7
 8001e0a:	6153      	str	r3, [r2, #20]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e10:	2500      	movs	r5, #0
 8001e12:	629d      	str	r5, [r3, #40]	@ 0x28
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	6a13      	ldr	r3, [r2, #32]
 8001e18:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8001e1c:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8001e1e:	6822      	ldr	r2, [r4, #0]
 8001e20:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001e22:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8001e26:	6253      	str	r3, [r2, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8001e28:	6822      	ldr	r2, [r4, #0]
 8001e2a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001e2c:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8001e30:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	6913      	ldr	r3, [r2, #16]
 8001e36:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001e3a:	6113      	str	r3, [r2, #16]
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8001e3c:	4a11      	ldr	r2, [pc, #68]	@ (8001e84 <HAL_ADC_DeInit+0xbc>)
 8001e3e:	f8d2 3708 	ldr.w	r3, [r2, #1800]	@ 0x708
 8001e42:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8001e46:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
  HAL_ADC_MspDeInit(hadc);
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7fe fb8a 	bl	8000564 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8001e50:	6625      	str	r5, [r4, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8001e52:	65e5      	str	r5, [r4, #92]	@ 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8001e54:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8001e56:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7ff ff68 	bl	8001d34 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001e64:	4606      	mov	r6, r0
 8001e66:	b908      	cbnz	r0, 8001e6c <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8001e6c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8001e6e:	6893      	ldr	r3, [r2, #8]
 8001e70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e74:	f023 0317 	bic.w	r3, r3, #23
 8001e78:	6093      	str	r3, [r2, #8]
}
 8001e7a:	e7b2      	b.n	8001de2 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8001e7c:	2601      	movs	r6, #1
 8001e7e:	e7ec      	b.n	8001e5a <HAL_ADC_DeInit+0x92>
 8001e80:	833e0200 	.word	0x833e0200
 8001e84:	40012000 	.word	0x40012000

08001e88 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001e88:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d019      	beq.n	8001ec4 <HAL_ADC_Stop+0x3c>
{
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001e94:	2301      	movs	r3, #1
 8001e96:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001e9a:	f7ff fe75 	bl	8001b88 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001e9e:	b118      	cbz	r0, 8001ea8 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8001ea6:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff ff43 	bl	8001d34 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d1f6      	bne.n	8001ea0 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001ec2:	e7ed      	b.n	8001ea0 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8001ec4:	2002      	movs	r0, #2
}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ec8:	4770      	bx	lr

08001eca <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001ecc:	4770      	bx	lr

08001ece <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001ece:	4770      	bx	lr

08001ed0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	db07      	blt.n	8001ee4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed4:	f000 021f 	and.w	r2, r0, #31
 8001ed8:	0940      	lsrs	r0, r0, #5
 8001eda:	2301      	movs	r3, #1
 8001edc:	4093      	lsls	r3, r2
 8001ede:	4a02      	ldr	r2, [pc, #8]	@ (8001ee8 <__NVIC_EnableIRQ+0x18>)
 8001ee0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001eec:	2800      	cmp	r0, #0
 8001eee:	db0c      	blt.n	8001f0a <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef0:	f000 021f 	and.w	r2, r0, #31
 8001ef4:	0940      	lsrs	r0, r0, #5
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	3020      	adds	r0, #32
 8001efc:	4a03      	ldr	r2, [pc, #12]	@ (8001f0c <__NVIC_DisableIRQ+0x20>)
 8001efe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f06:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001f10:	2800      	cmp	r0, #0
 8001f12:	db08      	blt.n	8001f26 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	0109      	lsls	r1, r1, #4
 8001f16:	b2c9      	uxtb	r1, r1
 8001f18:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001f1c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001f20:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001f24:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	f000 000f 	and.w	r0, r0, #15
 8001f2a:	0109      	lsls	r1, r1, #4
 8001f2c:	b2c9      	uxtb	r1, r1
 8001f2e:	4b01      	ldr	r3, [pc, #4]	@ (8001f34 <__NVIC_SetPriority+0x24>)
 8001f30:	5419      	strb	r1, [r3, r0]
  }
}
 8001f32:	4770      	bx	lr
 8001f34:	e000ed14 	.word	0xe000ed14

08001f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f38:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3e:	f1c0 0c07 	rsb	ip, r0, #7
 8001f42:	f1bc 0f04 	cmp.w	ip, #4
 8001f46:	bf28      	it	cs
 8001f48:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4c:	1d03      	adds	r3, r0, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d90f      	bls.n	8001f72 <NVIC_EncodePriority+0x3a>
 8001f52:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 3eff 	mov.w	lr, #4294967295
 8001f58:	fa0e f00c 	lsl.w	r0, lr, ip
 8001f5c:	ea21 0100 	bic.w	r1, r1, r0
 8001f60:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f62:	fa0e fe03 	lsl.w	lr, lr, r3
 8001f66:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001f6a:	ea41 0002 	orr.w	r0, r1, r2
 8001f6e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	2300      	movs	r3, #0
 8001f74:	e7ee      	b.n	8001f54 <NVIC_EncodePriority+0x1c>
	...

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4a07      	ldr	r2, [pc, #28]	@ (8001f98 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f7a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f84:	0200      	lsls	r0, r0, #8
 8001f86:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001f8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001f94:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <HAL_NVIC_SetPriority+0x1c>)
 8001fa2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001fa8:	f7ff ffc6 	bl	8001f38 <NVIC_EncodePriority>
 8001fac:	4601      	mov	r1, r0
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7ff ffae 	bl	8001f10 <__NVIC_SetPriority>
}
 8001fb4:	bd10      	pop	{r4, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbe:	f7ff ff87 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 8001fc2:	bd08      	pop	{r3, pc}

08001fc4 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001fc6:	f7ff ff91 	bl	8001eec <__NVIC_DisableIRQ>
}
 8001fca:	bd08      	pop	{r3, pc}

08001fcc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fcc:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fce:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8001fd0:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 8001fd4:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8001fd8:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8001fda:	b124      	cbz	r4, 8001fe6 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fdc:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8001fde:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 8001fe2:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fe6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8001fe8:	f004 0c1c 	and.w	ip, r4, #28
 8001fec:	2401      	movs	r4, #1
 8001fee:	fa04 f40c 	lsl.w	r4, r4, ip
 8001ff2:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 8001ff6:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ffa:	6804      	ldr	r4, [r0, #0]
 8001ffc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ffe:	6883      	ldr	r3, [r0, #8]
 8002000:	2b10      	cmp	r3, #16
 8002002:	d005      	beq.n	8002010 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002008:	6803      	ldr	r3, [r0, #0]
 800200a:	60da      	str	r2, [r3, #12]
  }
}
 800200c:	bc10      	pop	{r4}
 800200e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002010:	6803      	ldr	r3, [r0, #0]
 8002012:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002014:	6803      	ldr	r3, [r0, #0]
 8002016:	60d9      	str	r1, [r3, #12]
 8002018:	e7f8      	b.n	800200c <DMA_SetConfig+0x40>
	...

0800201c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800201c:	6803      	ldr	r3, [r0, #0]
 800201e:	4a14      	ldr	r2, [pc, #80]	@ (8002070 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d816      	bhi.n	8002052 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002024:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002026:	f022 0203 	bic.w	r2, r2, #3
 800202a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800202e:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 8002032:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3b08      	subs	r3, #8
 8002038:	4a0e      	ldr	r2, [pc, #56]	@ (8002074 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002040:	4a0d      	ldr	r2, [pc, #52]	@ (8002078 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8002042:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2201      	movs	r2, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8002050:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002052:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002054:	f022 0103 	bic.w	r1, r2, #3
 8002058:	4a08      	ldr	r2, [pc, #32]	@ (800207c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 800205a:	440a      	add	r2, r1
 800205c:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800205e:	b2db      	uxtb	r3, r3
 8002060:	3b08      	subs	r3, #8
 8002062:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	3307      	adds	r3, #7
 800206c:	e7e8      	b.n	8002040 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800206e:	bf00      	nop
 8002070:	40020407 	.word	0x40020407
 8002074:	cccccccd 	.word	0xcccccccd
 8002078:	40020880 	.word	0x40020880
 800207c:	4002081c 	.word	0x4002081c

08002080 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002080:	6843      	ldr	r3, [r0, #4]
 8002082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002086:	4a07      	ldr	r2, [pc, #28]	@ (80020a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002088:	441a      	add	r2, r3
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800208e:	4a06      	ldr	r2, [pc, #24]	@ (80020a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8002090:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002092:	3b01      	subs	r3, #1
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	1000823f 	.word	0x1000823f
 80020a8:	40020940 	.word	0x40020940

080020ac <HAL_DMA_Init>:
  if (hdma == NULL)
 80020ac:	2800      	cmp	r0, #0
 80020ae:	d060      	beq.n	8002172 <HAL_DMA_Init+0xc6>
{
 80020b0:	b510      	push	{r4, lr}
 80020b2:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020b4:	6802      	ldr	r2, [r0, #0]
 80020b6:	4b30      	ldr	r3, [pc, #192]	@ (8002178 <HAL_DMA_Init+0xcc>)
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d842      	bhi.n	8002142 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020bc:	4b2f      	ldr	r3, [pc, #188]	@ (800217c <HAL_DMA_Init+0xd0>)
 80020be:	4413      	add	r3, r2
 80020c0:	492f      	ldr	r1, [pc, #188]	@ (8002180 <HAL_DMA_Init+0xd4>)
 80020c2:	fba1 1303 	umull	r1, r3, r1, r3
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <HAL_DMA_Init+0xd8>)
 80020ce:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d0:	2302      	movs	r3, #2
 80020d2:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80020dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020e0:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020e2:	6821      	ldr	r1, [r4, #0]
 80020e4:	680a      	ldr	r2, [r1, #0]
 80020e6:	68a3      	ldr	r3, [r4, #8]
 80020e8:	68e0      	ldr	r0, [r4, #12]
 80020ea:	4303      	orrs	r3, r0
 80020ec:	6920      	ldr	r0, [r4, #16]
 80020ee:	4303      	orrs	r3, r0
 80020f0:	6960      	ldr	r0, [r4, #20]
 80020f2:	4303      	orrs	r3, r0
 80020f4:	69a0      	ldr	r0, [r4, #24]
 80020f6:	4303      	orrs	r3, r0
 80020f8:	69e0      	ldr	r0, [r4, #28]
 80020fa:	4303      	orrs	r3, r0
 80020fc:	6a20      	ldr	r0, [r4, #32]
 80020fe:	4303      	orrs	r3, r0
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff ff89 	bl	800201c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800210a:	68a3      	ldr	r3, [r4, #8]
 800210c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002110:	d022      	beq.n	8002158 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002112:	6863      	ldr	r3, [r4, #4]
 8002114:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800211a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800211c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800211e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002120:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002122:	6863      	ldr	r3, [r4, #4]
 8002124:	3b01      	subs	r3, #1
 8002126:	2b03      	cmp	r3, #3
 8002128:	d919      	bls.n	800215e <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 800212a:	2300      	movs	r3, #0
 800212c:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800212e:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002130:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002132:	2000      	movs	r0, #0
 8002134:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002136:	2301      	movs	r3, #1
 8002138:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 800213c:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8002140:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_DMA_Init+0xdc>)
 8002144:	4413      	add	r3, r2
 8002146:	490e      	ldr	r1, [pc, #56]	@ (8002180 <HAL_DMA_Init+0xd4>)
 8002148:	fba1 1303 	umull	r1, r3, r1, r3
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002152:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <HAL_DMA_Init+0xe0>)
 8002154:	6403      	str	r3, [r0, #64]	@ 0x40
 8002156:	e7bb      	b.n	80020d0 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002158:	2300      	movs	r3, #0
 800215a:	6063      	str	r3, [r4, #4]
 800215c:	e7d9      	b.n	8002112 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800215e:	4620      	mov	r0, r4
 8002160:	f7ff ff8e 	bl	8002080 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002164:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800216a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800216c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	e7df      	b.n	8002132 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8002172:	2001      	movs	r0, #1
}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40020407 	.word	0x40020407
 800217c:	bffdfff8 	.word	0xbffdfff8
 8002180:	cccccccd 	.word	0xcccccccd
 8002184:	40020000 	.word	0x40020000
 8002188:	bffdfbf8 	.word	0xbffdfbf8
 800218c:	40020400 	.word	0x40020400

08002190 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8002190:	2800      	cmp	r0, #0
 8002192:	d04b      	beq.n	800222c <HAL_DMA_DeInit+0x9c>
{
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	6813      	ldr	r3, [r2, #0]
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021a2:	6802      	ldr	r2, [r0, #0]
 80021a4:	4b22      	ldr	r3, [pc, #136]	@ (8002230 <HAL_DMA_DeInit+0xa0>)
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d82c      	bhi.n	8002204 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <HAL_DMA_DeInit+0xa4>)
 80021ac:	4413      	add	r3, r2
 80021ae:	4922      	ldr	r1, [pc, #136]	@ (8002238 <HAL_DMA_DeInit+0xa8>)
 80021b0:	fba1 1303 	umull	r1, r3, r1, r3
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80021ba:	4b20      	ldr	r3, [pc, #128]	@ (800223c <HAL_DMA_DeInit+0xac>)
 80021bc:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 80021be:	2500      	movs	r5, #0
 80021c0:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021c2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80021c4:	f003 021c 	and.w	r2, r3, #28
 80021c8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80021ca:	2301      	movs	r3, #1
 80021cc:	4093      	lsls	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff ff23 	bl	800201c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80021d6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80021d8:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021da:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80021dc:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80021de:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021e0:	6863      	ldr	r3, [r4, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d918      	bls.n	800221a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 80021e8:	2000      	movs	r0, #0
 80021ea:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80021ec:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80021ee:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 80021f0:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80021f2:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80021f4:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80021f6:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f8:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80021fa:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 80021fe:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8002202:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002204:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <HAL_DMA_DeInit+0xb0>)
 8002206:	4413      	add	r3, r2
 8002208:	490b      	ldr	r1, [pc, #44]	@ (8002238 <HAL_DMA_DeInit+0xa8>)
 800220a:	fba1 1303 	umull	r1, r3, r1, r3
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002214:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <HAL_DMA_DeInit+0xb4>)
 8002216:	6403      	str	r3, [r0, #64]	@ 0x40
 8002218:	e7d1      	b.n	80021be <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800221a:	4620      	mov	r0, r4
 800221c:	f7ff ff30 	bl	8002080 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002220:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002222:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002224:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002226:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	e7dd      	b.n	80021e8 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 800222c:	2001      	movs	r0, #1
}
 800222e:	4770      	bx	lr
 8002230:	40020407 	.word	0x40020407
 8002234:	bffdfff8 	.word	0xbffdfff8
 8002238:	cccccccd 	.word	0xcccccccd
 800223c:	40020000 	.word	0x40020000
 8002240:	bffdfbf8 	.word	0xbffdfbf8
 8002244:	40020400 	.word	0x40020400

08002248 <HAL_DMA_Start_IT>:
{
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800224c:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8002250:	2801      	cmp	r0, #1
 8002252:	d043      	beq.n	80022dc <HAL_DMA_Start_IT+0x94>
 8002254:	2001      	movs	r0, #1
 8002256:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 800225a:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 800225e:	b2c0      	uxtb	r0, r0
 8002260:	2801      	cmp	r0, #1
 8002262:	d006      	beq.n	8002272 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002268:	2300      	movs	r3, #0
 800226a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 800226e:	2001      	movs	r0, #1
}
 8002270:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002272:	2002      	movs	r0, #2
 8002274:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002278:	2000      	movs	r0, #0
 800227a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800227c:	6825      	ldr	r5, [r4, #0]
 800227e:	6828      	ldr	r0, [r5, #0]
 8002280:	f020 0001 	bic.w	r0, r0, #1
 8002284:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff fea0 	bl	8001fcc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800228c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800228e:	b1d3      	cbz	r3, 80022c6 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002290:	6822      	ldr	r2, [r4, #0]
 8002292:	6813      	ldr	r3, [r2, #0]
 8002294:	f043 030e 	orr.w	r3, r3, #14
 8002298:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800229a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80022a2:	d003      	beq.n	80022ac <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022aa:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 80022ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80022ae:	b11b      	cbz	r3, 80022b8 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022b6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80022b8:	6822      	ldr	r2, [r4, #0]
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022c2:	2000      	movs	r0, #0
 80022c4:	e7d4      	b.n	8002270 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022c6:	6822      	ldr	r2, [r4, #0]
 80022c8:	6813      	ldr	r3, [r2, #0]
 80022ca:	f023 0304 	bic.w	r3, r3, #4
 80022ce:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022d0:	6822      	ldr	r2, [r4, #0]
 80022d2:	6813      	ldr	r3, [r2, #0]
 80022d4:	f043 030a 	orr.w	r3, r3, #10
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e7de      	b.n	800229a <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80022dc:	2002      	movs	r0, #2
 80022de:	e7c7      	b.n	8002270 <HAL_DMA_Start_IT+0x28>

080022e0 <HAL_DMA_Abort>:
  if (NULL == hdma)
 80022e0:	4603      	mov	r3, r0
 80022e2:	2800      	cmp	r0, #0
 80022e4:	d034      	beq.n	8002350 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022e6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	2a02      	cmp	r2, #2
 80022ee:	d006      	beq.n	80022fe <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f0:	2204      	movs	r2, #4
 80022f2:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
 80022fc:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022fe:	6801      	ldr	r1, [r0, #0]
 8002300:	680a      	ldr	r2, [r1, #0]
 8002302:	f022 020e 	bic.w	r2, r2, #14
 8002306:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002308:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800230a:	680a      	ldr	r2, [r1, #0]
 800230c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002310:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002312:	6801      	ldr	r1, [r0, #0]
 8002314:	680a      	ldr	r2, [r1, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800231c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800231e:	f002 011c 	and.w	r1, r2, #28
 8002322:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8002324:	2201      	movs	r2, #1
 8002326:	408a      	lsls	r2, r1
 8002328:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800232a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800232c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800232e:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8002330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002332:	b132      	cbz	r2, 8002342 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002334:	6811      	ldr	r1, [r2, #0]
 8002336:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 800233a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800233c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800233e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8002340:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002348:	2000      	movs	r0, #0
 800234a:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 800234e:	4770      	bx	lr
    return HAL_ERROR;
 8002350:	2001      	movs	r0, #1
}
 8002352:	4770      	bx	lr

08002354 <HAL_DMA_Abort_IT>:
{
 8002354:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002356:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d003      	beq.n	8002368 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002360:	2304      	movs	r3, #4
 8002362:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8002364:	2001      	movs	r0, #1
}
 8002366:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002368:	6802      	ldr	r2, [r0, #0]
 800236a:	6813      	ldr	r3, [r2, #0]
 800236c:	f023 030e 	bic.w	r3, r3, #14
 8002370:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002372:	6802      	ldr	r2, [r0, #0]
 8002374:	6813      	ldr	r3, [r2, #0]
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800237c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800237e:	6813      	ldr	r3, [r2, #0]
 8002380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002384:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002386:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002388:	f003 021c 	and.w	r2, r3, #28
 800238c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800238e:	2301      	movs	r3, #1
 8002390:	4093      	lsls	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002394:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002396:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002398:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 800239a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800239c:	b133      	cbz	r3, 80023ac <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023a6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80023a8:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80023aa:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80023b2:	2300      	movs	r3, #0
 80023b4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 80023b8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80023ba:	b113      	cbz	r3, 80023c2 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80023bc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80023be:	2000      	movs	r0, #0
 80023c0:	e7d1      	b.n	8002366 <HAL_DMA_Abort_IT+0x12>
 80023c2:	2000      	movs	r0, #0
 80023c4:	e7cf      	b.n	8002366 <HAL_DMA_Abort_IT+0x12>
	...

080023c8 <HAL_DMA_IRQHandler>:
{
 80023c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023ca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80023cc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80023ce:	6804      	ldr	r4, [r0, #0]
 80023d0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023d2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80023d4:	f003 031c 	and.w	r3, r3, #28
 80023d8:	2204      	movs	r2, #4
 80023da:	409a      	lsls	r2, r3
 80023dc:	420a      	tst	r2, r1
 80023de:	d015      	beq.n	800240c <HAL_DMA_IRQHandler+0x44>
 80023e0:	f015 0f04 	tst.w	r5, #4
 80023e4:	d012      	beq.n	800240c <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	f013 0f20 	tst.w	r3, #32
 80023ec:	d103      	bne.n	80023f6 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	f023 0304 	bic.w	r3, r3, #4
 80023f4:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023f6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80023f8:	f003 021c 	and.w	r2, r3, #28
 80023fc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80023fe:	2304      	movs	r3, #4
 8002400:	4093      	lsls	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002404:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002406:	b103      	cbz	r3, 800240a <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8002408:	4798      	blx	r3
}
 800240a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800240c:	2202      	movs	r2, #2
 800240e:	409a      	lsls	r2, r3
 8002410:	420a      	tst	r2, r1
 8002412:	d028      	beq.n	8002466 <HAL_DMA_IRQHandler+0x9e>
 8002414:	f015 0f02 	tst.w	r5, #2
 8002418:	d025      	beq.n	8002466 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	f013 0f20 	tst.w	r3, #32
 8002420:	d106      	bne.n	8002430 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	f023 030a 	bic.w	r3, r3, #10
 8002428:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800242a:	2301      	movs	r3, #1
 800242c:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002430:	6802      	ldr	r2, [r0, #0]
 8002432:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <HAL_DMA_IRQHandler+0xdc>)
 8002434:	429a      	cmp	r2, r3
 8002436:	d90e      	bls.n	8002456 <HAL_DMA_IRQHandler+0x8e>
 8002438:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800243a:	f003 021c 	and.w	r2, r3, #28
 800243e:	2302      	movs	r3, #2
 8002440:	4093      	lsls	r3, r2
 8002442:	4a19      	ldr	r2, [pc, #100]	@ (80024a8 <HAL_DMA_IRQHandler+0xe0>)
 8002444:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8002446:	2300      	movs	r3, #0
 8002448:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 800244c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0db      	beq.n	800240a <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8002452:	4798      	blx	r3
 8002454:	e7d9      	b.n	800240a <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002456:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002458:	f003 021c 	and.w	r2, r3, #28
 800245c:	2302      	movs	r3, #2
 800245e:	4093      	lsls	r3, r2
 8002460:	4a12      	ldr	r2, [pc, #72]	@ (80024ac <HAL_DMA_IRQHandler+0xe4>)
 8002462:	6053      	str	r3, [r2, #4]
 8002464:	e7ef      	b.n	8002446 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002466:	2208      	movs	r2, #8
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	420b      	tst	r3, r1
 800246e:	d0cc      	beq.n	800240a <HAL_DMA_IRQHandler+0x42>
 8002470:	f015 0f08 	tst.w	r5, #8
 8002474:	d0c9      	beq.n	800240a <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	f023 030e 	bic.w	r3, r3, #14
 800247c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800247e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002480:	f003 031c 	and.w	r3, r3, #28
 8002484:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002486:	2201      	movs	r2, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800248e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002490:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002494:	2300      	movs	r3, #0
 8002496:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 800249a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0b4      	beq.n	800240a <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80024a0:	4798      	blx	r3
  return;
 80024a2:	e7b2      	b.n	800240a <HAL_DMA_IRQHandler+0x42>
 80024a4:	40020080 	.word	0x40020080
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020000 	.word	0x40020000

080024b0 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80024b0:	b178      	cbz	r0, 80024d2 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 80024b2:	6803      	ldr	r3, [r0, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80024b6:	f011 0f10 	tst.w	r1, #16
 80024ba:	d004      	beq.n	80024c6 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80024bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80024c0:	d004      	beq.n	80024cc <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80024c2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80024c6:	601a      	str	r2, [r3, #0]
  return status;
 80024c8:	2000      	movs	r0, #0
 80024ca:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80024cc:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80024d0:	e7f9      	b.n	80024c6 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 80024d2:	2001      	movs	r0, #1
}
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80024da:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024dc:	e069      	b.n	80025b2 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024de:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024e0:	005e      	lsls	r6, r3, #1
 80024e2:	2403      	movs	r4, #3
 80024e4:	40b4      	lsls	r4, r6
 80024e6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ea:	68cc      	ldr	r4, [r1, #12]
 80024ec:	40b4      	lsls	r4, r6
 80024ee:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80024f0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f2:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024f4:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f8:	684c      	ldr	r4, [r1, #4]
 80024fa:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80024fe:	409c      	lsls	r4, r3
 8002500:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002502:	6044      	str	r4, [r0, #4]
 8002504:	e066      	b.n	80025d4 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002506:	08dd      	lsrs	r5, r3, #3
 8002508:	3508      	adds	r5, #8
 800250a:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800250e:	f003 0c07 	and.w	ip, r3, #7
 8002512:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002516:	f04f 0e0f 	mov.w	lr, #15
 800251a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800251e:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002522:	690c      	ldr	r4, [r1, #16]
 8002524:	fa04 f40c 	lsl.w	r4, r4, ip
 8002528:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800252c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002530:	e067      	b.n	8002602 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002532:	2402      	movs	r4, #2
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x60>
 8002536:	2400      	movs	r4, #0
 8002538:	fa04 f40e 	lsl.w	r4, r4, lr
 800253c:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800253e:	f10c 0c02 	add.w	ip, ip, #2
 8002542:	4d4b      	ldr	r5, [pc, #300]	@ (8002670 <HAL_GPIO_Init+0x198>)
 8002544:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002548:	4c4a      	ldr	r4, [pc, #296]	@ (8002674 <HAL_GPIO_Init+0x19c>)
 800254a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800254c:	43d4      	mvns	r4, r2
 800254e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002552:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8002556:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 800255a:	d001      	beq.n	8002560 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800255c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002560:	4d44      	ldr	r5, [pc, #272]	@ (8002674 <HAL_GPIO_Init+0x19c>)
 8002562:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8002564:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002566:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800256a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800256e:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 8002572:	d001      	beq.n	8002578 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8002574:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002578:	4d3e      	ldr	r5, [pc, #248]	@ (8002674 <HAL_GPIO_Init+0x19c>)
 800257a:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800257c:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002580:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002584:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8002588:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 800258c:	d001      	beq.n	8002592 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 800258e:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002592:	4d38      	ldr	r5, [pc, #224]	@ (8002674 <HAL_GPIO_Init+0x19c>)
 8002594:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002598:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800259c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800259e:	684e      	ldr	r6, [r1, #4]
 80025a0:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80025a4:	d001      	beq.n	80025aa <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80025a6:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80025aa:	4a32      	ldr	r2, [pc, #200]	@ (8002674 <HAL_GPIO_Init+0x19c>)
 80025ac:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80025b0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	680a      	ldr	r2, [r1, #0]
 80025b4:	fa32 f403 	lsrs.w	r4, r2, r3
 80025b8:	d058      	beq.n	800266c <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025ba:	f04f 0c01 	mov.w	ip, #1
 80025be:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80025c2:	ea1c 0202 	ands.w	r2, ip, r2
 80025c6:	d0f3      	beq.n	80025b0 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025c8:	684c      	ldr	r4, [r1, #4]
 80025ca:	f004 0403 	and.w	r4, r4, #3
 80025ce:	3c01      	subs	r4, #1
 80025d0:	2c01      	cmp	r4, #1
 80025d2:	d984      	bls.n	80024de <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d4:	684c      	ldr	r4, [r1, #4]
 80025d6:	f004 0403 	and.w	r4, r4, #3
 80025da:	2c03      	cmp	r4, #3
 80025dc:	d00c      	beq.n	80025f8 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80025de:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025e0:	005d      	lsls	r5, r3, #1
 80025e2:	f04f 0c03 	mov.w	ip, #3
 80025e6:	fa0c fc05 	lsl.w	ip, ip, r5
 80025ea:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ee:	688c      	ldr	r4, [r1, #8]
 80025f0:	40ac      	lsls	r4, r5
 80025f2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80025f6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	684c      	ldr	r4, [r1, #4]
 80025fa:	f004 0403 	and.w	r4, r4, #3
 80025fe:	2c02      	cmp	r4, #2
 8002600:	d081      	beq.n	8002506 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8002602:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002604:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002608:	f04f 0c03 	mov.w	ip, #3
 800260c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002610:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002614:	684c      	ldr	r4, [r1, #4]
 8002616:	f004 0403 	and.w	r4, r4, #3
 800261a:	fa04 f40e 	lsl.w	r4, r4, lr
 800261e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002622:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002624:	684c      	ldr	r4, [r1, #4]
 8002626:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800262a:	d0c1      	beq.n	80025b0 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 800262c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002630:	f10c 0502 	add.w	r5, ip, #2
 8002634:	4c0e      	ldr	r4, [pc, #56]	@ (8002670 <HAL_GPIO_Init+0x198>)
 8002636:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800263a:	f003 0e03 	and.w	lr, r3, #3
 800263e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002642:	2407      	movs	r4, #7
 8002644:	fa04 f40e 	lsl.w	r4, r4, lr
 8002648:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800264c:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8002650:	f43f af71 	beq.w	8002536 <HAL_GPIO_Init+0x5e>
 8002654:	4c08      	ldr	r4, [pc, #32]	@ (8002678 <HAL_GPIO_Init+0x1a0>)
 8002656:	42a0      	cmp	r0, r4
 8002658:	d006      	beq.n	8002668 <HAL_GPIO_Init+0x190>
 800265a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800265e:	42a0      	cmp	r0, r4
 8002660:	f43f af67 	beq.w	8002532 <HAL_GPIO_Init+0x5a>
 8002664:	2407      	movs	r4, #7
 8002666:	e767      	b.n	8002538 <HAL_GPIO_Init+0x60>
 8002668:	2401      	movs	r4, #1
 800266a:	e765      	b.n	8002538 <HAL_GPIO_Init+0x60>
  }
}
 800266c:	bd70      	pop	{r4, r5, r6, pc}
 800266e:	bf00      	nop
 8002670:	40010000 	.word	0x40010000
 8002674:	58000800 	.word	0x58000800
 8002678:	48000400 	.word	0x48000400

0800267c <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 800267c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800267e:	fa31 f203 	lsrs.w	r2, r1, r3
 8002682:	d071      	beq.n	8002768 <HAL_GPIO_DeInit+0xec>
{
 8002684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002686:	e02e      	b.n	80026e6 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002688:	2502      	movs	r5, #2
 800268a:	e000      	b.n	800268e <HAL_GPIO_DeInit+0x12>
 800268c:	2500      	movs	r5, #0
 800268e:	fa05 f50c 	lsl.w	r5, r5, ip
 8002692:	42a5      	cmp	r5, r4
 8002694:	d049      	beq.n	800272a <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002696:	6804      	ldr	r4, [r0, #0]
 8002698:	005d      	lsls	r5, r3, #1
 800269a:	f04f 0c03 	mov.w	ip, #3
 800269e:	fa0c fc05 	lsl.w	ip, ip, r5
 80026a2:	ea44 040c 	orr.w	r4, r4, ip
 80026a6:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80026a8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80026ac:	f10e 0e08 	add.w	lr, lr, #8
 80026b0:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80026b4:	f003 0607 	and.w	r6, r3, #7
 80026b8:	00b6      	lsls	r6, r6, #2
 80026ba:	250f      	movs	r5, #15
 80026bc:	40b5      	lsls	r5, r6
 80026be:	ea24 0405 	bic.w	r4, r4, r5
 80026c2:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026c6:	6884      	ldr	r4, [r0, #8]
 80026c8:	ea24 040c 	bic.w	r4, r4, ip
 80026cc:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ce:	6844      	ldr	r4, [r0, #4]
 80026d0:	ea24 0202 	bic.w	r2, r4, r2
 80026d4:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026d6:	68c2      	ldr	r2, [r0, #12]
 80026d8:	ea22 020c 	bic.w	r2, r2, ip
 80026dc:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80026de:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80026e0:	fa31 f203 	lsrs.w	r2, r1, r3
 80026e4:	d03f      	beq.n	8002766 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80026e6:	2201      	movs	r2, #1
 80026e8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80026ea:	ea12 0701 	ands.w	r7, r2, r1
 80026ee:	d0f6      	beq.n	80026de <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80026f0:	089e      	lsrs	r6, r3, #2
 80026f2:	1cb5      	adds	r5, r6, #2
 80026f4:	4c1d      	ldr	r4, [pc, #116]	@ (800276c <HAL_GPIO_DeInit+0xf0>)
 80026f6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80026fa:	f003 0c03 	and.w	ip, r3, #3
 80026fe:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002702:	f04f 0e07 	mov.w	lr, #7
 8002706:	fa0e fe0c 	lsl.w	lr, lr, ip
 800270a:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800270e:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8002712:	d0bb      	beq.n	800268c <HAL_GPIO_DeInit+0x10>
 8002714:	4d16      	ldr	r5, [pc, #88]	@ (8002770 <HAL_GPIO_DeInit+0xf4>)
 8002716:	42a8      	cmp	r0, r5
 8002718:	d005      	beq.n	8002726 <HAL_GPIO_DeInit+0xaa>
 800271a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800271e:	42a8      	cmp	r0, r5
 8002720:	d0b2      	beq.n	8002688 <HAL_GPIO_DeInit+0xc>
 8002722:	2507      	movs	r5, #7
 8002724:	e7b3      	b.n	800268e <HAL_GPIO_DeInit+0x12>
 8002726:	2501      	movs	r5, #1
 8002728:	e7b1      	b.n	800268e <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800272a:	4c12      	ldr	r4, [pc, #72]	@ (8002774 <HAL_GPIO_DeInit+0xf8>)
 800272c:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8002730:	ea25 0507 	bic.w	r5, r5, r7
 8002734:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002738:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 800273c:	ea25 0507 	bic.w	r5, r5, r7
 8002740:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8002744:	6825      	ldr	r5, [r4, #0]
 8002746:	ea25 0507 	bic.w	r5, r5, r7
 800274a:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800274c:	6865      	ldr	r5, [r4, #4]
 800274e:	ea25 0507 	bic.w	r5, r5, r7
 8002752:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002754:	4d05      	ldr	r5, [pc, #20]	@ (800276c <HAL_GPIO_DeInit+0xf0>)
 8002756:	3602      	adds	r6, #2
 8002758:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 800275c:	ea24 040e 	bic.w	r4, r4, lr
 8002760:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8002764:	e797      	b.n	8002696 <HAL_GPIO_DeInit+0x1a>
  }
}
 8002766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40010000 	.word	0x40010000
 8002770:	48000400 	.word	0x48000400
 8002774:	58000800 	.word	0x58000800

08002778 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002778:	b10a      	cbz	r2, 800277e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800277a:	6181      	str	r1, [r0, #24]
 800277c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800277e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002780:	4770      	bx	lr
	...

08002784 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002784:	4a02      	ldr	r2, [pc, #8]	@ (8002790 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002786:	6813      	ldr	r3, [r2, #0]
 8002788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278c:	6013      	str	r3, [r2, #0]
}
 800278e:	4770      	bx	lr
 8002790:	58000400 	.word	0x58000400

08002794 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8002794:	4a1a      	ldr	r2, [pc, #104]	@ (8002800 <HAL_PWR_ConfigPVD+0x6c>)
 8002796:	6853      	ldr	r3, [r2, #4]
 8002798:	f023 030e 	bic.w	r3, r3, #14
 800279c:	6801      	ldr	r1, [r0, #0]
 800279e:	430b      	orrs	r3, r1
 80027a0:	6053      	str	r3, [r2, #4]
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80027a2:	4b18      	ldr	r3, [pc, #96]	@ (8002804 <HAL_PWR_ConfigPVD+0x70>)
 80027a4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80027a8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027be:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80027c0:	6843      	ldr	r3, [r0, #4]
 80027c2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80027c6:	d006      	beq.n	80027d6 <HAL_PWR_ConfigPVD+0x42>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80027c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002804 <HAL_PWR_ConfigPVD+0x70>)
 80027ca:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80027d6:	6843      	ldr	r3, [r0, #4]
 80027d8:	f013 0f01 	tst.w	r3, #1
 80027dc:	d004      	beq.n	80027e8 <HAL_PWR_ConfigPVD+0x54>
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80027de:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <HAL_PWR_ConfigPVD+0x70>)
 80027e0:	6853      	ldr	r3, [r2, #4]
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e6:	6053      	str	r3, [r2, #4]
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80027e8:	6843      	ldr	r3, [r0, #4]
 80027ea:	f013 0f02 	tst.w	r3, #2
 80027ee:	d004      	beq.n	80027fa <HAL_PWR_ConfigPVD+0x66>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80027f0:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <HAL_PWR_ConfigPVD+0x70>)
 80027f2:	6813      	ldr	r3, [r2, #0]
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
  }

  return HAL_OK;
}
 80027fa:	2000      	movs	r0, #0
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	58000400 	.word	0x58000400
 8002804:	58000800 	.word	0x58000800

08002808 <HAL_PWR_EnablePVD>:
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8002808:	4a02      	ldr	r2, [pc, #8]	@ (8002814 <HAL_PWR_EnablePVD+0xc>)
 800280a:	6853      	ldr	r3, [r2, #4]
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6053      	str	r3, [r2, #4]
}
 8002812:	4770      	bx	lr
 8002814:	58000400 	.word	0x58000400

08002818 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002818:	b510      	push	{r4, lr}
 800281a:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800281c:	b9a0      	cbnz	r0, 8002848 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800281e:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <HAL_PWR_EnterSLEEPMode+0x44>)
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002826:	d10a      	bne.n	800283e <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002828:	4a0d      	ldr	r2, [pc, #52]	@ (8002860 <HAL_PWR_EnterSLEEPMode+0x48>)
 800282a:	6913      	ldr	r3, [r2, #16]
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002832:	2c01      	cmp	r4, #1
 8002834:	d010      	beq.n	8002858 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002836:	bf40      	sev
    __WFE();
 8002838:	bf20      	wfe
    __WFE();
 800283a:	bf20      	wfe
  }
}
 800283c:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800283e:	f000 f82d 	bl	800289c <HAL_PWREx_DisableLowPowerRunMode>
 8002842:	2800      	cmp	r0, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_PWR_EnterSLEEPMode+0x10>
 8002846:	e7f9      	b.n	800283c <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <HAL_PWR_EnterSLEEPMode+0x44>)
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002850:	d1ea      	bne.n	8002828 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8002852:	f000 f81b 	bl	800288c <HAL_PWREx_EnableLowPowerRunMode>
 8002856:	e7e7      	b.n	8002828 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8002858:	bf30      	wfi
 800285a:	e7ef      	b.n	800283c <HAL_PWR_EnterSLEEPMode+0x24>
 800285c:	58000400 	.word	0x58000400
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002864:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002866:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800286a:	d003      	beq.n	8002874 <HAL_PWR_EnterSTOPMode+0x10>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 800286c:	4608      	mov	r0, r1
 800286e:	f000 f83b 	bl	80028e8 <HAL_PWREx_EnterSTOP0Mode>
  }
}
 8002872:	bd08      	pop	{r3, pc}
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8002874:	4608      	mov	r0, r1
 8002876:	f000 f853 	bl	8002920 <HAL_PWREx_EnterSTOP1Mode>
 800287a:	e7fa      	b.n	8002872 <HAL_PWR_EnterSTOPMode+0xe>

0800287c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800287c:	4b02      	ldr	r3, [pc, #8]	@ (8002888 <HAL_PWREx_GetVoltageRange+0xc>)
 800287e:	6818      	ldr	r0, [r3, #0]
}
 8002880:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	58000400 	.word	0x58000400

0800288c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800288c:	4a02      	ldr	r2, [pc, #8]	@ (8002898 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800288e:	6813      	ldr	r3, [r2, #0]
 8002890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002894:	6013      	str	r3, [r2, #0]
}
 8002896:	4770      	bx	lr
 8002898:	58000400 	.word	0x58000400

0800289c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800289c:	4a0f      	ldr	r2, [pc, #60]	@ (80028dc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800289e:	6813      	ldr	r3, [r2, #0]
 80028a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028a4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2232      	movs	r2, #50	@ 0x32
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	4a0c      	ldr	r2, [pc, #48]	@ (80028e4 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80028b8:	e000      	b.n	80028bc <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80028ba:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80028bc:	4a07      	ldr	r2, [pc, #28]	@ (80028dc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80028be:	6952      	ldr	r2, [r2, #20]
 80028c0:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80028c4:	d001      	beq.n	80028ca <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f7      	bne.n	80028ba <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80028ca:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80028d2:	d101      	bne.n	80028d8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80028d4:	2000      	movs	r0, #0
 80028d6:	4770      	bx	lr
    return HAL_TIMEOUT;
 80028d8:	2003      	movs	r0, #3
}
 80028da:	4770      	bx	lr
 80028dc:	58000400 	.word	0x58000400
 80028e0:	20000000 	.word	0x20000000
 80028e4:	431bde83 	.word	0x431bde83

080028e8 <HAL_PWREx_EnterSTOP0Mode>:
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP0);

#else
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80028e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002918 <HAL_PWREx_EnterSTOP0Mode+0x30>)
 80028ea:	6813      	ldr	r3, [r2, #0]
 80028ec:	f023 0307 	bic.w	r3, r3, #7
 80028f0:	6013      	str	r3, [r2, #0]

#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80028f2:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <HAL_PWREx_EnterSTOP0Mode+0x34>)
 80028f4:	6913      	ldr	r3, [r2, #16]
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80028fc:	2801      	cmp	r0, #1
 80028fe:	d008      	beq.n	8002912 <HAL_PWREx_EnterSTOP0Mode+0x2a>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002900:	bf40      	sev
    __WFE();
 8002902:	bf20      	wfe
    __WFE();
 8002904:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002906:	4a05      	ldr	r2, [pc, #20]	@ (800291c <HAL_PWREx_EnterSTOP0Mode+0x34>)
 8002908:	6913      	ldr	r3, [r2, #16]
 800290a:	f023 0304 	bic.w	r3, r3, #4
 800290e:	6113      	str	r3, [r2, #16]
}
 8002910:	4770      	bx	lr
    __WFI();
 8002912:	bf30      	wfi
 8002914:	e7f7      	b.n	8002906 <HAL_PWREx_EnterSTOP0Mode+0x1e>
 8002916:	bf00      	nop
 8002918:	58000400 	.word	0x58000400
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <HAL_PWREx_EnterSTOP1Mode>:
#ifdef CORE_CM0PLUS
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
#else
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002920:	4a0c      	ldr	r2, [pc, #48]	@ (8002954 <HAL_PWREx_EnterSTOP1Mode+0x34>)
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	f023 0307 	bic.w	r3, r3, #7
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800292e:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 8002930:	6913      	ldr	r3, [r2, #16]
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002938:	2801      	cmp	r0, #1
 800293a:	d008      	beq.n	800294e <HAL_PWREx_EnterSTOP1Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800293c:	bf40      	sev
    __WFE();
 800293e:	bf20      	wfe
    __WFE();
 8002940:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002942:	4a05      	ldr	r2, [pc, #20]	@ (8002958 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 8002944:	6913      	ldr	r3, [r2, #16]
 8002946:	f023 0304 	bic.w	r3, r3, #4
 800294a:	6113      	str	r3, [r2, #16]
}
 800294c:	4770      	bx	lr
    __WFI();
 800294e:	bf30      	wfi
 8002950:	e7f7      	b.n	8002942 <HAL_PWREx_EnterSTOP1Mode+0x22>
 8002952:	bf00      	nop
 8002954:	58000400 	.word	0x58000400
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800295c:	4a0c      	ldr	r2, [pc, #48]	@ (8002990 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	f023 0307 	bic.w	r3, r3, #7
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800296a:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800296c:	6913      	ldr	r3, [r2, #16]
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002974:	2801      	cmp	r0, #1
 8002976:	d008      	beq.n	800298a <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002978:	bf40      	sev
    __WFE();
 800297a:	bf20      	wfe
    __WFE();
 800297c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800297e:	4a05      	ldr	r2, [pc, #20]	@ (8002994 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8002980:	6913      	ldr	r3, [r2, #16]
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	6113      	str	r3, [r2, #16]
}
 8002988:	4770      	bx	lr
    __WFI();
 800298a:	bf30      	wfi
 800298c:	e7f7      	b.n	800297e <HAL_PWREx_EnterSTOP2Mode+0x22>
 800298e:	bf00      	nop
 8002990:	58000400 	.word	0x58000400
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002998:	b530      	push	{r4, r5, lr}
 800299a:	b089      	sub	sp, #36	@ 0x24
 800299c:	4604      	mov	r4, r0
 800299e:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80029a0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <RCC_SetFlashLatency+0xb4>)
 80029a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029a6:	9006      	str	r0, [sp, #24]
 80029a8:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80029ac:	f103 0208 	add.w	r2, r3, #8
 80029b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029b4:	9004      	str	r0, [sp, #16]
 80029b6:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80029ba:	ad01      	add	r5, sp, #4
 80029bc:	3310      	adds	r3, #16
 80029be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c6:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80029ca:	d007      	beq.n	80029dc <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	e014      	b.n	80029fa <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 80029d0:	aa08      	add	r2, sp, #32
 80029d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80029d6:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80029da:	e01e      	b.n	8002a1a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029dc:	2300      	movs	r3, #0
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d808      	bhi.n	80029f4 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029e2:	aa08      	add	r2, sp, #32
 80029e4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80029e8:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80029ec:	42a2      	cmp	r2, r4
 80029ee:	d2ef      	bcs.n	80029d0 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029f0:	3301      	adds	r3, #1
 80029f2:	e7f4      	b.n	80029de <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029f4:	2500      	movs	r5, #0
 80029f6:	e010      	b.n	8002a1a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029f8:	3301      	adds	r3, #1
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d80c      	bhi.n	8002a18 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80029fe:	aa08      	add	r2, sp, #32
 8002a00:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002a04:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8002a08:	42a2      	cmp	r2, r4
 8002a0a:	d3f5      	bcc.n	80029f8 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a0c:	aa08      	add	r2, sp, #32
 8002a0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002a12:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8002a16:	e000      	b.n	8002a1a <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002a18:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <RCC_SetFlashLatency+0xb8>)
 8002a1c:	6813      	ldr	r3, [r2, #0]
 8002a1e:	f023 0307 	bic.w	r3, r3, #7
 8002a22:	432b      	orrs	r3, r5
 8002a24:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a26:	f7fd fffb 	bl	8000a20 <HAL_GetTick>
 8002a2a:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <RCC_SetFlashLatency+0xb8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	42ab      	cmp	r3, r5
 8002a36:	d006      	beq.n	8002a46 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a38:	f7fd fff2 	bl	8000a20 <HAL_GetTick>
 8002a3c:	1b00      	subs	r0, r0, r4
 8002a3e:	2802      	cmp	r0, #2
 8002a40:	d9f4      	bls.n	8002a2c <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8002a42:	2003      	movs	r0, #3
 8002a44:	e000      	b.n	8002a48 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8002a46:	2000      	movs	r0, #0
}
 8002a48:	b009      	add	sp, #36	@ 0x24
 8002a4a:	bd30      	pop	{r4, r5, pc}
 8002a4c:	08008640 	.word	0x08008640
 8002a50:	58004000 	.word	0x58004000

08002a54 <RCC_SetFlashLatencyFromMSIRange>:
{
 8002a54:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002a56:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8002a5c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a64:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	4a08      	ldr	r2, [pc, #32]	@ (8002a90 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8002a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a72:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a76:	f7ff ff01 	bl	800287c <HAL_PWREx_GetVoltageRange>
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8002a7e:	fba3 3404 	umull	r3, r4, r3, r4
 8002a82:	0ca0      	lsrs	r0, r4, #18
 8002a84:	f7ff ff88 	bl	8002998 <RCC_SetFlashLatency>
}
 8002a88:	bd10      	pop	{r4, pc}
 8002a8a:	bf00      	nop
 8002a8c:	08008770 	.word	0x08008770
 8002a90:	080087d0 	.word	0x080087d0
 8002a94:	431bde83 	.word	0x431bde83

08002a98 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9c:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002aa4:	f011 010c 	ands.w	r1, r1, #12
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x28>
 8002aaa:	290c      	cmp	r1, #12
 8002aac:	d006      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aae:	2904      	cmp	r1, #4
 8002ab0:	d047      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab2:	2908      	cmp	r1, #8
 8002ab4:	d03b      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8002ab6:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8002ab8:	4610      	mov	r0, r2
 8002aba:	e026      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d1f6      	bne.n	8002aae <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f013 0308 	ands.w	r3, r3, #8
 8002aca:	d00d      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x50>
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f013 0308 	ands.w	r3, r3, #8
 8002ad6:	d124      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002ad8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002adc:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ae2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ae6:	e00e      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002ae8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	f012 0f08 	tst.w	r2, #8
 8002af2:	d112      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002b00:	4a26      	ldr	r2, [pc, #152]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b06:	b1d1      	cbz	r1, 8002b3e <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8002b08:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d01a      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0xb6>
}
 8002b18:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002b1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	e7ee      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x68>
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b26:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002b28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b2c:	e7d8      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8002b3a:	4819      	ldr	r0, [pc, #100]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3c:	e7e5      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8002b3e:	4610      	mov	r0, r2
 8002b40:	e7e3      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8002b42:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8002b44:	4817      	ldr	r0, [pc, #92]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b46:	e7e0      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8002b48:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8002b4a:	4816      	ldr	r0, [pc, #88]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b4c:	e7dd      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d009      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0xd8>
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d108      	bne.n	8002b72 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002b6a:	d115      	bne.n	8002b98 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8002b70:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002b72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b76:	68cb      	ldr	r3, [r1, #12]
 8002b78:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002b7c:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002b80:	68cb      	ldr	r3, [r1, #12]
 8002b82:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002b86:	3301      	adds	r3, #1
 8002b88:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002b8c:	68c8      	ldr	r0, [r1, #12]
 8002b8e:	0f40      	lsrs	r0, r0, #29
 8002b90:	3001      	adds	r0, #1
 8002b92:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8002b96:	e7bf      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8002b98:	4a02      	ldr	r2, [pc, #8]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b9a:	e7ea      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0xda>
 8002b9c:	08008770 	.word	0x08008770
 8002ba0:	01e84800 	.word	0x01e84800
 8002ba4:	00f42400 	.word	0x00f42400

08002ba8 <HAL_RCC_GetHCLKFreq>:
{
 8002ba8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002baa:	f7ff ff75 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bb8:	4a02      	ldr	r2, [pc, #8]	@ (8002bc4 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002bbe:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bc2:	bd08      	pop	{r3, pc}
 8002bc4:	080087d0 	.word	0x080087d0

08002bc8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	f000 8311 	beq.w	80031f0 <HAL_RCC_OscConfig+0x628>
{
 8002bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd0:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd6:	689d      	ldr	r5, [r3, #8]
 8002bd8:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002bdc:	68de      	ldr	r6, [r3, #12]
 8002bde:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002be2:	6803      	ldr	r3, [r0, #0]
 8002be4:	f013 0f20 	tst.w	r3, #32
 8002be8:	d02a      	beq.n	8002c40 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002bea:	2d00      	cmp	r5, #0
 8002bec:	d065      	beq.n	8002cba <HAL_RCC_OscConfig+0xf2>
 8002bee:	2d0c      	cmp	r5, #12
 8002bf0:	d061      	beq.n	8002cb6 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bf2:	6a23      	ldr	r3, [r4, #32]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80bf 	beq.w	8002d78 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002bfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bfe:	6813      	ldr	r3, [r2, #0]
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c06:	f7fd ff0b 	bl	8000a20 <HAL_GetTick>
 8002c0a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f013 0f02 	tst.w	r3, #2
 8002c16:	f000 80a7 	beq.w	8002d68 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	f042 0208 	orr.w	r2, r2, #8
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002c2c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c32:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002c3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c3e:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	f013 0f01 	tst.w	r3, #1
 8002c46:	f000 80b5 	beq.w	8002db4 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c4a:	2d08      	cmp	r5, #8
 8002c4c:	f000 80ae 	beq.w	8002dac <HAL_RCC_OscConfig+0x1e4>
 8002c50:	2d0c      	cmp	r5, #12
 8002c52:	f000 80a8 	beq.w	8002da6 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002c56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c5a:	6813      	ldr	r3, [r2, #0]
 8002c5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c60:	68a1      	ldr	r1, [r4, #8]
 8002c62:	430b      	orrs	r3, r1
 8002c64:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c66:	6863      	ldr	r3, [r4, #4]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c6c:	f000 80c4 	beq.w	8002df8 <HAL_RCC_OscConfig+0x230>
 8002c70:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002c74:	f000 80c5 	beq.w	8002e02 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c82:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002c8a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8c:	6863      	ldr	r3, [r4, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80c2 	beq.w	8002e18 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8002c94:	f7fd fec4 	bl	8000a20 <HAL_GetTick>
 8002c98:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002ca4:	f040 8086 	bne.w	8002db4 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fd feba 	bl	8000a20 <HAL_GetTick>
 8002cac:	1bc0      	subs	r0, r0, r7
 8002cae:	2864      	cmp	r0, #100	@ 0x64
 8002cb0:	d9f3      	bls.n	8002c9a <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8002cb2:	2003      	movs	r0, #3
 8002cb4:	e2a9      	b.n	800320a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cb6:	2e01      	cmp	r6, #1
 8002cb8:	d19b      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002cba:	6a23      	ldr	r3, [r4, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8299 	beq.w	80031f4 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cc2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f013 0f08 	tst.w	r3, #8
 8002cce:	d029      	beq.n	8002d24 <HAL_RCC_OscConfig+0x15c>
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cda:	4298      	cmp	r0, r3
 8002cdc:	d92a      	bls.n	8002d34 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cde:	f7ff feb9 	bl	8002a54 <RCC_SetFlashLatencyFromMSIRange>
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	f040 8288 	bne.w	80031f8 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	f042 0208 	orr.w	r2, r2, #8
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002cfa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d00:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d0c:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d0e:	f7ff ff4b 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002d12:	4bba      	ldr	r3, [pc, #744]	@ (8002ffc <HAL_RCC_OscConfig+0x434>)
 8002d14:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002d16:	4bba      	ldr	r3, [pc, #744]	@ (8003000 <HAL_RCC_OscConfig+0x438>)
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	f7fd fe7f 	bl	8000a1c <HAL_InitTick>
        if (status != HAL_OK)
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d08e      	beq.n	8002c40 <HAL_RCC_OscConfig+0x78>
 8002d22:	e272      	b.n	800320a <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d32:	e7d2      	b.n	8002cda <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	f042 0208 	orr.w	r2, r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002d46:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d4c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d58:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d5a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002d5c:	f7ff fe7a 	bl	8002a54 <RCC_SetFlashLatencyFromMSIRange>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d0d4      	beq.n	8002d0e <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8002d64:	2001      	movs	r0, #1
 8002d66:	e250      	b.n	800320a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d68:	f7fd fe5a 	bl	8000a20 <HAL_GetTick>
 8002d6c:	1bc0      	subs	r0, r0, r7
 8002d6e:	2802      	cmp	r0, #2
 8002d70:	f67f af4c 	bls.w	8002c0c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8002d74:	2003      	movs	r0, #3
 8002d76:	e248      	b.n	800320a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002d78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d7c:	6813      	ldr	r3, [r2, #0]
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d84:	f7fd fe4c 	bl	8000a20 <HAL_GetTick>
 8002d88:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f013 0f02 	tst.w	r3, #2
 8002d94:	f43f af54 	beq.w	8002c40 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d98:	f7fd fe42 	bl	8000a20 <HAL_GetTick>
 8002d9c:	1bc0      	subs	r0, r0, r7
 8002d9e:	2802      	cmp	r0, #2
 8002da0:	d9f3      	bls.n	8002d8a <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8002da2:	2003      	movs	r0, #3
 8002da4:	e231      	b.n	800320a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002da6:	2e03      	cmp	r6, #3
 8002da8:	f47f af55 	bne.w	8002c56 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002dac:	6863      	ldr	r3, [r4, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8224 	beq.w	80031fc <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	f013 0f02 	tst.w	r3, #2
 8002dba:	d056      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002dbc:	2d04      	cmp	r5, #4
 8002dbe:	d03d      	beq.n	8002e3c <HAL_RCC_OscConfig+0x274>
 8002dc0:	2d0c      	cmp	r5, #12
 8002dc2:	d039      	beq.n	8002e38 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc4:	6923      	ldr	r3, [r4, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 808a 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002dcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002dd8:	f7fd fe22 	bl	8000a20 <HAL_GetTick>
 8002ddc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002de8:	d136      	bne.n	8002e58 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dea:	f7fd fe19 	bl	8000a20 <HAL_GetTick>
 8002dee:	1b80      	subs	r0, r0, r6
 8002df0:	2802      	cmp	r0, #2
 8002df2:	d9f4      	bls.n	8002dde <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8002df4:	2003      	movs	r0, #3
 8002df6:	e208      	b.n	800320a <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002df8:	6813      	ldr	r3, [r2, #0]
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	e744      	b.n	8002c8c <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8002e0c:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	e739      	b.n	8002c8c <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8002e18:	f7fd fe02 	bl	8000a20 <HAL_GetTick>
 8002e1c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002e28:	d0c4      	beq.n	8002db4 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2a:	f7fd fdf9 	bl	8000a20 <HAL_GetTick>
 8002e2e:	1bc0      	subs	r0, r0, r7
 8002e30:	2864      	cmp	r0, #100	@ 0x64
 8002e32:	d9f4      	bls.n	8002e1e <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8002e34:	2003      	movs	r0, #3
 8002e36:	e1e8      	b.n	800320a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e38:	2e02      	cmp	r6, #2
 8002e3a:	d1c3      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 81de 	beq.w	8003200 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e4a:	6853      	ldr	r3, [r2, #4]
 8002e4c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002e50:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e54:	6053      	str	r3, [r2, #4]
}
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e5e:	6853      	ldr	r3, [r2, #4]
 8002e60:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002e64:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e68:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	f013 0f08 	tst.w	r3, #8
 8002e70:	d07e      	beq.n	8002f70 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e72:	69a3      	ldr	r3, [r4, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d062      	beq.n	8002f3e <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002e80:	69e1      	ldr	r1, [r4, #28]
 8002e82:	f003 0210 	and.w	r2, r3, #16
 8002e86:	4291      	cmp	r1, r2
 8002e88:	d011      	beq.n	8002eae <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	2a02      	cmp	r2, #2
 8002e90:	f000 81b8 	beq.w	8003204 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002e94:	f013 0f01 	tst.w	r3, #1
 8002e98:	d138      	bne.n	8002f0c <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002e9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e9e:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002ea2:	f023 0310 	bic.w	r3, r3, #16
 8002ea6:	69e1      	ldr	r1, [r4, #28]
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002eae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eb2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002ebe:	f7fd fdaf 	bl	8000a20 <HAL_GetTick>
 8002ec2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ecc:	f013 0f02 	tst.w	r3, #2
 8002ed0:	d14e      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fd fda5 	bl	8000a20 <HAL_GetTick>
 8002ed6:	1b80      	subs	r0, r0, r6
 8002ed8:	2811      	cmp	r0, #17
 8002eda:	d9f3      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8002edc:	2003      	movs	r0, #3
 8002ede:	e194      	b.n	800320a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ee4:	6813      	ldr	r3, [r2, #0]
 8002ee6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002eec:	f7fd fd98 	bl	8000a20 <HAL_GetTick>
 8002ef0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002efc:	d0b5      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fd fd8f 	bl	8000a20 <HAL_GetTick>
 8002f02:	1b80      	subs	r0, r0, r6
 8002f04:	2802      	cmp	r0, #2
 8002f06:	d9f4      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8002f08:	2003      	movs	r0, #3
 8002f0a:	e17e      	b.n	800320a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f10:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8002f1c:	f7fd fd80 	bl	8000a20 <HAL_GetTick>
 8002f20:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f2a:	f013 0f02 	tst.w	r3, #2
 8002f2e:	d0b4      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fd fd76 	bl	8000a20 <HAL_GetTick>
 8002f34:	1b80      	subs	r0, r0, r6
 8002f36:	2811      	cmp	r0, #17
 8002f38:	d9f3      	bls.n	8002f22 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8002f3a:	2003      	movs	r0, #3
 8002f3c:	e165      	b.n	800320a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f42:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002f4e:	f7fd fd67 	bl	8000a20 <HAL_GetTick>
 8002f52:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f5c:	f013 0f02 	tst.w	r3, #2
 8002f60:	d006      	beq.n	8002f70 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f62:	f7fd fd5d 	bl	8000a20 <HAL_GetTick>
 8002f66:	1b80      	subs	r0, r0, r6
 8002f68:	2811      	cmp	r0, #17
 8002f6a:	d9f3      	bls.n	8002f54 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	e14c      	b.n	800320a <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	f013 0f04 	tst.w	r3, #4
 8002f76:	f000 80b8 	beq.w	80030ea <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002f7a:	4b22      	ldr	r3, [pc, #136]	@ (8003004 <HAL_RCC_OscConfig+0x43c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002f82:	d110      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8002f84:	f7ff fbfe 	bl	8002784 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002f88:	f7fd fd4a 	bl	8000a20 <HAL_GetTick>
 8002f8c:	4606      	mov	r6, r0
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003004 <HAL_RCC_OscConfig+0x43c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f98:	f7fd fd42 	bl	8000a20 <HAL_GetTick>
 8002f9c:	1b80      	subs	r0, r0, r6
 8002f9e:	2802      	cmp	r0, #2
 8002fa0:	d9f5      	bls.n	8002f8e <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8002fa2:	2003      	movs	r0, #3
 8002fa4:	e131      	b.n	800320a <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa6:	68e3      	ldr	r3, [r4, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d068      	beq.n	800307e <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002fac:	2b85      	cmp	r3, #133	@ 0x85
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fb8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8002fc4:	f7fd fd2c 	bl	8000a20 <HAL_GetTick>
 8002fc8:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fce:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe2:	f013 0f02 	tst.w	r3, #2
 8002fe6:	d10f      	bne.n	8003008 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe8:	f7fd fd1a 	bl	8000a20 <HAL_GetTick>
 8002fec:	1b80      	subs	r0, r0, r6
 8002fee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ff2:	4298      	cmp	r0, r3
 8002ff4:	d9f1      	bls.n	8002fda <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	e107      	b.n	800320a <HAL_RCC_OscConfig+0x642>
 8002ffa:	bf00      	nop
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000004 	.word	0x20000004
 8003004:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003008:	68e3      	ldr	r3, [r4, #12]
 800300a:	2b81      	cmp	r3, #129	@ 0x81
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800300e:	2b85      	cmp	r3, #133	@ 0x85
 8003010:	d11a      	bne.n	8003048 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8003012:	f7fd fd05 	bl	8000a20 <HAL_GetTick>
 8003016:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003018:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800301c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003030:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003034:	d159      	bne.n	80030ea <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fd fcf3 	bl	8000a20 <HAL_GetTick>
 800303a:	1b80      	subs	r0, r0, r6
 800303c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003040:	4298      	cmp	r0, r3
 8003042:	d9f1      	bls.n	8003028 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8003044:	2003      	movs	r0, #3
 8003046:	e0e0      	b.n	800320a <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8003048:	f7fd fcea 	bl	8000a20 <HAL_GetTick>
 800304c:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800304e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003052:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800305a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003066:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800306a:	d03e      	beq.n	80030ea <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fd fcd8 	bl	8000a20 <HAL_GetTick>
 8003070:	1b80      	subs	r0, r0, r6
 8003072:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003076:	4298      	cmp	r0, r3
 8003078:	d9f1      	bls.n	800305e <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 800307a:	2003      	movs	r0, #3
 800307c:	e0c5      	b.n	800320a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 800307e:	f7fd fccf 	bl	8000a20 <HAL_GetTick>
 8003082:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003084:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003088:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800308c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80030a0:	d008      	beq.n	80030b4 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fd fcbd 	bl	8000a20 <HAL_GetTick>
 80030a6:	1b80      	subs	r0, r0, r6
 80030a8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030ac:	4298      	cmp	r0, r3
 80030ae:	d9f1      	bls.n	8003094 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 80030b0:	2003      	movs	r0, #3
 80030b2:	e0aa      	b.n	800320a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80030b4:	f7fd fcb4 	bl	8000a20 <HAL_GetTick>
 80030b8:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030be:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d2:	f013 0f02 	tst.w	r3, #2
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7fd fca2 	bl	8000a20 <HAL_GetTick>
 80030dc:	1b80      	subs	r0, r0, r6
 80030de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030e2:	4298      	cmp	r0, r3
 80030e4:	d9f1      	bls.n	80030ca <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 80030e6:	2003      	movs	r0, #3
 80030e8:	e08f      	b.n	800320a <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 808b 	beq.w	8003208 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f2:	2d0c      	cmp	r5, #12
 80030f4:	d060      	beq.n	80031b8 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d016      	beq.n	8003128 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80030fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003104:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003106:	f7fd fc8b 	bl	8000a20 <HAL_GetTick>
 800310a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003116:	d148      	bne.n	80031aa <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003118:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800311c:	68d1      	ldr	r1, [r2, #12]
 800311e:	4b41      	ldr	r3, [pc, #260]	@ (8003224 <HAL_RCC_OscConfig+0x65c>)
 8003120:	400b      	ands	r3, r1
 8003122:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8003124:	2000      	movs	r0, #0
 8003126:	e070      	b.n	800320a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003128:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800312c:	6813      	ldr	r3, [r2, #0]
 800312e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003132:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003134:	f7fd fc74 	bl	8000a20 <HAL_GetTick>
 8003138:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800313a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003144:	d12a      	bne.n	800319c <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003146:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800314a:	68d3      	ldr	r3, [r2, #12]
 800314c:	4936      	ldr	r1, [pc, #216]	@ (8003228 <HAL_RCC_OscConfig+0x660>)
 800314e:	4019      	ands	r1, r3
 8003150:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003152:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003154:	4303      	orrs	r3, r0
 8003156:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003158:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800315c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800315e:	4303      	orrs	r3, r0
 8003160:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003162:	4303      	orrs	r3, r0
 8003164:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003166:	4303      	orrs	r3, r0
 8003168:	4319      	orrs	r1, r3
 800316a:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800316c:	6813      	ldr	r3, [r2, #0]
 800316e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003172:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003174:	68d3      	ldr	r3, [r2, #12]
 8003176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800317a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800317c:	f7fd fc50 	bl	8000a20 <HAL_GetTick>
 8003180:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800318c:	d13e      	bne.n	800320c <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318e:	f7fd fc47 	bl	8000a20 <HAL_GetTick>
 8003192:	1b00      	subs	r0, r0, r4
 8003194:	280a      	cmp	r0, #10
 8003196:	d9f4      	bls.n	8003182 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8003198:	2003      	movs	r0, #3
 800319a:	e036      	b.n	800320a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7fd fc40 	bl	8000a20 <HAL_GetTick>
 80031a0:	1b40      	subs	r0, r0, r5
 80031a2:	280a      	cmp	r0, #10
 80031a4:	d9c9      	bls.n	800313a <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 80031a6:	2003      	movs	r0, #3
 80031a8:	e02f      	b.n	800320a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fd fc39 	bl	8000a20 <HAL_GetTick>
 80031ae:	1b00      	subs	r0, r0, r4
 80031b0:	280a      	cmp	r0, #10
 80031b2:	d9ab      	bls.n	800310c <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 80031b4:	2003      	movs	r0, #3
 80031b6:	e028      	b.n	800320a <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d029      	beq.n	8003210 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c0:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80031c2:	f003 0103 	and.w	r1, r3, #3
 80031c6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80031c8:	4291      	cmp	r1, r2
 80031ca:	d123      	bne.n	8003214 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80031cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031d2:	428a      	cmp	r2, r1
 80031d4:	d120      	bne.n	8003218 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80031d6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031da:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80031dc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80031e2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80031e6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d119      	bne.n	8003220 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 80031ec:	2000      	movs	r0, #0
 80031ee:	e00c      	b.n	800320a <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 80031f0:	2001      	movs	r0, #1
}
 80031f2:	4770      	bx	lr
        return HAL_ERROR;
 80031f4:	2001      	movs	r0, #1
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 80031f8:	2001      	movs	r0, #1
 80031fa:	e006      	b.n	800320a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80031fc:	2001      	movs	r0, #1
 80031fe:	e004      	b.n	800320a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8003200:	2001      	movs	r0, #1
 8003202:	e002      	b.n	800320a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8003204:	2001      	movs	r0, #1
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8003208:	2000      	movs	r0, #0
}
 800320a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800320c:	2000      	movs	r0, #0
 800320e:	e7fc      	b.n	800320a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8003210:	2001      	movs	r0, #1
 8003212:	e7fa      	b.n	800320a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8003214:	2001      	movs	r0, #1
 8003216:	e7f8      	b.n	800320a <HAL_RCC_OscConfig+0x642>
 8003218:	2001      	movs	r0, #1
 800321a:	e7f6      	b.n	800320a <HAL_RCC_OscConfig+0x642>
 800321c:	2001      	movs	r0, #1
 800321e:	e7f4      	b.n	800320a <HAL_RCC_OscConfig+0x642>
 8003220:	2001      	movs	r0, #1
 8003222:	e7f2      	b.n	800320a <HAL_RCC_OscConfig+0x642>
 8003224:	eefefffc 	.word	0xeefefffc
 8003228:	11c1808c 	.word	0x11c1808c

0800322c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800322c:	2800      	cmp	r0, #0
 800322e:	f000 8127 	beq.w	8003480 <HAL_RCC_ClockConfig+0x254>
{
 8003232:	b570      	push	{r4, r5, r6, lr}
 8003234:	460c      	mov	r4, r1
 8003236:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b93      	ldr	r3, [pc, #588]	@ (8003488 <HAL_RCC_ClockConfig+0x25c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	428b      	cmp	r3, r1
 8003242:	d32d      	bcc.n	80032a0 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	f013 0f02 	tst.w	r3, #2
 800324a:	d13f      	bne.n	80032cc <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800324c:	682b      	ldr	r3, [r5, #0]
 800324e:	f013 0f20 	tst.w	r3, #32
 8003252:	d153      	bne.n	80032fc <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800325a:	d16a      	bne.n	8003332 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	f013 0f04 	tst.w	r3, #4
 8003262:	f040 8083 	bne.w	800336c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003266:	682b      	ldr	r3, [r5, #0]
 8003268:	f013 0f08 	tst.w	r3, #8
 800326c:	f040 8097 	bne.w	800339e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	f013 0f01 	tst.w	r3, #1
 8003276:	f000 80de 	beq.w	8003436 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327a:	686b      	ldr	r3, [r5, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	f000 80a8 	beq.w	80033d2 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003282:	2b03      	cmp	r3, #3
 8003284:	f000 80ad 	beq.w	80033e2 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 80b2 	bne.w	80033f2 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800328e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	f012 0f02 	tst.w	r2, #2
 8003298:	f040 80b1 	bne.w	80033fe <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800329c:	2001      	movs	r0, #1
 800329e:	e0ee      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a0:	4a79      	ldr	r2, [pc, #484]	@ (8003488 <HAL_RCC_ClockConfig+0x25c>)
 80032a2:	6813      	ldr	r3, [r2, #0]
 80032a4:	f023 0307 	bic.w	r3, r3, #7
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80032ac:	f7fd fbb8 	bl	8000a20 <HAL_GetTick>
 80032b0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b75      	ldr	r3, [pc, #468]	@ (8003488 <HAL_RCC_ClockConfig+0x25c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	42a3      	cmp	r3, r4
 80032bc:	d0c2      	beq.n	8003244 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032be:	f7fd fbaf 	bl	8000a20 <HAL_GetTick>
 80032c2:	1b80      	subs	r0, r0, r6
 80032c4:	2802      	cmp	r0, #2
 80032c6:	d9f4      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80032c8:	2003      	movs	r0, #3
 80032ca:	e0d8      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80032ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032d2:	688a      	ldr	r2, [r1, #8]
 80032d4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80032dc:	f7fd fba0 	bl	8000a20 <HAL_GetTick>
 80032e0:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80032e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80032ec:	d1ae      	bne.n	800324c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032ee:	f7fd fb97 	bl	8000a20 <HAL_GetTick>
 80032f2:	1b80      	subs	r0, r0, r6
 80032f4:	2802      	cmp	r0, #2
 80032f6:	d9f4      	bls.n	80032e2 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80032f8:	2003      	movs	r0, #3
 80032fa:	e0c0      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80032fc:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80032fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003302:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 8003306:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8003310:	f7fd fb86 	bl	8000a20 <HAL_GetTick>
 8003314:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800331a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800331e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003322:	d197      	bne.n	8003254 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003324:	f7fd fb7c 	bl	8000a20 <HAL_GetTick>
 8003328:	1b80      	subs	r0, r0, r6
 800332a:	2802      	cmp	r0, #2
 800332c:	d9f3      	bls.n	8003316 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800332e:	2003      	movs	r0, #3
 8003330:	e0a5      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003332:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003334:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003338:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 800333c:	f023 030f 	bic.w	r3, r3, #15
 8003340:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8003344:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8003348:	f7fd fb6a 	bl	8000a20 <HAL_GetTick>
 800334c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003352:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003356:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800335a:	f47f af7f 	bne.w	800325c <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800335e:	f7fd fb5f 	bl	8000a20 <HAL_GetTick>
 8003362:	1b80      	subs	r0, r0, r6
 8003364:	2802      	cmp	r0, #2
 8003366:	d9f2      	bls.n	800334e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8003368:	2003      	movs	r0, #3
 800336a:	e088      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800336c:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800336e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003372:	688a      	ldr	r2, [r1, #8]
 8003374:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800337c:	f7fd fb50 	bl	8000a20 <HAL_GetTick>
 8003380:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800338c:	f47f af6b 	bne.w	8003266 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003390:	f7fd fb46 	bl	8000a20 <HAL_GetTick>
 8003394:	1b80      	subs	r0, r0, r6
 8003396:	2802      	cmp	r0, #2
 8003398:	d9f3      	bls.n	8003382 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800339a:	2003      	movs	r0, #3
 800339c:	e06f      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800339e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80033a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033a4:	6893      	ldr	r3, [r2, #8]
 80033a6:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80033aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80033ae:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80033b0:	f7fd fb36 	bl	8000a20 <HAL_GetTick>
 80033b4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80033c0:	f47f af56 	bne.w	8003270 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033c4:	f7fd fb2c 	bl	8000a20 <HAL_GetTick>
 80033c8:	1b80      	subs	r0, r0, r6
 80033ca:	2802      	cmp	r0, #2
 80033cc:	d9f3      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80033ce:	2003      	movs	r0, #3
 80033d0:	e055      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80033d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80033dc:	d10f      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80033de:	2001      	movs	r0, #1
 80033e0:	e04d      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80033e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80033ee:	2001      	movs	r0, #1
 80033f0:	e045      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80033f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80033fc:	d042      	beq.n	8003484 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80033fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003402:	688a      	ldr	r2, [r1, #8]
 8003404:	f022 0203 	bic.w	r2, r2, #3
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800340c:	f7fd fb08 	bl	8000a20 <HAL_GetTick>
 8003410:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341c:	686a      	ldr	r2, [r5, #4]
 800341e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fd fafc 	bl	8000a20 <HAL_GetTick>
 8003428:	1b80      	subs	r0, r0, r6
 800342a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800342e:	4298      	cmp	r0, r3
 8003430:	d9ef      	bls.n	8003412 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8003432:	2003      	movs	r0, #3
 8003434:	e023      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003436:	4b14      	ldr	r3, [pc, #80]	@ (8003488 <HAL_RCC_ClockConfig+0x25c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	42a3      	cmp	r3, r4
 8003440:	d915      	bls.n	800346e <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4a11      	ldr	r2, [pc, #68]	@ (8003488 <HAL_RCC_ClockConfig+0x25c>)
 8003444:	6813      	ldr	r3, [r2, #0]
 8003446:	f023 0307 	bic.w	r3, r3, #7
 800344a:	4323      	orrs	r3, r4
 800344c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800344e:	f7fd fae7 	bl	8000a20 <HAL_GetTick>
 8003452:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003454:	4b0c      	ldr	r3, [pc, #48]	@ (8003488 <HAL_RCC_ClockConfig+0x25c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	42a3      	cmp	r3, r4
 800345e:	d006      	beq.n	800346e <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003460:	f7fd fade 	bl	8000a20 <HAL_GetTick>
 8003464:	1b40      	subs	r0, r0, r5
 8003466:	2802      	cmp	r0, #2
 8003468:	d9f4      	bls.n	8003454 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 800346a:	2003      	movs	r0, #3
 800346c:	e007      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800346e:	f7ff fb9b 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCC_ClockConfig+0x260>)
 8003474:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_RCC_ClockConfig+0x264>)
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	f7fd facf 	bl	8000a1c <HAL_InitTick>
}
 800347e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003480:	2001      	movs	r0, #1
}
 8003482:	4770      	bx	lr
        return HAL_ERROR;
 8003484:	2001      	movs	r0, #1
 8003486:	e7fa      	b.n	800347e <HAL_RCC_ClockConfig+0x252>
 8003488:	58004000 	.word	0x58004000
 800348c:	20000000 	.word	0x20000000
 8003490:	20000004 	.word	0x20000004

08003494 <HAL_RCC_GetPCLK1Freq>:
{
 8003494:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003496:	f7ff fb87 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800349a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80034a4:	4a02      	ldr	r2, [pc, #8]	@ (80034b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80034a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80034aa:	40d8      	lsrs	r0, r3
 80034ac:	bd08      	pop	{r3, pc}
 80034ae:	bf00      	nop
 80034b0:	080087b0 	.word	0x080087b0

080034b4 <HAL_RCC_GetPCLK2Freq>:
{
 80034b4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80034b6:	f7ff fb77 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80034c4:	4a02      	ldr	r2, [pc, #8]	@ (80034d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80034c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80034ca:	40d8      	lsrs	r0, r3
 80034cc:	bd08      	pop	{r3, pc}
 80034ce:	bf00      	nop
 80034d0:	080087b0 	.word	0x080087b0

080034d4 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80034d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034d8:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80034dc:	0902      	lsrs	r2, r0, #4
 80034de:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 80034e2:	ea23 0302 	bic.w	r3, r3, r2
 80034e6:	0100      	lsls	r0, r0, #4
 80034e8:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 80034ec:	4303      	orrs	r3, r0
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034f2:	4770      	bx	lr

080034f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034f8:	6803      	ldr	r3, [r0, #0]
 80034fa:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80034fe:	f040 80aa 	bne.w	8003656 <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003502:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	f013 0f01 	tst.w	r3, #1
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800350c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800350e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003512:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003516:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800351a:	b292      	uxth	r2, r2
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	f013 0f02 	tst.w	r3, #2
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800352a:	68a2      	ldr	r2, [r4, #8]
 800352c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003530:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003534:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8003538:	b292      	uxth	r2, r2
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	f013 0f20 	tst.w	r3, #32
 8003546:	d009      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003548:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800354a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800354e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003552:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003562:	d00c      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003564:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003566:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800356a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800356e:	0c02      	lsrs	r2, r0, #16
 8003570:	0412      	lsls	r2, r2, #16
 8003572:	ea23 0302 	bic.w	r3, r3, r2
 8003576:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003584:	d00c      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003586:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003588:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800358c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003590:	0c02      	lsrs	r2, r0, #16
 8003592:	0412      	lsls	r2, r2, #16
 8003594:	ea23 0302 	bic.w	r3, r3, r2
 8003598:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80035a6:	d00c      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80035a8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80035aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80035b2:	0c02      	lsrs	r2, r0, #16
 80035b4:	0412      	lsls	r2, r2, #16
 80035b6:	ea23 0302 	bic.w	r3, r3, r2
 80035ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80035c8:	f040 809d 	bne.w	8003706 <HAL_RCCEx_PeriphCLKConfig+0x212>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80035d2:	f040 809c 	bne.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x21a>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80035dc:	f040 809b 	bne.w	8003716 <HAL_RCCEx_PeriphCLKConfig+0x222>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	f013 0f10 	tst.w	r3, #16
 80035e6:	d00e      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80035e8:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80035ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80035f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80035fc:	68e3      	ldr	r3, [r4, #12]
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003602:	f000 808c 	beq.w	800371e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800360c:	d00f      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800360e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003610:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003614:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003618:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003622:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003624:	b91b      	cbnz	r3, 800362e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003626:	68cb      	ldr	r3, [r1, #12]
 8003628:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800362c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003634:	d00d      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003636:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800363c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003640:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800364a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800364c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003650:	d06a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8003652:	4628      	mov	r0, r5
 8003654:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8003656:	f7ff f895 	bl	8002784 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800365a:	f7fd f9e1 	bl	8000a20 <HAL_GetTick>
 800365e:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003660:	4b34      	ldr	r3, [pc, #208]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003668:	d106      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366a:	f7fd f9d9 	bl	8000a20 <HAL_GetTick>
 800366e:	1b40      	subs	r0, r0, r5
 8003670:	2802      	cmp	r0, #2
 8003672:	d9f5      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 8003674:	2503      	movs	r5, #3
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003678:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800367a:	2d00      	cmp	r5, #0
 800367c:	f47f af42 	bne.w	8003504 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003688:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800368c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800368e:	429a      	cmp	r2, r3
 8003690:	d024      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003696:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800369a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800369e:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80036a2:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80036a6:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80036aa:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80036ae:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80036b2:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 80036b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80036ba:	f012 0f02 	tst.w	r2, #2
 80036be:	d10f      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      if (ret == HAL_OK)
 80036c0:	2d00      	cmp	r5, #0
 80036c2:	f47f af1f 	bne.w	8003504 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80036c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80036d0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80036da:	e713      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 80036dc:	2200      	movs	r2, #0
 80036de:	e7ec      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        tickstart = HAL_GetTick();
 80036e0:	f7fd f99e 	bl	8000a20 <HAL_GetTick>
 80036e4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80036e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	f013 0f02 	tst.w	r3, #2
 80036f2:	d1e5      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f4:	f7fd f994 	bl	8000a20 <HAL_GetTick>
 80036f8:	1b80      	subs	r0, r0, r6
 80036fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80036fe:	4298      	cmp	r0, r3
 8003700:	d9f1      	bls.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            ret = HAL_TIMEOUT;
 8003702:	2503      	movs	r5, #3
 8003704:	e7dc      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003706:	6960      	ldr	r0, [r4, #20]
 8003708:	f7ff fee4 	bl	80034d4 <LL_RCC_SetI2CClockSource>
 800370c:	e75e      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800370e:	69a0      	ldr	r0, [r4, #24]
 8003710:	f7ff fee0 	bl	80034d4 <LL_RCC_SetI2CClockSource>
 8003714:	e75f      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003716:	69e0      	ldr	r0, [r4, #28]
 8003718:	f7ff fedc 	bl	80034d4 <LL_RCC_SetI2CClockSource>
 800371c:	e760      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800371e:	68cb      	ldr	r3, [r1, #12]
 8003720:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003724:	60cb      	str	r3, [r1, #12]
 8003726:	e76e      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003728:	68cb      	ldr	r3, [r1, #12]
 800372a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372e:	60cb      	str	r3, [r1, #12]
 8003730:	e78f      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003732:	bf00      	nop
 8003734:	58000400 	.word	0x58000400

08003738 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003738:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800373a:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 800373e:	2a01      	cmp	r2, #1
 8003740:	d035      	beq.n	80037ae <HAL_RTC_DeactivateAlarm+0x76>
 8003742:	2201      	movs	r2, #1
 8003744:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003748:	2202      	movs	r2, #2
 800374a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800374e:	4a19      	ldr	r2, [pc, #100]	@ (80037b4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8003750:	20ca      	movs	r0, #202	@ 0xca
 8003752:	6250      	str	r0, [r2, #36]	@ 0x24
 8003754:	2053      	movs	r0, #83	@ 0x53
 8003756:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8003758:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800375c:	d018      	beq.n	8003790 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800375e:	4a15      	ldr	r2, [pc, #84]	@ (80037b4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8003760:	6991      	ldr	r1, [r2, #24]
 8003762:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 8003766:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003768:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 800376a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800376e:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003770:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003772:	f021 0102 	bic.w	r1, r1, #2
 8003776:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003778:	2102      	movs	r1, #2
 800377a:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800377c:	4a0d      	ldr	r2, [pc, #52]	@ (80037b4 <HAL_RTC_DeactivateAlarm+0x7c>)
 800377e:	21ff      	movs	r1, #255	@ 0xff
 8003780:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003782:	2201      	movs	r2, #1
 8003784:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003788:	2000      	movs	r0, #0
 800378a:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 800378e:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003790:	6991      	ldr	r1, [r2, #24]
 8003792:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 8003796:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8003798:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800379a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800379e:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80037a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037a2:	f021 0101 	bic.w	r1, r1, #1
 80037a6:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80037a8:	2101      	movs	r1, #1
 80037aa:	65d1      	str	r1, [r2, #92]	@ 0x5c
 80037ac:	e7e6      	b.n	800377c <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 80037ae:	2002      	movs	r0, #2
}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40002800 	.word	0x40002800

080037b8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80037bc:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80037be:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80037c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80037c2:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80037c4:	f015 0f01 	tst.w	r5, #1
 80037c8:	d106      	bne.n	80037d8 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80037ca:	f015 0f02 	tst.w	r5, #2
 80037ce:	d109      	bne.n	80037e4 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80037d8:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80037da:	2201      	movs	r2, #1
 80037dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80037de:	f7fd faa9 	bl	8000d34 <HAL_RTC_AlarmAEventCallback>
 80037e2:	e7f2      	b.n	80037ca <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80037e4:	4b03      	ldr	r3, [pc, #12]	@ (80037f4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80037e6:	2202      	movs	r2, #2
 80037e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80037ea:	4620      	mov	r0, r4
 80037ec:	f000 f9ee 	bl	8003bcc <HAL_RTCEx_AlarmBEventCallback>
 80037f0:	e7ee      	b.n	80037d0 <HAL_RTC_AlarmIRQHandler+0x18>
 80037f2:	bf00      	nop
 80037f4:	40002800 	.word	0x40002800

080037f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80037f8:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80037fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003828 <HAL_RTC_WaitForSynchro+0x30>)
 80037fc:	68d3      	ldr	r3, [r2, #12]
 80037fe:	f023 0320 	bic.w	r3, r3, #32
 8003802:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003804:	f7fd f90c 	bl	8000a20 <HAL_GetTick>
 8003808:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800380a:	4b07      	ldr	r3, [pc, #28]	@ (8003828 <HAL_RTC_WaitForSynchro+0x30>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f013 0f20 	tst.w	r3, #32
 8003812:	d107      	bne.n	8003824 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003814:	f7fd f904 	bl	8000a20 <HAL_GetTick>
 8003818:	1b00      	subs	r0, r0, r4
 800381a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800381e:	d9f4      	bls.n	800380a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8003820:	2003      	movs	r0, #3
 8003822:	e000      	b.n	8003826 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003824:	2000      	movs	r0, #0
}
 8003826:	bd10      	pop	{r4, pc}
 8003828:	40002800 	.word	0x40002800

0800382c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800382c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800382e:	4b11      	ldr	r3, [pc, #68]	@ (8003874 <RTC_EnterInitMode+0x48>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003836:	d002      	beq.n	800383e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8003838:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800383a:	4620      	mov	r0, r4
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003840:	4a0c      	ldr	r2, [pc, #48]	@ (8003874 <RTC_EnterInitMode+0x48>)
 8003842:	68d3      	ldr	r3, [r2, #12]
 8003844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003848:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800384a:	f7fd f8e9 	bl	8000a20 <HAL_GetTick>
 800384e:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003852:	4b08      	ldr	r3, [pc, #32]	@ (8003874 <RTC_EnterInitMode+0x48>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800385a:	d1ee      	bne.n	800383a <RTC_EnterInitMode+0xe>
 800385c:	2c03      	cmp	r4, #3
 800385e:	d0ec      	beq.n	800383a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003860:	f7fd f8de 	bl	8000a20 <HAL_GetTick>
 8003864:	1b43      	subs	r3, r0, r5
 8003866:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800386a:	d9f2      	bls.n	8003852 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800386c:	2403      	movs	r4, #3
 800386e:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 8003872:	e7ee      	b.n	8003852 <RTC_EnterInitMode+0x26>
 8003874:	40002800 	.word	0x40002800

08003878 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003878:	b510      	push	{r4, lr}
 800387a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800387c:	4b10      	ldr	r3, [pc, #64]	@ (80038c0 <RTC_ExitInitMode+0x48>)
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003884:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f013 0f20 	tst.w	r3, #32
 800388c:	d106      	bne.n	800389c <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800388e:	f7ff ffb3 	bl	80037f8 <HAL_RTC_WaitForSynchro>
 8003892:	b198      	cbz	r0, 80038bc <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003894:	2003      	movs	r0, #3
 8003896:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800389a:	e00f      	b.n	80038bc <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800389c:	4a08      	ldr	r2, [pc, #32]	@ (80038c0 <RTC_ExitInitMode+0x48>)
 800389e:	6993      	ldr	r3, [r2, #24]
 80038a0:	f023 0320 	bic.w	r3, r3, #32
 80038a4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038a6:	f7ff ffa7 	bl	80037f8 <HAL_RTC_WaitForSynchro>
 80038aa:	b110      	cbz	r0, 80038b2 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038ac:	2003      	movs	r0, #3
 80038ae:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80038b2:	4a03      	ldr	r2, [pc, #12]	@ (80038c0 <RTC_ExitInitMode+0x48>)
 80038b4:	6993      	ldr	r3, [r2, #24]
 80038b6:	f043 0320 	orr.w	r3, r3, #32
 80038ba:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	bf00      	nop
 80038c0:	40002800 	.word	0x40002800

080038c4 <HAL_RTC_Init>:
  if (hrtc != NULL)
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d055      	beq.n	8003974 <HAL_RTC_Init+0xb0>
{
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80038cc:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80038d0:	b163      	cbz	r3, 80038ec <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80038d2:	2302      	movs	r3, #2
 80038d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80038d8:	4b27      	ldr	r3, [pc, #156]	@ (8003978 <HAL_RTC_Init+0xb4>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f013 0f10 	tst.w	r3, #16
 80038e0:	d009      	beq.n	80038f6 <HAL_RTC_Init+0x32>
      status = HAL_OK;
 80038e2:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80038ec:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 80038f0:	f7fc ff7c 	bl	80007ec <HAL_RTC_MspInit>
 80038f4:	e7ed      	b.n	80038d2 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038f6:	4b20      	ldr	r3, [pc, #128]	@ (8003978 <HAL_RTC_Init+0xb4>)
 80038f8:	22ca      	movs	r2, #202	@ 0xca
 80038fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80038fc:	2253      	movs	r2, #83	@ 0x53
 80038fe:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8003900:	4620      	mov	r0, r4
 8003902:	f7ff ff93 	bl	800382c <RTC_EnterInitMode>
      if (status == HAL_OK)
 8003906:	b118      	cbz	r0, 8003910 <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003908:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <HAL_RTC_Init+0xb4>)
 800390a:	22ff      	movs	r2, #255	@ 0xff
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800390e:	e7ec      	b.n	80038ea <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003910:	4b19      	ldr	r3, [pc, #100]	@ (8003978 <HAL_RTC_Init+0xb4>)
 8003912:	699a      	ldr	r2, [r3, #24]
 8003914:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 8003918:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800391c:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800391e:	6999      	ldr	r1, [r3, #24]
 8003920:	6862      	ldr	r2, [r4, #4]
 8003922:	6920      	ldr	r0, [r4, #16]
 8003924:	4302      	orrs	r2, r0
 8003926:	69a0      	ldr	r0, [r4, #24]
 8003928:	4302      	orrs	r2, r0
 800392a:	430a      	orrs	r2, r1
 800392c:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800392e:	68e2      	ldr	r2, [r4, #12]
 8003930:	68a1      	ldr	r1, [r4, #8]
 8003932:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003936:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800393e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003940:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003942:	4301      	orrs	r1, r0
 8003944:	430a      	orrs	r2, r1
 8003946:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8003948:	4620      	mov	r0, r4
 800394a:	f7ff ff95 	bl	8003878 <RTC_ExitInitMode>
        if (status == HAL_OK)
 800394e:	b118      	cbz	r0, 8003958 <HAL_RTC_Init+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003950:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <HAL_RTC_Init+0xb4>)
 8003952:	22ff      	movs	r2, #255	@ 0xff
 8003954:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8003956:	e7c8      	b.n	80038ea <HAL_RTC_Init+0x26>
          MODIFY_REG(RTC->CR, \
 8003958:	4907      	ldr	r1, [pc, #28]	@ (8003978 <HAL_RTC_Init+0xb4>)
 800395a:	698b      	ldr	r3, [r1, #24]
 800395c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8003960:	6a22      	ldr	r2, [r4, #32]
 8003962:	69e5      	ldr	r5, [r4, #28]
 8003964:	432a      	orrs	r2, r5
 8003966:	6965      	ldr	r5, [r4, #20]
 8003968:	432a      	orrs	r2, r5
 800396a:	4313      	orrs	r3, r2
 800396c:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800396e:	23ff      	movs	r3, #255	@ 0xff
 8003970:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 8003972:	e7b7      	b.n	80038e4 <HAL_RTC_Init+0x20>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003974:	2001      	movs	r0, #1
}
 8003976:	4770      	bx	lr
 8003978:	40002800 	.word	0x40002800

0800397c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800397c:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 800397e:	e002      	b.n	8003986 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8003980:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8003982:	380a      	subs	r0, #10
 8003984:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8003986:	2809      	cmp	r0, #9
 8003988:	d8fa      	bhi.n	8003980 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	b2db      	uxtb	r3, r3
}
 800398e:	4318      	orrs	r0, r3
 8003990:	4770      	bx	lr
	...

08003994 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8003994:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8003998:	2b01      	cmp	r3, #1
 800399a:	f000 80b0 	beq.w	8003afe <HAL_RTC_SetAlarm_IT+0x16a>
{
 800399e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a2:	4605      	mov	r5, r0
 80039a4:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80039a6:	2301      	movs	r3, #1
 80039a8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039ac:	2302      	movs	r3, #2
 80039ae:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80039b2:	4b54      	ldr	r3, [pc, #336]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 80039b4:	68de      	ldr	r6, [r3, #12]
 80039b6:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80039ba:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80039be:	d043      	beq.n	8003a48 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80039c0:	bb12      	cbnz	r2, 8003a08 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80039c8:	d101      	bne.n	80039ce <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80039ce:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80039d2:	7820      	ldrb	r0, [r4, #0]
 80039d4:	f7ff ffd2 	bl	800397c <RTC_ByteToBcd2>
 80039d8:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80039da:	7860      	ldrb	r0, [r4, #1]
 80039dc:	f7ff ffce 	bl	800397c <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80039e0:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80039e4:	78a0      	ldrb	r0, [r4, #2]
 80039e6:	f7ff ffc9 	bl	800397c <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80039ea:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80039ec:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80039ee:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80039f2:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80039f6:	f7ff ffc1 	bl	800397c <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80039fa:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80039fe:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a00:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a02:	ea48 0000 	orr.w	r0, r8, r0
 8003a06:	e020      	b.n	8003a4a <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003a08:	6948      	ldr	r0, [r1, #20]
 8003a0a:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 8003a0e:	d009      	beq.n	8003a24 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8003a14:	d006      	beq.n	8003a24 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003a16:	4b3b      	ldr	r3, [pc, #236]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003a1e:	d101      	bne.n	8003a24 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a24:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a26:	7863      	ldrb	r3, [r4, #1]
 8003a28:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003a2e:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a30:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003a32:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003a34:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a38:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003a3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003a40:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a42:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a44:	4318      	orrs	r0, r3
 8003a46:	e000      	b.n	8003a4a <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8003a48:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003a4c:	22ca      	movs	r2, #202	@ 0xca
 8003a4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a50:	2253      	movs	r2, #83	@ 0x53
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003a54:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a5a:	d02a      	beq.n	8003ab2 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003a5c:	4b29      	ldr	r3, [pc, #164]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8003a64:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003a66:	2202      	movs	r2, #2
 8003a68:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8003a6a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8003a6e:	d040      	beq.n	8003af2 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003a70:	4b24      	ldr	r3, [pc, #144]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003a72:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003a74:	69a2      	ldr	r2, [r4, #24]
 8003a76:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003a78:	6862      	ldr	r2, [r4, #4]
 8003a7a:	4b22      	ldr	r3, [pc, #136]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003a7c:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003a7e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8003a80:	f042 0202 	orr.w	r2, r2, #2
 8003a84:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 8003a8c:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003b08 <HAL_RTC_SetAlarm_IT+0x174>)
 8003a90:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a9c:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003a9e:	22ff      	movs	r2, #255	@ 0xff
 8003aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 8003aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003ab2:	4b14      	ldr	r3, [pc, #80]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8003aba:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003abc:	2201      	movs	r2, #1
 8003abe:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8003ac0:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8003ac4:	d00f      	beq.n	8003ae6 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003ac8:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003aca:	69a2      	ldr	r2, [r4, #24]
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003ace:	6862      	ldr	r2, [r4, #4]
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003ad2:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003ad4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8003ae2:	619a      	str	r2, [r3, #24]
 8003ae4:	e7d3      	b.n	8003a8e <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003ae6:	69a3      	ldr	r3, [r4, #24]
 8003ae8:	69e2      	ldr	r2, [r4, #28]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	4a05      	ldr	r2, [pc, #20]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003aee:	6453      	str	r3, [r2, #68]	@ 0x44
 8003af0:	e7ed      	b.n	8003ace <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003af2:	69a3      	ldr	r3, [r4, #24]
 8003af4:	69e2      	ldr	r2, [r4, #28]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	4a02      	ldr	r2, [pc, #8]	@ (8003b04 <HAL_RTC_SetAlarm_IT+0x170>)
 8003afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003afc:	e7bc      	b.n	8003a78 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8003afe:	2002      	movs	r0, #2
}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40002800 	.word	0x40002800
 8003b08:	58000800 	.word	0x58000800

08003b0c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b0c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d017      	beq.n	8003b44 <HAL_RTCEx_EnableBypassShadow+0x38>
 8003b14:	2101      	movs	r1, #1
 8003b16:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b20:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8003b22:	22ca      	movs	r2, #202	@ 0xca
 8003b24:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b26:	2253      	movs	r2, #83	@ 0x53
 8003b28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	f042 0220 	orr.w	r2, r2, #32
 8003b30:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b32:	22ff      	movs	r2, #255	@ 0xff
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003b36:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8003b40:	4618      	mov	r0, r3
 8003b42:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003b44:	2002      	movs	r0, #2
}
 8003b46:	4770      	bx	lr
 8003b48:	40002800 	.word	0x40002800

08003b4c <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b4c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d020      	beq.n	8003b96 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8003b54:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8003b56:	2101      	movs	r1, #1
 8003b58:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b62:	4b0e      	ldr	r3, [pc, #56]	@ (8003b9c <HAL_RTCEx_SetSSRU_IT+0x50>)
 8003b64:	22ca      	movs	r2, #202	@ 0xca
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b68:	2253      	movs	r2, #83	@ 0x53
 8003b6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b72:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8003b74:	4c0a      	ldr	r4, [pc, #40]	@ (8003ba0 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8003b76:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8003b7a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003b7e:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b82:	22ff      	movs	r2, #255	@ 0xff
 8003b84:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003b86:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8003b90:	4618      	mov	r0, r3
}
 8003b92:	bc10      	pop	{r4}
 8003b94:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003b96:	2002      	movs	r0, #2
}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40002800 	.word	0x40002800
 8003ba0:	58000800 	.word	0x58000800

08003ba4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8003ba8:	4b07      	ldr	r3, [pc, #28]	@ (8003bc8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8003baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bac:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003bb0:	d103      	bne.n	8003bba <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8003bb8:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8003bba:	4b03      	ldr	r3, [pc, #12]	@ (8003bc8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8003bbc:	2240      	movs	r2, #64	@ 0x40
 8003bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8003bc0:	f7fd f8bc 	bl	8000d3c <HAL_RTCEx_SSRUEventCallback>
 8003bc4:	e7f5      	b.n	8003bb2 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8003bc6:	bf00      	nop
 8003bc8:	40002800 	.word	0x40002800

08003bcc <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003bcc:	4770      	bx	lr

08003bce <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8003bce:	0089      	lsls	r1, r1, #2
 8003bd0:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8003bd4:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003bd8:	600a      	str	r2, [r1, #0]
}
 8003bda:	4770      	bx	lr

08003bdc <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8003bdc:	0089      	lsls	r1, r1, #2
 8003bde:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8003be2:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003be6:	6808      	ldr	r0, [r1, #0]
}
 8003be8:	4770      	bx	lr
	...

08003bec <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003bec:	4b07      	ldr	r3, [pc, #28]	@ (8003c0c <SUBGHZSPI_Init+0x20>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bf4:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003bf6:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 8003bfa:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003bfc:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003c00:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	4770      	bx	lr
 8003c0c:	58010000 	.word	0x58010000

08003c10 <HAL_SUBGHZ_Init>:
{
 8003c10:	b530      	push	{r4, r5, lr}
 8003c12:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d05d      	beq.n	8003cd4 <HAL_SUBGHZ_Init+0xc4>
 8003c18:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8003c1a:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003c1c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8003c20:	b10b      	cbz	r3, 8003c26 <HAL_SUBGHZ_Init+0x16>
 8003c22:	2d03      	cmp	r5, #3
 8003c24:	d10b      	bne.n	8003c3e <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8003c26:	2300      	movs	r3, #0
 8003c28:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7fc fe86 	bl	800093c <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003c30:	4a29      	ldr	r2, [pc, #164]	@ (8003cd8 <HAL_SUBGHZ_Init+0xc8>)
 8003c32:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003c36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003c3e:	b185      	cbz	r5, 8003c62 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003c40:	4b26      	ldr	r3, [pc, #152]	@ (8003cdc <HAL_SUBGHZ_Init+0xcc>)
 8003c42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c46:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8003c48:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003c4a:	6820      	ldr	r0, [r4, #0]
 8003c4c:	f7ff ffce 	bl	8003bec <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	71a3      	strb	r3, [r4, #6]
}
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	b003      	add	sp, #12
 8003c60:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003c66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c6a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8003c6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003c76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce0 <HAL_SUBGHZ_Init+0xd0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003c7e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003c82:	2264      	movs	r2, #100	@ 0x64
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	e014      	b.n	8003cb6 <HAL_SUBGHZ_Init+0xa6>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003c8c:	2501      	movs	r5, #1
 8003c8e:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003c90:	4b12      	ldr	r3, [pc, #72]	@ (8003cdc <HAL_SUBGHZ_Init+0xcc>)
 8003c92:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003c96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ca4:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003ca6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003caa:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8003cac:	2d00      	cmp	r5, #0
 8003cae:	d1d3      	bne.n	8003c58 <HAL_SUBGHZ_Init+0x48>
 8003cb0:	e7cb      	b.n	8003c4a <HAL_SUBGHZ_Init+0x3a>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ec      	beq.n	8003c90 <HAL_SUBGHZ_Init+0x80>
      if (count == 0U)
 8003cb6:	9b01      	ldr	r3, [sp, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0e7      	beq.n	8003c8c <HAL_SUBGHZ_Init+0x7c>
      count--;
 8003cbc:	9b01      	ldr	r3, [sp, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cca:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_SUBGHZ_Init+0xa2>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e7ee      	b.n	8003cb2 <HAL_SUBGHZ_Init+0xa2>
    return status;
 8003cd4:	2501      	movs	r5, #1
 8003cd6:	e7c1      	b.n	8003c5c <HAL_SUBGHZ_Init+0x4c>
 8003cd8:	58000800 	.word	0x58000800
 8003cdc:	58000400 	.word	0x58000400
 8003ce0:	20000000 	.word	0x20000000

08003ce4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d54 <SUBGHZSPI_Transmit+0x70>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003cf0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003cf4:	2064      	movs	r0, #100	@ 0x64
 8003cf6:	fb00 f303 	mul.w	r3, r0, r3
 8003cfa:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003cfc:	9b01      	ldr	r3, [sp, #4]
 8003cfe:	b14b      	cbz	r3, 8003d14 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003d00:	9b01      	ldr	r3, [sp, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003d06:	4b14      	ldr	r3, [pc, #80]	@ (8003d58 <SUBGHZSPI_Transmit+0x74>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f013 0f02 	tst.w	r3, #2
 8003d0e:	d0f5      	beq.n	8003cfc <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003d10:	2000      	movs	r0, #0
 8003d12:	e001      	b.n	8003d18 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003d14:	2001      	movs	r0, #1
 8003d16:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8003d18:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <SUBGHZSPI_Transmit+0x74>)
 8003d1a:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <SUBGHZSPI_Transmit+0x70>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003d24:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003d28:	2164      	movs	r1, #100	@ 0x64
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003d30:	9b01      	ldr	r3, [sp, #4]
 8003d32:	b143      	cbz	r3, 8003d46 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003d34:	9b01      	ldr	r3, [sp, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003d3a:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <SUBGHZSPI_Transmit+0x74>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f013 0f01 	tst.w	r3, #1
 8003d42:	d0f5      	beq.n	8003d30 <SUBGHZSPI_Transmit+0x4c>
 8003d44:	e001      	b.n	8003d4a <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003d46:	2001      	movs	r0, #1
 8003d48:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003d4a:	4b03      	ldr	r3, [pc, #12]	@ (8003d58 <SUBGHZSPI_Transmit+0x74>)
 8003d4c:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8003d4e:	b002      	add	sp, #8
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000000 	.word	0x20000000
 8003d58:	58010000 	.word	0x58010000

08003d5c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003d60:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd4 <SUBGHZSPI_Receive+0x78>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003d68:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003d6c:	2064      	movs	r0, #100	@ 0x64
 8003d6e:	fb00 f303 	mul.w	r3, r0, r3
 8003d72:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003d74:	9b01      	ldr	r3, [sp, #4]
 8003d76:	b14b      	cbz	r3, 8003d8c <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003d78:	9b01      	ldr	r3, [sp, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003d7e:	4b16      	ldr	r3, [pc, #88]	@ (8003dd8 <SUBGHZSPI_Receive+0x7c>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f013 0f02 	tst.w	r3, #2
 8003d86:	d0f5      	beq.n	8003d74 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003d88:	2000      	movs	r0, #0
 8003d8a:	e001      	b.n	8003d90 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8003d90:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <SUBGHZSPI_Receive+0x7c>)
 8003d92:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8003d96:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd4 <SUBGHZSPI_Receive+0x78>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003da2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003da6:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8003daa:	fb0c f303 	mul.w	r3, ip, r3
 8003dae:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003db0:	9b01      	ldr	r3, [sp, #4]
 8003db2:	b143      	cbz	r3, 8003dc6 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003db4:	9b01      	ldr	r3, [sp, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003dba:	4b07      	ldr	r3, [pc, #28]	@ (8003dd8 <SUBGHZSPI_Receive+0x7c>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f013 0f01 	tst.w	r3, #1
 8003dc2:	d0f5      	beq.n	8003db0 <SUBGHZSPI_Receive+0x54>
 8003dc4:	e001      	b.n	8003dca <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003dca:	4b03      	ldr	r3, [pc, #12]	@ (8003dd8 <SUBGHZSPI_Receive+0x7c>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	700b      	strb	r3, [r1, #0]

  return status;
}
 8003dd0:	b002      	add	sp, #8
 8003dd2:	4770      	bx	lr
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	58010000 	.word	0x58010000

08003ddc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003ddc:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003dde:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <SUBGHZ_WaitOnBusy+0x50>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003de6:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8003dea:	2264      	movs	r2, #100	@ 0x64
 8003dec:	fb02 f303 	mul.w	r3, r2, r3
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	e006      	b.n	8003e02 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003df4:	2302      	movs	r3, #2
 8003df6:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8003df8:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8003dfa:	b002      	add	sp, #8
 8003dfc:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003dfe:	4213      	tst	r3, r2
 8003e00:	d012      	beq.n	8003e28 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003e02:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <SUBGHZ_WaitOnBusy+0x54>)
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f013 0304 	ands.w	r3, r3, #4
 8003e0a:	d000      	beq.n	8003e0e <SUBGHZ_WaitOnBusy+0x32>
 8003e0c:	2301      	movs	r3, #1
    if (count == 0U)
 8003e0e:	9a01      	ldr	r2, [sp, #4]
 8003e10:	2a00      	cmp	r2, #0
 8003e12:	d0ef      	beq.n	8003df4 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8003e14:	9a01      	ldr	r2, [sp, #4]
 8003e16:	3a01      	subs	r2, #1
 8003e18:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003e1a:	4a05      	ldr	r2, [pc, #20]	@ (8003e30 <SUBGHZ_WaitOnBusy+0x54>)
 8003e1c:	6952      	ldr	r2, [r2, #20]
 8003e1e:	f012 0202 	ands.w	r2, r2, #2
 8003e22:	d0ec      	beq.n	8003dfe <SUBGHZ_WaitOnBusy+0x22>
 8003e24:	2201      	movs	r2, #1
 8003e26:	e7ea      	b.n	8003dfe <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e7e6      	b.n	8003dfa <SUBGHZ_WaitOnBusy+0x1e>
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	58000400 	.word	0x58000400

08003e34 <SUBGHZ_CheckDeviceReady>:
{
 8003e34:	b500      	push	{lr}
 8003e36:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003e38:	7903      	ldrb	r3, [r0, #4]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d004      	beq.n	8003e48 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003e3e:	f7ff ffcd 	bl	8003ddc <SUBGHZ_WaitOnBusy>
}
 8003e42:	b003      	add	sp, #12
 8003e44:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003e48:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <SUBGHZ_CheckDeviceReady+0x4c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e50:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8003e54:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e56:	4a0b      	ldr	r2, [pc, #44]	@ (8003e84 <SUBGHZ_CheckDeviceReady+0x50>)
 8003e58:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003e5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8003e64:	9b01      	ldr	r3, [sp, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8003e6a:	9b01      	ldr	r3, [sp, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f9      	bne.n	8003e64 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e70:	4a04      	ldr	r2, [pc, #16]	@ (8003e84 <SUBGHZ_CheckDeviceReady+0x50>)
 8003e72:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e7e:	e7de      	b.n	8003e3e <SUBGHZ_CheckDeviceReady+0xa>
 8003e80:	20000000 	.word	0x20000000
 8003e84:	58000400 	.word	0x58000400

08003e88 <HAL_SUBGHZ_WriteRegisters>:
{
 8003e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e8e:	7980      	ldrb	r0, [r0, #6]
 8003e90:	fa5f f880 	uxtb.w	r8, r0
 8003e94:	f1b8 0f01 	cmp.w	r8, #1
 8003e98:	d13e      	bne.n	8003f18 <HAL_SUBGHZ_WriteRegisters+0x90>
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	4617      	mov	r7, r2
 8003e9e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003ea0:	796b      	ldrb	r3, [r5, #5]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d03b      	beq.n	8003f1e <HAL_SUBGHZ_WriteRegisters+0x96>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f7ff ffc0 	bl	8003e34 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f24 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8003eb6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003eba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ebe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003ec2:	210d      	movs	r1, #13
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	f7ff ff0d 	bl	8003ce4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003eca:	0a21      	lsrs	r1, r4, #8
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f7ff ff09 	bl	8003ce4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003ed2:	b2e1      	uxtb	r1, r4
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	f7ff ff05 	bl	8003ce4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003eda:	2400      	movs	r4, #0
 8003edc:	e005      	b.n	8003eea <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ede:	5d39      	ldrb	r1, [r7, r4]
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f7ff feff 	bl	8003ce4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003ee6:	3401      	adds	r4, #1
 8003ee8:	b2a4      	uxth	r4, r4
 8003eea:	42b4      	cmp	r4, r6
 8003eec:	d3f7      	bcc.n	8003ede <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003eee:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8003ef0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003ef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003efc:	4628      	mov	r0, r5
 8003efe:	f7ff ff6d 	bl	8003ddc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f02:	68ab      	ldr	r3, [r5, #8]
 8003f04:	b90b      	cbnz	r3, 8003f0a <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8003f06:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	716b      	strb	r3, [r5, #5]
}
 8003f12:	4640      	mov	r0, r8
 8003f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003f18:	f04f 0802 	mov.w	r8, #2
 8003f1c:	e7f9      	b.n	8003f12 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8003f1e:	f04f 0802 	mov.w	r8, #2
 8003f22:	e7f6      	b.n	8003f12 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8003f24:	58000400 	.word	0x58000400

08003f28 <HAL_SUBGHZ_ReadRegisters>:
{
 8003f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f2e:	7980      	ldrb	r0, [r0, #6]
 8003f30:	fa5f f880 	uxtb.w	r8, r0
 8003f34:	f1b8 0f01 	cmp.w	r8, #1
 8003f38:	d141      	bne.n	8003fbe <HAL_SUBGHZ_ReadRegisters+0x96>
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	4615      	mov	r5, r2
 8003f3e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8003f40:	7973      	ldrb	r3, [r6, #5]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d03e      	beq.n	8003fc4 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8003f46:	2301      	movs	r3, #1
 8003f48:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	f7ff ff72 	bl	8003e34 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003f50:	4a1e      	ldr	r2, [pc, #120]	@ (8003fcc <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8003f52:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003f56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003f5e:	211d      	movs	r1, #29
 8003f60:	4630      	mov	r0, r6
 8003f62:	f7ff febf 	bl	8003ce4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003f66:	0a21      	lsrs	r1, r4, #8
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f7ff febb 	bl	8003ce4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003f6e:	b2e1      	uxtb	r1, r4
 8003f70:	4630      	mov	r0, r6
 8003f72:	f7ff feb7 	bl	8003ce4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003f76:	2100      	movs	r1, #0
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f7ff feb3 	bl	8003ce4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003f7e:	2400      	movs	r4, #0
 8003f80:	e006      	b.n	8003f90 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003f82:	4629      	mov	r1, r5
 8003f84:	4630      	mov	r0, r6
 8003f86:	f7ff fee9 	bl	8003d5c <SUBGHZSPI_Receive>
      pData++;
 8003f8a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8003f8c:	3401      	adds	r4, #1
 8003f8e:	b2a4      	uxth	r4, r4
 8003f90:	42bc      	cmp	r4, r7
 8003f92:	d3f6      	bcc.n	8003f82 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003f94:	4a0d      	ldr	r2, [pc, #52]	@ (8003fcc <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8003f96:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f7ff ff1a 	bl	8003ddc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003fa8:	68b3      	ldr	r3, [r6, #8]
 8003faa:	b90b      	cbnz	r3, 8003fb0 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8003fac:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	7173      	strb	r3, [r6, #5]
}
 8003fb8:	4640      	mov	r0, r8
 8003fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003fbe:	f04f 0802 	mov.w	r8, #2
 8003fc2:	e7f9      	b.n	8003fb8 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8003fc4:	f04f 0802 	mov.w	r8, #2
 8003fc8:	e7f6      	b.n	8003fb8 <HAL_SUBGHZ_ReadRegisters+0x90>
 8003fca:	bf00      	nop
 8003fcc:	58000400 	.word	0x58000400

08003fd0 <HAL_SUBGHZ_ExecSetCmd>:
{
 8003fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fd4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003fd6:	7980      	ldrb	r0, [r0, #6]
 8003fd8:	fa5f f980 	uxtb.w	r9, r0
 8003fdc:	f1b9 0f01 	cmp.w	r9, #1
 8003fe0:	d143      	bne.n	800406a <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8003fe2:	4688      	mov	r8, r1
 8003fe4:	4617      	mov	r7, r2
 8003fe6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003fe8:	796b      	ldrb	r3, [r5, #5]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d040      	beq.n	8004070 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f7ff ff1e 	bl	8003e34 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003ff8:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8003ffc:	d005      	beq.n	800400a <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8003ffe:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 8004002:	d002      	beq.n	800400a <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004004:	2300      	movs	r3, #0
 8004006:	712b      	strb	r3, [r5, #4]
 8004008:	e001      	b.n	800400e <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800400a:	2301      	movs	r3, #1
 800400c:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800400e:	4a1a      	ldr	r2, [pc, #104]	@ (8004078 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8004010:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004014:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800401c:	4641      	mov	r1, r8
 800401e:	4628      	mov	r0, r5
 8004020:	f7ff fe60 	bl	8003ce4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004024:	2400      	movs	r4, #0
 8004026:	e005      	b.n	8004034 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004028:	5d39      	ldrb	r1, [r7, r4]
 800402a:	4628      	mov	r0, r5
 800402c:	f7ff fe5a 	bl	8003ce4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004030:	3401      	adds	r4, #1
 8004032:	b2a4      	uxth	r4, r4
 8004034:	42b4      	cmp	r4, r6
 8004036:	d3f7      	bcc.n	8004028 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004038:	4a0f      	ldr	r2, [pc, #60]	@ (8004078 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800403a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800403e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8004046:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 800404a:	d10a      	bne.n	8004062 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800404c:	68ab      	ldr	r3, [r5, #8]
 800404e:	b90b      	cbnz	r3, 8004054 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8004050:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004054:	2301      	movs	r3, #1
 8004056:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004058:	2300      	movs	r3, #0
 800405a:	716b      	strb	r3, [r5, #5]
}
 800405c:	4648      	mov	r0, r9
 800405e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004062:	4628      	mov	r0, r5
 8004064:	f7ff feba 	bl	8003ddc <SUBGHZ_WaitOnBusy>
 8004068:	e7f0      	b.n	800404c <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800406a:	f04f 0902 	mov.w	r9, #2
 800406e:	e7f5      	b.n	800405c <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8004070:	f04f 0902 	mov.w	r9, #2
 8004074:	e7f2      	b.n	800405c <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8004076:	bf00      	nop
 8004078:	58000400 	.word	0x58000400

0800407c <HAL_SUBGHZ_ExecGetCmd>:
{
 800407c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004080:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004082:	7980      	ldrb	r0, [r0, #6]
 8004084:	fa5f f880 	uxtb.w	r8, r0
 8004088:	f1b8 0f01 	cmp.w	r8, #1
 800408c:	d139      	bne.n	8004102 <HAL_SUBGHZ_ExecGetCmd+0x86>
 800408e:	460c      	mov	r4, r1
 8004090:	4615      	mov	r5, r2
 8004092:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004094:	7973      	ldrb	r3, [r6, #5]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d036      	beq.n	8004108 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 800409a:	2301      	movs	r3, #1
 800409c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800409e:	4630      	mov	r0, r6
 80040a0:	f7ff fec8 	bl	8003e34 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80040a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004110 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80040a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80040aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80040b2:	4621      	mov	r1, r4
 80040b4:	4630      	mov	r0, r6
 80040b6:	f7ff fe15 	bl	8003ce4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80040ba:	2100      	movs	r1, #0
 80040bc:	4630      	mov	r0, r6
 80040be:	f7ff fe11 	bl	8003ce4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80040c2:	2400      	movs	r4, #0
 80040c4:	e006      	b.n	80040d4 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80040c6:	4629      	mov	r1, r5
 80040c8:	4630      	mov	r0, r6
 80040ca:	f7ff fe47 	bl	8003d5c <SUBGHZSPI_Receive>
      pData++;
 80040ce:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80040d0:	3401      	adds	r4, #1
 80040d2:	b2a4      	uxth	r4, r4
 80040d4:	42bc      	cmp	r4, r7
 80040d6:	d3f6      	bcc.n	80040c6 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80040d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004110 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80040da:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80040de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80040e6:	4630      	mov	r0, r6
 80040e8:	f7ff fe78 	bl	8003ddc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80040ec:	68b3      	ldr	r3, [r6, #8]
 80040ee:	b90b      	cbnz	r3, 80040f4 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 80040f0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80040f4:	2301      	movs	r3, #1
 80040f6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80040f8:	2300      	movs	r3, #0
 80040fa:	7173      	strb	r3, [r6, #5]
}
 80040fc:	4640      	mov	r0, r8
 80040fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004102:	f04f 0802 	mov.w	r8, #2
 8004106:	e7f9      	b.n	80040fc <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8004108:	f04f 0802 	mov.w	r8, #2
 800410c:	e7f6      	b.n	80040fc <HAL_SUBGHZ_ExecGetCmd+0x80>
 800410e:	bf00      	nop
 8004110:	58000400 	.word	0x58000400

08004114 <HAL_SUBGHZ_IRQHandler>:
{
 8004114:	b530      	push	{r4, r5, lr}
 8004116:	b083      	sub	sp, #12
 8004118:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 800411a:	2300      	movs	r3, #0
 800411c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004120:	2302      	movs	r3, #2
 8004122:	aa01      	add	r2, sp, #4
 8004124:	2112      	movs	r1, #18
 8004126:	f7ff ffa9 	bl	800407c <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800412a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800412e:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8004132:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8004136:	b224      	sxth	r4, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004138:	2302      	movs	r3, #2
 800413a:	aa01      	add	r2, sp, #4
 800413c:	4619      	mov	r1, r3
 800413e:	4628      	mov	r0, r5
 8004140:	f7ff ff46 	bl	8003fd0 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004144:	f014 0f01 	tst.w	r4, #1
 8004148:	d123      	bne.n	8004192 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800414a:	f014 0f02 	tst.w	r4, #2
 800414e:	d124      	bne.n	800419a <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004150:	f014 0f04 	tst.w	r4, #4
 8004154:	d125      	bne.n	80041a2 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004156:	f014 0f08 	tst.w	r4, #8
 800415a:	d126      	bne.n	80041aa <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800415c:	f014 0f10 	tst.w	r4, #16
 8004160:	d127      	bne.n	80041b2 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004162:	f014 0f20 	tst.w	r4, #32
 8004166:	d128      	bne.n	80041ba <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004168:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800416c:	d129      	bne.n	80041c2 <HAL_SUBGHZ_IRQHandler+0xae>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800416e:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8004172:	d006      	beq.n	8004182 <HAL_SUBGHZ_IRQHandler+0x6e>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004174:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8004178:	d027      	beq.n	80041ca <HAL_SUBGHZ_IRQHandler+0xb6>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800417a:	2101      	movs	r1, #1
 800417c:	4628      	mov	r0, r5
 800417e:	f003 fb83 	bl	8007888 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004182:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8004186:	d125      	bne.n	80041d4 <HAL_SUBGHZ_IRQHandler+0xc0>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004188:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 800418c:	d126      	bne.n	80041dc <HAL_SUBGHZ_IRQHandler+0xc8>
}
 800418e:	b003      	add	sp, #12
 8004190:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004192:	4628      	mov	r0, r5
 8004194:	f003 fb60 	bl	8007858 <HAL_SUBGHZ_TxCpltCallback>
 8004198:	e7d7      	b.n	800414a <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800419a:	4628      	mov	r0, r5
 800419c:	f003 fb64 	bl	8007868 <HAL_SUBGHZ_RxCpltCallback>
 80041a0:	e7d6      	b.n	8004150 <HAL_SUBGHZ_IRQHandler+0x3c>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80041a2:	4628      	mov	r0, r5
 80041a4:	f003 fb94 	bl	80078d0 <HAL_SUBGHZ_PreambleDetectedCallback>
 80041a8:	e7d5      	b.n	8004156 <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80041aa:	4628      	mov	r0, r5
 80041ac:	f003 fb98 	bl	80078e0 <HAL_SUBGHZ_SyncWordValidCallback>
 80041b0:	e7d4      	b.n	800415c <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80041b2:	4628      	mov	r0, r5
 80041b4:	f003 fb9c 	bl	80078f0 <HAL_SUBGHZ_HeaderValidCallback>
 80041b8:	e7d3      	b.n	8004162 <HAL_SUBGHZ_IRQHandler+0x4e>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80041ba:	4628      	mov	r0, r5
 80041bc:	f003 fb80 	bl	80078c0 <HAL_SUBGHZ_HeaderErrorCallback>
 80041c0:	e7d2      	b.n	8004168 <HAL_SUBGHZ_IRQHandler+0x54>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80041c2:	4628      	mov	r0, r5
 80041c4:	f003 fb58 	bl	8007878 <HAL_SUBGHZ_CRCErrorCallback>
 80041c8:	e7d1      	b.n	800416e <HAL_SUBGHZ_IRQHandler+0x5a>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80041ca:	2100      	movs	r1, #0
 80041cc:	4628      	mov	r0, r5
 80041ce:	f003 fb5b 	bl	8007888 <HAL_SUBGHZ_CADStatusCallback>
 80041d2:	e7d6      	b.n	8004182 <HAL_SUBGHZ_IRQHandler+0x6e>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80041d4:	4628      	mov	r0, r5
 80041d6:	f003 fb69 	bl	80078ac <HAL_SUBGHZ_RxTxTimeoutCallback>
 80041da:	e7d5      	b.n	8004188 <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80041dc:	4628      	mov	r0, r5
 80041de:	f003 fb8f 	bl	8007900 <HAL_SUBGHZ_LrFhssHopCallback>
}
 80041e2:	e7d4      	b.n	800418e <HAL_SUBGHZ_IRQHandler+0x7a>

080041e4 <HAL_SUBGHZ_WriteBuffer>:
{
 80041e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041e8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80041ea:	7980      	ldrb	r0, [r0, #6]
 80041ec:	fa5f f880 	uxtb.w	r8, r0
 80041f0:	f1b8 0f01 	cmp.w	r8, #1
 80041f4:	d138      	bne.n	8004268 <HAL_SUBGHZ_WriteBuffer+0x84>
 80041f6:	460c      	mov	r4, r1
 80041f8:	4617      	mov	r7, r2
 80041fa:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80041fc:	796b      	ldrb	r3, [r5, #5]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d035      	beq.n	800426e <HAL_SUBGHZ_WriteBuffer+0x8a>
 8004202:	2301      	movs	r3, #1
 8004204:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004206:	4628      	mov	r0, r5
 8004208:	f7ff fe14 	bl	8003e34 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800420c:	4a19      	ldr	r2, [pc, #100]	@ (8004274 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800420e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004212:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004216:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800421a:	210e      	movs	r1, #14
 800421c:	4628      	mov	r0, r5
 800421e:	f7ff fd61 	bl	8003ce4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004222:	4621      	mov	r1, r4
 8004224:	4628      	mov	r0, r5
 8004226:	f7ff fd5d 	bl	8003ce4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800422a:	2400      	movs	r4, #0
 800422c:	e005      	b.n	800423a <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800422e:	5d39      	ldrb	r1, [r7, r4]
 8004230:	4628      	mov	r0, r5
 8004232:	f7ff fd57 	bl	8003ce4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004236:	3401      	adds	r4, #1
 8004238:	b2a4      	uxth	r4, r4
 800423a:	42b4      	cmp	r4, r6
 800423c:	d3f7      	bcc.n	800422e <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800423e:	4a0d      	ldr	r2, [pc, #52]	@ (8004274 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8004240:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800424c:	4628      	mov	r0, r5
 800424e:	f7ff fdc5 	bl	8003ddc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004252:	68ab      	ldr	r3, [r5, #8]
 8004254:	b90b      	cbnz	r3, 800425a <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8004256:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800425a:	2301      	movs	r3, #1
 800425c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800425e:	2300      	movs	r3, #0
 8004260:	716b      	strb	r3, [r5, #5]
}
 8004262:	4640      	mov	r0, r8
 8004264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004268:	f04f 0802 	mov.w	r8, #2
 800426c:	e7f9      	b.n	8004262 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800426e:	f04f 0802 	mov.w	r8, #2
 8004272:	e7f6      	b.n	8004262 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8004274:	58000400 	.word	0x58000400

08004278 <HAL_SUBGHZ_ReadBuffer>:
{
 8004278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800427e:	7980      	ldrb	r0, [r0, #6]
 8004280:	fa5f f880 	uxtb.w	r8, r0
 8004284:	f1b8 0f01 	cmp.w	r8, #1
 8004288:	d13d      	bne.n	8004306 <HAL_SUBGHZ_ReadBuffer+0x8e>
 800428a:	460c      	mov	r4, r1
 800428c:	4615      	mov	r5, r2
 800428e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004290:	7973      	ldrb	r3, [r6, #5]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d03a      	beq.n	800430c <HAL_SUBGHZ_ReadBuffer+0x94>
 8004296:	2301      	movs	r3, #1
 8004298:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800429a:	4630      	mov	r0, r6
 800429c:	f7ff fdca 	bl	8003e34 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80042a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004314 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80042a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80042a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80042ae:	211e      	movs	r1, #30
 80042b0:	4630      	mov	r0, r6
 80042b2:	f7ff fd17 	bl	8003ce4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80042b6:	4621      	mov	r1, r4
 80042b8:	4630      	mov	r0, r6
 80042ba:	f7ff fd13 	bl	8003ce4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80042be:	2100      	movs	r1, #0
 80042c0:	4630      	mov	r0, r6
 80042c2:	f7ff fd0f 	bl	8003ce4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80042c6:	2400      	movs	r4, #0
 80042c8:	e006      	b.n	80042d8 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80042ca:	4629      	mov	r1, r5
 80042cc:	4630      	mov	r0, r6
 80042ce:	f7ff fd45 	bl	8003d5c <SUBGHZSPI_Receive>
      pData++;
 80042d2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80042d4:	3401      	adds	r4, #1
 80042d6:	b2a4      	uxth	r4, r4
 80042d8:	42bc      	cmp	r4, r7
 80042da:	d3f6      	bcc.n	80042ca <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80042dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004314 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80042de:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80042e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80042ea:	4630      	mov	r0, r6
 80042ec:	f7ff fd76 	bl	8003ddc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80042f0:	68b3      	ldr	r3, [r6, #8]
 80042f2:	b90b      	cbnz	r3, 80042f8 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80042f4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80042f8:	2301      	movs	r3, #1
 80042fa:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80042fc:	2300      	movs	r3, #0
 80042fe:	7173      	strb	r3, [r6, #5]
}
 8004300:	4640      	mov	r0, r8
 8004302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004306:	f04f 0802 	mov.w	r8, #2
 800430a:	e7f9      	b.n	8004300 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 800430c:	f04f 0802 	mov.w	r8, #2
 8004310:	e7f6      	b.n	8004300 <HAL_SUBGHZ_ReadBuffer+0x88>
 8004312:	bf00      	nop
 8004314:	58000400 	.word	0x58000400

08004318 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004318:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	e852 3f00 	ldrex	r3, [r2]
 800431e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	e842 3100 	strex	r1, r3, [r2]
 8004326:	2900      	cmp	r1, #0
 8004328:	d1f6      	bne.n	8004318 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800432a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	f102 0308 	add.w	r3, r2, #8
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	3208      	adds	r2, #8
 800433a:	e842 3100 	strex	r1, r3, [r2]
 800433e:	2900      	cmp	r1, #0
 8004340:	d1f3      	bne.n	800432a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004342:	2320      	movs	r3, #32
 8004344:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 8004348:	4770      	bx	lr

0800434a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800434a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	e852 3f00 	ldrex	r3, [r2]
 8004350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	e842 3100 	strex	r1, r3, [r2]
 8004358:	2900      	cmp	r1, #0
 800435a:	d1f6      	bne.n	800434a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800435c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	f102 0308 	add.w	r3, r2, #8
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	3208      	adds	r2, #8
 8004370:	e842 3100 	strex	r1, r3, [r2]
 8004374:	2900      	cmp	r1, #0
 8004376:	d1f1      	bne.n	800435c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004378:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d006      	beq.n	800438c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800437e:	2320      	movs	r3, #32
 8004380:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004384:	2300      	movs	r3, #0
 8004386:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004388:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800438a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	e852 3f00 	ldrex	r3, [r2]
 8004392:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	e842 3100 	strex	r1, r3, [r2]
 800439a:	2900      	cmp	r1, #0
 800439c:	d1f6      	bne.n	800438c <UART_EndRxTransfer+0x42>
 800439e:	e7ee      	b.n	800437e <UART_EndRxTransfer+0x34>

080043a0 <HAL_UART_Transmit_DMA>:
{
 80043a0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80043a2:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80043a6:	2a20      	cmp	r2, #32
 80043a8:	d13d      	bne.n	8004426 <HAL_UART_Transmit_DMA+0x86>
{
 80043aa:	b510      	push	{r4, lr}
 80043ac:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80043ae:	2900      	cmp	r1, #0
 80043b0:	d03b      	beq.n	800442a <HAL_UART_Transmit_DMA+0x8a>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d03b      	beq.n	800442e <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 80043b6:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80043b8:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 80043bc:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c6:	2221      	movs	r2, #33	@ 0x21
 80043c8:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 80043cc:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80043ce:	b1ca      	cbz	r2, 8004404 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043d0:	4918      	ldr	r1, [pc, #96]	@ (8004434 <HAL_UART_Transmit_DMA+0x94>)
 80043d2:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80043d4:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80043d6:	4918      	ldr	r1, [pc, #96]	@ (8004438 <HAL_UART_Transmit_DMA+0x98>)
 80043d8:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80043da:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80043dc:	4917      	ldr	r1, [pc, #92]	@ (800443c <HAL_UART_Transmit_DMA+0x9c>)
 80043de:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80043e0:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 80043e2:	2100      	movs	r1, #0
 80043e4:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80043e6:	6802      	ldr	r2, [r0, #0]
 80043e8:	3228      	adds	r2, #40	@ 0x28
 80043ea:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80043ec:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80043ee:	f7fd ff2b 	bl	8002248 <HAL_DMA_Start_IT>
 80043f2:	b138      	cbz	r0, 8004404 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043f4:	2310      	movs	r3, #16
 80043f6:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 80043fa:	2320      	movs	r3, #32
 80043fc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8004400:	2001      	movs	r0, #1
 8004402:	e00f      	b.n	8004424 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	2240      	movs	r2, #64	@ 0x40
 8004408:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800440a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	f102 0308 	add.w	r3, r2, #8
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	3208      	adds	r2, #8
 800441a:	e842 3100 	strex	r1, r3, [r2]
 800441e:	2900      	cmp	r1, #0
 8004420:	d1f3      	bne.n	800440a <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8004422:	2000      	movs	r0, #0
}
 8004424:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004426:	2002      	movs	r0, #2
}
 8004428:	4770      	bx	lr
      return HAL_ERROR;
 800442a:	2001      	movs	r0, #1
 800442c:	e7fa      	b.n	8004424 <HAL_UART_Transmit_DMA+0x84>
 800442e:	2001      	movs	r0, #1
 8004430:	e7f8      	b.n	8004424 <HAL_UART_Transmit_DMA+0x84>
 8004432:	bf00      	nop
 8004434:	08004441 	.word	0x08004441
 8004438:	080044af 	.word	0x080044af
 800443c:	080044bb 	.word	0x080044bb

08004440 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004440:	b508      	push	{r3, lr}
 8004442:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004444:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f013 0f20 	tst.w	r3, #32
 800444e:	d118      	bne.n	8004482 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004456:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	f102 0308 	add.w	r3, r2, #8
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	3208      	adds	r2, #8
 8004466:	e842 3100 	strex	r1, r3, [r2]
 800446a:	2900      	cmp	r1, #0
 800446c:	d1f3      	bne.n	8004456 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800446e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	e852 3f00 	ldrex	r3, [r2]
 8004474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	e842 3100 	strex	r1, r3, [r2]
 800447c:	2900      	cmp	r1, #0
 800447e:	d1f6      	bne.n	800446e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004480:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004482:	f7fc fd9b 	bl	8000fbc <HAL_UART_TxCpltCallback>
}
 8004486:	e7fb      	b.n	8004480 <UART_DMATransmitCplt+0x40>

08004488 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004488:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800448a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	e852 3f00 	ldrex	r3, [r2]
 8004490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	e842 3100 	strex	r1, r3, [r2]
 8004498:	2900      	cmp	r1, #0
 800449a:	d1f6      	bne.n	800448a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800449c:	2320      	movs	r3, #32
 800449e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044a6:	f7fc fd89 	bl	8000fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044aa:	bd08      	pop	{r3, pc}

080044ac <HAL_UART_TxHalfCpltCallback>:
}
 80044ac:	4770      	bx	lr

080044ae <UART_DMATxHalfCplt>:
{
 80044ae:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80044b0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80044b2:	f7ff fffb 	bl	80044ac <HAL_UART_TxHalfCpltCallback>
}
 80044b6:	bd08      	pop	{r3, pc}

080044b8 <HAL_UART_ErrorCallback>:
}
 80044b8:	4770      	bx	lr

080044ba <UART_DMAError>:
{
 80044ba:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044bc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80044be:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80044c2:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80044ce:	d001      	beq.n	80044d4 <UART_DMAError+0x1a>
 80044d0:	2a21      	cmp	r2, #33	@ 0x21
 80044d2:	d010      	beq.n	80044f6 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80044dc:	d001      	beq.n	80044e2 <UART_DMAError+0x28>
 80044de:	2d22      	cmp	r5, #34	@ 0x22
 80044e0:	d010      	beq.n	8004504 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80044e6:	f043 0310 	orr.w	r3, r3, #16
 80044ea:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7ff ffe2 	bl	80044b8 <HAL_UART_ErrorCallback>
}
 80044f4:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7ff ff0b 	bl	8004318 <UART_EndTxTransfer>
 8004502:	e7e7      	b.n	80044d4 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800450a:	4620      	mov	r0, r4
 800450c:	f7ff ff1d 	bl	800434a <UART_EndRxTransfer>
 8004510:	e7e7      	b.n	80044e2 <UART_DMAError+0x28>

08004512 <UART_DMAAbortOnError>:
{
 8004512:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004514:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800451c:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8004520:	f7ff ffca 	bl	80044b8 <HAL_UART_ErrorCallback>
}
 8004524:	bd08      	pop	{r3, pc}

08004526 <HAL_UARTEx_RxEventCallback>:
}
 8004526:	4770      	bx	lr

08004528 <HAL_UART_IRQHandler>:
{
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800452c:	6802      	ldr	r2, [r0, #0]
 800452e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004530:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004532:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8004534:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8004538:	ea13 0f0c 	tst.w	r3, ip
 800453c:	d10d      	bne.n	800455a <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800453e:	f013 0f20 	tst.w	r3, #32
 8004542:	d010      	beq.n	8004566 <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004544:	f010 0f20 	tst.w	r0, #32
 8004548:	d102      	bne.n	8004550 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800454a:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800454e:	d00a      	beq.n	8004566 <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8004550:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8004552:	b393      	cbz	r3, 80045ba <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 8004554:	4620      	mov	r0, r4
 8004556:	4798      	blx	r3
      return;
 8004558:	e02f      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800455a:	4db4      	ldr	r5, [pc, #720]	@ (800482c <HAL_UART_IRQHandler+0x304>)
 800455c:	400d      	ands	r5, r1
 800455e:	d12d      	bne.n	80045bc <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004560:	4eb3      	ldr	r6, [pc, #716]	@ (8004830 <HAL_UART_IRQHandler+0x308>)
 8004562:	4230      	tst	r0, r6
 8004564:	d12a      	bne.n	80045bc <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004566:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8004568:	2d01      	cmp	r5, #1
 800456a:	f000 80c0 	beq.w	80046ee <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800456e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8004572:	d003      	beq.n	800457c <HAL_UART_IRQHandler+0x54>
 8004574:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8004578:	f040 815e 	bne.w	8004838 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800457c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004580:	d007      	beq.n	8004592 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004582:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8004586:	f040 815e 	bne.w	8004846 <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800458a:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800458e:	f040 815a 	bne.w	8004846 <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004592:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004596:	d003      	beq.n	80045a0 <HAL_UART_IRQHandler+0x78>
 8004598:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800459c:	f040 815a 	bne.w	8004854 <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80045a0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80045a4:	d003      	beq.n	80045ae <HAL_UART_IRQHandler+0x86>
 80045a6:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80045aa:	f040 8157 	bne.w	800485c <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045ae:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80045b2:	d002      	beq.n	80045ba <HAL_UART_IRQHandler+0x92>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	f2c0 8155 	blt.w	8004864 <HAL_UART_IRQHandler+0x33c>
}
 80045ba:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045bc:	f013 0f01 	tst.w	r3, #1
 80045c0:	d009      	beq.n	80045d6 <HAL_UART_IRQHandler+0xae>
 80045c2:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80045c6:	d006      	beq.n	80045d6 <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045c8:	2601      	movs	r6, #1
 80045ca:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045cc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80045d0:	4332      	orrs	r2, r6
 80045d2:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045d6:	f013 0f02 	tst.w	r3, #2
 80045da:	d00b      	beq.n	80045f4 <HAL_UART_IRQHandler+0xcc>
 80045dc:	f011 0f01 	tst.w	r1, #1
 80045e0:	d008      	beq.n	80045f4 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	2602      	movs	r6, #2
 80045e6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045e8:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80045ec:	f042 0204 	orr.w	r2, r2, #4
 80045f0:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045f4:	f013 0f04 	tst.w	r3, #4
 80045f8:	d00b      	beq.n	8004612 <HAL_UART_IRQHandler+0xea>
 80045fa:	f011 0f01 	tst.w	r1, #1
 80045fe:	d008      	beq.n	8004612 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004600:	6822      	ldr	r2, [r4, #0]
 8004602:	2604      	movs	r6, #4
 8004604:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004606:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800460a:	f042 0202 	orr.w	r2, r2, #2
 800460e:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004612:	f013 0f08 	tst.w	r3, #8
 8004616:	d00b      	beq.n	8004630 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004618:	f010 0f20 	tst.w	r0, #32
 800461c:	d100      	bne.n	8004620 <HAL_UART_IRQHandler+0xf8>
 800461e:	b13d      	cbz	r5, 8004630 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004620:	6822      	ldr	r2, [r4, #0]
 8004622:	2508      	movs	r5, #8
 8004624:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004626:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800462a:	432a      	orrs	r2, r5
 800462c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004630:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004634:	d00c      	beq.n	8004650 <HAL_UART_IRQHandler+0x128>
 8004636:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 800463a:	d009      	beq.n	8004650 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800463c:	6822      	ldr	r2, [r4, #0]
 800463e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8004642:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004644:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8004648:	f042 0220 	orr.w	r2, r2, #32
 800464c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004650:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8004654:	2a00      	cmp	r2, #0
 8004656:	d0b0      	beq.n	80045ba <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004658:	f013 0f20 	tst.w	r3, #32
 800465c:	d009      	beq.n	8004672 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800465e:	f010 0f20 	tst.w	r0, #32
 8004662:	d102      	bne.n	800466a <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004664:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8004668:	d003      	beq.n	8004672 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 800466a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800466c:	b10b      	cbz	r3, 8004672 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 800466e:	4620      	mov	r0, r4
 8004670:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004672:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800467e:	d102      	bne.n	8004686 <HAL_UART_IRQHandler+0x15e>
 8004680:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8004684:	d02c      	beq.n	80046e0 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 8004686:	4620      	mov	r0, r4
 8004688:	f7ff fe5f 	bl	800434a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004694:	d020      	beq.n	80046d8 <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004696:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	f102 0308 	add.w	r3, r2, #8
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	3208      	adds	r2, #8
 80046a6:	e842 3100 	strex	r1, r3, [r2]
 80046aa:	2900      	cmp	r1, #0
 80046ac:	d1f3      	bne.n	8004696 <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 80046ae:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80046b2:	b16b      	cbz	r3, 80046d0 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046b4:	4a5f      	ldr	r2, [pc, #380]	@ (8004834 <HAL_UART_IRQHandler+0x30c>)
 80046b6:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046b8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80046bc:	f7fd fe4a 	bl	8002354 <HAL_DMA_Abort_IT>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	f43f af7a 	beq.w	80045ba <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046c6:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80046ca:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80046cc:	4798      	blx	r3
 80046ce:	e774      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7ff fef1 	bl	80044b8 <HAL_UART_ErrorCallback>
 80046d6:	e770      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff feed 	bl	80044b8 <HAL_UART_ErrorCallback>
 80046de:	e76c      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 80046e0:	4620      	mov	r0, r4
 80046e2:	f7ff fee9 	bl	80044b8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 80046ec:	e765      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046ee:	f013 0f10 	tst.w	r3, #16
 80046f2:	f43f af3c 	beq.w	800456e <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046f6:	f010 0f10 	tst.w	r0, #16
 80046fa:	f43f af38 	beq.w	800456e <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046fe:	2310      	movs	r3, #16
 8004700:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800470a:	d053      	beq.n	80047b4 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800470c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8004710:	6813      	ldr	r3, [r2, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004716:	2b00      	cmp	r3, #0
 8004718:	f43f af4f 	beq.w	80045ba <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800471c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8004720:	4299      	cmp	r1, r3
 8004722:	f67f af4a 	bls.w	80045ba <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 8004726:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f013 0f20 	tst.w	r3, #32
 8004732:	d132      	bne.n	800479a <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004734:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	e852 3f00 	ldrex	r3, [r2]
 800473a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	e842 3100 	strex	r1, r3, [r2]
 8004742:	2900      	cmp	r1, #0
 8004744:	d1f6      	bne.n	8004734 <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004746:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	f102 0308 	add.w	r3, r2, #8
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	3208      	adds	r2, #8
 8004756:	e842 3100 	strex	r1, r3, [r2]
 800475a:	2900      	cmp	r1, #0
 800475c:	d1f3      	bne.n	8004746 <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	f102 0308 	add.w	r3, r2, #8
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	3208      	adds	r2, #8
 800476e:	e842 3100 	strex	r1, r3, [r2]
 8004772:	2900      	cmp	r1, #0
 8004774:	d1f3      	bne.n	800475e <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 8004776:	2320      	movs	r3, #32
 8004778:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477c:	2300      	movs	r3, #0
 800477e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004780:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	e852 3f00 	ldrex	r3, [r2]
 8004786:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	e842 3100 	strex	r1, r3, [r2]
 800478e:	2900      	cmp	r1, #0
 8004790:	d1f6      	bne.n	8004780 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004792:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8004796:	f7fd fda3 	bl	80022e0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800479a:	2302      	movs	r3, #2
 800479c:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800479e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80047a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	1ac9      	subs	r1, r1, r3
 80047aa:	b289      	uxth	r1, r1
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7ff feba 	bl	8004526 <HAL_UARTEx_RxEventCallback>
      return;
 80047b2:	e702      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047b4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80047b8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	1ac9      	subs	r1, r1, r3
 80047c0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80047c2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f43f aef6 	beq.w	80045ba <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 80047ce:	2900      	cmp	r1, #0
 80047d0:	f43f aef3 	beq.w	80045ba <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047d4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	e852 3f00 	ldrex	r3, [r2]
 80047da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	e842 3000 	strex	r0, r3, [r2]
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d1f6      	bne.n	80047d4 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	f102 0308 	add.w	r3, r2, #8
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	3208      	adds	r2, #8
 80047fa:	e842 3000 	strex	r0, r3, [r2]
 80047fe:	2800      	cmp	r0, #0
 8004800:	d1f1      	bne.n	80047e6 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8004802:	2320      	movs	r3, #32
 8004804:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004808:	2300      	movs	r3, #0
 800480a:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800480c:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	e852 3f00 	ldrex	r3, [r2]
 8004814:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	e842 3000 	strex	r0, r3, [r2]
 800481c:	2800      	cmp	r0, #0
 800481e:	d1f6      	bne.n	800480e <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004820:	2302      	movs	r3, #2
 8004822:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004824:	4620      	mov	r0, r4
 8004826:	f7ff fe7e 	bl	8004526 <HAL_UARTEx_RxEventCallback>
      return;
 800482a:	e6c6      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
 800482c:	10000001 	.word	0x10000001
 8004830:	04000120 	.word	0x04000120
 8004834:	08004513 	.word	0x08004513
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004838:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800483c:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800483e:	4620      	mov	r0, r4
 8004840:	f000 fe60 	bl	8005504 <HAL_UARTEx_WakeupCallback>
    return;
 8004844:	e6b9      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 8004846:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004848:	2b00      	cmp	r3, #0
 800484a:	f43f aeb6 	beq.w	80045ba <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 800484e:	4620      	mov	r0, r4
 8004850:	4798      	blx	r3
    return;
 8004852:	e6b2      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 8004854:	4620      	mov	r0, r4
 8004856:	f7ff fe17 	bl	8004488 <UART_EndTransmit_IT>
    return;
 800485a:	e6ae      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800485c:	4620      	mov	r0, r4
 800485e:	f000 fe53 	bl	8005508 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8004862:	e6aa      	b.n	80045ba <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004864:	4620      	mov	r0, r4
 8004866:	f000 fe4e 	bl	8005506 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800486a:	e6a6      	b.n	80045ba <HAL_UART_IRQHandler+0x92>

0800486c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800486c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800486e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004872:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8004876:	2a22      	cmp	r2, #34	@ 0x22
 8004878:	d005      	beq.n	8004886 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800487a:	6802      	ldr	r2, [r0, #0]
 800487c:	6993      	ldr	r3, [r2, #24]
 800487e:	f043 0308 	orr.w	r3, r3, #8
 8004882:	6193      	str	r3, [r2, #24]
  }
}
 8004884:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004886:	6802      	ldr	r2, [r0, #0]
 8004888:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800488a:	b2db      	uxtb	r3, r3
 800488c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800488e:	400b      	ands	r3, r1
 8004890:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8004892:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004894:	3301      	adds	r3, #1
 8004896:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8004898:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80048a6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e9      	bne.n	8004884 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	e852 3f00 	ldrex	r3, [r2]
 80048b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	e842 3100 	strex	r1, r3, [r2]
 80048be:	2900      	cmp	r1, #0
 80048c0:	d1f6      	bne.n	80048b0 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	f102 0308 	add.w	r3, r2, #8
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	3208      	adds	r2, #8
 80048d2:	e842 3100 	strex	r1, r3, [r2]
 80048d6:	2900      	cmp	r1, #0
 80048d8:	d1f3      	bne.n	80048c2 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 80048da:	2320      	movs	r3, #32
 80048dc:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048e4:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048e6:	6803      	ldr	r3, [r0, #0]
 80048e8:	4a16      	ldr	r2, [pc, #88]	@ (8004944 <UART_RxISR_8BIT+0xd8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00c      	beq.n	8004908 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80048f4:	d008      	beq.n	8004908 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	e852 3f00 	ldrex	r3, [r2]
 80048fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	e842 3100 	strex	r1, r3, [r2]
 8004904:	2900      	cmp	r1, #0
 8004906:	d1f6      	bne.n	80048f6 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800490a:	2b01      	cmp	r3, #1
 800490c:	d116      	bne.n	800493c <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	2300      	movs	r3, #0
 8004910:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004912:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	e852 3f00 	ldrex	r3, [r2]
 8004918:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	e842 3100 	strex	r1, r3, [r2]
 8004920:	2900      	cmp	r1, #0
 8004922:	d1f6      	bne.n	8004912 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004924:	6803      	ldr	r3, [r0, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	f012 0f10 	tst.w	r2, #16
 800492c:	d001      	beq.n	8004932 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800492e:	2210      	movs	r2, #16
 8004930:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004932:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8004936:	f7ff fdf6 	bl	8004526 <HAL_UARTEx_RxEventCallback>
 800493a:	e7a3      	b.n	8004884 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800493c:	f7fc fb4e 	bl	8000fdc <HAL_UART_RxCpltCallback>
 8004940:	e7a0      	b.n	8004884 <UART_RxISR_8BIT+0x18>
 8004942:	bf00      	nop
 8004944:	40008000 	.word	0x40008000

08004948 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004948:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800494a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800494e:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8004952:	2b22      	cmp	r3, #34	@ 0x22
 8004954:	d005      	beq.n	8004962 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004956:	6802      	ldr	r2, [r0, #0]
 8004958:	6993      	ldr	r3, [r2, #24]
 800495a:	f043 0308 	orr.w	r3, r3, #8
 800495e:	6193      	str	r3, [r2, #24]
  }
}
 8004960:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004962:	6803      	ldr	r3, [r0, #0]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004966:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8004968:	4013      	ands	r3, r2
 800496a:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800496c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800496e:	3302      	adds	r3, #2
 8004970:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8004972:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29b      	uxth	r3, r3
 800497c:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8004980:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1ea      	bne.n	8004960 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800498a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	e852 3f00 	ldrex	r3, [r2]
 8004990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	e842 3100 	strex	r1, r3, [r2]
 8004998:	2900      	cmp	r1, #0
 800499a:	d1f6      	bne.n	800498a <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	f102 0308 	add.w	r3, r2, #8
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	3208      	adds	r2, #8
 80049ac:	e842 3100 	strex	r1, r3, [r2]
 80049b0:	2900      	cmp	r1, #0
 80049b2:	d1f3      	bne.n	800499c <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80049b4:	2320      	movs	r3, #32
 80049b6:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049be:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049c0:	6803      	ldr	r3, [r0, #0]
 80049c2:	4a16      	ldr	r2, [pc, #88]	@ (8004a1c <UART_RxISR_16BIT+0xd4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00c      	beq.n	80049e2 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80049ce:	d008      	beq.n	80049e2 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	e852 3f00 	ldrex	r3, [r2]
 80049d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	e842 3100 	strex	r1, r3, [r2]
 80049de:	2900      	cmp	r1, #0
 80049e0:	d1f6      	bne.n	80049d0 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d116      	bne.n	8004a16 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e8:	2300      	movs	r3, #0
 80049ea:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	e852 3f00 	ldrex	r3, [r2]
 80049f2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	e842 3100 	strex	r1, r3, [r2]
 80049fa:	2900      	cmp	r1, #0
 80049fc:	d1f6      	bne.n	80049ec <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049fe:	6803      	ldr	r3, [r0, #0]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	f012 0f10 	tst.w	r2, #16
 8004a06:	d001      	beq.n	8004a0c <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a08:	2210      	movs	r2, #16
 8004a0a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a0c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8004a10:	f7ff fd89 	bl	8004526 <HAL_UARTEx_RxEventCallback>
 8004a14:	e7a4      	b.n	8004960 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8004a16:	f7fc fae1 	bl	8000fdc <HAL_UART_RxCpltCallback>
 8004a1a:	e7a1      	b.n	8004960 <UART_RxISR_16BIT+0x18>
 8004a1c:	40008000 	.word	0x40008000

08004a20 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8004a24:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004a28:	6803      	ldr	r3, [r0, #0]
 8004a2a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004a2c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004a30:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a34:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8004a38:	2a22      	cmp	r2, #34	@ 0x22
 8004a3a:	d005      	beq.n	8004a48 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	f042 0208 	orr.w	r2, r2, #8
 8004a42:	619a      	str	r2, [r3, #24]
  }
}
 8004a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a48:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8004a4a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a4e:	e008      	b.n	8004a62 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a50:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d14c      	bne.n	8004af2 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8004a58:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d04e      	beq.n	8004b00 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a62:	2f00      	cmp	r7, #0
 8004a64:	f000 809a 	beq.w	8004b9c <UART_RxISR_8BIT_FIFOEN+0x17c>
 8004a68:	f015 0f20 	tst.w	r5, #32
 8004a6c:	f000 8096 	beq.w	8004b9c <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a74:	b2f3      	uxtb	r3, r6
 8004a76:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004a78:	400b      	ands	r3, r1
 8004a7a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8004a7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a7e:	3301      	adds	r3, #1
 8004a80:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8004a82:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004a94:	f015 0f07 	tst.w	r5, #7
 8004a98:	d0de      	beq.n	8004a58 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a9a:	f015 0f01 	tst.w	r5, #1
 8004a9e:	d009      	beq.n	8004ab4 <UART_RxISR_8BIT_FIFOEN+0x94>
 8004aa0:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8004aa4:	d006      	beq.n	8004ab4 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aaa:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ab4:	f015 0f02 	tst.w	r5, #2
 8004ab8:	d00b      	beq.n	8004ad2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8004aba:	f018 0f01 	tst.w	r8, #1
 8004abe:	d008      	beq.n	8004ad2 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ac6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004aca:	f043 0304 	orr.w	r3, r3, #4
 8004ace:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ad2:	f015 0f04 	tst.w	r5, #4
 8004ad6:	d0bb      	beq.n	8004a50 <UART_RxISR_8BIT_FIFOEN+0x30>
 8004ad8:	f018 0f01 	tst.w	r8, #1
 8004adc:	d0b8      	beq.n	8004a50 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ae4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8004af0:	e7ae      	b.n	8004a50 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8004af2:	4620      	mov	r0, r4
 8004af4:	f7ff fce0 	bl	80044b8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8004afe:	e7ab      	b.n	8004a58 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b00:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	e852 3f00 	ldrex	r3, [r2]
 8004b06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	e842 3100 	strex	r1, r3, [r2]
 8004b0e:	2900      	cmp	r1, #0
 8004b10:	d1f6      	bne.n	8004b00 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b12:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	f102 0308 	add.w	r3, r2, #8
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b20:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	3208      	adds	r2, #8
 8004b26:	e842 3100 	strex	r1, r3, [r2]
 8004b2a:	2900      	cmp	r1, #0
 8004b2c:	d1f1      	bne.n	8004b12 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	2320      	movs	r3, #32
 8004b30:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b38:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	4a29      	ldr	r2, [pc, #164]	@ (8004be4 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8004b48:	d106      	bne.n	8004b58 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d00d      	beq.n	8004b6c <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7fc fa43 	bl	8000fdc <HAL_UART_RxCpltCallback>
 8004b56:	e784      	b.n	8004a62 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b58:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	e852 3f00 	ldrex	r3, [r2]
 8004b5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	e842 3100 	strex	r1, r3, [r2]
 8004b66:	2900      	cmp	r1, #0
 8004b68:	d1f6      	bne.n	8004b58 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004b6a:	e7ee      	b.n	8004b4a <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b70:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	e852 3f00 	ldrex	r3, [r2]
 8004b76:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	e842 3100 	strex	r1, r3, [r2]
 8004b7e:	2900      	cmp	r1, #0
 8004b80:	d1f6      	bne.n	8004b70 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	f012 0f10 	tst.w	r2, #16
 8004b8a:	d001      	beq.n	8004b90 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b90:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8004b94:	4620      	mov	r0, r4
 8004b96:	f7ff fcc6 	bl	8004526 <HAL_UARTEx_RxEventCallback>
 8004b9a:	e762      	b.n	8004a62 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8004b9c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8004ba0:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f43f af4e 	beq.w	8004a44 <UART_RxISR_8BIT_FIFOEN+0x24>
 8004ba8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8004bac:	429a      	cmp	r2, r3
 8004bae:	f67f af49 	bls.w	8004a44 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	f102 0308 	add.w	r3, r2, #8
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	3208      	adds	r2, #8
 8004bc2:	e842 3100 	strex	r1, r3, [r2]
 8004bc6:	2900      	cmp	r1, #0
 8004bc8:	d1f3      	bne.n	8004bb2 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8004bca:	4b07      	ldr	r3, [pc, #28]	@ (8004be8 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8004bcc:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	e852 3f00 	ldrex	r3, [r2]
 8004bd4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	e842 3100 	strex	r1, r3, [r2]
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	d1f6      	bne.n	8004bce <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8004be0:	e730      	b.n	8004a44 <UART_RxISR_8BIT_FIFOEN+0x24>
 8004be2:	bf00      	nop
 8004be4:	40008000 	.word	0x40008000
 8004be8:	0800486d 	.word	0x0800486d

08004bec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004bf0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004bf4:	6803      	ldr	r3, [r0, #0]
 8004bf6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004bf8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004bfc:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c00:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8004c04:	2a22      	cmp	r2, #34	@ 0x22
 8004c06:	d005      	beq.n	8004c14 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	f042 0208 	orr.w	r2, r2, #8
 8004c0e:	619a      	str	r2, [r3, #24]
  }
}
 8004c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c14:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8004c16:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c1a:	e008      	b.n	8004c2e <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d14b      	bne.n	8004cbc <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8004c24:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d04d      	beq.n	8004cca <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c2e:	2f00      	cmp	r7, #0
 8004c30:	f000 8099 	beq.w	8004d66 <UART_RxISR_16BIT_FIFOEN+0x17a>
 8004c34:	f015 0f20 	tst.w	r5, #32
 8004c38:	f000 8095 	beq.w	8004d66 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c40:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8004c42:	4033      	ands	r3, r6
 8004c44:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004c46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c48:	3302      	adds	r3, #2
 8004c4a:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8004c4c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004c5e:	f015 0f07 	tst.w	r5, #7
 8004c62:	d0df      	beq.n	8004c24 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c64:	f015 0f01 	tst.w	r5, #1
 8004c68:	d009      	beq.n	8004c7e <UART_RxISR_16BIT_FIFOEN+0x92>
 8004c6a:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8004c6e:	d006      	beq.n	8004c7e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c70:	2201      	movs	r2, #1
 8004c72:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c74:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c7e:	f015 0f02 	tst.w	r5, #2
 8004c82:	d00b      	beq.n	8004c9c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8004c84:	f018 0f01 	tst.w	r8, #1
 8004c88:	d008      	beq.n	8004c9c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c90:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004c94:	f043 0304 	orr.w	r3, r3, #4
 8004c98:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c9c:	f015 0f04 	tst.w	r5, #4
 8004ca0:	d0bc      	beq.n	8004c1c <UART_RxISR_16BIT_FIFOEN+0x30>
 8004ca2:	f018 0f01 	tst.w	r8, #1
 8004ca6:	d0b9      	beq.n	8004c1c <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	2204      	movs	r2, #4
 8004cac:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cae:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004cb2:	f043 0302 	orr.w	r3, r3, #2
 8004cb6:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8004cba:	e7af      	b.n	8004c1c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f7ff fbfb 	bl	80044b8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8004cc8:	e7ac      	b.n	8004c24 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	e852 3f00 	ldrex	r3, [r2]
 8004cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	e842 3100 	strex	r1, r3, [r2]
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	d1f6      	bne.n	8004cca <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cdc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	f102 0308 	add.w	r3, r2, #8
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	3208      	adds	r2, #8
 8004cf0:	e842 3100 	strex	r1, r3, [r2]
 8004cf4:	2900      	cmp	r1, #0
 8004cf6:	d1f1      	bne.n	8004cdc <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d02:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	4a29      	ldr	r2, [pc, #164]	@ (8004dac <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8004d12:	d106      	bne.n	8004d22 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d14:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d00d      	beq.n	8004d36 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f7fc f95e 	bl	8000fdc <HAL_UART_RxCpltCallback>
 8004d20:	e785      	b.n	8004c2e <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	e852 3f00 	ldrex	r3, [r2]
 8004d28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	e842 3100 	strex	r1, r3, [r2]
 8004d30:	2900      	cmp	r1, #0
 8004d32:	d1f6      	bne.n	8004d22 <UART_RxISR_16BIT_FIFOEN+0x136>
 8004d34:	e7ee      	b.n	8004d14 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d36:	2300      	movs	r3, #0
 8004d38:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	e852 3f00 	ldrex	r3, [r2]
 8004d40:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	e842 3100 	strex	r1, r3, [r2]
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	d1f6      	bne.n	8004d3a <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	f012 0f10 	tst.w	r2, #16
 8004d54:	d001      	beq.n	8004d5a <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d56:	2210      	movs	r2, #16
 8004d58:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d5a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f7ff fbe1 	bl	8004526 <HAL_UARTEx_RxEventCallback>
 8004d64:	e763      	b.n	8004c2e <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8004d66:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8004d6a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f43f af4f 	beq.w	8004c10 <UART_RxISR_16BIT_FIFOEN+0x24>
 8004d72:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8004d76:	429a      	cmp	r2, r3
 8004d78:	f67f af4a 	bls.w	8004c10 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	f102 0308 	add.w	r3, r2, #8
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	3208      	adds	r2, #8
 8004d8c:	e842 3100 	strex	r1, r3, [r2]
 8004d90:	2900      	cmp	r1, #0
 8004d92:	d1f3      	bne.n	8004d7c <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8004d94:	4b06      	ldr	r3, [pc, #24]	@ (8004db0 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8004d96:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d98:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	e852 3f00 	ldrex	r3, [r2]
 8004d9e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	e842 3100 	strex	r1, r3, [r2]
 8004da6:	2900      	cmp	r1, #0
 8004da8:	d1f6      	bne.n	8004d98 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8004daa:	e731      	b.n	8004c10 <UART_RxISR_16BIT_FIFOEN+0x24>
 8004dac:	40008000 	.word	0x40008000
 8004db0:	08004949 	.word	0x08004949

08004db4 <UART_SetConfig>:
{
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004db8:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dba:	6883      	ldr	r3, [r0, #8]
 8004dbc:	6902      	ldr	r2, [r0, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	6942      	ldr	r2, [r0, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	69c2      	ldr	r2, [r0, #28]
 8004dc6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dc8:	6808      	ldr	r0, [r1, #0]
 8004dca:	4a9d      	ldr	r2, [pc, #628]	@ (8005040 <UART_SetConfig+0x28c>)
 8004dcc:	4002      	ands	r2, r0
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	6853      	ldr	r3, [r2, #4]
 8004dd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004dda:	68e1      	ldr	r1, [r4, #12]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004de0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	4b97      	ldr	r3, [pc, #604]	@ (8005044 <UART_SetConfig+0x290>)
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d001      	beq.n	8004dee <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8004dea:	6a23      	ldr	r3, [r4, #32]
 8004dec:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dee:	6893      	ldr	r3, [r2, #8]
 8004df0:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004df4:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004dfc:	6822      	ldr	r2, [r4, #0]
 8004dfe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004e00:	f023 030f 	bic.w	r3, r3, #15
 8004e04:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004e06:	430b      	orrs	r3, r1
 8004e08:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	4a8e      	ldr	r2, [pc, #568]	@ (8005048 <UART_SetConfig+0x294>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01c      	beq.n	8004e4c <UART_SetConfig+0x98>
 8004e12:	4a8e      	ldr	r2, [pc, #568]	@ (800504c <UART_SetConfig+0x298>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d031      	beq.n	8004e7c <UART_SetConfig+0xc8>
 8004e18:	4a8a      	ldr	r2, [pc, #552]	@ (8005044 <UART_SetConfig+0x290>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d04b      	beq.n	8004eb6 <UART_SetConfig+0x102>
 8004e1e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e20:	4988      	ldr	r1, [pc, #544]	@ (8005044 <UART_SetConfig+0x290>)
 8004e22:	428b      	cmp	r3, r1
 8004e24:	d068      	beq.n	8004ef8 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e26:	69e0      	ldr	r0, [r4, #28]
 8004e28:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004e2c:	f000 80a5 	beq.w	8004f7a <UART_SetConfig+0x1c6>
    switch (clocksource)
 8004e30:	2a08      	cmp	r2, #8
 8004e32:	f200 811f 	bhi.w	8005074 <UART_SetConfig+0x2c0>
 8004e36:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004e3a:	00d3      	.short	0x00d3
 8004e3c:	00d100f5 	.word	0x00d100f5
 8004e40:	00f8011d 	.word	0x00f8011d
 8004e44:	011d011d 	.word	0x011d011d
 8004e48:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004e4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e50:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8004e54:	f002 0203 	and.w	r2, r2, #3
 8004e58:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e5c:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8004e60:	2a03      	cmp	r2, #3
 8004e62:	d809      	bhi.n	8004e78 <UART_SetConfig+0xc4>
 8004e64:	e8df f002 	tbb	[pc, r2]
 8004e68:	063c0402 	.word	0x063c0402
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	e7d7      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004e70:	2204      	movs	r2, #4
 8004e72:	e7d5      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004e74:	2208      	movs	r2, #8
 8004e76:	e7d3      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004e78:	2210      	movs	r2, #16
 8004e7a:	e7d1      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004e7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e80:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8004e84:	f002 020c 	and.w	r2, r2, #12
 8004e88:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 8004e8c:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 8004e90:	2a0c      	cmp	r2, #12
 8004e92:	d80e      	bhi.n	8004eb2 <UART_SetConfig+0xfe>
 8004e94:	e8df f002 	tbb	[pc, r2]
 8004e98:	0d0d0d07 	.word	0x0d0d0d07
 8004e9c:	0d0d0d09 	.word	0x0d0d0d09
 8004ea0:	0d0d0d26 	.word	0x0d0d0d26
 8004ea4:	0b          	.byte	0x0b
 8004ea5:	00          	.byte	0x00
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	e7ba      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004eaa:	2204      	movs	r2, #4
 8004eac:	e7b8      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004eae:	2208      	movs	r2, #8
 8004eb0:	e7b6      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004eb2:	2210      	movs	r2, #16
 8004eb4:	e7b4      	b.n	8004e20 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004eb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eba:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8004ebe:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8004ec2:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8004ec6:	d00f      	beq.n	8004ee8 <UART_SetConfig+0x134>
 8004ec8:	d805      	bhi.n	8004ed6 <UART_SetConfig+0x122>
 8004eca:	b17a      	cbz	r2, 8004eec <UART_SetConfig+0x138>
 8004ecc:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004ed0:	d10e      	bne.n	8004ef0 <UART_SetConfig+0x13c>
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	e7a4      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004ed6:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8004eda:	d10b      	bne.n	8004ef4 <UART_SetConfig+0x140>
 8004edc:	2208      	movs	r2, #8
 8004ede:	e79f      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	e79d      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	e79b      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004ee8:	2202      	movs	r2, #2
 8004eea:	e799      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004eec:	2200      	movs	r2, #0
 8004eee:	e797      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	e795      	b.n	8004e20 <UART_SetConfig+0x6c>
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	e793      	b.n	8004e20 <UART_SetConfig+0x6c>
    switch (clocksource)
 8004ef8:	2a08      	cmp	r2, #8
 8004efa:	f200 809c 	bhi.w	8005036 <UART_SetConfig+0x282>
 8004efe:	e8df f002 	tbb	[pc, r2]
 8004f02:	9a08      	.short	0x9a08
 8004f04:	9a379a3a 	.word	0x9a379a3a
 8004f08:	9a9a      	.short	0x9a9a
 8004f0a:	05          	.byte	0x05
 8004f0b:	00          	.byte	0x00
 8004f0c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004f10:	e004      	b.n	8004f1c <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f12:	f7fe fabf 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004f16:	2800      	cmp	r0, #0
 8004f18:	f000 808f 	beq.w	800503a <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8005050 <UART_SetConfig+0x29c>)
 8004f20:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004f24:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f28:	6865      	ldr	r5, [r4, #4]
 8004f2a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004f2e:	4299      	cmp	r1, r3
 8004f30:	f200 8094 	bhi.w	800505c <UART_SetConfig+0x2a8>
 8004f34:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004f38:	f200 8092 	bhi.w	8005060 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f3c:	2600      	movs	r6, #0
 8004f3e:	4633      	mov	r3, r6
 8004f40:	4631      	mov	r1, r6
 8004f42:	f7fb f921 	bl	8000188 <__aeabi_uldivmod>
 8004f46:	0209      	lsls	r1, r1, #8
 8004f48:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8004f4c:	0200      	lsls	r0, r0, #8
 8004f4e:	086b      	lsrs	r3, r5, #1
 8004f50:	18c0      	adds	r0, r0, r3
 8004f52:	462a      	mov	r2, r5
 8004f54:	4633      	mov	r3, r6
 8004f56:	f141 0100 	adc.w	r1, r1, #0
 8004f5a:	f7fb f915 	bl	8000188 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f5e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8004f62:	4b3c      	ldr	r3, [pc, #240]	@ (8005054 <UART_SetConfig+0x2a0>)
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d87d      	bhi.n	8005064 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	60d8      	str	r0, [r3, #12]
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	e050      	b.n	8005012 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8004f70:	f7fd fd92 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
        break;
 8004f74:	e7cf      	b.n	8004f16 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8004f76:	4838      	ldr	r0, [pc, #224]	@ (8005058 <UART_SetConfig+0x2a4>)
 8004f78:	e7d0      	b.n	8004f1c <UART_SetConfig+0x168>
    switch (clocksource)
 8004f7a:	2a08      	cmp	r2, #8
 8004f7c:	d874      	bhi.n	8005068 <UART_SetConfig+0x2b4>
 8004f7e:	e8df f002 	tbb	[pc, r2]
 8004f82:	2707      	.short	0x2707
 8004f84:	732a7305 	.word	0x732a7305
 8004f88:	7373      	.short	0x7373
 8004f8a:	0b          	.byte	0x0b
 8004f8b:	00          	.byte	0x00
 8004f8c:	4832      	ldr	r0, [pc, #200]	@ (8005058 <UART_SetConfig+0x2a4>)
 8004f8e:	e003      	b.n	8004f98 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f90:	f7fe fa80 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d069      	beq.n	800506c <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f98:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8005050 <UART_SetConfig+0x29c>)
 8004f9c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004fa0:	fbb0 f0f3 	udiv	r0, r0, r3
 8004fa4:	6862      	ldr	r2, [r4, #4]
 8004fa6:	0853      	lsrs	r3, r2, #1
 8004fa8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004fac:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb0:	f1a3 0110 	sub.w	r1, r3, #16
 8004fb4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8004fb8:	4291      	cmp	r1, r2
 8004fba:	d859      	bhi.n	8005070 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fc2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004fc6:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8004fc8:	6822      	ldr	r2, [r4, #0]
 8004fca:	60d3      	str	r3, [r2, #12]
 8004fcc:	2000      	movs	r0, #0
 8004fce:	e020      	b.n	8005012 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd0:	f7fe fa70 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
        break;
 8004fd4:	e7de      	b.n	8004f94 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7fd fd5f 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
        break;
 8004fda:	e7db      	b.n	8004f94 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8004fdc:	481e      	ldr	r0, [pc, #120]	@ (8005058 <UART_SetConfig+0x2a4>)
 8004fde:	e003      	b.n	8004fe8 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe0:	f7fe fa58 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d047      	beq.n	8005078 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004fea:	4b19      	ldr	r3, [pc, #100]	@ (8005050 <UART_SetConfig+0x29c>)
 8004fec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004ff0:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ff4:	6863      	ldr	r3, [r4, #4]
 8004ff6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004ffa:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ffe:	f1a0 0210 	sub.w	r2, r0, #16
 8005002:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8005006:	429a      	cmp	r2, r3
 8005008:	d838      	bhi.n	800507c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	b280      	uxth	r0, r0
 800500e:	60d8      	str	r0, [r3, #12]
 8005010:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005012:	2301      	movs	r3, #1
 8005014:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005018:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8005020:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8005022:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005024:	f7fe fa46 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005028:	e7dc      	b.n	8004fe4 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800502a:	f7fd fd35 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
        break;
 800502e:	e7d9      	b.n	8004fe4 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8005030:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005034:	e7d8      	b.n	8004fe8 <UART_SetConfig+0x234>
    switch (clocksource)
 8005036:	2001      	movs	r0, #1
 8005038:	e7eb      	b.n	8005012 <UART_SetConfig+0x25e>
 800503a:	2000      	movs	r0, #0
 800503c:	e7e9      	b.n	8005012 <UART_SetConfig+0x25e>
 800503e:	bf00      	nop
 8005040:	cfff69f3 	.word	0xcfff69f3
 8005044:	40008000 	.word	0x40008000
 8005048:	40013800 	.word	0x40013800
 800504c:	40004400 	.word	0x40004400
 8005050:	08008810 	.word	0x08008810
 8005054:	000ffcff 	.word	0x000ffcff
 8005058:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800505c:	2001      	movs	r0, #1
 800505e:	e7d8      	b.n	8005012 <UART_SetConfig+0x25e>
 8005060:	2001      	movs	r0, #1
 8005062:	e7d6      	b.n	8005012 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8005064:	2001      	movs	r0, #1
 8005066:	e7d4      	b.n	8005012 <UART_SetConfig+0x25e>
    switch (clocksource)
 8005068:	2001      	movs	r0, #1
 800506a:	e7d2      	b.n	8005012 <UART_SetConfig+0x25e>
 800506c:	2000      	movs	r0, #0
 800506e:	e7d0      	b.n	8005012 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8005070:	2001      	movs	r0, #1
 8005072:	e7ce      	b.n	8005012 <UART_SetConfig+0x25e>
    switch (clocksource)
 8005074:	2001      	movs	r0, #1
 8005076:	e7cc      	b.n	8005012 <UART_SetConfig+0x25e>
 8005078:	2000      	movs	r0, #0
 800507a:	e7ca      	b.n	8005012 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800507c:	2001      	movs	r0, #1
 800507e:	e7c8      	b.n	8005012 <UART_SetConfig+0x25e>

08005080 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005080:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005082:	f013 0f01 	tst.w	r3, #1
 8005086:	d006      	beq.n	8005096 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005088:	6802      	ldr	r2, [r0, #0]
 800508a:	6853      	ldr	r3, [r2, #4]
 800508c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005090:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005092:	430b      	orrs	r3, r1
 8005094:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005096:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005098:	f013 0f02 	tst.w	r3, #2
 800509c:	d006      	beq.n	80050ac <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800509e:	6802      	ldr	r2, [r0, #0]
 80050a0:	6853      	ldr	r3, [r2, #4]
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80050ae:	f013 0f04 	tst.w	r3, #4
 80050b2:	d006      	beq.n	80050c2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b4:	6802      	ldr	r2, [r0, #0]
 80050b6:	6853      	ldr	r3, [r2, #4]
 80050b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050bc:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80050be:	430b      	orrs	r3, r1
 80050c0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050c2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80050c4:	f013 0f08 	tst.w	r3, #8
 80050c8:	d006      	beq.n	80050d8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ca:	6802      	ldr	r2, [r0, #0]
 80050cc:	6853      	ldr	r3, [r2, #4]
 80050ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050d2:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80050da:	f013 0f10 	tst.w	r3, #16
 80050de:	d006      	beq.n	80050ee <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e0:	6802      	ldr	r2, [r0, #0]
 80050e2:	6893      	ldr	r3, [r2, #8]
 80050e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050e8:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80050ea:	430b      	orrs	r3, r1
 80050ec:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80050f0:	f013 0f20 	tst.w	r3, #32
 80050f4:	d006      	beq.n	8005104 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050f6:	6802      	ldr	r2, [r0, #0]
 80050f8:	6893      	ldr	r3, [r2, #8]
 80050fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050fe:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005100:	430b      	orrs	r3, r1
 8005102:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005104:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005106:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800510c:	6802      	ldr	r2, [r0, #0]
 800510e:	6853      	ldr	r3, [r2, #4]
 8005110:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005114:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8005116:	430b      	orrs	r3, r1
 8005118:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800511a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800511c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005120:	d00b      	beq.n	800513a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005122:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005124:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005128:	d006      	beq.n	8005138 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800512a:	6802      	ldr	r2, [r0, #0]
 800512c:	6853      	ldr	r3, [r2, #4]
 800512e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005132:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005134:	430b      	orrs	r3, r1
 8005136:	6053      	str	r3, [r2, #4]
}
 8005138:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800513a:	6802      	ldr	r2, [r0, #0]
 800513c:	6853      	ldr	r3, [r2, #4]
 800513e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005142:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005144:	430b      	orrs	r3, r1
 8005146:	6053      	str	r3, [r2, #4]
 8005148:	e7eb      	b.n	8005122 <UART_AdvFeatureConfig+0xa2>

0800514a <UART_WaitOnFlagUntilTimeout>:
{
 800514a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800514e:	4605      	mov	r5, r0
 8005150:	460f      	mov	r7, r1
 8005152:	4616      	mov	r6, r2
 8005154:	4699      	mov	r9, r3
 8005156:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515a:	682b      	ldr	r3, [r5, #0]
 800515c:	69dc      	ldr	r4, [r3, #28]
 800515e:	ea37 0404 	bics.w	r4, r7, r4
 8005162:	bf0c      	ite	eq
 8005164:	2401      	moveq	r4, #1
 8005166:	2400      	movne	r4, #0
 8005168:	42b4      	cmp	r4, r6
 800516a:	d157      	bne.n	800521c <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800516c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005170:	d0f3      	beq.n	800515a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005172:	f7fb fc55 	bl	8000a20 <HAL_GetTick>
 8005176:	eba0 0009 	sub.w	r0, r0, r9
 800517a:	4540      	cmp	r0, r8
 800517c:	d82f      	bhi.n	80051de <UART_WaitOnFlagUntilTimeout+0x94>
 800517e:	f1b8 0f00 	cmp.w	r8, #0
 8005182:	d02c      	beq.n	80051de <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	f012 0f04 	tst.w	r2, #4
 800518c:	d0e5      	beq.n	800515a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8005194:	d0e1      	beq.n	800515a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005196:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800519a:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800519c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	e852 3f00 	ldrex	r3, [r2]
 80051a2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	e842 3100 	strex	r1, r3, [r2]
 80051aa:	2900      	cmp	r1, #0
 80051ac:	d1f6      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ae:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	f102 0308 	add.w	r3, r2, #8
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	3208      	adds	r2, #8
 80051be:	e842 3100 	strex	r1, r3, [r2]
 80051c2:	2900      	cmp	r1, #0
 80051c4:	d1f3      	bne.n	80051ae <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 80051c6:	2320      	movs	r3, #32
 80051c8:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80051cc:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051d0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 80051d4:	2300      	movs	r3, #0
 80051d6:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 80051da:	2003      	movs	r0, #3
 80051dc:	e01f      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051de:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	e852 3f00 	ldrex	r3, [r2]
 80051e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	e842 3100 	strex	r1, r3, [r2]
 80051ec:	2900      	cmp	r1, #0
 80051ee:	d1f6      	bne.n	80051de <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	f102 0308 	add.w	r3, r2, #8
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	3208      	adds	r2, #8
 8005200:	e842 3100 	strex	r1, r3, [r2]
 8005204:	2900      	cmp	r1, #0
 8005206:	d1f3      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8005208:	2320      	movs	r3, #32
 800520a:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800520e:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 8005212:	2300      	movs	r3, #0
 8005214:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 8005218:	2003      	movs	r0, #3
 800521a:	e000      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800521c:	2000      	movs	r0, #0
}
 800521e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005222 <UART_CheckIdleState>:
{
 8005222:	b530      	push	{r4, r5, lr}
 8005224:	b083      	sub	sp, #12
 8005226:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005228:	2300      	movs	r3, #0
 800522a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800522e:	f7fb fbf7 	bl	8000a20 <HAL_GetTick>
 8005232:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005234:	6822      	ldr	r2, [r4, #0]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	f012 0f08 	tst.w	r2, #8
 800523c:	d110      	bne.n	8005260 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f013 0f04 	tst.w	r3, #4
 8005246:	d119      	bne.n	800527c <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8005248:	2320      	movs	r3, #32
 800524a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800524e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	2000      	movs	r0, #0
 8005254:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005256:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8005258:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800525c:	b003      	add	sp, #12
 800525e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005260:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	4603      	mov	r3, r0
 8005268:	2200      	movs	r2, #0
 800526a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800526e:	4620      	mov	r0, r4
 8005270:	f7ff ff6b 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 8005274:	2800      	cmp	r0, #0
 8005276:	d0e2      	beq.n	800523e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005278:	2003      	movs	r0, #3
 800527a:	e7ef      	b.n	800525c <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800527c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	462b      	mov	r3, r5
 8005284:	2200      	movs	r2, #0
 8005286:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800528a:	4620      	mov	r0, r4
 800528c:	f7ff ff5d 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 8005290:	2800      	cmp	r0, #0
 8005292:	d0d9      	beq.n	8005248 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005294:	2003      	movs	r0, #3
 8005296:	e7e1      	b.n	800525c <UART_CheckIdleState+0x3a>

08005298 <HAL_UART_Init>:
  if (huart == NULL)
 8005298:	b378      	cbz	r0, 80052fa <HAL_UART_Init+0x62>
{
 800529a:	b510      	push	{r4, lr}
 800529c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800529e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80052a2:	b30b      	cbz	r3, 80052e8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80052a4:	2324      	movs	r3, #36	@ 0x24
 80052a6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80052aa:	6822      	ldr	r2, [r4, #0]
 80052ac:	6813      	ldr	r3, [r2, #0]
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052b4:	4620      	mov	r0, r4
 80052b6:	f7ff fd7d 	bl	8004db4 <UART_SetConfig>
 80052ba:	2801      	cmp	r0, #1
 80052bc:	d013      	beq.n	80052e6 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80052c0:	b9bb      	cbnz	r3, 80052f2 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	6853      	ldr	r3, [r2, #4]
 80052c6:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80052ca:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052cc:	6822      	ldr	r2, [r4, #0]
 80052ce:	6893      	ldr	r3, [r2, #8]
 80052d0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80052d4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	6813      	ldr	r3, [r2, #0]
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff ff9e 	bl	8005222 <UART_CheckIdleState>
}
 80052e6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80052e8:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80052ec:	f7fb fd62 	bl	8000db4 <HAL_UART_MspInit>
 80052f0:	e7d8      	b.n	80052a4 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7ff fec4 	bl	8005080 <UART_AdvFeatureConfig>
 80052f8:	e7e3      	b.n	80052c2 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80052fa:	2001      	movs	r0, #1
}
 80052fc:	4770      	bx	lr
	...

08005300 <UART_Start_Receive_IT>:
{
 8005300:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8005302:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005304:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005308:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8005310:	6883      	ldr	r3, [r0, #8]
 8005312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005316:	d006      	beq.n	8005326 <UART_Start_Receive_IT+0x26>
 8005318:	b9a3      	cbnz	r3, 8005344 <UART_Start_Receive_IT+0x44>
 800531a:	6903      	ldr	r3, [r0, #16]
 800531c:	b973      	cbnz	r3, 800533c <UART_Start_Receive_IT+0x3c>
 800531e:	23ff      	movs	r3, #255	@ 0xff
 8005320:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8005324:	e014      	b.n	8005350 <UART_Start_Receive_IT+0x50>
 8005326:	6903      	ldr	r3, [r0, #16]
 8005328:	b923      	cbnz	r3, 8005334 <UART_Start_Receive_IT+0x34>
 800532a:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800532e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8005332:	e00d      	b.n	8005350 <UART_Start_Receive_IT+0x50>
 8005334:	23ff      	movs	r3, #255	@ 0xff
 8005336:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800533a:	e009      	b.n	8005350 <UART_Start_Receive_IT+0x50>
 800533c:	237f      	movs	r3, #127	@ 0x7f
 800533e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8005342:	e005      	b.n	8005350 <UART_Start_Receive_IT+0x50>
 8005344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005348:	d02d      	beq.n	80053a6 <UART_Start_Receive_IT+0xa6>
 800534a:	2300      	movs	r3, #0
 800534c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005350:	2300      	movs	r3, #0
 8005352:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005356:	2322      	movs	r3, #34	@ 0x22
 8005358:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	f101 0308 	add.w	r3, r1, #8
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	3108      	adds	r1, #8
 800536c:	e841 3400 	strex	r4, r3, [r1]
 8005370:	2c00      	cmp	r4, #0
 8005372:	d1f3      	bne.n	800535c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005374:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8005376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800537a:	d01e      	beq.n	80053ba <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537c:	6883      	ldr	r3, [r0, #8]
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005382:	d042      	beq.n	800540a <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8005384:	4b29      	ldr	r3, [pc, #164]	@ (800542c <UART_Start_Receive_IT+0x12c>)
 8005386:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005388:	6903      	ldr	r3, [r0, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d043      	beq.n	8005416 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800538e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	e852 3f00 	ldrex	r3, [r2]
 8005394:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	e842 3100 	strex	r1, r3, [r2]
 800539c:	2900      	cmp	r1, #0
 800539e:	d1f6      	bne.n	800538e <UART_Start_Receive_IT+0x8e>
}
 80053a0:	2000      	movs	r0, #0
 80053a2:	bc10      	pop	{r4}
 80053a4:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80053a6:	6903      	ldr	r3, [r0, #16]
 80053a8:	b91b      	cbnz	r3, 80053b2 <UART_Start_Receive_IT+0xb2>
 80053aa:	237f      	movs	r3, #127	@ 0x7f
 80053ac:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80053b0:	e7ce      	b.n	8005350 <UART_Start_Receive_IT+0x50>
 80053b2:	233f      	movs	r3, #63	@ 0x3f
 80053b4:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80053b8:	e7ca      	b.n	8005350 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80053ba:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 80053be:	4293      	cmp	r3, r2
 80053c0:	d8dc      	bhi.n	800537c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c2:	6883      	ldr	r3, [r0, #8]
 80053c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053c8:	d019      	beq.n	80053fe <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80053ca:	4b19      	ldr	r3, [pc, #100]	@ (8005430 <UART_Start_Receive_IT+0x130>)
 80053cc:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80053ce:	6903      	ldr	r3, [r0, #16]
 80053d0:	b143      	cbz	r3, 80053e4 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	e852 3f00 	ldrex	r3, [r2]
 80053d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	e842 3100 	strex	r1, r3, [r2]
 80053e0:	2900      	cmp	r1, #0
 80053e2:	d1f6      	bne.n	80053d2 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80053e4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	f102 0308 	add.w	r3, r2, #8
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	3208      	adds	r2, #8
 80053f4:	e842 3100 	strex	r1, r3, [r2]
 80053f8:	2900      	cmp	r1, #0
 80053fa:	d1f3      	bne.n	80053e4 <UART_Start_Receive_IT+0xe4>
 80053fc:	e7d0      	b.n	80053a0 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053fe:	6903      	ldr	r3, [r0, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e2      	bne.n	80053ca <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005404:	4b0b      	ldr	r3, [pc, #44]	@ (8005434 <UART_Start_Receive_IT+0x134>)
 8005406:	6743      	str	r3, [r0, #116]	@ 0x74
 8005408:	e7e1      	b.n	80053ce <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800540a:	6903      	ldr	r3, [r0, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1b9      	bne.n	8005384 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8005410:	4b09      	ldr	r3, [pc, #36]	@ (8005438 <UART_Start_Receive_IT+0x138>)
 8005412:	6743      	str	r3, [r0, #116]	@ 0x74
 8005414:	e7b8      	b.n	8005388 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005416:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	e852 3f00 	ldrex	r3, [r2]
 800541c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	e842 3100 	strex	r1, r3, [r2]
 8005424:	2900      	cmp	r1, #0
 8005426:	d1f6      	bne.n	8005416 <UART_Start_Receive_IT+0x116>
 8005428:	e7ba      	b.n	80053a0 <UART_Start_Receive_IT+0xa0>
 800542a:	bf00      	nop
 800542c:	0800486d 	.word	0x0800486d
 8005430:	08004a21 	.word	0x08004a21
 8005434:	08004bed 	.word	0x08004bed
 8005438:	08004949 	.word	0x08004949

0800543c <HAL_UART_Receive_IT>:
{
 800543c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800543e:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8005442:	2b20      	cmp	r3, #32
 8005444:	d117      	bne.n	8005476 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8005446:	b1c1      	cbz	r1, 800547a <HAL_UART_Receive_IT+0x3e>
 8005448:	b1ca      	cbz	r2, 800547e <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	2300      	movs	r3, #0
 800544c:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800544e:	6803      	ldr	r3, [r0, #0]
 8005450:	4c0c      	ldr	r4, [pc, #48]	@ (8005484 <HAL_UART_Receive_IT+0x48>)
 8005452:	42a3      	cmp	r3, r4
 8005454:	d00c      	beq.n	8005470 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800545c:	d008      	beq.n	8005470 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800545e:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	e854 3f00 	ldrex	r3, [r4]
 8005464:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	e844 3500 	strex	r5, r3, [r4]
 800546c:	2d00      	cmp	r5, #0
 800546e:	d1f6      	bne.n	800545e <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005470:	f7ff ff46 	bl	8005300 <UART_Start_Receive_IT>
 8005474:	e000      	b.n	8005478 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8005476:	2002      	movs	r0, #2
}
 8005478:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800547a:	2001      	movs	r0, #1
 800547c:	e7fc      	b.n	8005478 <HAL_UART_Receive_IT+0x3c>
 800547e:	2001      	movs	r0, #1
 8005480:	e7fa      	b.n	8005478 <HAL_UART_Receive_IT+0x3c>
 8005482:	bf00      	nop
 8005484:	40008000 	.word	0x40008000

08005488 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005488:	b082      	sub	sp, #8
 800548a:	ab02      	add	r3, sp, #8
 800548c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005490:	6802      	ldr	r2, [r0, #0]
 8005492:	6853      	ldr	r3, [r2, #4]
 8005494:	f023 0310 	bic.w	r3, r3, #16
 8005498:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800549c:	430b      	orrs	r3, r1
 800549e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80054a0:	6802      	ldr	r2, [r0, #0]
 80054a2:	6853      	ldr	r3, [r2, #4]
 80054a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80054a8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80054ac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80054b0:	6053      	str	r3, [r2, #4]
}
 80054b2:	b002      	add	sp, #8
 80054b4:	4770      	bx	lr
	...

080054b8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054b8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80054ba:	b92b      	cbnz	r3, 80054c8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80054bc:	2301      	movs	r3, #1
 80054be:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80054c2:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 80054c6:	4770      	bx	lr
{
 80054c8:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054ca:	6803      	ldr	r3, [r0, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054d2:	6899      	ldr	r1, [r3, #8]
 80054d4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054d6:	4d09      	ldr	r5, [pc, #36]	@ (80054fc <UARTEx_SetNbDataToProcess+0x44>)
 80054d8:	5c6b      	ldrb	r3, [r5, r1]
 80054da:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054dc:	4c08      	ldr	r4, [pc, #32]	@ (8005500 <UARTEx_SetNbDataToProcess+0x48>)
 80054de:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054e0:	fb93 f3f1 	sdiv	r3, r3, r1
 80054e4:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054e8:	5cab      	ldrb	r3, [r5, r2]
 80054ea:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054ec:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80054f2:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 80054f6:	bc30      	pop	{r4, r5}
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	08008830 	.word	0x08008830
 8005500:	08008828 	.word	0x08008828

08005504 <HAL_UARTEx_WakeupCallback>:
}
 8005504:	4770      	bx	lr

08005506 <HAL_UARTEx_RxFifoFullCallback>:
}
 8005506:	4770      	bx	lr

08005508 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005508:	4770      	bx	lr

0800550a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800550a:	b510      	push	{r4, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	ab04      	add	r3, sp, #16
 8005510:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8005514:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8005518:	2b01      	cmp	r3, #1
 800551a:	d035      	beq.n	8005588 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 800551c:	4604      	mov	r4, r0
 800551e:	2301      	movs	r3, #1
 8005520:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005524:	2324      	movs	r3, #36	@ 0x24
 8005526:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800552a:	6802      	ldr	r2, [r0, #0]
 800552c:	6813      	ldr	r3, [r2, #0]
 800552e:	f023 0301 	bic.w	r3, r3, #1
 8005532:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005534:	6801      	ldr	r1, [r0, #0]
 8005536:	688b      	ldr	r3, [r1, #8]
 8005538:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800553c:	9a02      	ldr	r2, [sp, #8]
 800553e:	4313      	orrs	r3, r2
 8005540:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005542:	b1aa      	cbz	r2, 8005570 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8005544:	6822      	ldr	r2, [r4, #0]
 8005546:	6813      	ldr	r3, [r2, #0]
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800554e:	f7fb fa67 	bl	8000a20 <HAL_GetTick>
 8005552:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005554:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8005558:	9200      	str	r2, [sp, #0]
 800555a:	2200      	movs	r2, #0
 800555c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005560:	4620      	mov	r0, r4
 8005562:	f7ff fdf2 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 8005566:	b948      	cbnz	r0, 800557c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8005568:	2320      	movs	r3, #32
 800556a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 800556e:	e006      	b.n	800557e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005570:	ab04      	add	r3, sp, #16
 8005572:	e913 0006 	ldmdb	r3, {r1, r2}
 8005576:	f7ff ff87 	bl	8005488 <UARTEx_Wakeup_AddressConfig>
 800557a:	e7e3      	b.n	8005544 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 800557c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 800557e:	2300      	movs	r3, #0
 8005580:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8005584:	b004      	add	sp, #16
 8005586:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8005588:	2002      	movs	r0, #2
 800558a:	e7fb      	b.n	8005584 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

0800558c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800558c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8005590:	2b01      	cmp	r3, #1
 8005592:	d010      	beq.n	80055b6 <HAL_UARTEx_EnableStopMode+0x2a>
 8005594:	2301      	movs	r3, #1
 8005596:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800559a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	e852 3f00 	ldrex	r3, [r2]
 80055a0:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	e842 3100 	strex	r1, r3, [r2]
 80055a8:	2900      	cmp	r1, #0
 80055aa:	d1f6      	bne.n	800559a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 80055ac:	2300      	movs	r3, #0
 80055ae:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 80055b2:	4618      	mov	r0, r3
 80055b4:	4770      	bx	lr
  __HAL_LOCK(huart);
 80055b6:	2002      	movs	r0, #2
}
 80055b8:	4770      	bx	lr

080055ba <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 80055ba:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d01d      	beq.n	80055fe <HAL_UARTEx_EnableFifoMode+0x44>
{
 80055c2:	b510      	push	{r4, lr}
 80055c4:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80055c6:	2301      	movs	r3, #1
 80055c8:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	2324      	movs	r3, #36	@ 0x24
 80055ce:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055d2:	6802      	ldr	r2, [r0, #0]
 80055d4:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80055d6:	6811      	ldr	r1, [r2, #0]
 80055d8:	f021 0101 	bic.w	r1, r1, #1
 80055dc:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80055e2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80055e6:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e8:	6802      	ldr	r2, [r0, #0]
 80055ea:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 80055ec:	f7ff ff64 	bl	80054b8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80055f0:	2320      	movs	r3, #32
 80055f2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80055f6:	2000      	movs	r0, #0
 80055f8:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80055fc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80055fe:	2002      	movs	r0, #2
}
 8005600:	4770      	bx	lr

08005602 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005602:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005604:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8005608:	2b01      	cmp	r3, #1
 800560a:	d01d      	beq.n	8005648 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800560c:	4604      	mov	r4, r0
 800560e:	2301      	movs	r3, #1
 8005610:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005614:	2324      	movs	r3, #36	@ 0x24
 8005616:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800561a:	6803      	ldr	r3, [r0, #0]
 800561c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005626:	6802      	ldr	r2, [r0, #0]
 8005628:	6893      	ldr	r3, [r2, #8]
 800562a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800562e:	4319      	orrs	r1, r3
 8005630:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005632:	f7ff ff41 	bl	80054b8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800563a:	2320      	movs	r3, #32
 800563c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8005640:	2000      	movs	r0, #0
 8005642:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8005646:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005648:	2002      	movs	r0, #2
 800564a:	e7fc      	b.n	8005646 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800564c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800564c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800564e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8005652:	2b01      	cmp	r3, #1
 8005654:	d01d      	beq.n	8005692 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8005656:	4604      	mov	r4, r0
 8005658:	2301      	movs	r3, #1
 800565a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800565e:	2324      	movs	r3, #36	@ 0x24
 8005660:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005664:	6803      	ldr	r3, [r0, #0]
 8005666:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005670:	6802      	ldr	r2, [r0, #0]
 8005672:	6893      	ldr	r3, [r2, #8]
 8005674:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8005678:	4319      	orrs	r1, r3
 800567a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800567c:	f7ff ff1c 	bl	80054b8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005684:	2320      	movs	r3, #32
 8005686:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800568a:	2000      	movs	r0, #0
 800568c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8005690:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005692:	2002      	movs	r0, #2
 8005694:	e7fc      	b.n	8005690 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08005696 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8005696:	2001      	movs	r0, #1
 8005698:	4770      	bx	lr
	...

0800569c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800569c:	280a      	cmp	r0, #10
 800569e:	d807      	bhi.n	80056b0 <RadioGetLoRaBandwidthInHz+0x14>
 80056a0:	e8df f000 	tbb	[pc, r0]
 80056a4:	17110b20 	.word	0x17110b20
 80056a8:	061e1c1a 	.word	0x061e1c1a
 80056ac:	0e08      	.short	0x0e08
 80056ae:	14          	.byte	0x14
 80056af:	00          	.byte	0x00
 80056b0:	2000      	movs	r0, #0
 80056b2:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80056b4:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 80056b8:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80056ba:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 80056be:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80056c0:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 80056c4:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80056c6:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 80056ca:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80056cc:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 80056d0:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80056d2:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 80056d6:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80056d8:	4804      	ldr	r0, [pc, #16]	@ (80056ec <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 80056da:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80056dc:	4804      	ldr	r0, [pc, #16]	@ (80056f0 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 80056de:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80056e0:	4804      	ldr	r0, [pc, #16]	@ (80056f4 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 80056e2:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 80056e4:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	0001e848 	.word	0x0001e848
 80056f0:	0003d090 	.word	0x0003d090
 80056f4:	0007a120 	.word	0x0007a120

080056f8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80056f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 80056fc:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80056fe:	b953      	cbnz	r3, 8005716 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8005700:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8005702:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005704:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005706:	b141      	cbz	r1, 800571a <RadioGetGfskTimeOnAirNumerator+0x22>
 8005708:	2302      	movs	r3, #2
 800570a:	f89d 0000 	ldrb.w	r0, [sp]
 800570e:	4418      	add	r0, r3
}
 8005710:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005714:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005716:	2300      	movs	r3, #0
 8005718:	e7f3      	b.n	8005702 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800571a:	2300      	movs	r3, #0
 800571c:	e7f5      	b.n	800570a <RadioGetGfskTimeOnAirNumerator+0x12>

0800571e <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800571e:	b570      	push	{r4, r5, r6, lr}
 8005720:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8005724:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8005728:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800572a:	f1a1 0c05 	sub.w	ip, r1, #5
 800572e:	f1bc 0f01 	cmp.w	ip, #1
 8005732:	d931      	bls.n	8005798 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005734:	b918      	cbnz	r0, 800573e <RadioGetLoRaTimeOnAirNumerator+0x20>
 8005736:	f1a1 060b 	sub.w	r6, r1, #11
 800573a:	2e01      	cmp	r6, #1
 800573c:	d934      	bls.n	80057a8 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800573e:	2801      	cmp	r0, #1
 8005740:	d02e      	beq.n	80057a0 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8005742:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005744:	f89d c014 	ldrb.w	ip, [sp, #20]
 8005748:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800574c:	b385      	cbz	r5, 80057b0 <RadioGetLoRaTimeOnAirNumerator+0x92>
 800574e:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005750:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8005752:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8005754:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8005758:	b364      	cbz	r4, 80057b4 <RadioGetLoRaTimeOnAirNumerator+0x96>
 800575a:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 800575e:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8005760:	2906      	cmp	r1, #6
 8005762:	d904      	bls.n	800576e <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8005764:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8005768:	b10e      	cbz	r6, 800576e <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800576a:	1e88      	subs	r0, r1, #2
 800576c:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800576e:	f1bc 0f00 	cmp.w	ip, #0
 8005772:	db22      	blt.n	80057ba <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005774:	4484      	add	ip, r0
 8005776:	f10c 3cff 	add.w	ip, ip, #4294967295
 800577a:	fb9c fcf0 	sdiv	ip, ip, r0
 800577e:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8005782:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8005786:	2906      	cmp	r1, #6
 8005788:	d801      	bhi.n	800578e <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 800578a:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800578e:	0080      	lsls	r0, r0, #2
 8005790:	3001      	adds	r0, #1
 8005792:	3902      	subs	r1, #2
}
 8005794:	4088      	lsls	r0, r1
 8005796:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8005798:	2b0b      	cmp	r3, #11
 800579a:	d8cb      	bhi.n	8005734 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800579c:	230c      	movs	r3, #12
 800579e:	e7c9      	b.n	8005734 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80057a0:	290c      	cmp	r1, #12
 80057a2:	d003      	beq.n	80057ac <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 80057a4:	2600      	movs	r6, #0
 80057a6:	e7cd      	b.n	8005744 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 80057a8:	2601      	movs	r6, #1
 80057aa:	e7cb      	b.n	8005744 <RadioGetLoRaTimeOnAirNumerator+0x26>
 80057ac:	2601      	movs	r6, #1
 80057ae:	e7c9      	b.n	8005744 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 80057b0:	2000      	movs	r0, #0
 80057b2:	e7cd      	b.n	8005750 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 80057b4:	f04f 0e14 	mov.w	lr, #20
 80057b8:	e7d1      	b.n	800575e <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 80057ba:	f04f 0c00 	mov.w	ip, #0
 80057be:	e7d9      	b.n	8005774 <RadioGetLoRaTimeOnAirNumerator+0x56>

080057c0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80057c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c2:	b085      	sub	sp, #20
 80057c4:	460e      	mov	r6, r1
 80057c6:	4615      	mov	r5, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80057ce:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80057d2:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80057d6:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 80057da:	b148      	cbz	r0, 80057f0 <RadioTimeOnAir+0x30>
 80057dc:	2801      	cmp	r0, #1
 80057de:	d012      	beq.n	8005806 <RadioTimeOnAir+0x46>
 80057e0:	2501      	movs	r5, #1
 80057e2:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80057e4:	442c      	add	r4, r5
 80057e6:	1e60      	subs	r0, r4, #1
}
 80057e8:	fbb0 f0f5 	udiv	r0, r0, r5
 80057ec:	b005      	add	sp, #20
 80057ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80057f0:	f8cd c004 	str.w	ip, [sp, #4]
 80057f4:	9700      	str	r7, [sp, #0]
 80057f6:	4628      	mov	r0, r5
 80057f8:	f7ff ff7e 	bl	80056f8 <RadioGetGfskTimeOnAirNumerator>
 80057fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005800:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8005804:	e7ee      	b.n	80057e4 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005806:	f8cd c008 	str.w	ip, [sp, #8]
 800580a:	9701      	str	r7, [sp, #4]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	460a      	mov	r2, r1
 8005812:	4629      	mov	r1, r5
 8005814:	4630      	mov	r0, r6
 8005816:	f7ff ff82 	bl	800571e <RadioGetLoRaTimeOnAirNumerator>
 800581a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800581e:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005822:	4b03      	ldr	r3, [pc, #12]	@ (8005830 <RadioTimeOnAir+0x70>)
 8005824:	5d98      	ldrb	r0, [r3, r6]
 8005826:	f7ff ff39 	bl	800569c <RadioGetLoRaBandwidthInHz>
 800582a:	4605      	mov	r5, r0
        break;
 800582c:	e7da      	b.n	80057e4 <RadioTimeOnAir+0x24>
 800582e:	bf00      	nop
 8005830:	080088a4 	.word	0x080088a4

08005834 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8005834:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8005836:	4b05      	ldr	r3, [pc, #20]	@ (800584c <RadioOnTxTimeoutProcess+0x18>)
 8005838:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800583c:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800583e:	4b04      	ldr	r3, [pc, #16]	@ (8005850 <RadioOnTxTimeoutProcess+0x1c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	b113      	cbz	r3, 800584a <RadioOnTxTimeoutProcess+0x16>
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	b103      	cbz	r3, 800584a <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8005848:	4798      	blx	r3
    }
}
 800584a:	bd08      	pop	{r3, pc}
 800584c:	48000400 	.word	0x48000400
 8005850:	200002f4 	.word	0x200002f4

08005854 <RadioOnTxTimeoutIrq>:
{
 8005854:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8005856:	f7ff ffed 	bl	8005834 <RadioOnTxTimeoutProcess>
}
 800585a:	bd08      	pop	{r3, pc}

0800585c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800585c:	b508      	push	{r3, lr}
 800585e:	4b05      	ldr	r3, [pc, #20]	@ (8005874 <RadioOnRxTimeoutProcess+0x18>)
 8005860:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005864:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005866:	4b04      	ldr	r3, [pc, #16]	@ (8005878 <RadioOnRxTimeoutProcess+0x1c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	b113      	cbz	r3, 8005872 <RadioOnRxTimeoutProcess+0x16>
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	b103      	cbz	r3, 8005872 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8005870:	4798      	blx	r3
    }
}
 8005872:	bd08      	pop	{r3, pc}
 8005874:	48000400 	.word	0x48000400
 8005878:	200002f4 	.word	0x200002f4

0800587c <RadioOnRxTimeoutIrq>:
{
 800587c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800587e:	f7ff ffed 	bl	800585c <RadioOnRxTimeoutProcess>
}
 8005882:	bd08      	pop	{r3, pc}

08005884 <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8005884:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 8005886:	2300      	movs	r3, #0
 8005888:	e005      	b.n	8005896 <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800588a:	5ccc      	ldrb	r4, [r1, r3]
 800588c:	43e4      	mvns	r4, r4
 800588e:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 8005890:	2400      	movs	r4, #0
 8005892:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 8005894:	3301      	adds	r3, #1
 8005896:	429a      	cmp	r2, r3
 8005898:	dcf7      	bgt.n	800588a <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800589a:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800589c:	461c      	mov	r4, r3
 800589e:	e012      	b.n	80058c6 <payload_integration+0x42>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 80058a0:	f103 0c07 	add.w	ip, r3, #7
 80058a4:	e023      	b.n	80058ee <payload_integration+0x6a>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80058a6:	b2ed      	uxtb	r5, r5
 80058a8:	5d4d      	ldrb	r5, [r1, r5]
 80058aa:	fa45 f50e 	asr.w	r5, r5, lr
 80058ae:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 80058b2:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80058b4:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 80058b8:	5d46      	ldrb	r6, [r0, r5]
 80058ba:	fa04 fc0c 	lsl.w	ip, r4, ip
 80058be:	ea46 0c0c 	orr.w	ip, r6, ip
 80058c2:	f800 c005 	strb.w	ip, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 80058c6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80058ca:	da26      	bge.n	800591a <payload_integration+0x96>
        index_bit = 7 - ( i % 8 );
 80058cc:	425d      	negs	r5, r3
 80058ce:	f003 0c07 	and.w	ip, r3, #7
 80058d2:	f005 0507 	and.w	r5, r5, #7
 80058d6:	bf58      	it	pl
 80058d8:	f1c5 0c00 	rsbpl	ip, r5, #0
 80058dc:	fa5f fe8c 	uxtb.w	lr, ip
 80058e0:	f1ce 0e07 	rsb	lr, lr, #7
 80058e4:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 80058e8:	469c      	mov	ip, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	dbd8      	blt.n	80058a0 <payload_integration+0x1c>
 80058ee:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80058f2:	3301      	adds	r3, #1
 80058f4:	425e      	negs	r6, r3
 80058f6:	f003 0c07 	and.w	ip, r3, #7
 80058fa:	f006 0607 	and.w	r6, r6, #7
 80058fe:	bf58      	it	pl
 8005900:	f1c6 0c00 	rsbpl	ip, r6, #0
 8005904:	fa5f fc8c 	uxtb.w	ip, ip
 8005908:	f1cc 0c07 	rsb	ip, ip, #7
 800590c:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 8005910:	461e      	mov	r6, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	dac7      	bge.n	80058a6 <payload_integration+0x22>
 8005916:	1dde      	adds	r6, r3, #7
 8005918:	e7c5      	b.n	80058a6 <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800591a:	01a3      	lsls	r3, r4, #6
 800591c:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 8005920:	b25b      	sxtb	r3, r3
 8005922:	b91c      	cbnz	r4, 800592c <payload_integration+0xa8>
 8005924:	2120      	movs	r1, #32
 8005926:	430b      	orrs	r3, r1
 8005928:	5483      	strb	r3, [r0, r2]
}
 800592a:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800592c:	2100      	movs	r1, #0
 800592e:	e7fa      	b.n	8005926 <payload_integration+0xa2>

08005930 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8005930:	2001      	movs	r0, #1
 8005932:	4770      	bx	lr

08005934 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8005934:	2001      	movs	r0, #1
 8005936:	4770      	bx	lr

08005938 <RadioSetMaxPayloadLength>:
{
 8005938:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800593a:	2801      	cmp	r0, #1
 800593c:	d004      	beq.n	8005948 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800593e:	4b0a      	ldr	r3, [pc, #40]	@ (8005968 <RadioSetMaxPayloadLength+0x30>)
 8005940:	7d5b      	ldrb	r3, [r3, #21]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d008      	beq.n	8005958 <RadioSetMaxPayloadLength+0x20>
}
 8005946:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8005948:	4b08      	ldr	r3, [pc, #32]	@ (800596c <RadioSetMaxPayloadLength+0x34>)
 800594a:	7019      	strb	r1, [r3, #0]
 800594c:	4806      	ldr	r0, [pc, #24]	@ (8005968 <RadioSetMaxPayloadLength+0x30>)
 800594e:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005950:	300e      	adds	r0, #14
 8005952:	f001 fe3d 	bl	80075d0 <SUBGRF_SetPacketParams>
 8005956:	e7f6      	b.n	8005946 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8005958:	4b04      	ldr	r3, [pc, #16]	@ (800596c <RadioSetMaxPayloadLength+0x34>)
 800595a:	7019      	strb	r1, [r3, #0]
 800595c:	4802      	ldr	r0, [pc, #8]	@ (8005968 <RadioSetMaxPayloadLength+0x30>)
 800595e:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005960:	300e      	adds	r0, #14
 8005962:	f001 fe35 	bl	80075d0 <SUBGRF_SetPacketParams>
}
 8005966:	e7ee      	b.n	8005946 <RadioSetMaxPayloadLength+0xe>
 8005968:	20000298 	.word	0x20000298
 800596c:	20000008 	.word	0x20000008

08005970 <RadioRead>:
{
 8005970:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8005972:	f001 f9cb 	bl	8006d0c <SUBGRF_ReadRegister>
}
 8005976:	bd08      	pop	{r3, pc}

08005978 <RadioWrite>:
{
 8005978:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800597a:	f001 f9b7 	bl	8006cec <SUBGRF_WriteRegister>
}
 800597e:	bd08      	pop	{r3, pc}

08005980 <RadioTxCw>:
{
 8005980:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8005982:	f001 ff4f 	bl	8007824 <SUBGRF_SetRfTxPower>
 8005986:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8005988:	210e      	movs	r1, #14
 800598a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800598e:	f001 f9ad 	bl	8006cec <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8005992:	2101      	movs	r1, #1
 8005994:	4620      	mov	r0, r4
 8005996:	f001 ff31 	bl	80077fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800599a:	f001 fb77 	bl	800708c <SUBGRF_SetTxContinuousWave>
}
 800599e:	bd10      	pop	{r4, pc}

080059a0 <RadioTxPrbs>:
{
 80059a0:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80059a2:	2101      	movs	r1, #1
 80059a4:	4b07      	ldr	r3, [pc, #28]	@ (80059c4 <RadioTxPrbs+0x24>)
 80059a6:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 80059aa:	f001 ff27 	bl	80077fc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80059ae:	212d      	movs	r1, #45	@ 0x2d
 80059b0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80059b4:	f7ff ffe0 	bl	8005978 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80059b8:	f001 fb6f 	bl	800709a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80059bc:	4802      	ldr	r0, [pc, #8]	@ (80059c8 <RadioTxPrbs+0x28>)
 80059be:	f001 faa5 	bl	8006f0c <SUBGRF_SetTx>
}
 80059c2:	bd08      	pop	{r3, pc}
 80059c4:	20000298 	.word	0x20000298
 80059c8:	000fffff 	.word	0x000fffff

080059cc <RadioSetRxDutyCycle>:
{
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	4604      	mov	r4, r0
 80059d0:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80059d2:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80059d6:	4e09      	ldr	r6, [pc, #36]	@ (80059fc <RadioSetRxDutyCycle+0x30>)
 80059d8:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80059da:	2300      	movs	r3, #0
 80059dc:	461a      	mov	r2, r3
 80059de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80059e2:	4608      	mov	r0, r1
 80059e4:	f001 fc25 	bl	8007232 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80059e8:	2100      	movs	r1, #0
 80059ea:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 80059ee:	f001 ff05 	bl	80077fc <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80059f2:	4629      	mov	r1, r5
 80059f4:	4620      	mov	r0, r4
 80059f6:	f001 fb19 	bl	800702c <SUBGRF_SetRxDutyCycle>
}
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	20000298 	.word	0x20000298

08005a00 <RadioRxBoosted>:
{
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8005a04:	f001 ffec 	bl	80079e0 <RFW_Is_Init>
 8005a08:	2801      	cmp	r0, #1
 8005a0a:	d019      	beq.n	8005a40 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f240 2162 	movw	r1, #610	@ 0x262
 8005a14:	4608      	mov	r0, r1
 8005a16:	f001 fc0c 	bl	8007232 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8005a1a:	b9a4      	cbnz	r4, 8005a46 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005a1c:	4c11      	ldr	r4, [pc, #68]	@ (8005a64 <RadioRxBoosted+0x64>)
 8005a1e:	2100      	movs	r1, #0
 8005a20:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005a22:	4b11      	ldr	r3, [pc, #68]	@ (8005a68 <RadioRxBoosted+0x68>)
 8005a24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005a28:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005a2a:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8005a2e:	f001 fee5 	bl	80077fc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8005a32:	7863      	ldrb	r3, [r4, #1]
 8005a34:	b183      	cbz	r3, 8005a58 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005a36:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8005a3a:	f001 fad9 	bl	8006ff0 <SUBGRF_SetRxBoosted>
}
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8005a40:	f001 ffd6 	bl	80079f0 <RFW_ReceiveInit>
 8005a44:	e7e9      	b.n	8005a1a <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005a46:	4d09      	ldr	r5, [pc, #36]	@ (8005a6c <RadioRxBoosted+0x6c>)
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f002 fbfe 	bl	800824c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005a50:	4628      	mov	r0, r5
 8005a52:	f002 fbb5 	bl	80081c0 <UTIL_TIMER_Start>
 8005a56:	e7e1      	b.n	8005a1c <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005a58:	4b02      	ldr	r3, [pc, #8]	@ (8005a64 <RadioRxBoosted+0x64>)
 8005a5a:	6898      	ldr	r0, [r3, #8]
 8005a5c:	0180      	lsls	r0, r0, #6
 8005a5e:	f001 fac7 	bl	8006ff0 <SUBGRF_SetRxBoosted>
}
 8005a62:	e7ec      	b.n	8005a3e <RadioRxBoosted+0x3e>
 8005a64:	20000298 	.word	0x20000298
 8005a68:	48000400 	.word	0x48000400
 8005a6c:	20000268 	.word	0x20000268

08005a70 <RadioStandby>:
{
 8005a70:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8005a72:	2000      	movs	r0, #0
 8005a74:	f001 fa30 	bl	8006ed8 <SUBGRF_SetStandby>
}
 8005a78:	bd08      	pop	{r3, pc}

08005a7a <RadioGetStatus>:
{
 8005a7a:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8005a7c:	f001 f92a 	bl	8006cd4 <SUBGRF_GetOperatingMode>
 8005a80:	2805      	cmp	r0, #5
 8005a82:	d007      	beq.n	8005a94 <RadioGetStatus+0x1a>
 8005a84:	2807      	cmp	r0, #7
 8005a86:	d007      	beq.n	8005a98 <RadioGetStatus+0x1e>
 8005a88:	2804      	cmp	r0, #4
 8005a8a:	d001      	beq.n	8005a90 <RadioGetStatus+0x16>
            return RF_IDLE;
 8005a8c:	2000      	movs	r0, #0
}
 8005a8e:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8005a90:	2002      	movs	r0, #2
 8005a92:	e7fc      	b.n	8005a8e <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8005a94:	2001      	movs	r0, #1
 8005a96:	e7fa      	b.n	8005a8e <RadioGetStatus+0x14>
            return RF_CAD;
 8005a98:	2003      	movs	r0, #3
 8005a9a:	e7f8      	b.n	8005a8e <RadioGetStatus+0x14>

08005a9c <RadioIrqProcess>:
{
 8005a9c:	b530      	push	{r4, r5, lr}
 8005a9e:	b083      	sub	sp, #12
    uint8_t size = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8005aa6:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8005aa8:	4ba5      	ldr	r3, [pc, #660]	@ (8005d40 <RadioIrqProcess+0x2a4>)
 8005aaa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d829      	bhi.n	8005b06 <RadioIrqProcess+0x6a>
 8005ab2:	b21a      	sxth	r2, r3
 8005ab4:	2a00      	cmp	r2, #0
 8005ab6:	f000 8140 	beq.w	8005d3a <RadioIrqProcess+0x29e>
 8005aba:	3b01      	subs	r3, #1
 8005abc:	2b1f      	cmp	r3, #31
 8005abe:	f200 813c 	bhi.w	8005d3a <RadioIrqProcess+0x29e>
 8005ac2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ac6:	0063      	.short	0x0063
 8005ac8:	013a007f 	.word	0x013a007f
 8005acc:	013a00f7 	.word	0x013a00f7
 8005ad0:	013a013a 	.word	0x013a013a
 8005ad4:	013a0127 	.word	0x013a0127
 8005ad8:	013a013a 	.word	0x013a013a
 8005adc:	013a013a 	.word	0x013a013a
 8005ae0:	013a013a 	.word	0x013a013a
 8005ae4:	013a0134 	.word	0x013a0134
 8005ae8:	013a013a 	.word	0x013a013a
 8005aec:	013a013a 	.word	0x013a013a
 8005af0:	013a013a 	.word	0x013a013a
 8005af4:	013a013a 	.word	0x013a013a
 8005af8:	013a013a 	.word	0x013a013a
 8005afc:	013a013a 	.word	0x013a013a
 8005b00:	013a013a 	.word	0x013a013a
 8005b04:	0155      	.short	0x0155
 8005b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b0a:	f000 80b3 	beq.w	8005c74 <RadioIrqProcess+0x1d8>
 8005b0e:	d928      	bls.n	8005b62 <RadioIrqProcess+0xc6>
 8005b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b14:	f040 8111 	bne.w	8005d3a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8005b18:	4b8a      	ldr	r3, [pc, #552]	@ (8005d44 <RadioIrqProcess+0x2a8>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	2002      	movs	r0, #2
 8005b20:	f002 f844 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8005b24:	f001 f8d6 	bl	8006cd4 <SUBGRF_GetOperatingMode>
 8005b28:	2804      	cmp	r0, #4
 8005b2a:	f000 80b0 	beq.w	8005c8e <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8005b2e:	f001 f8d1 	bl	8006cd4 <SUBGRF_GetOperatingMode>
 8005b32:	2805      	cmp	r0, #5
 8005b34:	f040 8101 	bne.w	8005d3a <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8005b38:	4b83      	ldr	r3, [pc, #524]	@ (8005d48 <RadioIrqProcess+0x2ac>)
 8005b3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005b3e:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &RxTimeoutTimer );
 8005b40:	4882      	ldr	r0, [pc, #520]	@ (8005d4c <RadioIrqProcess+0x2b0>)
 8005b42:	f002 fae3 	bl	800810c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8005b46:	2000      	movs	r0, #0
 8005b48:	f001 f9c6 	bl	8006ed8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005b4c:	4b80      	ldr	r3, [pc, #512]	@ (8005d50 <RadioIrqProcess+0x2b4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80f2 	beq.w	8005d3a <RadioIrqProcess+0x29e>
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 80ee 	beq.w	8005d3a <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8005b5e:	4798      	blx	r3
 8005b60:	e0eb      	b.n	8005d3a <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8005b62:	2b40      	cmp	r3, #64	@ 0x40
 8005b64:	f000 811d 	beq.w	8005da2 <RadioIrqProcess+0x306>
 8005b68:	2b80      	cmp	r3, #128	@ 0x80
 8005b6a:	f040 80e6 	bne.w	8005d3a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8005b6e:	2000      	movs	r0, #0
 8005b70:	f001 f9b2 	bl	8006ed8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005b74:	4b76      	ldr	r3, [pc, #472]	@ (8005d50 <RadioIrqProcess+0x2b4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80de 	beq.w	8005d3a <RadioIrqProcess+0x29e>
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 80da 	beq.w	8005d3a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8005b86:	2000      	movs	r0, #0
 8005b88:	4798      	blx	r3
 8005b8a:	e0d6      	b.n	8005d3a <RadioIrqProcess+0x29e>
 8005b8c:	4b6e      	ldr	r3, [pc, #440]	@ (8005d48 <RadioIrqProcess+0x2ac>)
 8005b8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b92:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &TxTimeoutTimer );
 8005b94:	486f      	ldr	r0, [pc, #444]	@ (8005d54 <RadioIrqProcess+0x2b8>)
 8005b96:	f002 fab9 	bl	800810c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f001 f99c 	bl	8006ed8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8005ba0:	f001 ff20 	bl	80079e4 <RFW_Is_LongPacketModeEnabled>
 8005ba4:	2801      	cmp	r0, #1
 8005ba6:	d00a      	beq.n	8005bbe <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005ba8:	4b69      	ldr	r3, [pc, #420]	@ (8005d50 <RadioIrqProcess+0x2b4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80c4 	beq.w	8005d3a <RadioIrqProcess+0x29e>
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80c0 	beq.w	8005d3a <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8005bba:	4798      	blx	r3
 8005bbc:	e0bd      	b.n	8005d3a <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8005bbe:	f001 ff1a 	bl	80079f6 <RFW_DeInit_TxLongPacket>
 8005bc2:	e7f1      	b.n	8005ba8 <RadioIrqProcess+0x10c>
 8005bc4:	4b60      	ldr	r3, [pc, #384]	@ (8005d48 <RadioIrqProcess+0x2ac>)
 8005bc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005bca:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &RxTimeoutTimer );
 8005bcc:	485f      	ldr	r0, [pc, #380]	@ (8005d4c <RadioIrqProcess+0x2b0>)
 8005bce:	f002 fa9d 	bl	800810c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8005bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005d40 <RadioIrqProcess+0x2a4>)
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	b303      	cbz	r3, 8005c1a <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8005bd8:	22ff      	movs	r2, #255	@ 0xff
 8005bda:	f10d 0107 	add.w	r1, sp, #7
 8005bde:	485e      	ldr	r0, [pc, #376]	@ (8005d58 <RadioIrqProcess+0x2bc>)
 8005be0:	f001 fdb6 	bl	8007750 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8005be4:	485d      	ldr	r0, [pc, #372]	@ (8005d5c <RadioIrqProcess+0x2c0>)
 8005be6:	f001 fdcd 	bl	8007784 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005bea:	4b59      	ldr	r3, [pc, #356]	@ (8005d50 <RadioIrqProcess+0x2b4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 80a3 	beq.w	8005d3a <RadioIrqProcess+0x29e>
 8005bf4:	689c      	ldr	r4, [r3, #8]
 8005bf6:	2c00      	cmp	r4, #0
 8005bf8:	f000 809f 	beq.w	8005d3a <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8005bfc:	4b50      	ldr	r3, [pc, #320]	@ (8005d40 <RadioIrqProcess+0x2a4>)
 8005bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d11d      	bne.n	8005c42 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8005c06:	4a4e      	ldr	r2, [pc, #312]	@ (8005d40 <RadioIrqProcess+0x2a4>)
 8005c08:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 8005c0c:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 8005c10:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005c14:	4850      	ldr	r0, [pc, #320]	@ (8005d58 <RadioIrqProcess+0x2bc>)
 8005c16:	47a0      	blx	r4
                break;
 8005c18:	e08f      	b.n	8005d3a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f001 f95c 	bl	8006ed8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8005c20:	2100      	movs	r1, #0
 8005c22:	f640 1002 	movw	r0, #2306	@ 0x902
 8005c26:	f001 f861 	bl	8006cec <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8005c2a:	f640 1044 	movw	r0, #2372	@ 0x944
 8005c2e:	f001 f86d 	bl	8006d0c <SUBGRF_ReadRegister>
 8005c32:	f040 0102 	orr.w	r1, r0, #2
 8005c36:	b2c9      	uxtb	r1, r1
 8005c38:	f640 1044 	movw	r0, #2372	@ 0x944
 8005c3c:	f001 f856 	bl	8006cec <SUBGRF_WriteRegister>
 8005c40:	e7ca      	b.n	8005bd8 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8005c42:	4c3f      	ldr	r4, [pc, #252]	@ (8005d40 <RadioIrqProcess+0x2a4>)
 8005c44:	4669      	mov	r1, sp
 8005c46:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005c48:	f001 fe7c 	bl	8007944 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8005c4c:	4b40      	ldr	r3, [pc, #256]	@ (8005d50 <RadioIrqProcess+0x2b4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689d      	ldr	r5, [r3, #8]
 8005c52:	9b00      	ldr	r3, [sp, #0]
 8005c54:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005c58:	4a41      	ldr	r2, [pc, #260]	@ (8005d60 <RadioIrqProcess+0x2c4>)
 8005c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8005c5e:	17db      	asrs	r3, r3, #31
 8005c60:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8005c64:	b25b      	sxtb	r3, r3
 8005c66:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 8005c6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005c6e:	483a      	ldr	r0, [pc, #232]	@ (8005d58 <RadioIrqProcess+0x2bc>)
 8005c70:	47a8      	blx	r5
                break;
 8005c72:	e062      	b.n	8005d3a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8005c74:	2000      	movs	r0, #0
 8005c76:	f001 f92f 	bl	8006ed8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005c7a:	4b35      	ldr	r3, [pc, #212]	@ (8005d50 <RadioIrqProcess+0x2b4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d05b      	beq.n	8005d3a <RadioIrqProcess+0x29e>
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d058      	beq.n	8005d3a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8005c88:	2001      	movs	r0, #1
 8005c8a:	4798      	blx	r3
 8005c8c:	e055      	b.n	8005d3a <RadioIrqProcess+0x29e>
 8005c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8005d48 <RadioIrqProcess+0x2ac>)
 8005c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c94:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &TxTimeoutTimer );
 8005c96:	482f      	ldr	r0, [pc, #188]	@ (8005d54 <RadioIrqProcess+0x2b8>)
 8005c98:	f002 fa38 	bl	800810c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	f001 f91b 	bl	8006ed8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8005d50 <RadioIrqProcess+0x2b4>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d047      	beq.n	8005d3a <RadioIrqProcess+0x29e>
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d044      	beq.n	8005d3a <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8005cb0:	4798      	blx	r3
 8005cb2:	e042      	b.n	8005d3a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8005cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8005d64 <RadioIrqProcess+0x2c8>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	2100      	movs	r1, #0
 8005cba:	2002      	movs	r0, #2
 8005cbc:	f001 ff76 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8005cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8005d40 <RadioIrqProcess+0x2a4>)
 8005cc2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8005cc4:	b3c9      	cbz	r1, 8005d3a <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8005cc6:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8005cca:	f640 1003 	movw	r0, #2307	@ 0x903
 8005cce:	f7ff fe53 	bl	8005978 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8005cd2:	4c1b      	ldr	r4, [pc, #108]	@ (8005d40 <RadioIrqProcess+0x2a4>)
 8005cd4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8005cd8:	f640 1004 	movw	r0, #2308	@ 0x904
 8005cdc:	f7ff fe4c 	bl	8005978 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8005ce0:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 8005ce4:	f640 1005 	movw	r0, #2309	@ 0x905
 8005ce8:	f7ff fe46 	bl	8005978 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8005cec:	f640 1002 	movw	r0, #2306	@ 0x902
 8005cf0:	f7ff fe3e 	bl	8005970 <RadioRead>
 8005cf4:	f040 0101 	orr.w	r1, r0, #1
 8005cf8:	b2c9      	uxtb	r1, r1
 8005cfa:	f640 1002 	movw	r0, #2306	@ 0x902
 8005cfe:	f7ff fe3b 	bl	8005978 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8005d02:	2200      	movs	r2, #0
 8005d04:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005d06:	4613      	mov	r3, r2
 8005d08:	f240 2162 	movw	r1, #610	@ 0x262
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	f001 fa90 	bl	8007232 <SUBGRF_SetDioIrqParams>
 8005d12:	e012      	b.n	8005d3a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8005d14:	4b14      	ldr	r3, [pc, #80]	@ (8005d68 <RadioIrqProcess+0x2cc>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	2100      	movs	r1, #0
 8005d1a:	2002      	movs	r0, #2
 8005d1c:	f001 ff46 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8005d20:	f001 fe5e 	bl	80079e0 <RFW_Is_Init>
 8005d24:	2801      	cmp	r0, #1
 8005d26:	d108      	bne.n	8005d3a <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8005d28:	f001 fe66 	bl	80079f8 <RFW_ReceivePayload>
 8005d2c:	e005      	b.n	8005d3a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8005d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d6c <RadioIrqProcess+0x2d0>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	2100      	movs	r1, #0
 8005d34:	2002      	movs	r0, #2
 8005d36:	f001 ff39 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
}
 8005d3a:	b003      	add	sp, #12
 8005d3c:	bd30      	pop	{r4, r5, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000298 	.word	0x20000298
 8005d44:	08008838 	.word	0x08008838
 8005d48:	48000400 	.word	0x48000400
 8005d4c:	20000268 	.word	0x20000268
 8005d50:	200002f4 	.word	0x200002f4
 8005d54:	20000280 	.word	0x20000280
 8005d58:	200002f8 	.word	0x200002f8
 8005d5c:	200002bc 	.word	0x200002bc
 8005d60:	10624dd3 	.word	0x10624dd3
 8005d64:	0800884c 	.word	0x0800884c
 8005d68:	08008858 	.word	0x08008858
 8005d6c:	08008864 	.word	0x08008864
        TimerStop( &RxTimeoutTimer );
 8005d70:	4817      	ldr	r0, [pc, #92]	@ (8005dd0 <RadioIrqProcess+0x334>)
 8005d72:	f002 f9cb 	bl	800810c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8005d76:	4b17      	ldr	r3, [pc, #92]	@ (8005dd4 <RadioIrqProcess+0x338>)
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	b173      	cbz	r3, 8005d9a <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005d7c:	4b16      	ldr	r3, [pc, #88]	@ (8005dd8 <RadioIrqProcess+0x33c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0da      	beq.n	8005d3a <RadioIrqProcess+0x29e>
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0d7      	beq.n	8005d3a <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8005d8a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8005d8c:	4b13      	ldr	r3, [pc, #76]	@ (8005ddc <RadioIrqProcess+0x340>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	2100      	movs	r1, #0
 8005d92:	2002      	movs	r0, #2
 8005d94:	f001 ff0a 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
 8005d98:	e7cf      	b.n	8005d3a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	f001 f89c 	bl	8006ed8 <SUBGRF_SetStandby>
 8005da0:	e7ec      	b.n	8005d7c <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8005da2:	4b0f      	ldr	r3, [pc, #60]	@ (8005de0 <RadioIrqProcess+0x344>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	2100      	movs	r1, #0
 8005da8:	2002      	movs	r0, #2
 8005daa:	f001 feff 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8005dae:	4b09      	ldr	r3, [pc, #36]	@ (8005dd4 <RadioIrqProcess+0x338>)
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	b143      	cbz	r3, 8005dc6 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8005db4:	4b08      	ldr	r3, [pc, #32]	@ (8005dd8 <RadioIrqProcess+0x33c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0be      	beq.n	8005d3a <RadioIrqProcess+0x29e>
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0bb      	beq.n	8005d3a <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8005dc2:	4798      	blx	r3
}
 8005dc4:	e7b9      	b.n	8005d3a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f001 f886 	bl	8006ed8 <SUBGRF_SetStandby>
 8005dcc:	e7f2      	b.n	8005db4 <RadioIrqProcess+0x318>
 8005dce:	bf00      	nop
 8005dd0:	20000268 	.word	0x20000268
 8005dd4:	20000298 	.word	0x20000298
 8005dd8:	200002f4 	.word	0x200002f4
 8005ddc:	08008870 	.word	0x08008870
 8005de0:	0800887c 	.word	0x0800887c

08005de4 <RadioOnDioIrq>:
{
 8005de4:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8005de6:	4b03      	ldr	r3, [pc, #12]	@ (8005df4 <RadioOnDioIrq+0x10>)
 8005de8:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 8005dec:	f7ff fe56 	bl	8005a9c <RadioIrqProcess>
}
 8005df0:	bd08      	pop	{r3, pc}
 8005df2:	bf00      	nop
 8005df4:	20000298 	.word	0x20000298

08005df8 <RadioGetWakeupTime>:
{
 8005df8:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8005dfa:	f001 fd2a 	bl	8007852 <SUBGRF_GetRadioWakeUpTime>
}
 8005dfe:	3003      	adds	r0, #3
 8005e00:	bd08      	pop	{r3, pc}

08005e02 <RadioReadRegisters>:
{
 8005e02:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8005e04:	f001 f800 	bl	8006e08 <SUBGRF_ReadRegisters>
}
 8005e08:	bd08      	pop	{r3, pc}

08005e0a <RadioWriteRegisters>:
{
 8005e0a:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8005e0c:	f000 ffba 	bl	8006d84 <SUBGRF_WriteRegisters>
}
 8005e10:	bd08      	pop	{r3, pc}

08005e12 <RadioRssi>:
{
 8005e12:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8005e14:	f001 fc6c 	bl	80076f0 <SUBGRF_GetRssiInst>
}
 8005e18:	bd08      	pop	{r3, pc}
	...

08005e1c <RadioSetTxContinuousWave>:
{
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8005e20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e24:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 8005e28:	f001 fa76 	bl	8007318 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f001 fcf9 	bl	8007824 <SUBGRF_SetRfTxPower>
 8005e32:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8005e34:	210e      	movs	r1, #14
 8005e36:	f640 101f 	movw	r0, #2335	@ 0x91f
 8005e3a:	f000 ff57 	bl	8006cec <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8005e3e:	2101      	movs	r1, #1
 8005e40:	4628      	mov	r0, r5
 8005e42:	f001 fcdb 	bl	80077fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8005e46:	f001 f921 	bl	800708c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005e4a:	4d04      	ldr	r5, [pc, #16]	@ (8005e5c <RadioSetTxContinuousWave+0x40>)
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f002 f9fc 	bl	800824c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005e54:	4628      	mov	r0, r5
 8005e56:	f002 f9b3 	bl	80081c0 <UTIL_TIMER_Start>
}
 8005e5a:	bd38      	pop	{r3, r4, r5, pc}
 8005e5c:	20000280 	.word	0x20000280

08005e60 <RadioSetChannel>:
{
 8005e60:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8005e62:	f001 fa59 	bl	8007318 <SUBGRF_SetRfFrequency>
}
 8005e66:	bd08      	pop	{r3, pc}

08005e68 <RadioStartCad>:
{
 8005e68:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4b07      	ldr	r3, [pc, #28]	@ (8005e8c <RadioStartCad+0x24>)
 8005e6e:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 8005e72:	f001 fcc3 	bl	80077fc <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005e76:	2300      	movs	r3, #0
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8005e7e:	4608      	mov	r0, r1
 8005e80:	f001 f9d7 	bl	8007232 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8005e84:	f001 f8f6 	bl	8007074 <SUBGRF_SetCad>
}
 8005e88:	bd08      	pop	{r3, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000298 	.word	0x20000298

08005e90 <RadioRx>:
{
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8005e94:	f001 fda4 	bl	80079e0 <RFW_Is_Init>
 8005e98:	2801      	cmp	r0, #1
 8005e9a:	d019      	beq.n	8005ed0 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f240 2162 	movw	r1, #610	@ 0x262
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	f001 f9c4 	bl	8007232 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8005eaa:	b9a4      	cbnz	r4, 8005ed6 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005eac:	4c11      	ldr	r4, [pc, #68]	@ (8005ef4 <RadioRx+0x64>)
 8005eae:	2100      	movs	r1, #0
 8005eb0:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005eb2:	4b11      	ldr	r3, [pc, #68]	@ (8005ef8 <RadioRx+0x68>)
 8005eb4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005eb8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005eba:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8005ebe:	f001 fc9d 	bl	80077fc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8005ec2:	7863      	ldrb	r3, [r4, #1]
 8005ec4:	b183      	cbz	r3, 8005ee8 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005ec6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8005eca:	f001 f841 	bl	8006f50 <SUBGRF_SetRx>
}
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8005ed0:	f001 fd8e 	bl	80079f0 <RFW_ReceiveInit>
 8005ed4:	e7e9      	b.n	8005eaa <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005ed6:	4d09      	ldr	r5, [pc, #36]	@ (8005efc <RadioRx+0x6c>)
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	f002 f9b6 	bl	800824c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f002 f96d 	bl	80081c0 <UTIL_TIMER_Start>
 8005ee6:	e7e1      	b.n	8005eac <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005ee8:	4b02      	ldr	r3, [pc, #8]	@ (8005ef4 <RadioRx+0x64>)
 8005eea:	6898      	ldr	r0, [r3, #8]
 8005eec:	0180      	lsls	r0, r0, #6
 8005eee:	f001 f82f 	bl	8006f50 <SUBGRF_SetRx>
}
 8005ef2:	e7ec      	b.n	8005ece <RadioRx+0x3e>
 8005ef4:	20000298 	.word	0x20000298
 8005ef8:	48000400 	.word	0x48000400
 8005efc:	20000268 	.word	0x20000268

08005f00 <RadioSleep>:
{
 8005f00:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8005f02:	f04f 0004 	mov.w	r0, #4
 8005f06:	f000 ffc7 	bl	8006e98 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8005f0a:	2002      	movs	r0, #2
 8005f0c:	f7fa fd94 	bl	8000a38 <HAL_Delay>
}
 8005f10:	bd08      	pop	{r3, pc}
	...

08005f14 <RadioSend>:
{
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	4605      	mov	r5, r0
 8005f1a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f240 2101 	movw	r1, #513	@ 0x201
 8005f24:	4608      	mov	r0, r1
 8005f26:	f001 f984 	bl	8007232 <SUBGRF_SetDioIrqParams>
 8005f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80060a4 <RadioSend+0x190>)
 8005f2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f30:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8005f32:	4e5d      	ldr	r6, [pc, #372]	@ (80060a8 <RadioSend+0x194>)
 8005f34:	2101      	movs	r1, #1
 8005f36:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 8005f3a:	f001 fc5f 	bl	80077fc <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8005f3e:	7833      	ldrb	r3, [r6, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d103      	bne.n	8005f4c <RadioSend+0x38>
 8005f44:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 8005f48:	2b06      	cmp	r3, #6
 8005f4a:	d013      	beq.n	8005f74 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8005f4c:	f640 0089 	movw	r0, #2185	@ 0x889
 8005f50:	f000 fedc 	bl	8006d0c <SUBGRF_ReadRegister>
 8005f54:	f040 0104 	orr.w	r1, r0, #4
 8005f58:	b2c9      	uxtb	r1, r1
 8005f5a:	f640 0089 	movw	r0, #2185	@ 0x889
 8005f5e:	f000 fec5 	bl	8006cec <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8005f62:	4b51      	ldr	r3, [pc, #324]	@ (80060a8 <RadioSend+0x194>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d819      	bhi.n	8005f9e <RadioSend+0x8a>
 8005f6a:	e8df f003 	tbb	[pc, r3]
 8005f6e:	0e24      	.short	0x0e24
 8005f70:	5024      	.short	0x5024
 8005f72:	5d          	.byte	0x5d
 8005f73:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8005f74:	f640 0089 	movw	r0, #2185	@ 0x889
 8005f78:	f000 fec8 	bl	8006d0c <SUBGRF_ReadRegister>
 8005f7c:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8005f80:	f640 0089 	movw	r0, #2185	@ 0x889
 8005f84:	f000 feb2 	bl	8006cec <SUBGRF_WriteRegister>
 8005f88:	e7eb      	b.n	8005f62 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005f8a:	4847      	ldr	r0, [pc, #284]	@ (80060a8 <RadioSend+0x194>)
 8005f8c:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005f8e:	300e      	adds	r0, #14
 8005f90:	f001 fb1e 	bl	80075d0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005f94:	2200      	movs	r2, #0
 8005f96:	4621      	mov	r1, r4
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f000 ffd1 	bl	8006f40 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8005f9e:	4c43      	ldr	r4, [pc, #268]	@ (80060ac <RadioSend+0x198>)
 8005fa0:	4b41      	ldr	r3, [pc, #260]	@ (80060a8 <RadioSend+0x194>)
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f002 f951 	bl	800824c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8005faa:	4620      	mov	r0, r4
 8005fac:	f002 f908 	bl	80081c0 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8005fb0:	2000      	movs	r0, #0
}
 8005fb2:	b002      	add	sp, #8
 8005fb4:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8005fb6:	f001 fd13 	bl	80079e0 <RFW_Is_Init>
 8005fba:	2801      	cmp	r0, #1
 8005fbc:	d00a      	beq.n	8005fd4 <RadioSend+0xc0>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005fbe:	483a      	ldr	r0, [pc, #232]	@ (80060a8 <RadioSend+0x194>)
 8005fc0:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005fc2:	300e      	adds	r0, #14
 8005fc4:	f001 fb04 	bl	80075d0 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4621      	mov	r1, r4
 8005fcc:	4628      	mov	r0, r5
 8005fce:	f000 ffb7 	bl	8006f40 <SUBGRF_SendPayload>
 8005fd2:	e7e4      	b.n	8005f9e <RadioSend+0x8a>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005fd4:	f10d 0207 	add.w	r2, sp, #7
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f001 fd05 	bl	80079ea <RFW_TransmitInit>
 8005fe0:	b968      	cbnz	r0, 8005ffe <RadioSend+0xea>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005fe2:	4831      	ldr	r0, [pc, #196]	@ (80060a8 <RadioSend+0x194>)
 8005fe4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005fe8:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005fea:	300e      	adds	r0, #14
 8005fec:	f001 faf0 	bl	80075d0 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 ffa2 	bl	8006f40 <SUBGRF_SendPayload>
 8005ffc:	e7cf      	b.n	8005f9e <RadioSend+0x8a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8005ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80060b0 <RadioSend+0x19c>)
 8006000:	2201      	movs	r2, #1
 8006002:	2100      	movs	r1, #0
 8006004:	2002      	movs	r0, #2
 8006006:	f001 fdd1 	bl	8007bac <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 800600a:	2003      	movs	r0, #3
 800600c:	e7d1      	b.n	8005fb2 <RadioSend+0x9e>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800600e:	4826      	ldr	r0, [pc, #152]	@ (80060a8 <RadioSend+0x194>)
 8006010:	2302      	movs	r3, #2
 8006012:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8006014:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006016:	300e      	adds	r0, #14
 8006018:	f001 fada 	bl	80075d0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800601c:	2200      	movs	r2, #0
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f000 ff8d 	bl	8006f40 <SUBGRF_SendPayload>
            break;
 8006026:	e7ba      	b.n	8005f9e <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 8006028:	4622      	mov	r2, r4
 800602a:	4629      	mov	r1, r5
 800602c:	4821      	ldr	r0, [pc, #132]	@ (80060b4 <RadioSend+0x1a0>)
 800602e:	f7ff fc29 	bl	8005884 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006032:	4e1d      	ldr	r6, [pc, #116]	@ (80060a8 <RadioSend+0x194>)
 8006034:	2302      	movs	r3, #2
 8006036:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8006038:	1c65      	adds	r5, r4, #1
 800603a:	b2ed      	uxtb	r5, r5
 800603c:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800603e:	f106 000e 	add.w	r0, r6, #14
 8006042:	f001 fac5 	bl	80075d0 <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8006046:	2100      	movs	r1, #0
 8006048:	20f1      	movs	r0, #241	@ 0xf1
 800604a:	f7ff fc95 	bl	8005978 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800604e:	2100      	movs	r1, #0
 8006050:	20f0      	movs	r0, #240	@ 0xf0
 8006052:	f7ff fc91 	bl	8005978 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8006056:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8006058:	2b64      	cmp	r3, #100	@ 0x64
 800605a:	d019      	beq.n	8006090 <RadioSend+0x17c>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800605c:	21e1      	movs	r1, #225	@ 0xe1
 800605e:	20f3      	movs	r0, #243	@ 0xf3
 8006060:	f7ff fc8a 	bl	8005978 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8006064:	2104      	movs	r1, #4
 8006066:	20f2      	movs	r0, #242	@ 0xf2
 8006068:	f7ff fc86 	bl	8005978 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800606c:	00e1      	lsls	r1, r4, #3
 800606e:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8006070:	0a09      	lsrs	r1, r1, #8
 8006072:	20f4      	movs	r0, #244	@ 0xf4
 8006074:	f7ff fc80 	bl	8005978 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8006078:	f004 01fe 	and.w	r1, r4, #254	@ 0xfe
 800607c:	20f5      	movs	r0, #245	@ 0xf5
 800607e:	f7ff fc7b 	bl	8005978 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8006082:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8006086:	4629      	mov	r1, r5
 8006088:	480a      	ldr	r0, [pc, #40]	@ (80060b4 <RadioSend+0x1a0>)
 800608a:	f000 ff59 	bl	8006f40 <SUBGRF_SendPayload>
            break;
 800608e:	e786      	b.n	8005f9e <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8006090:	2170      	movs	r1, #112	@ 0x70
 8006092:	20f3      	movs	r0, #243	@ 0xf3
 8006094:	f7ff fc70 	bl	8005978 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8006098:	211d      	movs	r1, #29
 800609a:	20f2      	movs	r0, #242	@ 0xf2
 800609c:	f7ff fc6c 	bl	8005978 <RadioWrite>
 80060a0:	e7e4      	b.n	800606c <RadioSend+0x158>
 80060a2:	bf00      	nop
 80060a4:	48000400 	.word	0x48000400
 80060a8:	20000298 	.word	0x20000298
 80060ac:	20000280 	.word	0x20000280
 80060b0:	0800888c 	.word	0x0800888c
 80060b4:	200002f8 	.word	0x200002f8

080060b8 <RadioRandom>:
{
 80060b8:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80060ba:	2300      	movs	r3, #0
 80060bc:	461a      	mov	r2, r3
 80060be:	4619      	mov	r1, r3
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 f8b6 	bl	8007232 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 80060c6:	f000 ff5d 	bl	8006f84 <SUBGRF_GetRandom>
}
 80060ca:	bd08      	pop	{r3, pc}

080060cc <RadioSetModem>:
{
 80060cc:	b510      	push	{r4, lr}
 80060ce:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 80060d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006144 <RadioSetModem+0x78>)
 80060d2:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 80060d4:	f001 fc91 	bl	80079fa <RFW_SetRadioModem>
    switch( modem )
 80060d8:	2c05      	cmp	r4, #5
 80060da:	d804      	bhi.n	80060e6 <RadioSetModem+0x1a>
 80060dc:	e8df f004 	tbb	[pc, r4]
 80060e0:	1d03110a 	.word	0x1d03110a
 80060e4:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80060e6:	2003      	movs	r0, #3
 80060e8:	f001 f942 	bl	8007370 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80060ec:	4b15      	ldr	r3, [pc, #84]	@ (8006144 <RadioSetModem+0x78>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	735a      	strb	r2, [r3, #13]
}
 80060f2:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80060f4:	2000      	movs	r0, #0
 80060f6:	f001 f93b 	bl	8007370 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80060fa:	4b12      	ldr	r3, [pc, #72]	@ (8006144 <RadioSetModem+0x78>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	735a      	strb	r2, [r3, #13]
        break;
 8006100:	e7f7      	b.n	80060f2 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8006102:	2001      	movs	r0, #1
 8006104:	f001 f934 	bl	8007370 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8006108:	4b0e      	ldr	r3, [pc, #56]	@ (8006144 <RadioSetModem+0x78>)
 800610a:	7b5a      	ldrb	r2, [r3, #13]
 800610c:	7b18      	ldrb	r0, [r3, #12]
 800610e:	4282      	cmp	r2, r0
 8006110:	d0ef      	beq.n	80060f2 <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8006112:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8006114:	f000 fae0 	bl	80066d8 <RadioSetPublicNetwork>
 8006118:	e7eb      	b.n	80060f2 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800611a:	2002      	movs	r0, #2
 800611c:	f001 f928 	bl	8007370 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8006120:	4b08      	ldr	r3, [pc, #32]	@ (8006144 <RadioSetModem+0x78>)
 8006122:	2200      	movs	r2, #0
 8006124:	735a      	strb	r2, [r3, #13]
        break;
 8006126:	e7e4      	b.n	80060f2 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006128:	2002      	movs	r0, #2
 800612a:	f001 f921 	bl	8007370 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800612e:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <RadioSetModem+0x78>)
 8006130:	2200      	movs	r2, #0
 8006132:	735a      	strb	r2, [r3, #13]
        break;
 8006134:	e7dd      	b.n	80060f2 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006136:	2000      	movs	r0, #0
 8006138:	f001 f91a 	bl	8007370 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800613c:	4b01      	ldr	r3, [pc, #4]	@ (8006144 <RadioSetModem+0x78>)
 800613e:	2200      	movs	r2, #0
 8006140:	735a      	strb	r2, [r3, #13]
}
 8006142:	e7d6      	b.n	80060f2 <RadioSetModem+0x26>
 8006144:	20000298 	.word	0x20000298

08006148 <RadioSetTxGenericConfig>:
{
 8006148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	4605      	mov	r5, r0
 8006150:	460c      	mov	r4, r1
 8006152:	4617      	mov	r7, r2
 8006154:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8006156:	2100      	movs	r1, #0
 8006158:	9104      	str	r1, [sp, #16]
 800615a:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800615c:	f001 fc3f 	bl	80079de <RFW_DeInit>
    switch( modem )
 8006160:	2d03      	cmp	r5, #3
 8006162:	f200 8154 	bhi.w	800640e <RadioSetTxGenericConfig+0x2c6>
 8006166:	e8df f015 	tbh	[pc, r5, lsl #1]
 800616a:	0079      	.short	0x0079
 800616c:	013e00db 	.word	0x013e00db
 8006170:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 8006172:	7ca2      	ldrb	r2, [r4, #18]
 8006174:	2a08      	cmp	r2, #8
 8006176:	f200 8157 	bhi.w	8006428 <RadioSetTxGenericConfig+0x2e0>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800617a:	68a1      	ldr	r1, [r4, #8]
 800617c:	a804      	add	r0, sp, #16
 800617e:	f001 fe2b 	bl	8007dd8 <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 8152 	beq.w	800642e <RadioSetTxGenericConfig+0x2e6>
        else if( config->msk.BitRate <= 10000 )
 800618a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800618e:	4293      	cmp	r3, r2
 8006190:	d823      	bhi.n	80061da <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8006192:	4bad      	ldr	r3, [pc, #692]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 8006194:	2203      	movs	r2, #3
 8006196:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8006198:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800619c:	6822      	ldr	r2, [r4, #0]
 800619e:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80061a0:	7ce2      	ldrb	r2, [r4, #19]
 80061a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            radio_modem = MODEM_MSK;
 80061a6:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80061a8:	6863      	ldr	r3, [r4, #4]
 80061aa:	00da      	lsls	r2, r3, #3
 80061ac:	4ba6      	ldr	r3, [pc, #664]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 80061ae:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80061b0:	2204      	movs	r2, #4
 80061b2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80061b4:	7ca2      	ldrb	r2, [r4, #18]
 80061b6:	00d2      	lsls	r2, r2, #3
 80061b8:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80061ba:	2200      	movs	r2, #0
 80061bc:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80061be:	7da3      	ldrb	r3, [r4, #22]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d018      	beq.n	80061f6 <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80061c4:	7d23      	ldrb	r3, [r4, #20]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d015      	beq.n	80061f6 <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80061ca:	7d62      	ldrb	r2, [r4, #21]
 80061cc:	4b9e      	ldr	r3, [pc, #632]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 80061ce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80061d0:	7da2      	ldrb	r2, [r4, #22]
 80061d2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80061d4:	7d22      	ldrb	r2, [r4, #20]
 80061d6:	755a      	strb	r2, [r3, #21]
 80061d8:	e026      	b.n	8006228 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80061da:	4b9b      	ldr	r3, [pc, #620]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 80061dc:	2500      	movs	r5, #0
 80061de:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80061e0:	f883 5038 	strb.w	r5, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80061e8:	7ce2      	ldrb	r2, [r4, #19]
 80061ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 80061ee:	6822      	ldr	r2, [r4, #0]
 80061f0:	0892      	lsrs	r2, r2, #2
 80061f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80061f4:	e7d8      	b.n	80061a8 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80061f6:	7d62      	ldrb	r2, [r4, #21]
 80061f8:	f102 030f 	add.w	r3, r2, #15
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d901      	bls.n	8006206 <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006202:	2a01      	cmp	r2, #1
 8006204:	d127      	bne.n	8006256 <RadioSetTxGenericConfig+0x10e>
            ConfigGeneric.TxConfig = config;
 8006206:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 8006208:	2301      	movs	r3, #1
 800620a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800620e:	4a8f      	ldr	r2, [pc, #572]	@ (800644c <RadioSetTxGenericConfig+0x304>)
 8006210:	4b8f      	ldr	r3, [pc, #572]	@ (8006450 <RadioSetTxGenericConfig+0x308>)
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	a801      	add	r0, sp, #4
 8006216:	f001 fbdf 	bl	80079d8 <RFW_Init>
 800621a:	b9e0      	cbnz	r0, 8006256 <RadioSetTxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800621c:	4b8a      	ldr	r3, [pc, #552]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 800621e:	2200      	movs	r2, #0
 8006220:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006222:	2101      	movs	r1, #1
 8006224:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006226:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006228:	f7ff fc22 	bl	8005a70 <RadioStandby>
        RadioSetModem( radio_modem );
 800622c:	4628      	mov	r0, r5
 800622e:	f7ff ff4d 	bl	80060cc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006232:	4d88      	ldr	r5, [pc, #544]	@ (8006454 <RadioSetTxGenericConfig+0x30c>)
 8006234:	4628      	mov	r0, r5
 8006236:	f001 f943 	bl	80074c0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800623a:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800623e:	f001 f9c7 	bl	80075d0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006242:	a804      	add	r0, sp, #16
 8006244:	f000 fdae 	bl	8006da4 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8006248:	8a20      	ldrh	r0, [r4, #16]
 800624a:	f000 fd82 	bl	8006d52 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800624e:	89a0      	ldrh	r0, [r4, #12]
 8006250:	f000 fdc5 	bl	8006dde <SUBGRF_SetCrcPolynomial>
        break;
 8006254:	e0db      	b.n	800640e <RadioSetTxGenericConfig+0x2c6>
                return -1;
 8006256:	f04f 30ff 	mov.w	r0, #4294967295
 800625a:	e0e2      	b.n	8006422 <RadioSetTxGenericConfig+0x2da>
        if( config->fsk.BitRate == 0 )
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80e8 	beq.w	8006434 <RadioSetTxGenericConfig+0x2ec>
        if( config->fsk.SyncWordLength > 8 )
 8006264:	7ca2      	ldrb	r2, [r4, #18]
 8006266:	2a08      	cmp	r2, #8
 8006268:	f200 80e7 	bhi.w	800643a <RadioSetTxGenericConfig+0x2f2>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800626c:	68a1      	ldr	r1, [r4, #8]
 800626e:	a804      	add	r0, sp, #16
 8006270:	f001 fdb2 	bl	8007dd8 <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006274:	4b74      	ldr	r3, [pc, #464]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800627c:	6821      	ldr	r1, [r4, #0]
 800627e:	63d9      	str	r1, [r3, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006280:	7ce1      	ldrb	r1, [r4, #19]
 8006282:	f883 1044 	strb.w	r1, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006286:	69a1      	ldr	r1, [r4, #24]
 8006288:	6419      	str	r1, [r3, #64]	@ 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800628a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800628c:	6861      	ldr	r1, [r4, #4]
 800628e:	00c9      	lsls	r1, r1, #3
 8006290:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006292:	2104      	movs	r1, #4
 8006294:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006296:	7ca1      	ldrb	r1, [r4, #18]
 8006298:	00c9      	lsls	r1, r1, #3
 800629a:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800629c:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800629e:	7da3      	ldrb	r3, [r4, #22]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d00a      	beq.n	80062ba <RadioSetTxGenericConfig+0x172>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80062a4:	7d23      	ldrb	r3, [r4, #20]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d007      	beq.n	80062ba <RadioSetTxGenericConfig+0x172>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80062aa:	7d62      	ldrb	r2, [r4, #21]
 80062ac:	4b66      	ldr	r3, [pc, #408]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 80062ae:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80062b0:	7da2      	ldrb	r2, [r4, #22]
 80062b2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80062b4:	7d22      	ldrb	r2, [r4, #20]
 80062b6:	755a      	strb	r2, [r3, #21]
 80062b8:	e018      	b.n	80062ec <RadioSetTxGenericConfig+0x1a4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80062ba:	7d62      	ldrb	r2, [r4, #21]
 80062bc:	f102 030f 	add.w	r3, r2, #15
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d901      	bls.n	80062ca <RadioSetTxGenericConfig+0x182>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80062c6:	2a01      	cmp	r2, #1
 80062c8:	d127      	bne.n	800631a <RadioSetTxGenericConfig+0x1d2>
            ConfigGeneric.rtx = CONFIG_TX;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 80062d0:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80062d2:	4a5e      	ldr	r2, [pc, #376]	@ (800644c <RadioSetTxGenericConfig+0x304>)
 80062d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006450 <RadioSetTxGenericConfig+0x308>)
 80062d6:	6819      	ldr	r1, [r3, #0]
 80062d8:	a801      	add	r0, sp, #4
 80062da:	f001 fb7d 	bl	80079d8 <RFW_Init>
 80062de:	b9e0      	cbnz	r0, 800631a <RadioSetTxGenericConfig+0x1d2>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80062e0:	4b59      	ldr	r3, [pc, #356]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80062e6:	2101      	movs	r1, #1
 80062e8:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80062ea:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80062ec:	f7ff fbc0 	bl	8005a70 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80062f0:	2000      	movs	r0, #0
 80062f2:	f7ff feeb 	bl	80060cc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80062f6:	4d57      	ldr	r5, [pc, #348]	@ (8006454 <RadioSetTxGenericConfig+0x30c>)
 80062f8:	4628      	mov	r0, r5
 80062fa:	f001 f8e1 	bl	80074c0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80062fe:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 8006302:	f001 f965 	bl	80075d0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006306:	a804      	add	r0, sp, #16
 8006308:	f000 fd4c 	bl	8006da4 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800630c:	8a20      	ldrh	r0, [r4, #16]
 800630e:	f000 fd20 	bl	8006d52 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006312:	89a0      	ldrh	r0, [r4, #12]
 8006314:	f000 fd63 	bl	8006dde <SUBGRF_SetCrcPolynomial>
        break;
 8006318:	e079      	b.n	800640e <RadioSetTxGenericConfig+0x2c6>
                return -1;
 800631a:	f04f 30ff 	mov.w	r0, #4294967295
 800631e:	e080      	b.n	8006422 <RadioSetTxGenericConfig+0x2da>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006320:	4b49      	ldr	r3, [pc, #292]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006328:	7822      	ldrb	r2, [r4, #0]
 800632a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800632e:	7862      	ldrb	r2, [r4, #1]
 8006330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006334:	78a2      	ldrb	r2, [r4, #2]
 8006336:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800633a:	78e3      	ldrb	r3, [r4, #3]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d033      	beq.n	80063a8 <RadioSetTxGenericConfig+0x260>
 8006340:	2b02      	cmp	r3, #2
 8006342:	d036      	beq.n	80063b2 <RadioSetTxGenericConfig+0x26a>
 8006344:	b35b      	cbz	r3, 800639e <RadioSetTxGenericConfig+0x256>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006346:	4d40      	ldr	r5, [pc, #256]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 8006348:	f04f 0801 	mov.w	r8, #1
 800634c:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006350:	88a3      	ldrh	r3, [r4, #4]
 8006352:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006354:	79a3      	ldrb	r3, [r4, #6]
 8006356:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006358:	79e3      	ldrb	r3, [r4, #7]
 800635a:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800635e:	7a23      	ldrb	r3, [r4, #8]
 8006360:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 8006364:	f7ff fb84 	bl	8005a70 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006368:	4640      	mov	r0, r8
 800636a:	f7ff feaf 	bl	80060cc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800636e:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8006372:	f001 f8a5 	bl	80074c0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006376:	f105 000e 	add.w	r0, r5, #14
 800637a:	f001 f929 	bl	80075d0 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800637e:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 8006382:	2b06      	cmp	r3, #6
 8006384:	d024      	beq.n	80063d0 <RadioSetTxGenericConfig+0x288>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8006386:	f640 0089 	movw	r0, #2185	@ 0x889
 800638a:	f000 fcbf 	bl	8006d0c <SUBGRF_ReadRegister>
 800638e:	f040 0104 	orr.w	r1, r0, #4
 8006392:	b2c9      	uxtb	r1, r1
 8006394:	f640 0089 	movw	r0, #2185	@ 0x889
 8006398:	f000 fca8 	bl	8006cec <SUBGRF_WriteRegister>
 800639c:	e037      	b.n	800640e <RadioSetTxGenericConfig+0x2c6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800639e:	4b2a      	ldr	r3, [pc, #168]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80063a6:	e7ce      	b.n	8006346 <RadioSetTxGenericConfig+0x1fe>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80063a8:	4b27      	ldr	r3, [pc, #156]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80063b0:	e7c9      	b.n	8006346 <RadioSetTxGenericConfig+0x1fe>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80063b2:	7823      	ldrb	r3, [r4, #0]
 80063b4:	3b0b      	subs	r3, #11
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d904      	bls.n	80063c6 <RadioSetTxGenericConfig+0x27e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80063bc:	4b22      	ldr	r3, [pc, #136]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80063c4:	e7bf      	b.n	8006346 <RadioSetTxGenericConfig+0x1fe>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80063c6:	4b20      	ldr	r3, [pc, #128]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80063ce:	e7ba      	b.n	8006346 <RadioSetTxGenericConfig+0x1fe>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80063d0:	f640 0089 	movw	r0, #2185	@ 0x889
 80063d4:	f000 fc9a 	bl	8006d0c <SUBGRF_ReadRegister>
 80063d8:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 80063dc:	f640 0089 	movw	r0, #2185	@ 0x889
 80063e0:	f000 fc84 	bl	8006cec <SUBGRF_WriteRegister>
 80063e4:	e013      	b.n	800640e <RadioSetTxGenericConfig+0x2c6>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063ee:	d227      	bcs.n	8006440 <RadioSetTxGenericConfig+0x2f8>
        RadioSetModem( MODEM_BPSK );
 80063f0:	2003      	movs	r0, #3
 80063f2:	f7ff fe6b 	bl	80060cc <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80063f6:	4814      	ldr	r0, [pc, #80]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 80063f8:	2302      	movs	r3, #2
 80063fa:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	6483      	str	r3, [r0, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006402:	2316      	movs	r3, #22
 8006404:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006408:	3038      	adds	r0, #56	@ 0x38
 800640a:	f001 f859 	bl	80074c0 <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800640e:	4638      	mov	r0, r7
 8006410:	f001 fa08 	bl	8007824 <SUBGRF_SetRfTxPower>
 8006414:	4c0c      	ldr	r4, [pc, #48]	@ (8006448 <RadioSetTxGenericConfig+0x300>)
 8006416:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800641a:	f001 fae5 	bl	80079e8 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800641e:	6066      	str	r6, [r4, #4]
    return 0;
 8006420:	2000      	movs	r0, #0
}
 8006422:	b006      	add	sp, #24
 8006424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 8006428:	f04f 30ff 	mov.w	r0, #4294967295
 800642c:	e7f9      	b.n	8006422 <RadioSetTxGenericConfig+0x2da>
            return -1;
 800642e:	f04f 30ff 	mov.w	r0, #4294967295
 8006432:	e7f6      	b.n	8006422 <RadioSetTxGenericConfig+0x2da>
            return -1;
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	e7f3      	b.n	8006422 <RadioSetTxGenericConfig+0x2da>
            return -1;
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	e7f0      	b.n	8006422 <RadioSetTxGenericConfig+0x2da>
            return -1;
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	e7ed      	b.n	8006422 <RadioSetTxGenericConfig+0x2da>
 8006446:	bf00      	nop
 8006448:	20000298 	.word	0x20000298
 800644c:	20000280 	.word	0x20000280
 8006450:	200002f4 	.word	0x200002f4
 8006454:	200002d0 	.word	0x200002d0

08006458 <RadioSetRxGenericConfig>:
{
 8006458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645c:	b086      	sub	sp, #24
 800645e:	4606      	mov	r6, r0
 8006460:	460c      	mov	r4, r1
 8006462:	4615      	mov	r5, r2
 8006464:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 8006466:	2300      	movs	r3, #0
 8006468:	9304      	str	r3, [sp, #16]
 800646a:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800646c:	f001 fab7 	bl	80079de <RFW_DeInit>
    if( rxContinuous != 0 )
 8006470:	b105      	cbz	r5, 8006474 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 8006472:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8006474:	3d00      	subs	r5, #0
 8006476:	bf18      	it	ne
 8006478:	2501      	movne	r5, #1
 800647a:	4b93      	ldr	r3, [pc, #588]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 800647c:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800647e:	b136      	cbz	r6, 800648e <RadioSetRxGenericConfig+0x36>
 8006480:	2e01      	cmp	r6, #1
 8006482:	f000 808f 	beq.w	80065a4 <RadioSetRxGenericConfig+0x14c>
 8006486:	2000      	movs	r0, #0
}
 8006488:	b006      	add	sp, #24
 800648a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800648e:	68a3      	ldr	r3, [r4, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 810d 	beq.w	80066b0 <RadioSetRxGenericConfig+0x258>
 8006496:	68e3      	ldr	r3, [r4, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 810c 	beq.w	80066b6 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 800649e:	7fa2      	ldrb	r2, [r4, #30]
 80064a0:	2a08      	cmp	r2, #8
 80064a2:	f200 810b 	bhi.w	80066bc <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80064a6:	6921      	ldr	r1, [r4, #16]
 80064a8:	a804      	add	r0, sp, #16
 80064aa:	f001 fc95 	bl	8007dd8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80064ae:	6820      	ldr	r0, [r4, #0]
 80064b0:	3800      	subs	r0, #0
 80064b2:	bf18      	it	ne
 80064b4:	2001      	movne	r0, #1
 80064b6:	f000 fdf7 	bl	80070a8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80064ba:	4d83      	ldr	r5, [pc, #524]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 80064bc:	2600      	movs	r6, #0
 80064be:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	63eb      	str	r3, [r5, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80064c6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80064ca:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80064ce:	6860      	ldr	r0, [r4, #4]
 80064d0:	f001 fa20 	bl	8007914 <SUBGRF_GetFskBandwidthRegValue>
 80064d4:	f885 0045 	strb.w	r0, [r5, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80064d8:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80064e0:	7fe3      	ldrb	r3, [r4, #31]
 80064e2:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80064e4:	7fa3      	ldrb	r3, [r4, #30]
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80064ea:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80064ee:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80064f0:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 80064f4:	b973      	cbnz	r3, 8006514 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80064f6:	6961      	ldr	r1, [r4, #20]
 80064f8:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80064fa:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 80064fe:	2a02      	cmp	r2, #2
 8006500:	d012      	beq.n	8006528 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006502:	2b02      	cmp	r3, #2
 8006504:	d010      	beq.n	8006528 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006506:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 800650a:	496f      	ldr	r1, [pc, #444]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 800650c:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800650e:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8006510:	754b      	strb	r3, [r1, #21]
 8006512:	e023      	b.n	800655c <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006514:	2b02      	cmp	r3, #2
 8006516:	d003      	beq.n	8006520 <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006518:	4a6b      	ldr	r2, [pc, #428]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 800651a:	21ff      	movs	r1, #255	@ 0xff
 800651c:	7591      	strb	r1, [r2, #22]
 800651e:	e7ec      	b.n	80064fa <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006520:	4a69      	ldr	r2, [pc, #420]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 8006522:	21ff      	movs	r1, #255	@ 0xff
 8006524:	7591      	strb	r1, [r2, #22]
 8006526:	e7e8      	b.n	80064fa <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8006528:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 800652c:	f102 030f 	add.w	r3, r2, #15
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b01      	cmp	r3, #1
 8006534:	d901      	bls.n	800653a <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006536:	2a01      	cmp	r2, #1
 8006538:	d131      	bne.n	800659e <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 800653a:	2300      	movs	r3, #0
 800653c:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 8006540:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8006542:	4a62      	ldr	r2, [pc, #392]	@ (80066cc <RadioSetRxGenericConfig+0x274>)
 8006544:	4b62      	ldr	r3, [pc, #392]	@ (80066d0 <RadioSetRxGenericConfig+0x278>)
 8006546:	6819      	ldr	r1, [r3, #0]
 8006548:	a801      	add	r0, sp, #4
 800654a:	f001 fa45 	bl	80079d8 <RFW_Init>
 800654e:	bb30      	cbnz	r0, 800659e <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006550:	4b5d      	ldr	r3, [pc, #372]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 8006552:	2200      	movs	r2, #0
 8006554:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006556:	2101      	movs	r1, #1
 8006558:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800655a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800655c:	f7ff fa88 	bl	8005a70 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006560:	2000      	movs	r0, #0
 8006562:	f7ff fdb3 	bl	80060cc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006566:	4d5b      	ldr	r5, [pc, #364]	@ (80066d4 <RadioSetRxGenericConfig+0x27c>)
 8006568:	4628      	mov	r0, r5
 800656a:	f000 ffa9 	bl	80074c0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800656e:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 8006572:	f001 f82d 	bl	80075d0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006576:	a804      	add	r0, sp, #16
 8006578:	f000 fc14 	bl	8006da4 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800657c:	8ba0      	ldrh	r0, [r4, #28]
 800657e:	f000 fbe8 	bl	8006d52 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006582:	8b20      	ldrh	r0, [r4, #24]
 8006584:	f000 fc2b 	bl	8006dde <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8006588:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800658c:	fb07 f303 	mul.w	r3, r7, r3
 8006590:	68a2      	ldr	r2, [r4, #8]
 8006592:	fbb3 f3f2 	udiv	r3, r3, r2
 8006596:	f845 3c30 	str.w	r3, [r5, #-48]
    return status;
 800659a:	2000      	movs	r0, #0
        break;
 800659c:	e774      	b.n	8006488 <RadioSetRxGenericConfig+0x30>
                return -1;
 800659e:	f04f 30ff 	mov.w	r0, #4294967295
 80065a2:	e771      	b.n	8006488 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 80065a4:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 808b 	beq.w	80066c2 <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80065ac:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d055      	beq.n	8006660 <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 80065b4:	f04f 08ff 	mov.w	r8, #255	@ 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80065b8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80065ba:	3800      	subs	r0, #0
 80065bc:	bf18      	it	ne
 80065be:	2001      	movne	r0, #1
 80065c0:	f000 fd72 	bl	80070a8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80065c4:	b2f8      	uxtb	r0, r7
 80065c6:	f000 fd7c 	bl	80070c2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80065ca:	4b3f      	ldr	r3, [pc, #252]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80065d2:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80065d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80065da:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80065de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80065e2:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 80065e6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80065ea:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d03e      	beq.n	8006670 <RadioSetRxGenericConfig+0x218>
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d041      	beq.n	800667a <RadioSetRxGenericConfig+0x222>
 80065f6:	b3b3      	cbz	r3, 8006666 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80065f8:	4d33      	ldr	r5, [pc, #204]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 80065fa:	2601      	movs	r6, #1
 80065fc:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80065fe:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8006600:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006602:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8006606:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006608:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800660c:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 8006610:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006614:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8006618:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 800661c:	f7ff fa28 	bl	8005a70 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006620:	4630      	mov	r0, r6
 8006622:	f7ff fd53 	bl	80060cc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006626:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800662a:	f000 ff49 	bl	80074c0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800662e:	f105 000e 	add.w	r0, r5, #14
 8006632:	f000 ffcd 	bl	80075d0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006636:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800663a:	42b3      	cmp	r3, r6
 800663c:	d02d      	beq.n	800669a <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800663e:	f240 7036 	movw	r0, #1846	@ 0x736
 8006642:	f000 fb63 	bl	8006d0c <SUBGRF_ReadRegister>
 8006646:	f040 0104 	orr.w	r1, r0, #4
 800664a:	b2c9      	uxtb	r1, r1
 800664c:	f240 7036 	movw	r0, #1846	@ 0x736
 8006650:	f000 fb4c 	bl	8006cec <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006654:	4b1c      	ldr	r3, [pc, #112]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 8006656:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800665a:	609a      	str	r2, [r3, #8]
    return status;
 800665c:	2000      	movs	r0, #0
        break;
 800665e:	e713      	b.n	8006488 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8006660:	f894 8014 	ldrb.w	r8, [r4, #20]
 8006664:	e7a8      	b.n	80065b8 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006666:	4b18      	ldr	r3, [pc, #96]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800666e:	e7c3      	b.n	80065f8 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006670:	4b15      	ldr	r3, [pc, #84]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8006678:	e7be      	b.n	80065f8 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800667a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800667e:	3b0b      	subs	r3, #11
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b01      	cmp	r3, #1
 8006684:	d904      	bls.n	8006690 <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006686:	4b10      	ldr	r3, [pc, #64]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800668e:	e7b3      	b.n	80065f8 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006690:	4b0d      	ldr	r3, [pc, #52]	@ (80066c8 <RadioSetRxGenericConfig+0x270>)
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8006698:	e7ae      	b.n	80065f8 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800669a:	f240 7036 	movw	r0, #1846	@ 0x736
 800669e:	f000 fb35 	bl	8006d0c <SUBGRF_ReadRegister>
 80066a2:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 80066a6:	f240 7036 	movw	r0, #1846	@ 0x736
 80066aa:	f000 fb1f 	bl	8006cec <SUBGRF_WriteRegister>
 80066ae:	e7d1      	b.n	8006654 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 80066b0:	f04f 30ff 	mov.w	r0, #4294967295
 80066b4:	e6e8      	b.n	8006488 <RadioSetRxGenericConfig+0x30>
 80066b6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ba:	e6e5      	b.n	8006488 <RadioSetRxGenericConfig+0x30>
            return -1;
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	e6e2      	b.n	8006488 <RadioSetRxGenericConfig+0x30>
            return -1;
 80066c2:	f04f 30ff 	mov.w	r0, #4294967295
 80066c6:	e6df      	b.n	8006488 <RadioSetRxGenericConfig+0x30>
 80066c8:	20000298 	.word	0x20000298
 80066cc:	20000268 	.word	0x20000268
 80066d0:	200002f4 	.word	0x200002f4
 80066d4:	200002d0 	.word	0x200002d0

080066d8 <RadioSetPublicNetwork>:
{
 80066d8:	b510      	push	{r4, lr}
 80066da:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80066dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006718 <RadioSetPublicNetwork+0x40>)
 80066de:	7318      	strb	r0, [r3, #12]
 80066e0:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80066e2:	2001      	movs	r0, #1
 80066e4:	f7ff fcf2 	bl	80060cc <RadioSetModem>
    if( enable == true )
 80066e8:	b154      	cbz	r4, 8006700 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80066ea:	2134      	movs	r1, #52	@ 0x34
 80066ec:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80066f0:	f000 fafc 	bl	8006cec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80066f4:	2144      	movs	r1, #68	@ 0x44
 80066f6:	f240 7041 	movw	r0, #1857	@ 0x741
 80066fa:	f000 faf7 	bl	8006cec <SUBGRF_WriteRegister>
}
 80066fe:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8006700:	2114      	movs	r1, #20
 8006702:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8006706:	f000 faf1 	bl	8006cec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800670a:	2124      	movs	r1, #36	@ 0x24
 800670c:	f240 7041 	movw	r0, #1857	@ 0x741
 8006710:	f000 faec 	bl	8006cec <SUBGRF_WriteRegister>
}
 8006714:	e7f3      	b.n	80066fe <RadioSetPublicNetwork+0x26>
 8006716:	bf00      	nop
 8006718:	20000298 	.word	0x20000298

0800671c <RadioSetTxConfig>:
{
 800671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006720:	b083      	sub	sp, #12
 8006722:	4604      	mov	r4, r0
 8006724:	460d      	mov	r5, r1
 8006726:	4691      	mov	r9, r2
 8006728:	461f      	mov	r7, r3
 800672a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 800672e:	f89d 803c 	ldrb.w	r8, [sp, #60]	@ 0x3c
 8006732:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 8006736:	f001 f952 	bl	80079de <RFW_DeInit>
    switch( modem )
 800673a:	2c01      	cmp	r4, #1
 800673c:	d05d      	beq.n	80067fa <RadioSetTxConfig+0xde>
 800673e:	2c04      	cmp	r4, #4
 8006740:	f000 80aa 	beq.w	8006898 <RadioSetTxConfig+0x17c>
 8006744:	b19c      	cbz	r4, 800676e <RadioSetTxConfig+0x52>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006746:	4628      	mov	r0, r5
 8006748:	f001 f86c 	bl	8007824 <SUBGRF_SetRfTxPower>
 800674c:	4c5a      	ldr	r4, [pc, #360]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 800674e:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006752:	210e      	movs	r1, #14
 8006754:	f640 101f 	movw	r0, #2335	@ 0x91f
 8006758:	f000 fac8 	bl	8006cec <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800675c:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8006760:	f001 f942 	bl	80079e8 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006764:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006766:	6063      	str	r3, [r4, #4]
}
 8006768:	b003      	add	sp, #12
 800676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800676e:	4c52      	ldr	r4, [pc, #328]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 8006770:	f04f 0b00 	mov.w	fp, #0
 8006774:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800677a:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800677c:	230b      	movs	r3, #11
 800677e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006782:	4638      	mov	r0, r7
 8006784:	f001 f8c6 	bl	8007914 <SUBGRF_GetFskBandwidthRegValue>
 8006788:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800678c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006790:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006794:	00f6      	lsls	r6, r6, #3
 8006796:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006798:	2304      	movs	r3, #4
 800679a:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800679c:	2318      	movs	r3, #24
 800679e:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80067a0:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80067a4:	f088 0801 	eor.w	r8, r8, #1
 80067a8:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 80067ac:	f1ba 0f00 	cmp.w	sl, #0
 80067b0:	d01f      	beq.n	80067f2 <RadioSetTxConfig+0xd6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80067b2:	22f2      	movs	r2, #242	@ 0xf2
 80067b4:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80067b6:	4c40      	ldr	r4, [pc, #256]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 80067b8:	2301      	movs	r3, #1
 80067ba:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80067bc:	f7ff f958 	bl	8005a70 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80067c0:	2000      	movs	r0, #0
 80067c2:	f7ff fc83 	bl	80060cc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80067c6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80067ca:	f000 fe79 	bl	80074c0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80067ce:	f104 000e 	add.w	r0, r4, #14
 80067d2:	f000 fefd 	bl	80075d0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80067d6:	4a39      	ldr	r2, [pc, #228]	@ (80068bc <RadioSetTxConfig+0x1a0>)
 80067d8:	466b      	mov	r3, sp
 80067da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067de:	e883 0003 	stmia.w	r3, {r0, r1}
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fade 	bl	8006da4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80067e8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80067ec:	f000 fab1 	bl	8006d52 <SUBGRF_SetWhiteningSeed>
            break;
 80067f0:	e7a9      	b.n	8006746 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80067f2:	4b31      	ldr	r3, [pc, #196]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	75da      	strb	r2, [r3, #23]
 80067f8:	e7dd      	b.n	80067b6 <RadioSetTxConfig+0x9a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80067fa:	4a2f      	ldr	r2, [pc, #188]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 80067fc:	2301      	movs	r3, #1
 80067fe:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8006802:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800680a:	492d      	ldr	r1, [pc, #180]	@ (80068c0 <RadioSetTxConfig+0x1a4>)
 800680c:	5dc9      	ldrb	r1, [r1, r7]
 800680e:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8006812:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 8006816:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800681a:	b91f      	cbnz	r7, 8006824 <RadioSetTxConfig+0x108>
 800681c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800681e:	3a0b      	subs	r2, #11
 8006820:	2a01      	cmp	r2, #1
 8006822:	d92b      	bls.n	800687c <RadioSetTxConfig+0x160>
 8006824:	2f01      	cmp	r7, #1
 8006826:	d026      	beq.n	8006876 <RadioSetTxConfig+0x15a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006828:	4a23      	ldr	r2, [pc, #140]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 800682a:	2100      	movs	r1, #0
 800682c:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006830:	4a21      	ldr	r2, [pc, #132]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 8006832:	2101      	movs	r1, #1
 8006834:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006836:	3b05      	subs	r3, #5
 8006838:	b2db      	uxtb	r3, r3
 800683a:	428b      	cmp	r3, r1
 800683c:	d923      	bls.n	8006886 <RadioSetTxConfig+0x16a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800683e:	4b1e      	ldr	r3, [pc, #120]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 8006840:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006842:	4c1d      	ldr	r4, [pc, #116]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 8006844:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006848:	4b1e      	ldr	r3, [pc, #120]	@ (80068c4 <RadioSetTxConfig+0x1a8>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800684e:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006852:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8006856:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800685a:	f7ff f909 	bl	8005a70 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800685e:	2001      	movs	r0, #1
 8006860:	f7ff fc34 	bl	80060cc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006864:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8006868:	f000 fe2a 	bl	80074c0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800686c:	f104 000e 	add.w	r0, r4, #14
 8006870:	f000 feae 	bl	80075d0 <SUBGRF_SetPacketParams>
            break;
 8006874:	e767      	b.n	8006746 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006876:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006878:	2a0c      	cmp	r2, #12
 800687a:	d1d5      	bne.n	8006828 <RadioSetTxConfig+0x10c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800687c:	4a0e      	ldr	r2, [pc, #56]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 800687e:	2101      	movs	r1, #1
 8006880:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 8006884:	e7d4      	b.n	8006830 <RadioSetTxConfig+0x114>
                if( preambleLen < 12 )
 8006886:	2e0b      	cmp	r6, #11
 8006888:	d803      	bhi.n	8006892 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800688a:	4613      	mov	r3, r2
 800688c:	220c      	movs	r2, #12
 800688e:	839a      	strh	r2, [r3, #28]
 8006890:	e7d7      	b.n	8006842 <RadioSetTxConfig+0x126>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006892:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 8006894:	839e      	strh	r6, [r3, #28]
 8006896:	e7d4      	b.n	8006842 <RadioSetTxConfig+0x126>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006898:	2004      	movs	r0, #4
 800689a:	f7ff fc17 	bl	80060cc <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800689e:	4806      	ldr	r0, [pc, #24]	@ (80068b8 <RadioSetTxConfig+0x19c>)
 80068a0:	2302      	movs	r3, #2
 80068a2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80068a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068a8:	6483      	str	r3, [r0, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80068aa:	2316      	movs	r3, #22
 80068ac:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80068b0:	3038      	adds	r0, #56	@ 0x38
 80068b2:	f000 fe05 	bl	80074c0 <SUBGRF_SetModulationParams>
            break;
 80068b6:	e746      	b.n	8006746 <RadioSetTxConfig+0x2a>
 80068b8:	20000298 	.word	0x20000298
 80068bc:	0800865c 	.word	0x0800865c
 80068c0:	080088a4 	.word	0x080088a4
 80068c4:	20000008 	.word	0x20000008

080068c8 <RadioSetRxConfig>:
{
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	b087      	sub	sp, #28
 80068ce:	4604      	mov	r4, r0
 80068d0:	460e      	mov	r6, r1
 80068d2:	4615      	mov	r5, r2
 80068d4:	9301      	str	r3, [sp, #4]
 80068d6:	f8bd 9044 	ldrh.w	r9, [sp, #68]	@ 0x44
 80068da:	f8bd a048 	ldrh.w	sl, [sp, #72]	@ 0x48
 80068de:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 80068e2:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
 80068e6:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
    SubgRf.RxContinuous = rxContinuous;
 80068ea:	4bb0      	ldr	r3, [pc, #704]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 80068ec:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 80068f0:	f001 f875 	bl	80079de <RFW_DeInit>
    if( rxContinuous == true )
 80068f4:	f1b8 0f00 	cmp.w	r8, #0
 80068f8:	d001      	beq.n	80068fe <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80068fa:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80068fe:	b16f      	cbz	r7, 800691c <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8006900:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8006904:	4baa      	ldr	r3, [pc, #680]	@ (8006bb0 <RadioSetRxConfig+0x2e8>)
 8006906:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8006908:	2c01      	cmp	r4, #1
 800690a:	f000 80d2 	beq.w	8006ab2 <RadioSetRxConfig+0x1ea>
 800690e:	2c05      	cmp	r4, #5
 8006910:	d008      	beq.n	8006924 <RadioSetRxConfig+0x5c>
 8006912:	2c00      	cmp	r4, #0
 8006914:	d07c      	beq.n	8006a10 <RadioSetRxConfig+0x148>
}
 8006916:	b007      	add	sp, #28
 8006918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800691c:	4ba4      	ldr	r3, [pc, #656]	@ (8006bb0 <RadioSetRxConfig+0x2e8>)
 800691e:	22ff      	movs	r2, #255	@ 0xff
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	e7f1      	b.n	8006908 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8006924:	2001      	movs	r0, #1
 8006926:	f000 fbbf 	bl	80070a8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800692a:	4ca0      	ldr	r4, [pc, #640]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 800692c:	2700      	movs	r7, #0
 800692e:	f884 7038 	strb.w	r7, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006932:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006934:	2309      	movs	r3, #9
 8006936:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800693a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800693e:	6423      	str	r3, [r4, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006940:	4630      	mov	r0, r6
 8006942:	f000 ffe7 	bl	8007914 <SUBGRF_GetFskBandwidthRegValue>
 8006946:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800694a:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800694c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8006950:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8006954:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006956:	2310      	movs	r3, #16
 8006958:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800695a:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800695c:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800695e:	4b94      	ldr	r3, [pc, #592]	@ (8006bb0 <RadioSetRxConfig+0x2e8>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006964:	2301      	movs	r3, #1
 8006966:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006968:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800696a:	2005      	movs	r0, #5
 800696c:	f7ff fbae 	bl	80060cc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006970:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8006974:	f000 fda4 	bl	80074c0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006978:	f104 000e 	add.w	r0, r4, #14
 800697c:	f000 fe28 	bl	80075d0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006980:	ab02      	add	r3, sp, #8
 8006982:	4a8c      	ldr	r2, [pc, #560]	@ (8006bb4 <RadioSetRxConfig+0x2ec>)
 8006984:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006988:	e883 0003 	stmia.w	r3, {r0, r1}
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fa09 	bl	8006da4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006992:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8006996:	f000 f9dc 	bl	8006d52 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800699a:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800699e:	f7fe ffe7 	bl	8005970 <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80069a2:	f000 01ef 	and.w	r1, r0, #239	@ 0xef
 80069a6:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80069aa:	f7fe ffe5 	bl	8005978 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80069ae:	2104      	movs	r1, #4
 80069b0:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80069b4:	f7fe ffe0 	bl	8005978 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80069b8:	f640 009b 	movw	r0, #2203	@ 0x89b
 80069bc:	f7fe ffd8 	bl	8005970 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80069c0:	f000 01e3 	and.w	r1, r0, #227	@ 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80069c4:	f041 0108 	orr.w	r1, r1, #8
 80069c8:	f640 009b 	movw	r0, #2203	@ 0x89b
 80069cc:	f7fe ffd4 	bl	8005978 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80069d0:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80069d4:	f7fe ffcc 	bl	8005970 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80069d8:	f000 01e7 	and.w	r1, r0, #231	@ 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80069dc:	f041 0118 	orr.w	r1, r1, #24
 80069e0:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80069e4:	f7fe ffc8 	bl	8005978 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80069e8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80069ec:	f7fe ffc0 	bl	8005970 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80069f0:	f000 018f 	and.w	r1, r0, #143	@ 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80069f4:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 80069f8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80069fc:	f7fe ffbc 	bl	8005978 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006a00:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8006a04:	fb03 f30a 	mul.w	r3, r3, sl
 8006a08:	fbb3 f3f5 	udiv	r3, r3, r5
 8006a0c:	60a3      	str	r3, [r4, #8]
            break;
 8006a0e:	e782      	b.n	8006916 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006a10:	2000      	movs	r0, #0
 8006a12:	f000 fb49 	bl	80070a8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006a16:	4c65      	ldr	r4, [pc, #404]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006a18:	f04f 0800 	mov.w	r8, #0
 8006a1c:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006a20:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006a22:	230b      	movs	r3, #11
 8006a24:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f000 ff73 	bl	8007914 <SUBGRF_GetFskBandwidthRegValue>
 8006a2e:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006a32:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006a36:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8006a3a:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006a3e:	2304      	movs	r3, #4
 8006a40:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006a42:	2318      	movs	r3, #24
 8006a44:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006a46:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006a4a:	f087 0701 	eor.w	r7, r7, #1
 8006a4e:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006a50:	4b57      	ldr	r3, [pc, #348]	@ (8006bb0 <RadioSetRxConfig+0x2e8>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8006a56:	f1bb 0f00 	cmp.w	fp, #0
 8006a5a:	d026      	beq.n	8006aaa <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006a5c:	22f2      	movs	r2, #242	@ 0xf2
 8006a5e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006a60:	4c52      	ldr	r4, [pc, #328]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006a62:	2301      	movs	r3, #1
 8006a64:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8006a66:	f7ff f803 	bl	8005a70 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	f7ff fb2e 	bl	80060cc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006a70:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8006a74:	f000 fd24 	bl	80074c0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006a78:	f104 000e 	add.w	r0, r4, #14
 8006a7c:	f000 fda8 	bl	80075d0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006a80:	4a4d      	ldr	r2, [pc, #308]	@ (8006bb8 <RadioSetRxConfig+0x2f0>)
 8006a82:	ab04      	add	r3, sp, #16
 8006a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a88:	e883 0003 	stmia.w	r3, {r0, r1}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 f989 	bl	8006da4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006a92:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8006a96:	f000 f95c 	bl	8006d52 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006a9a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8006a9e:	fb03 f30a 	mul.w	r3, r3, sl
 8006aa2:	fbb3 f3f5 	udiv	r3, r3, r5
 8006aa6:	60a3      	str	r3, [r4, #8]
            break;
 8006aa8:	e735      	b.n	8006916 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006aaa:	4b40      	ldr	r3, [pc, #256]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	75da      	strb	r2, [r3, #23]
 8006ab0:	e7d6      	b.n	8006a60 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f000 faf8 	bl	80070a8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006aba:	2301      	movs	r3, #1
 8006abc:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8006ac0:	b2eb      	uxtb	r3, r5
 8006ac2:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006ac6:	493d      	ldr	r1, [pc, #244]	@ (8006bbc <RadioSetRxConfig+0x2f4>)
 8006ac8:	5d89      	ldrb	r1, [r1, r6]
 8006aca:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006ace:	9901      	ldr	r1, [sp, #4]
 8006ad0:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006ad4:	b91e      	cbnz	r6, 8006ade <RadioSetRxConfig+0x216>
 8006ad6:	f1a5 020b 	sub.w	r2, r5, #11
 8006ada:	2a01      	cmp	r2, #1
 8006adc:	d94b      	bls.n	8006b76 <RadioSetRxConfig+0x2ae>
 8006ade:	2e01      	cmp	r6, #1
 8006ae0:	d047      	beq.n	8006b72 <RadioSetRxConfig+0x2aa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006ae2:	4a32      	ldr	r2, [pc, #200]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006aea:	4a30      	ldr	r2, [pc, #192]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006aec:	2101      	movs	r1, #1
 8006aee:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006af0:	3b05      	subs	r3, #5
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	428b      	cmp	r3, r1
 8006af6:	d943      	bls.n	8006b80 <RadioSetRxConfig+0x2b8>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006af8:	4b2c      	ldr	r3, [pc, #176]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006afa:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006afe:	4c2b      	ldr	r4, [pc, #172]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006b00:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006b02:	4b2b      	ldr	r3, [pc, #172]	@ (8006bb0 <RadioSetRxConfig+0x2e8>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006b08:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006b0c:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 8006b10:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 8006b14:	f7fe ffac 	bl	8005a70 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006b18:	2001      	movs	r0, #1
 8006b1a:	f7ff fad7 	bl	80060cc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006b1e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8006b22:	f000 fccd 	bl	80074c0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006b26:	f104 000e 	add.w	r0, r4, #14
 8006b2a:	f000 fd51 	bl	80075d0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006b2e:	fa5f f08a 	uxtb.w	r0, sl
 8006b32:	f000 fac6 	bl	80070c2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8006b36:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8006b3a:	f000 f8e7 	bl	8006d0c <SUBGRF_ReadRegister>
 8006b3e:	f000 0101 	and.w	r1, r0, #1
 8006b42:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8006b46:	f000 f8d1 	bl	8006cec <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006b4a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d021      	beq.n	8006b96 <RadioSetRxConfig+0x2ce>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8006b52:	f240 7036 	movw	r0, #1846	@ 0x736
 8006b56:	f000 f8d9 	bl	8006d0c <SUBGRF_ReadRegister>
 8006b5a:	f040 0104 	orr.w	r1, r0, #4
 8006b5e:	b2c9      	uxtb	r1, r1
 8006b60:	f240 7036 	movw	r0, #1846	@ 0x736
 8006b64:	f000 f8c2 	bl	8006cec <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006b68:	4b10      	ldr	r3, [pc, #64]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006b6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	e6d1      	b.n	8006916 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006b72:	2d0c      	cmp	r5, #12
 8006b74:	d1b5      	bne.n	8006ae2 <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006b76:	4a0d      	ldr	r2, [pc, #52]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006b78:	2101      	movs	r1, #1
 8006b7a:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 8006b7e:	e7b4      	b.n	8006aea <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 8006b80:	f1b9 0f0b 	cmp.w	r9, #11
 8006b84:	d803      	bhi.n	8006b8e <RadioSetRxConfig+0x2c6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006b86:	4613      	mov	r3, r2
 8006b88:	220c      	movs	r2, #12
 8006b8a:	839a      	strh	r2, [r3, #28]
 8006b8c:	e7b7      	b.n	8006afe <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006b8e:	4b07      	ldr	r3, [pc, #28]	@ (8006bac <RadioSetRxConfig+0x2e4>)
 8006b90:	f8a3 901c 	strh.w	r9, [r3, #28]
 8006b94:	e7b3      	b.n	8006afe <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006b96:	f240 7036 	movw	r0, #1846	@ 0x736
 8006b9a:	f000 f8b7 	bl	8006d0c <SUBGRF_ReadRegister>
 8006b9e:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8006ba2:	f240 7036 	movw	r0, #1846	@ 0x736
 8006ba6:	f000 f8a1 	bl	8006cec <SUBGRF_WriteRegister>
 8006baa:	e7dd      	b.n	8006b68 <RadioSetRxConfig+0x2a0>
 8006bac:	20000298 	.word	0x20000298
 8006bb0:	20000008 	.word	0x20000008
 8006bb4:	08008664 	.word	0x08008664
 8006bb8:	0800865c 	.word	0x0800865c
 8006bbc:	080088a4 	.word	0x080088a4

08006bc0 <RadioIsChannelFree>:
{
 8006bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc2:	b08b      	sub	sp, #44	@ 0x2c
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	460f      	mov	r7, r1
 8006bc8:	4616      	mov	r6, r2
 8006bca:	461d      	mov	r5, r3
    RadioStandby( );
 8006bcc:	f7fe ff50 	bl	8005a70 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f7ff fa7b 	bl	80060cc <RadioSetModem>
    RadioSetChannel( freq );
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f7ff f942 	bl	8005e60 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8006bdc:	2301      	movs	r3, #1
 8006bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be0:	2400      	movs	r4, #0
 8006be2:	9408      	str	r4, [sp, #32]
 8006be4:	9407      	str	r4, [sp, #28]
 8006be6:	9406      	str	r4, [sp, #24]
 8006be8:	9405      	str	r4, [sp, #20]
 8006bea:	9404      	str	r4, [sp, #16]
 8006bec:	9403      	str	r4, [sp, #12]
 8006bee:	9402      	str	r4, [sp, #8]
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	9700      	str	r7, [sp, #0]
 8006bf6:	4623      	mov	r3, r4
 8006bf8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7ff fe62 	bl	80068c8 <RadioSetRxConfig>
    RadioRx( 0 );
 8006c04:	4620      	mov	r0, r4
 8006c06:	f7ff f943 	bl	8005e90 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006c0a:	f7ff f8f5 	bl	8005df8 <RadioGetWakeupTime>
 8006c0e:	f7f9 ff13 	bl	8000a38 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8006c12:	f001 fa3b 	bl	800808c <UTIL_TIMER_GetCurrentTime>
 8006c16:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f001 fa41 	bl	80080a0 <UTIL_TIMER_GetElapsedTime>
 8006c1e:	42a8      	cmp	r0, r5
 8006c20:	d206      	bcs.n	8006c30 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8006c22:	2000      	movs	r0, #0
 8006c24:	f7ff f8f5 	bl	8005e12 <RadioRssi>
        if( rssi > rssiThresh )
 8006c28:	42b0      	cmp	r0, r6
 8006c2a:	ddf5      	ble.n	8006c18 <RadioIsChannelFree+0x58>
            status = false;
 8006c2c:	2400      	movs	r4, #0
 8006c2e:	e000      	b.n	8006c32 <RadioIsChannelFree+0x72>
    bool status = true;
 8006c30:	2401      	movs	r4, #1
    RadioStandby( );
 8006c32:	f7fe ff1d 	bl	8005a70 <RadioStandby>
}
 8006c36:	4620      	mov	r0, r4
 8006c38:	b00b      	add	sp, #44	@ 0x2c
 8006c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c3c <RadioInit>:
{
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	b082      	sub	sp, #8
    RadioEvents = events;
 8006c40:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb8 <RadioInit+0x7c>)
 8006c42:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8006c44:	4d1d      	ldr	r5, [pc, #116]	@ (8006cbc <RadioInit+0x80>)
 8006c46:	2400      	movs	r4, #0
 8006c48:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8006c4a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8006c4c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006c4e:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8006c50:	481b      	ldr	r0, [pc, #108]	@ (8006cc0 <RadioInit+0x84>)
 8006c52:	f000 fb27 	bl	80072a4 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8006c56:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8006c58:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8006c5a:	f000 fa53 	bl	8007104 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fd27 	bl	80076b4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8006c66:	2204      	movs	r2, #4
 8006c68:	4621      	mov	r1, r4
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	f000 fb9a 	bl	80073a4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006c70:	4623      	mov	r3, r4
 8006c72:	4622      	mov	r2, r4
 8006c74:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006c78:	4608      	mov	r0, r1
 8006c7a:	f000 fada 	bl	8007232 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8006c7e:	f7ff f93f 	bl	8005f00 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8006c82:	4e10      	ldr	r6, [pc, #64]	@ (8006cc4 <RadioInit+0x88>)
 8006c84:	9400      	str	r4, [sp, #0]
 8006c86:	4b10      	ldr	r3, [pc, #64]	@ (8006cc8 <RadioInit+0x8c>)
 8006c88:	4622      	mov	r2, r4
 8006c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f001 f9de 	bl	8008050 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8006c94:	4d0d      	ldr	r5, [pc, #52]	@ (8006ccc <RadioInit+0x90>)
 8006c96:	9400      	str	r4, [sp, #0]
 8006c98:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <RadioInit+0x94>)
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f001 f9d5 	bl	8008050 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f001 fa30 	bl	800810c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8006cac:	4628      	mov	r0, r5
 8006cae:	f001 fa2d 	bl	800810c <UTIL_TIMER_Stop>
}
 8006cb2:	b002      	add	sp, #8
 8006cb4:	bd70      	pop	{r4, r5, r6, pc}
 8006cb6:	bf00      	nop
 8006cb8:	200002f4 	.word	0x200002f4
 8006cbc:	20000298 	.word	0x20000298
 8006cc0:	08005de5 	.word	0x08005de5
 8006cc4:	20000280 	.word	0x20000280
 8006cc8:	08005855 	.word	0x08005855
 8006ccc:	20000268 	.word	0x20000268
 8006cd0:	0800587d 	.word	0x0800587d

08006cd4 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8006cd4:	4b01      	ldr	r3, [pc, #4]	@ (8006cdc <SUBGRF_GetOperatingMode+0x8>)
 8006cd6:	7818      	ldrb	r0, [r3, #0]
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20000406 	.word	0x20000406

08006ce0 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8006ce0:	4b01      	ldr	r3, [pc, #4]	@ (8006ce8 <SUBGRF_GetPacketType+0x8>)
 8006ce2:	7818      	ldrb	r0, [r3, #0]
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20000405 	.word	0x20000405

08006cec <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8006cec:	b500      	push	{lr}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f10d 0207 	add.w	r2, sp, #7
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	4802      	ldr	r0, [pc, #8]	@ (8006d08 <SUBGRF_WriteRegister+0x1c>)
 8006cfe:	f7fd f8c3 	bl	8003e88 <HAL_SUBGHZ_WriteRegisters>
}
 8006d02:	b003      	add	sp, #12
 8006d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d08:	200000d0 	.word	0x200000d0

08006d0c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8006d0c:	b500      	push	{lr}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8006d12:	2301      	movs	r3, #1
 8006d14:	f10d 0207 	add.w	r2, sp, #7
 8006d18:	4803      	ldr	r0, [pc, #12]	@ (8006d28 <SUBGRF_ReadRegister+0x1c>)
 8006d1a:	f7fd f905 	bl	8003f28 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 8006d1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006d22:	b003      	add	sp, #12
 8006d24:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d28:	200000d0 	.word	0x200000d0

08006d2c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8006d30:	f7fa fafa 	bl	8001328 <RBI_IsDCDC>
 8006d34:	2801      	cmp	r0, #1
 8006d36:	d000      	beq.n	8006d3a <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8006d38:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8006d3a:	f640 1023 	movw	r0, #2339	@ 0x923
 8006d3e:	f7ff ffe5 	bl	8006d0c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8006d42:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8006d46:	4321      	orrs	r1, r4
 8006d48:	f640 1023 	movw	r0, #2339	@ 0x923
 8006d4c:	f7ff ffce 	bl	8006cec <SUBGRF_WriteRegister>
}
 8006d50:	e7f2      	b.n	8006d38 <Radio_SMPS_Set+0xc>

08006d52 <SUBGRF_SetWhiteningSeed>:
{
 8006d52:	b510      	push	{r4, lr}
 8006d54:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8006d56:	f7ff ffc3 	bl	8006ce0 <SUBGRF_GetPacketType>
 8006d5a:	b100      	cbz	r0, 8006d5e <SUBGRF_SetWhiteningSeed+0xc>
}
 8006d5c:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006d5e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8006d62:	f7ff ffd3 	bl	8006d0c <SUBGRF_ReadRegister>
 8006d66:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006d6a:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8006d6e:	4301      	orrs	r1, r0
 8006d70:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8006d74:	f7ff ffba 	bl	8006cec <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8006d78:	b2e1      	uxtb	r1, r4
 8006d7a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8006d7e:	f7ff ffb5 	bl	8006cec <SUBGRF_WriteRegister>
}
 8006d82:	e7eb      	b.n	8006d5c <SUBGRF_SetWhiteningSeed+0xa>

08006d84 <SUBGRF_WriteRegisters>:
{
 8006d84:	b510      	push	{r4, lr}
 8006d86:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d88:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006d8c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8006d8e:	460a      	mov	r2, r1
 8006d90:	4601      	mov	r1, r0
 8006d92:	4803      	ldr	r0, [pc, #12]	@ (8006da0 <SUBGRF_WriteRegisters+0x1c>)
 8006d94:	f7fd f878 	bl	8003e88 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d98:	f384 8810 	msr	PRIMASK, r4
}
 8006d9c:	bd10      	pop	{r4, pc}
 8006d9e:	bf00      	nop
 8006da0:	200000d0 	.word	0x200000d0

08006da4 <SUBGRF_SetSyncWord>:
{
 8006da4:	b508      	push	{r3, lr}
 8006da6:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006da8:	2208      	movs	r2, #8
 8006daa:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8006dae:	f7ff ffe9 	bl	8006d84 <SUBGRF_WriteRegisters>
}
 8006db2:	2000      	movs	r0, #0
 8006db4:	bd08      	pop	{r3, pc}

08006db6 <SUBGRF_SetCrcSeed>:
{
 8006db6:	b500      	push	{lr}
 8006db8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006dba:	0a03      	lsrs	r3, r0, #8
 8006dbc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006dc0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8006dc4:	f7ff ff8c 	bl	8006ce0 <SUBGRF_GetPacketType>
 8006dc8:	b110      	cbz	r0, 8006dd0 <SUBGRF_SetCrcSeed+0x1a>
}
 8006dca:	b003      	add	sp, #12
 8006dcc:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	a901      	add	r1, sp, #4
 8006dd4:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8006dd8:	f7ff ffd4 	bl	8006d84 <SUBGRF_WriteRegisters>
}
 8006ddc:	e7f5      	b.n	8006dca <SUBGRF_SetCrcSeed+0x14>

08006dde <SUBGRF_SetCrcPolynomial>:
{
 8006dde:	b500      	push	{lr}
 8006de0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006de2:	0a03      	lsrs	r3, r0, #8
 8006de4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006de8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8006dec:	f7ff ff78 	bl	8006ce0 <SUBGRF_GetPacketType>
 8006df0:	b110      	cbz	r0, 8006df8 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8006df2:	b003      	add	sp, #12
 8006df4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006df8:	2202      	movs	r2, #2
 8006dfa:	a901      	add	r1, sp, #4
 8006dfc:	f240 60be 	movw	r0, #1726	@ 0x6be
 8006e00:	f7ff ffc0 	bl	8006d84 <SUBGRF_WriteRegisters>
}
 8006e04:	e7f5      	b.n	8006df2 <SUBGRF_SetCrcPolynomial+0x14>
	...

08006e08 <SUBGRF_ReadRegisters>:
{
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e0c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e10:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8006e12:	460a      	mov	r2, r1
 8006e14:	4601      	mov	r1, r0
 8006e16:	4803      	ldr	r0, [pc, #12]	@ (8006e24 <SUBGRF_ReadRegisters+0x1c>)
 8006e18:	f7fd f886 	bl	8003f28 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e1c:	f384 8810 	msr	PRIMASK, r4
}
 8006e20:	bd10      	pop	{r4, pc}
 8006e22:	bf00      	nop
 8006e24:	200000d0 	.word	0x200000d0

08006e28 <SUBGRF_WriteBuffer>:
{
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e30:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8006e32:	460a      	mov	r2, r1
 8006e34:	4601      	mov	r1, r0
 8006e36:	4803      	ldr	r0, [pc, #12]	@ (8006e44 <SUBGRF_WriteBuffer+0x1c>)
 8006e38:	f7fd f9d4 	bl	80041e4 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3c:	f384 8810 	msr	PRIMASK, r4
}
 8006e40:	bd10      	pop	{r4, pc}
 8006e42:	bf00      	nop
 8006e44:	200000d0 	.word	0x200000d0

08006e48 <SUBGRF_SetPayload>:
{
 8006e48:	b508      	push	{r3, lr}
 8006e4a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	2000      	movs	r0, #0
 8006e50:	f7ff ffea 	bl	8006e28 <SUBGRF_WriteBuffer>
}
 8006e54:	bd08      	pop	{r3, pc}
	...

08006e58 <SUBGRF_ReadBuffer>:
{
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e5c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e60:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8006e62:	460a      	mov	r2, r1
 8006e64:	4601      	mov	r1, r0
 8006e66:	4803      	ldr	r0, [pc, #12]	@ (8006e74 <SUBGRF_ReadBuffer+0x1c>)
 8006e68:	f7fd fa06 	bl	8004278 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6c:	f384 8810 	msr	PRIMASK, r4
}
 8006e70:	bd10      	pop	{r4, pc}
 8006e72:	bf00      	nop
 8006e74:	200000d0 	.word	0x200000d0

08006e78 <SUBGRF_WriteCommand>:
{
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e7c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e80:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8006e82:	460a      	mov	r2, r1
 8006e84:	4601      	mov	r1, r0
 8006e86:	4803      	ldr	r0, [pc, #12]	@ (8006e94 <SUBGRF_WriteCommand+0x1c>)
 8006e88:	f7fd f8a2 	bl	8003fd0 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8c:	f384 8810 	msr	PRIMASK, r4
}
 8006e90:	bd10      	pop	{r4, pc}
 8006e92:	bf00      	nop
 8006e94:	200000d0 	.word	0x200000d0

08006e98 <SUBGRF_SetSleep>:
{
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	f7fa fa36 	bl	8001310 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006ea4:	2002      	movs	r0, #2
 8006ea6:	f7ff ff41 	bl	8006d2c <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006eaa:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006eae:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006eb2:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8006eb4:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006eb8:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006eba:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f10d 0107 	add.w	r1, sp, #7
 8006ec4:	2084      	movs	r0, #132	@ 0x84
 8006ec6:	f7ff ffd7 	bl	8006e78 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8006eca:	4b02      	ldr	r3, [pc, #8]	@ (8006ed4 <SUBGRF_SetSleep+0x3c>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
}
 8006ed0:	b002      	add	sp, #8
 8006ed2:	bd10      	pop	{r4, pc}
 8006ed4:	20000406 	.word	0x20000406

08006ed8 <SUBGRF_SetStandby>:
{
 8006ed8:	b500      	push	{lr}
 8006eda:	b083      	sub	sp, #12
 8006edc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f10d 0107 	add.w	r1, sp, #7
 8006ee6:	2080      	movs	r0, #128	@ 0x80
 8006ee8:	f7ff ffc6 	bl	8006e78 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006eec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006ef0:	b92b      	cbnz	r3, 8006efe <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8006ef2:	4b05      	ldr	r3, [pc, #20]	@ (8006f08 <SUBGRF_SetStandby+0x30>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	701a      	strb	r2, [r3, #0]
}
 8006ef8:	b003      	add	sp, #12
 8006efa:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8006efe:	4b02      	ldr	r3, [pc, #8]	@ (8006f08 <SUBGRF_SetStandby+0x30>)
 8006f00:	2202      	movs	r2, #2
 8006f02:	701a      	strb	r2, [r3, #0]
}
 8006f04:	e7f8      	b.n	8006ef8 <SUBGRF_SetStandby+0x20>
 8006f06:	bf00      	nop
 8006f08:	20000406 	.word	0x20000406

08006f0c <SUBGRF_SetTx>:
{
 8006f0c:	b500      	push	{lr}
 8006f0e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8006f10:	4b0a      	ldr	r3, [pc, #40]	@ (8006f3c <SUBGRF_SetTx+0x30>)
 8006f12:	2204      	movs	r2, #4
 8006f14:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006f16:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006f1a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006f1e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006f22:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006f26:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006f2a:	2203      	movs	r2, #3
 8006f2c:	a901      	add	r1, sp, #4
 8006f2e:	2083      	movs	r0, #131	@ 0x83
 8006f30:	f7ff ffa2 	bl	8006e78 <SUBGRF_WriteCommand>
}
 8006f34:	b003      	add	sp, #12
 8006f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f3a:	bf00      	nop
 8006f3c:	20000406 	.word	0x20000406

08006f40 <SUBGRF_SendPayload>:
{
 8006f40:	b510      	push	{r4, lr}
 8006f42:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8006f44:	f7ff ff80 	bl	8006e48 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f7ff ffdf 	bl	8006f0c <SUBGRF_SetTx>
}
 8006f4e:	bd10      	pop	{r4, pc}

08006f50 <SUBGRF_SetRx>:
{
 8006f50:	b500      	push	{lr}
 8006f52:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8006f54:	4b0a      	ldr	r3, [pc, #40]	@ (8006f80 <SUBGRF_SetRx+0x30>)
 8006f56:	2205      	movs	r2, #5
 8006f58:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006f5a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006f5e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006f62:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006f66:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006f6a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006f6e:	2203      	movs	r2, #3
 8006f70:	a901      	add	r1, sp, #4
 8006f72:	2082      	movs	r0, #130	@ 0x82
 8006f74:	f7ff ff80 	bl	8006e78 <SUBGRF_WriteCommand>
}
 8006f78:	b003      	add	sp, #12
 8006f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f7e:	bf00      	nop
 8006f80:	20000406 	.word	0x20000406

08006f84 <SUBGRF_GetRandom>:
{
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	b082      	sub	sp, #8
    uint32_t number = 0;
 8006f88:	2600      	movs	r6, #0
 8006f8a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8006f8c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8006f90:	f7ff febc 	bl	8006d0c <SUBGRF_ReadRegister>
 8006f94:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006f96:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 8006f9a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8006f9e:	f7ff fea5 	bl	8006cec <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8006fa2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8006fa6:	f7ff feb1 	bl	8006d0c <SUBGRF_ReadRegister>
 8006faa:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006fac:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8006fb0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8006fb4:	f7ff fe9a 	bl	8006cec <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006fb8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8006fbc:	f7ff ffc8 	bl	8006f50 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	eb0d 0102 	add.w	r1, sp, r2
 8006fc6:	f640 0019 	movw	r0, #2073	@ 0x819
 8006fca:	f7ff ff1d 	bl	8006e08 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f7ff ff82 	bl	8006ed8 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8006fda:	f7ff fe87 	bl	8006cec <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8006fde:	4621      	mov	r1, r4
 8006fe0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8006fe4:	f7ff fe82 	bl	8006cec <SUBGRF_WriteRegister>
}
 8006fe8:	9801      	ldr	r0, [sp, #4]
 8006fea:	b002      	add	sp, #8
 8006fec:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ff0 <SUBGRF_SetRxBoosted>:
{
 8006ff0:	b510      	push	{r4, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8007028 <SUBGRF_SetRxBoosted+0x38>)
 8006ff8:	2205      	movs	r2, #5
 8006ffa:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8006ffc:	2197      	movs	r1, #151	@ 0x97
 8006ffe:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8007002:	f7ff fe73 	bl	8006cec <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007006:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800700a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800700e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8007012:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007016:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800701a:	2203      	movs	r2, #3
 800701c:	a901      	add	r1, sp, #4
 800701e:	2082      	movs	r0, #130	@ 0x82
 8007020:	f7ff ff2a 	bl	8006e78 <SUBGRF_WriteCommand>
}
 8007024:	b002      	add	sp, #8
 8007026:	bd10      	pop	{r4, pc}
 8007028:	20000406 	.word	0x20000406

0800702c <SUBGRF_SetRxDutyCycle>:
{
 800702c:	b500      	push	{lr}
 800702e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8007030:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8007034:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8007038:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800703c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8007040:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8007044:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007048:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800704c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007050:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8007054:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8007058:	2206      	movs	r2, #6
 800705a:	4669      	mov	r1, sp
 800705c:	2094      	movs	r0, #148	@ 0x94
 800705e:	f7ff ff0b 	bl	8006e78 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8007062:	4b03      	ldr	r3, [pc, #12]	@ (8007070 <SUBGRF_SetRxDutyCycle+0x44>)
 8007064:	2206      	movs	r2, #6
 8007066:	701a      	strb	r2, [r3, #0]
}
 8007068:	b003      	add	sp, #12
 800706a:	f85d fb04 	ldr.w	pc, [sp], #4
 800706e:	bf00      	nop
 8007070:	20000406 	.word	0x20000406

08007074 <SUBGRF_SetCad>:
{
 8007074:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8007076:	2200      	movs	r2, #0
 8007078:	4611      	mov	r1, r2
 800707a:	20c5      	movs	r0, #197	@ 0xc5
 800707c:	f7ff fefc 	bl	8006e78 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8007080:	4b01      	ldr	r3, [pc, #4]	@ (8007088 <SUBGRF_SetCad+0x14>)
 8007082:	2207      	movs	r2, #7
 8007084:	701a      	strb	r2, [r3, #0]
}
 8007086:	bd08      	pop	{r3, pc}
 8007088:	20000406 	.word	0x20000406

0800708c <SUBGRF_SetTxContinuousWave>:
{
 800708c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800708e:	2200      	movs	r2, #0
 8007090:	4611      	mov	r1, r2
 8007092:	20d1      	movs	r0, #209	@ 0xd1
 8007094:	f7ff fef0 	bl	8006e78 <SUBGRF_WriteCommand>
}
 8007098:	bd08      	pop	{r3, pc}

0800709a <SUBGRF_SetTxInfinitePreamble>:
{
 800709a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800709c:	2200      	movs	r2, #0
 800709e:	4611      	mov	r1, r2
 80070a0:	20d2      	movs	r0, #210	@ 0xd2
 80070a2:	f7ff fee9 	bl	8006e78 <SUBGRF_WriteCommand>
}
 80070a6:	bd08      	pop	{r3, pc}

080070a8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80070a8:	b500      	push	{lr}
 80070aa:	b083      	sub	sp, #12
 80070ac:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80070b0:	2201      	movs	r2, #1
 80070b2:	f10d 0107 	add.w	r1, sp, #7
 80070b6:	209f      	movs	r0, #159	@ 0x9f
 80070b8:	f7ff fede 	bl	8006e78 <SUBGRF_WriteCommand>
}
 80070bc:	b003      	add	sp, #12
 80070be:	f85d fb04 	ldr.w	pc, [sp], #4

080070c2 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80070c2:	b500      	push	{lr}
 80070c4:	b083      	sub	sp, #12
 80070c6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80070ca:	2201      	movs	r2, #1
 80070cc:	f10d 0107 	add.w	r1, sp, #7
 80070d0:	20a0      	movs	r0, #160	@ 0xa0
 80070d2:	f7ff fed1 	bl	8006e78 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80070d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80070da:	2b3f      	cmp	r3, #63	@ 0x3f
 80070dc:	d90f      	bls.n	80070fe <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80070de:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80070e0:	2200      	movs	r2, #0
        while( mant > 31 )
 80070e2:	e002      	b.n	80070ea <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 80070e4:	089b      	lsrs	r3, r3, #2
            exp++;
 80070e6:	3201      	adds	r2, #1
 80070e8:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 80070ea:	2b1f      	cmp	r3, #31
 80070ec:	d8fa      	bhi.n	80070e4 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80070ee:	00d9      	lsls	r1, r3, #3
 80070f0:	b2c9      	uxtb	r1, r1
 80070f2:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80070f4:	b2c9      	uxtb	r1, r1
 80070f6:	f240 7006 	movw	r0, #1798	@ 0x706
 80070fa:	f7ff fdf7 	bl	8006cec <SUBGRF_WriteRegister>
}
 80070fe:	b003      	add	sp, #12
 8007100:	f85d fb04 	ldr.w	pc, [sp], #4

08007104 <SUBGRF_SetRegulatorMode>:
{
 8007104:	b500      	push	{lr}
 8007106:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8007108:	f7fa f90e 	bl	8001328 <RBI_IsDCDC>
 800710c:	2801      	cmp	r0, #1
 800710e:	d00b      	beq.n	8007128 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8007110:	2300      	movs	r3, #0
 8007112:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8007116:	2201      	movs	r2, #1
 8007118:	f10d 0107 	add.w	r1, sp, #7
 800711c:	2096      	movs	r0, #150	@ 0x96
 800711e:	f7ff feab 	bl	8006e78 <SUBGRF_WriteCommand>
}
 8007122:	b003      	add	sp, #12
 8007124:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8007128:	2301      	movs	r3, #1
 800712a:	f88d 3007 	strb.w	r3, [sp, #7]
 800712e:	e7f2      	b.n	8007116 <SUBGRF_SetRegulatorMode+0x12>

08007130 <SUBGRF_Calibrate>:
{
 8007130:	b500      	push	{lr}
 8007132:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007134:	f000 0340 	and.w	r3, r0, #64	@ 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007138:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800713c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800713e:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007142:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007144:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007148:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800714a:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800714e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007150:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007154:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8007156:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800715a:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800715c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007160:	2201      	movs	r2, #1
 8007162:	f10d 0107 	add.w	r1, sp, #7
 8007166:	2089      	movs	r0, #137	@ 0x89
 8007168:	f7ff fe86 	bl	8006e78 <SUBGRF_WriteCommand>
}
 800716c:	b003      	add	sp, #12
 800716e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007174 <SUBGRF_CalibrateImage>:
{
 8007174:	b500      	push	{lr}
 8007176:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8007178:	4b1f      	ldr	r3, [pc, #124]	@ (80071f8 <SUBGRF_CalibrateImage+0x84>)
 800717a:	4298      	cmp	r0, r3
 800717c:	d90d      	bls.n	800719a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800717e:	23e1      	movs	r3, #225	@ 0xe1
 8007180:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8007184:	23e9      	movs	r3, #233	@ 0xe9
 8007186:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800718a:	2202      	movs	r2, #2
 800718c:	a901      	add	r1, sp, #4
 800718e:	2098      	movs	r0, #152	@ 0x98
 8007190:	f7ff fe72 	bl	8006e78 <SUBGRF_WriteCommand>
}
 8007194:	b003      	add	sp, #12
 8007196:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800719a:	4b18      	ldr	r3, [pc, #96]	@ (80071fc <SUBGRF_CalibrateImage+0x88>)
 800719c:	4298      	cmp	r0, r3
 800719e:	d906      	bls.n	80071ae <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80071a0:	23d7      	movs	r3, #215	@ 0xd7
 80071a2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80071a6:	23db      	movs	r3, #219	@ 0xdb
 80071a8:	f88d 3005 	strb.w	r3, [sp, #5]
 80071ac:	e7ed      	b.n	800718a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80071ae:	4b14      	ldr	r3, [pc, #80]	@ (8007200 <SUBGRF_CalibrateImage+0x8c>)
 80071b0:	4298      	cmp	r0, r3
 80071b2:	d906      	bls.n	80071c2 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80071b4:	23c1      	movs	r3, #193	@ 0xc1
 80071b6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80071ba:	23c5      	movs	r3, #197	@ 0xc5
 80071bc:	f88d 3005 	strb.w	r3, [sp, #5]
 80071c0:	e7e3      	b.n	800718a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80071c2:	4b10      	ldr	r3, [pc, #64]	@ (8007204 <SUBGRF_CalibrateImage+0x90>)
 80071c4:	4298      	cmp	r0, r3
 80071c6:	d906      	bls.n	80071d6 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80071c8:	2375      	movs	r3, #117	@ 0x75
 80071ca:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80071ce:	2381      	movs	r3, #129	@ 0x81
 80071d0:	f88d 3005 	strb.w	r3, [sp, #5]
 80071d4:	e7d9      	b.n	800718a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80071d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007208 <SUBGRF_CalibrateImage+0x94>)
 80071d8:	4298      	cmp	r0, r3
 80071da:	d906      	bls.n	80071ea <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 80071dc:	236b      	movs	r3, #107	@ 0x6b
 80071de:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80071e2:	236f      	movs	r3, #111	@ 0x6f
 80071e4:	f88d 3005 	strb.w	r3, [sp, #5]
 80071e8:	e7cf      	b.n	800718a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 80071ea:	2329      	movs	r3, #41	@ 0x29
 80071ec:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 80071f0:	232b      	movs	r3, #43	@ 0x2b
 80071f2:	f88d 3005 	strb.w	r3, [sp, #5]
 80071f6:	e7c8      	b.n	800718a <SUBGRF_CalibrateImage+0x16>
 80071f8:	35a4e900 	.word	0x35a4e900
 80071fc:	32a9f880 	.word	0x32a9f880
 8007200:	2de54480 	.word	0x2de54480
 8007204:	1b6b0b00 	.word	0x1b6b0b00
 8007208:	1954fc40 	.word	0x1954fc40

0800720c <SUBGRF_SetPaConfig>:
{
 800720c:	b500      	push	{lr}
 800720e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8007210:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8007214:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8007218:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800721c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8007220:	2204      	movs	r2, #4
 8007222:	eb0d 0102 	add.w	r1, sp, r2
 8007226:	2095      	movs	r0, #149	@ 0x95
 8007228:	f7ff fe26 	bl	8006e78 <SUBGRF_WriteCommand>
}
 800722c:	b003      	add	sp, #12
 800722e:	f85d fb04 	ldr.w	pc, [sp], #4

08007232 <SUBGRF_SetDioIrqParams>:
{
 8007232:	b500      	push	{lr}
 8007234:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8007236:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800723a:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800723e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8007242:	0a08      	lsrs	r0, r1, #8
 8007244:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8007248:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800724c:	0a11      	lsrs	r1, r2, #8
 800724e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8007252:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8007256:	0a1a      	lsrs	r2, r3, #8
 8007258:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800725c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8007260:	2208      	movs	r2, #8
 8007262:	4669      	mov	r1, sp
 8007264:	4610      	mov	r0, r2
 8007266:	f7ff fe07 	bl	8006e78 <SUBGRF_WriteCommand>
}
 800726a:	b003      	add	sp, #12
 800726c:	f85d fb04 	ldr.w	pc, [sp], #4

08007270 <SUBGRF_SetTcxoMode>:
{
 8007270:	b500      	push	{lr}
 8007272:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8007274:	f000 0007 	and.w	r0, r0, #7
 8007278:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800727c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007280:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007284:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007288:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800728c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8007290:	2204      	movs	r2, #4
 8007292:	eb0d 0102 	add.w	r1, sp, r2
 8007296:	2097      	movs	r0, #151	@ 0x97
 8007298:	f7ff fdee 	bl	8006e78 <SUBGRF_WriteCommand>
}
 800729c:	b003      	add	sp, #12
 800729e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080072a4 <SUBGRF_Init>:
{
 80072a4:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80072a6:	b108      	cbz	r0, 80072ac <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80072a8:	4a18      	ldr	r2, [pc, #96]	@ (800730c <SUBGRF_Init+0x68>)
 80072aa:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80072ac:	f7f9 fb38 	bl	8000920 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80072b0:	2002      	movs	r0, #2
 80072b2:	f7ff fd3b 	bl	8006d2c <Radio_SMPS_Set>
    ImageCalibrated = false;
 80072b6:	2000      	movs	r0, #0
 80072b8:	4b15      	ldr	r3, [pc, #84]	@ (8007310 <SUBGRF_Init+0x6c>)
 80072ba:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80072bc:	f7ff fe0c 	bl	8006ed8 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80072c0:	f7fa f82e 	bl	8001320 <RBI_IsTCXO>
 80072c4:	2801      	cmp	r0, #1
 80072c6:	d014      	beq.n	80072f2 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80072c8:	2120      	movs	r1, #32
 80072ca:	f640 1011 	movw	r0, #2321	@ 0x911
 80072ce:	f7ff fd0d 	bl	8006cec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80072d2:	2120      	movs	r1, #32
 80072d4:	f640 1012 	movw	r0, #2322	@ 0x912
 80072d8:	f7ff fd08 	bl	8006cec <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80072dc:	210e      	movs	r1, #14
 80072de:	f640 101f 	movw	r0, #2335	@ 0x91f
 80072e2:	f7ff fd03 	bl	8006cec <SUBGRF_WriteRegister>
    RBI_Init();
 80072e6:	f7fa f80f 	bl	8001308 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80072ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007314 <SUBGRF_Init+0x70>)
 80072ec:	2201      	movs	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
}
 80072f0:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80072f2:	2140      	movs	r1, #64	@ 0x40
 80072f4:	f7ff ffbc 	bl	8007270 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80072f8:	2100      	movs	r1, #0
 80072fa:	f640 1011 	movw	r0, #2321	@ 0x911
 80072fe:	f7ff fcf5 	bl	8006cec <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8007302:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 8007306:	f7ff ff13 	bl	8007130 <SUBGRF_Calibrate>
 800730a:	e7e7      	b.n	80072dc <SUBGRF_Init+0x38>
 800730c:	200003f8 	.word	0x200003f8
 8007310:	200003fc 	.word	0x200003fc
 8007314:	20000406 	.word	0x20000406

08007318 <SUBGRF_SetRfFrequency>:
{
 8007318:	b510      	push	{r4, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800731e:	4b12      	ldr	r3, [pc, #72]	@ (8007368 <SUBGRF_SetRfFrequency+0x50>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	b1d3      	cbz	r3, 800735a <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8007324:	4a11      	ldr	r2, [pc, #68]	@ (800736c <SUBGRF_SetRfFrequency+0x54>)
 8007326:	2300      	movs	r3, #0
 8007328:	0660      	lsls	r0, r4, #25
 800732a:	09e1      	lsrs	r1, r4, #7
 800732c:	f7f8 ff2c 	bl	8000188 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007330:	0e03      	lsrs	r3, r0, #24
 8007332:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8007336:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800733a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800733e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007342:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8007346:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800734a:	2204      	movs	r2, #4
 800734c:	eb0d 0102 	add.w	r1, sp, r2
 8007350:	2086      	movs	r0, #134	@ 0x86
 8007352:	f7ff fd91 	bl	8006e78 <SUBGRF_WriteCommand>
}
 8007356:	b002      	add	sp, #8
 8007358:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800735a:	f7ff ff0b 	bl	8007174 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800735e:	4b02      	ldr	r3, [pc, #8]	@ (8007368 <SUBGRF_SetRfFrequency+0x50>)
 8007360:	2201      	movs	r2, #1
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e7de      	b.n	8007324 <SUBGRF_SetRfFrequency+0xc>
 8007366:	bf00      	nop
 8007368:	200003fc 	.word	0x200003fc
 800736c:	01e84800 	.word	0x01e84800

08007370 <SUBGRF_SetPacketType>:
{
 8007370:	b500      	push	{lr}
 8007372:	b083      	sub	sp, #12
 8007374:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8007378:	b2c3      	uxtb	r3, r0
 800737a:	4a09      	ldr	r2, [pc, #36]	@ (80073a0 <SUBGRF_SetPacketType+0x30>)
 800737c:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800737e:	b143      	cbz	r3, 8007392 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8007380:	2201      	movs	r2, #1
 8007382:	f10d 0107 	add.w	r1, sp, #7
 8007386:	208a      	movs	r0, #138	@ 0x8a
 8007388:	f7ff fd76 	bl	8006e78 <SUBGRF_WriteCommand>
}
 800738c:	b003      	add	sp, #12
 800738e:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8007392:	2100      	movs	r1, #0
 8007394:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8007398:	f7ff fca8 	bl	8006cec <SUBGRF_WriteRegister>
 800739c:	e7f0      	b.n	8007380 <SUBGRF_SetPacketType+0x10>
 800739e:	bf00      	nop
 80073a0:	20000405 	.word	0x20000405

080073a4 <SUBGRF_SetTxParams>:
{
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	460c      	mov	r4, r1
 80073aa:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80073ac:	2801      	cmp	r0, #1
 80073ae:	d035      	beq.n	800741c <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80073b0:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80073b4:	f7ff fcaa 	bl	8006d0c <SUBGRF_ReadRegister>
 80073b8:	f040 011e 	orr.w	r1, r0, #30
 80073bc:	b2c9      	uxtb	r1, r1
 80073be:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80073c2:	f7ff fc93 	bl	8006cec <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80073c6:	2001      	movs	r0, #1
 80073c8:	f7f9 ffb2 	bl	8001330 <RBI_GetRFOMaxPowerConfig>
 80073cc:	4605      	mov	r5, r0
        if (power > max_power)
 80073ce:	4284      	cmp	r4, r0
 80073d0:	dd00      	ble.n	80073d4 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 80073d2:	b244      	sxtb	r4, r0
        if (max_power == 20)
 80073d4:	2d14      	cmp	r5, #20
 80073d6:	d054      	beq.n	8007482 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 80073d8:	2d11      	cmp	r5, #17
 80073da:	d05c      	beq.n	8007496 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 80073dc:	2d0e      	cmp	r5, #14
 80073de:	d064      	beq.n	80074aa <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80073e0:	2301      	movs	r3, #1
 80073e2:	2200      	movs	r2, #0
 80073e4:	2107      	movs	r1, #7
 80073e6:	2004      	movs	r0, #4
 80073e8:	f7ff ff10 	bl	800720c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80073ec:	1b64      	subs	r4, r4, r5
 80073ee:	3416      	adds	r4, #22
 80073f0:	b265      	sxtb	r5, r4
        if (power < -9)
 80073f2:	f115 0f09 	cmn.w	r5, #9
 80073f6:	da01      	bge.n	80073fc <SUBGRF_SetTxParams+0x58>
            power = -9;
 80073f8:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80073fc:	2138      	movs	r1, #56	@ 0x38
 80073fe:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8007402:	f7ff fc73 	bl	8006cec <SUBGRF_WriteRegister>
    buf[0] = power;
 8007406:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 800740a:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800740e:	2202      	movs	r2, #2
 8007410:	a901      	add	r1, sp, #4
 8007412:	208e      	movs	r0, #142	@ 0x8e
 8007414:	f7ff fd30 	bl	8006e78 <SUBGRF_WriteCommand>
}
 8007418:	b002      	add	sp, #8
 800741a:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800741c:	2000      	movs	r0, #0
 800741e:	f7f9 ff87 	bl	8001330 <RBI_GetRFOMaxPowerConfig>
 8007422:	4605      	mov	r5, r0
        if (power >  max_power)
 8007424:	4284      	cmp	r4, r0
 8007426:	dd00      	ble.n	800742a <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8007428:	b244      	sxtb	r4, r0
        if (max_power == 14)
 800742a:	2d0e      	cmp	r5, #14
 800742c:	d015      	beq.n	800745a <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 800742e:	2d0a      	cmp	r5, #10
 8007430:	d01d      	beq.n	800746e <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8007432:	2301      	movs	r3, #1
 8007434:	461a      	mov	r2, r3
 8007436:	2100      	movs	r1, #0
 8007438:	2007      	movs	r0, #7
 800743a:	f7ff fee7 	bl	800720c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800743e:	1b65      	subs	r5, r4, r5
 8007440:	350e      	adds	r5, #14
 8007442:	b26d      	sxtb	r5, r5
        if (power < -17)
 8007444:	f115 0f11 	cmn.w	r5, #17
 8007448:	da01      	bge.n	800744e <SUBGRF_SetTxParams+0xaa>
            power = -17;
 800744a:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800744e:	2118      	movs	r1, #24
 8007450:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8007454:	f7ff fc4a 	bl	8006cec <SUBGRF_WriteRegister>
 8007458:	e7d5      	b.n	8007406 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800745a:	2301      	movs	r3, #1
 800745c:	461a      	mov	r2, r3
 800745e:	2100      	movs	r1, #0
 8007460:	2004      	movs	r0, #4
 8007462:	f7ff fed3 	bl	800720c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007466:	1b65      	subs	r5, r4, r5
 8007468:	350e      	adds	r5, #14
 800746a:	b26d      	sxtb	r5, r5
 800746c:	e7ea      	b.n	8007444 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800746e:	2301      	movs	r3, #1
 8007470:	461a      	mov	r2, r3
 8007472:	2100      	movs	r1, #0
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fec9 	bl	800720c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800747a:	1b65      	subs	r5, r4, r5
 800747c:	350d      	adds	r5, #13
 800747e:	b26d      	sxtb	r5, r5
 8007480:	e7e0      	b.n	8007444 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8007482:	2301      	movs	r3, #1
 8007484:	2200      	movs	r2, #0
 8007486:	2105      	movs	r1, #5
 8007488:	2003      	movs	r0, #3
 800748a:	f7ff febf 	bl	800720c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800748e:	1b65      	subs	r5, r4, r5
 8007490:	3516      	adds	r5, #22
 8007492:	b26d      	sxtb	r5, r5
 8007494:	e7ad      	b.n	80073f2 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8007496:	2301      	movs	r3, #1
 8007498:	2200      	movs	r2, #0
 800749a:	2103      	movs	r1, #3
 800749c:	2002      	movs	r0, #2
 800749e:	f7ff feb5 	bl	800720c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80074a2:	1b65      	subs	r5, r4, r5
 80074a4:	3516      	adds	r5, #22
 80074a6:	b26d      	sxtb	r5, r5
 80074a8:	e7a3      	b.n	80073f2 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80074aa:	2301      	movs	r3, #1
 80074ac:	2200      	movs	r2, #0
 80074ae:	2102      	movs	r1, #2
 80074b0:	4608      	mov	r0, r1
 80074b2:	f7ff feab 	bl	800720c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80074b6:	1b65      	subs	r5, r4, r5
 80074b8:	350e      	adds	r5, #14
 80074ba:	b26d      	sxtb	r5, r5
 80074bc:	e799      	b.n	80073f2 <SUBGRF_SetTxParams+0x4e>
	...

080074c0 <SUBGRF_SetModulationParams>:
{
 80074c0:	b510      	push	{r4, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80074c6:	4b3e      	ldr	r3, [pc, #248]	@ (80075c0 <SUBGRF_SetModulationParams+0x100>)
 80074c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80074cc:	ab02      	add	r3, sp, #8
 80074ce:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 80074d2:	7820      	ldrb	r0, [r4, #0]
 80074d4:	4b3b      	ldr	r3, [pc, #236]	@ (80075c4 <SUBGRF_SetModulationParams+0x104>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	4298      	cmp	r0, r3
 80074da:	d106      	bne.n	80074ea <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 80074dc:	7823      	ldrb	r3, [r4, #0]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d82c      	bhi.n	800753c <SUBGRF_SetModulationParams+0x7c>
 80074e2:	e8df f003 	tbb	[pc, r3]
 80074e6:	4205      	.short	0x4205
 80074e8:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80074ea:	f7ff ff41 	bl	8007370 <SUBGRF_SetPacketType>
 80074ee:	e7f5      	b.n	80074dc <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80074f0:	6862      	ldr	r2, [r4, #4]
 80074f2:	4b35      	ldr	r3, [pc, #212]	@ (80075c8 <SUBGRF_SetModulationParams+0x108>)
 80074f4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80074f8:	0c1a      	lsrs	r2, r3, #16
 80074fa:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80074fe:	0a1a      	lsrs	r2, r3, #8
 8007500:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8007504:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007508:	7b23      	ldrb	r3, [r4, #12]
 800750a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800750e:	7b63      	ldrb	r3, [r4, #13]
 8007510:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8007514:	68a1      	ldr	r1, [r4, #8]
 8007516:	4a2d      	ldr	r2, [pc, #180]	@ (80075cc <SUBGRF_SetModulationParams+0x10c>)
 8007518:	2300      	movs	r3, #0
 800751a:	0648      	lsls	r0, r1, #25
 800751c:	09c9      	lsrs	r1, r1, #7
 800751e:	f7f8 fe33 	bl	8000188 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8007522:	0c03      	lsrs	r3, r0, #16
 8007524:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007528:	0a03      	lsrs	r3, r0, #8
 800752a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800752e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007532:	2208      	movs	r2, #8
 8007534:	4669      	mov	r1, sp
 8007536:	208b      	movs	r0, #139	@ 0x8b
 8007538:	f7ff fc9e 	bl	8006e78 <SUBGRF_WriteCommand>
}
 800753c:	b002      	add	sp, #8
 800753e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	4b21      	ldr	r3, [pc, #132]	@ (80075c8 <SUBGRF_SetModulationParams+0x108>)
 8007544:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007548:	0c1a      	lsrs	r2, r3, #16
 800754a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800754e:	0a1a      	lsrs	r2, r3, #8
 8007550:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8007554:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007558:	7d23      	ldrb	r3, [r4, #20]
 800755a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800755e:	2204      	movs	r2, #4
 8007560:	4669      	mov	r1, sp
 8007562:	208b      	movs	r0, #139	@ 0x8b
 8007564:	f7ff fc88 	bl	8006e78 <SUBGRF_WriteCommand>
        break;
 8007568:	e7e8      	b.n	800753c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800756a:	7e23      	ldrb	r3, [r4, #24]
 800756c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007570:	7e63      	ldrb	r3, [r4, #25]
 8007572:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007576:	7ea3      	ldrb	r3, [r4, #26]
 8007578:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800757c:	7ee3      	ldrb	r3, [r4, #27]
 800757e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007582:	2204      	movs	r2, #4
 8007584:	4669      	mov	r1, sp
 8007586:	208b      	movs	r0, #139	@ 0x8b
 8007588:	f7ff fc76 	bl	8006e78 <SUBGRF_WriteCommand>
        break;
 800758c:	e7d6      	b.n	800753c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800758e:	6862      	ldr	r2, [r4, #4]
 8007590:	4b0d      	ldr	r3, [pc, #52]	@ (80075c8 <SUBGRF_SetModulationParams+0x108>)
 8007592:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007596:	0c1a      	lsrs	r2, r3, #16
 8007598:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800759c:	0a1a      	lsrs	r2, r3, #8
 800759e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80075a2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80075a6:	7b23      	ldrb	r3, [r4, #12]
 80075a8:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80075ac:	7b63      	ldrb	r3, [r4, #13]
 80075ae:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80075b2:	2205      	movs	r2, #5
 80075b4:	4669      	mov	r1, sp
 80075b6:	208b      	movs	r0, #139	@ 0x8b
 80075b8:	f7ff fc5e 	bl	8006e78 <SUBGRF_WriteCommand>
}
 80075bc:	e7be      	b.n	800753c <SUBGRF_SetModulationParams+0x7c>
 80075be:	bf00      	nop
 80075c0:	0800866c 	.word	0x0800866c
 80075c4:	20000405 	.word	0x20000405
 80075c8:	3d090000 	.word	0x3d090000
 80075cc:	01e84800 	.word	0x01e84800

080075d0 <SUBGRF_SetPacketParams>:
{
 80075d0:	b510      	push	{r4, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80075d6:	ab01      	add	r3, sp, #4
 80075d8:	4a33      	ldr	r2, [pc, #204]	@ (80076a8 <SUBGRF_SetPacketParams+0xd8>)
 80075da:	ca07      	ldmia	r2, {r0, r1, r2}
 80075dc:	c303      	stmia	r3!, {r0, r1}
 80075de:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 80075e0:	7820      	ldrb	r0, [r4, #0]
 80075e2:	4b32      	ldr	r3, [pc, #200]	@ (80076ac <SUBGRF_SetPacketParams+0xdc>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	4298      	cmp	r0, r3
 80075e8:	d106      	bne.n	80075f8 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80075ea:	7823      	ldrb	r3, [r4, #0]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d82a      	bhi.n	8007646 <SUBGRF_SetPacketParams+0x76>
 80075f0:	e8df f003 	tbb	[pc, r3]
 80075f4:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80075f8:	f7ff feba 	bl	8007370 <SUBGRF_SetPacketType>
 80075fc:	e7f5      	b.n	80075ea <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80075fe:	7a63      	ldrb	r3, [r4, #9]
 8007600:	2bf1      	cmp	r3, #241	@ 0xf1
 8007602:	d022      	beq.n	800764a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007604:	2bf2      	cmp	r3, #242	@ 0xf2
 8007606:	d02a      	beq.n	800765e <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007608:	8862      	ldrh	r2, [r4, #2]
 800760a:	0a11      	lsrs	r1, r2, #8
 800760c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007610:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8007614:	7922      	ldrb	r2, [r4, #4]
 8007616:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800761a:	7962      	ldrb	r2, [r4, #5]
 800761c:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007620:	79a2      	ldrb	r2, [r4, #6]
 8007622:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007626:	79e2      	ldrb	r2, [r4, #7]
 8007628:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800762c:	7a22      	ldrb	r2, [r4, #8]
 800762e:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8007632:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007636:	7aa3      	ldrb	r3, [r4, #10]
 8007638:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 800763c:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800763e:	a901      	add	r1, sp, #4
 8007640:	208c      	movs	r0, #140	@ 0x8c
 8007642:	f7ff fc19 	bl	8006e78 <SUBGRF_WriteCommand>
}
 8007646:	b004      	add	sp, #16
 8007648:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800764a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800764e:	f7ff fbb2 	bl	8006db6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007652:	f248 0005 	movw	r0, #32773	@ 0x8005
 8007656:	f7ff fbc2 	bl	8006dde <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800765a:	2302      	movs	r3, #2
 800765c:	e7d4      	b.n	8007608 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800765e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8007662:	f7ff fba8 	bl	8006db6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007666:	f241 0021 	movw	r0, #4129	@ 0x1021
 800766a:	f7ff fbb8 	bl	8006dde <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800766e:	2306      	movs	r3, #6
 8007670:	e7ca      	b.n	8007608 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007672:	7b23      	ldrb	r3, [r4, #12]
 8007674:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8007678:	2201      	movs	r2, #1
        break;
 800767a:	e7e0      	b.n	800763e <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800767c:	89e3      	ldrh	r3, [r4, #14]
 800767e:	0a1a      	lsrs	r2, r3, #8
 8007680:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007684:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007688:	7c23      	ldrb	r3, [r4, #16]
 800768a:	4a09      	ldr	r2, [pc, #36]	@ (80076b0 <SUBGRF_SetPacketParams+0xe0>)
 800768c:	7013      	strb	r3, [r2, #0]
 800768e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007692:	7c63      	ldrb	r3, [r4, #17]
 8007694:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007698:	7ca3      	ldrb	r3, [r4, #18]
 800769a:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800769e:	7ce3      	ldrb	r3, [r4, #19]
 80076a0:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80076a4:	2206      	movs	r2, #6
        break;
 80076a6:	e7ca      	b.n	800763e <SUBGRF_SetPacketParams+0x6e>
 80076a8:	08008674 	.word	0x08008674
 80076ac:	20000405 	.word	0x20000405
 80076b0:	20000404 	.word	0x20000404

080076b4 <SUBGRF_SetBufferBaseAddress>:
{
 80076b4:	b500      	push	{lr}
 80076b6:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 80076b8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 80076bc:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80076c0:	2202      	movs	r2, #2
 80076c2:	a901      	add	r1, sp, #4
 80076c4:	208f      	movs	r0, #143	@ 0x8f
 80076c6:	f7ff fbd7 	bl	8006e78 <SUBGRF_WriteCommand>
}
 80076ca:	b003      	add	sp, #12
 80076cc:	f85d fb04 	ldr.w	pc, [sp], #4

080076d0 <SUBGRF_ReadCommand>:
{
 80076d0:	b510      	push	{r4, lr}
 80076d2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80076d8:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80076da:	460a      	mov	r2, r1
 80076dc:	4601      	mov	r1, r0
 80076de:	4803      	ldr	r0, [pc, #12]	@ (80076ec <SUBGRF_ReadCommand+0x1c>)
 80076e0:	f7fc fccc 	bl	800407c <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e4:	f384 8810 	msr	PRIMASK, r4
}
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	bf00      	nop
 80076ec:	200000d0 	.word	0x200000d0

080076f0 <SUBGRF_GetRssiInst>:
{
 80076f0:	b500      	push	{lr}
 80076f2:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80076f4:	2201      	movs	r2, #1
 80076f6:	a901      	add	r1, sp, #4
 80076f8:	2015      	movs	r0, #21
 80076fa:	f7ff ffe9 	bl	80076d0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80076fe:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8007702:	4240      	negs	r0, r0
}
 8007704:	1040      	asrs	r0, r0, #1
 8007706:	b003      	add	sp, #12
 8007708:	f85d fb04 	ldr.w	pc, [sp], #4

0800770c <SUBGRF_GetRxBufferStatus>:
{
 800770c:	b530      	push	{r4, r5, lr}
 800770e:	b083      	sub	sp, #12
 8007710:	4605      	mov	r5, r0
 8007712:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007714:	2202      	movs	r2, #2
 8007716:	a901      	add	r1, sp, #4
 8007718:	2013      	movs	r0, #19
 800771a:	f7ff ffd9 	bl	80076d0 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800771e:	f7ff fadf 	bl	8006ce0 <SUBGRF_GetPacketType>
 8007722:	2801      	cmp	r0, #1
 8007724:	d007      	beq.n	8007736 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8007726:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800772a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800772c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007730:	7023      	strb	r3, [r4, #0]
}
 8007732:	b003      	add	sp, #12
 8007734:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007736:	4b05      	ldr	r3, [pc, #20]	@ (800774c <SUBGRF_GetRxBufferStatus+0x40>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d1f2      	bne.n	8007726 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007740:	f240 7002 	movw	r0, #1794	@ 0x702
 8007744:	f7ff fae2 	bl	8006d0c <SUBGRF_ReadRegister>
 8007748:	7028      	strb	r0, [r5, #0]
 800774a:	e7ef      	b.n	800772c <SUBGRF_GetRxBufferStatus+0x20>
 800774c:	20000404 	.word	0x20000404

08007750 <SUBGRF_GetPayload>:
{
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	4606      	mov	r6, r0
 8007756:	460c      	mov	r4, r1
 8007758:	4615      	mov	r5, r2
    uint8_t offset = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8007760:	f10d 0107 	add.w	r1, sp, #7
 8007764:	4620      	mov	r0, r4
 8007766:	f7ff ffd1 	bl	800770c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800776a:	7822      	ldrb	r2, [r4, #0]
 800776c:	42aa      	cmp	r2, r5
 800776e:	d902      	bls.n	8007776 <SUBGRF_GetPayload+0x26>
        return 1;
 8007770:	2001      	movs	r0, #1
}
 8007772:	b002      	add	sp, #8
 8007774:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8007776:	4631      	mov	r1, r6
 8007778:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800777c:	f7ff fb6c 	bl	8006e58 <SUBGRF_ReadBuffer>
    return 0;
 8007780:	2000      	movs	r0, #0
 8007782:	e7f6      	b.n	8007772 <SUBGRF_GetPayload+0x22>

08007784 <SUBGRF_GetPacketStatus>:
{
 8007784:	b510      	push	{r4, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800778a:	2203      	movs	r2, #3
 800778c:	a901      	add	r1, sp, #4
 800778e:	2014      	movs	r0, #20
 8007790:	f7ff ff9e 	bl	80076d0 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8007794:	f7ff faa4 	bl	8006ce0 <SUBGRF_GetPacketType>
 8007798:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800779a:	b148      	cbz	r0, 80077b0 <SUBGRF_GetPacketStatus+0x2c>
 800779c:	2801      	cmp	r0, #1
 800779e:	d018      	beq.n	80077d2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80077a0:	2214      	movs	r2, #20
 80077a2:	2100      	movs	r1, #0
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fb22 	bl	8007dee <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80077aa:	230f      	movs	r3, #15
 80077ac:	7023      	strb	r3, [r4, #0]
}
 80077ae:	e00e      	b.n	80077ce <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80077b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80077b4:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80077b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80077ba:	425b      	negs	r3, r3
 80077bc:	105b      	asrs	r3, r3, #1
 80077be:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80077c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80077c4:	425b      	negs	r3, r3
 80077c6:	105b      	asrs	r3, r3, #1
 80077c8:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60a3      	str	r3, [r4, #8]
}
 80077ce:	b002      	add	sp, #8
 80077d0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80077d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80077d6:	425b      	negs	r3, r3
 80077d8:	105b      	asrs	r3, r3, #1
 80077da:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80077dc:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80077e0:	3302      	adds	r3, #2
 80077e2:	109b      	asrs	r3, r3, #2
 80077e4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80077e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80077ea:	425b      	negs	r3, r3
 80077ec:	105b      	asrs	r3, r3, #1
 80077ee:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80077f0:	4b01      	ldr	r3, [pc, #4]	@ (80077f8 <SUBGRF_GetPacketStatus+0x74>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6123      	str	r3, [r4, #16]
            break;
 80077f6:	e7ea      	b.n	80077ce <SUBGRF_GetPacketStatus+0x4a>
 80077f8:	20000400 	.word	0x20000400

080077fc <SUBGRF_SetSwitch>:
{
 80077fc:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80077fe:	2901      	cmp	r1, #1
 8007800:	d003      	beq.n	800780a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007802:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8007804:	f7f9 fd84 	bl	8001310 <RBI_ConfigRFSwitch>
}
 8007808:	bd10      	pop	{r4, pc}
 800780a:	4604      	mov	r4, r0
 800780c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 800780e:	2c01      	cmp	r4, #1
 8007810:	d003      	beq.n	800781a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8007812:	2c02      	cmp	r4, #2
 8007814:	d1f6      	bne.n	8007804 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8007816:	2003      	movs	r0, #3
 8007818:	e7f4      	b.n	8007804 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800781a:	2004      	movs	r0, #4
 800781c:	f7ff fa86 	bl	8006d2c <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8007820:	2002      	movs	r0, #2
 8007822:	e7f6      	b.n	8007812 <SUBGRF_SetSwitch+0x16>

08007824 <SUBGRF_SetRfTxPower>:
{
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8007828:	f7f9 fd76 	bl	8001318 <RBI_GetTxConfig>
    switch (TxConfig)
 800782c:	b148      	cbz	r0, 8007842 <SUBGRF_SetRfTxPower+0x1e>
 800782e:	2802      	cmp	r0, #2
 8007830:	d10d      	bne.n	800784e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8007832:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007834:	2202      	movs	r2, #2
 8007836:	4621      	mov	r1, r4
 8007838:	4628      	mov	r0, r5
 800783a:	f7ff fdb3 	bl	80073a4 <SUBGRF_SetTxParams>
}
 800783e:	4628      	mov	r0, r5
 8007840:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8007842:	2c0f      	cmp	r4, #15
 8007844:	dc01      	bgt.n	800784a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8007846:	2501      	movs	r5, #1
 8007848:	e7f4      	b.n	8007834 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 800784a:	2502      	movs	r5, #2
 800784c:	e7f2      	b.n	8007834 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 800784e:	2501      	movs	r5, #1
 8007850:	e7f0      	b.n	8007834 <SUBGRF_SetRfTxPower+0x10>

08007852 <SUBGRF_GetRadioWakeUpTime>:
}
 8007852:	2001      	movs	r0, #1
 8007854:	4770      	bx	lr
	...

08007858 <HAL_SUBGHZ_TxCpltCallback>:
{
 8007858:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800785a:	4b02      	ldr	r3, [pc, #8]	@ (8007864 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2001      	movs	r0, #1
 8007860:	4798      	blx	r3
}
 8007862:	bd08      	pop	{r3, pc}
 8007864:	200003f8 	.word	0x200003f8

08007868 <HAL_SUBGHZ_RxCpltCallback>:
{
 8007868:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800786a:	4b02      	ldr	r3, [pc, #8]	@ (8007874 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2002      	movs	r0, #2
 8007870:	4798      	blx	r3
}
 8007872:	bd08      	pop	{r3, pc}
 8007874:	200003f8 	.word	0x200003f8

08007878 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8007878:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800787a:	4b02      	ldr	r3, [pc, #8]	@ (8007884 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2040      	movs	r0, #64	@ 0x40
 8007880:	4798      	blx	r3
}
 8007882:	bd08      	pop	{r3, pc}
 8007884:	200003f8 	.word	0x200003f8

08007888 <HAL_SUBGHZ_CADStatusCallback>:
{
 8007888:	b508      	push	{r3, lr}
    switch (cadstatus)
 800788a:	b111      	cbz	r1, 8007892 <HAL_SUBGHZ_CADStatusCallback+0xa>
 800788c:	2901      	cmp	r1, #1
 800788e:	d005      	beq.n	800789c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8007890:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007892:	4b05      	ldr	r3, [pc, #20]	@ (80078a8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2080      	movs	r0, #128	@ 0x80
 8007898:	4798      	blx	r3
            break;
 800789a:	e7f9      	b.n	8007890 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800789c:	4b02      	ldr	r3, [pc, #8]	@ (80078a8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80078a4:	4798      	blx	r3
}
 80078a6:	e7f3      	b.n	8007890 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80078a8:	200003f8 	.word	0x200003f8

080078ac <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80078ac:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80078ae:	4b03      	ldr	r3, [pc, #12]	@ (80078bc <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80078b6:	4798      	blx	r3
}
 80078b8:	bd08      	pop	{r3, pc}
 80078ba:	bf00      	nop
 80078bc:	200003f8 	.word	0x200003f8

080078c0 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80078c0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80078c2:	4b02      	ldr	r3, [pc, #8]	@ (80078cc <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2020      	movs	r0, #32
 80078c8:	4798      	blx	r3
}
 80078ca:	bd08      	pop	{r3, pc}
 80078cc:	200003f8 	.word	0x200003f8

080078d0 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80078d0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80078d2:	4b02      	ldr	r3, [pc, #8]	@ (80078dc <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2004      	movs	r0, #4
 80078d8:	4798      	blx	r3
}
 80078da:	bd08      	pop	{r3, pc}
 80078dc:	200003f8 	.word	0x200003f8

080078e0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80078e0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80078e2:	4b02      	ldr	r3, [pc, #8]	@ (80078ec <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2008      	movs	r0, #8
 80078e8:	4798      	blx	r3
}
 80078ea:	bd08      	pop	{r3, pc}
 80078ec:	200003f8 	.word	0x200003f8

080078f0 <HAL_SUBGHZ_HeaderValidCallback>:
{
 80078f0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80078f2:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2010      	movs	r0, #16
 80078f8:	4798      	blx	r3
}
 80078fa:	bd08      	pop	{r3, pc}
 80078fc:	200003f8 	.word	0x200003f8

08007900 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8007900:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8007902:	4b03      	ldr	r3, [pc, #12]	@ (8007910 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800790a:	4798      	blx	r3
}
 800790c:	bd08      	pop	{r3, pc}
 800790e:	bf00      	nop
 8007910:	200003f8 	.word	0x200003f8

08007914 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8007914:	4601      	mov	r1, r0
 8007916:	b180      	cbz	r0, 800793a <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007918:	2300      	movs	r3, #0
 800791a:	2b15      	cmp	r3, #21
 800791c:	d80c      	bhi.n	8007938 <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800791e:	4a08      	ldr	r2, [pc, #32]	@ (8007940 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8007920:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007924:	428a      	cmp	r2, r1
 8007926:	d802      	bhi.n	800792e <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007928:	3301      	adds	r3, #1
 800792a:	b2db      	uxtb	r3, r3
 800792c:	e7f5      	b.n	800791a <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 800792e:	4a04      	ldr	r2, [pc, #16]	@ (8007940 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8007930:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007934:	7918      	ldrb	r0, [r3, #4]
 8007936:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8007938:	e7fe      	b.n	8007938 <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 800793a:	201f      	movs	r0, #31
}
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	08008934 	.word	0x08008934

08007944 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	4605      	mov	r5, r0
 800794a:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 800794c:	4b1d      	ldr	r3, [pc, #116]	@ (80079c4 <SUBGRF_GetCFO+0x80>)
 800794e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8007950:	f640 0007 	movw	r0, #2055	@ 0x807
 8007954:	f7ff f9da 	bl	8006d0c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007958:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 800795c:	3308      	adds	r3, #8
 800795e:	446b      	add	r3, sp
 8007960:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8007964:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8007968:	3301      	adds	r3, #1
 800796a:	fa02 f303 	lsl.w	r3, r2, r3
 800796e:	4a16      	ldr	r2, [pc, #88]	@ (80079c8 <SUBGRF_GetCFO+0x84>)
 8007970:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8007974:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007978:	2807      	cmp	r0, #7
 800797a:	d921      	bls.n	80079c0 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 800797c:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800797e:	fb03 f000 	mul.w	r0, r3, r0
 8007982:	2803      	cmp	r0, #3
 8007984:	d800      	bhi.n	8007988 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8007986:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8007988:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800798c:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8007990:	f7ff f9bc 	bl	8006d0c <SUBGRF_ReadRegister>
 8007994:	0206      	lsls	r6, r0, #8
 8007996:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800799a:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800799e:	f7ff f9b5 	bl	8006d0c <SUBGRF_ReadRegister>
 80079a2:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80079a4:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 80079a8:	d003      	beq.n	80079b2 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80079aa:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80079ae:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80079b2:	096b      	lsrs	r3, r5, #5
 80079b4:	fb03 f000 	mul.w	r0, r3, r0
 80079b8:	11c0      	asrs	r0, r0, #7
 80079ba:	6020      	str	r0, [r4, #0]
}
 80079bc:	b002      	add	sp, #8
 80079be:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80079c0:	2302      	movs	r3, #2
 80079c2:	e7dc      	b.n	800797e <SUBGRF_GetCFO+0x3a>
 80079c4:	0c0a0804 	.word	0x0c0a0804
 80079c8:	01e84800 	.word	0x01e84800

080079cc <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	4770      	bx	lr

080079d2 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	4770      	bx	lr

080079d8 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80079d8:	f04f 30ff 	mov.w	r0, #4294967295
 80079dc:	4770      	bx	lr

080079de <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80079de:	4770      	bx	lr

080079e0 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80079e0:	2000      	movs	r0, #0
 80079e2:	4770      	bx	lr

080079e4 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80079e4:	2000      	movs	r0, #0
 80079e6:	4770      	bx	lr

080079e8 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 80079e8:	4770      	bx	lr

080079ea <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 80079ea:	f04f 30ff 	mov.w	r0, #4294967295
 80079ee:	4770      	bx	lr

080079f0 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80079f0:	f04f 30ff 	mov.w	r0, #4294967295
 80079f4:	4770      	bx	lr

080079f6 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80079f6:	4770      	bx	lr

080079f8 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80079f8:	4770      	bx	lr

080079fa <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80079fa:	4770      	bx	lr

080079fc <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80079fc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079fe:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007a02:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8007a04:	4b1e      	ldr	r3, [pc, #120]	@ (8007a80 <TRACE_AllocateBufer+0x84>)
 8007a06:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8007a0a:	8a1a      	ldrh	r2, [r3, #16]
 8007a0c:	4596      	cmp	lr, r2
 8007a0e:	d011      	beq.n	8007a34 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8007a10:	4596      	cmp	lr, r2
 8007a12:	d921      	bls.n	8007a58 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8007a14:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 8007a18:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8007a1a:	4283      	cmp	r3, r0
 8007a1c:	d81f      	bhi.n	8007a5e <TRACE_AllocateBufer+0x62>
 8007a1e:	4282      	cmp	r2, r0
 8007a20:	d91d      	bls.n	8007a5e <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8007a22:	4b17      	ldr	r3, [pc, #92]	@ (8007a80 <TRACE_AllocateBufer+0x84>)
 8007a24:	2401      	movs	r4, #1
 8007a26:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8007a28:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8007a2c:	2400      	movs	r4, #0
 8007a2e:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8007a30:	4613      	mov	r3, r2
 8007a32:	e014      	b.n	8007a5e <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8007a34:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 8007a38:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8007a3a:	4298      	cmp	r0, r3
 8007a3c:	d30f      	bcc.n	8007a5e <TRACE_AllocateBufer+0x62>
 8007a3e:	4282      	cmp	r2, r0
 8007a40:	d90d      	bls.n	8007a5e <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8007a42:	4b0f      	ldr	r3, [pc, #60]	@ (8007a80 <TRACE_AllocateBufer+0x84>)
 8007a44:	2401      	movs	r4, #1
 8007a46:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8007a48:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8007a4c:	f04f 0e00 	mov.w	lr, #0
 8007a50:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8007a54:	4613      	mov	r3, r2
 8007a56:	e002      	b.n	8007a5e <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8007a58:	eba2 020e 	sub.w	r2, r2, lr
 8007a5c:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8007a5e:	4283      	cmp	r3, r0
 8007a60:	d90a      	bls.n	8007a78 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8007a62:	4a07      	ldr	r2, [pc, #28]	@ (8007a80 <TRACE_AllocateBufer+0x84>)
 8007a64:	8a53      	ldrh	r3, [r2, #18]
 8007a66:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8007a68:	4403      	add	r3, r0
 8007a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6e:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8007a70:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a72:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8007a76:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8007a78:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7c:	e7f9      	b.n	8007a72 <TRACE_AllocateBufer+0x76>
 8007a7e:	bf00      	nop
 8007a80:	20000708 	.word	0x20000708

08007a84 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a84:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007a88:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8007a8a:	4a03      	ldr	r2, [pc, #12]	@ (8007a98 <TRACE_Lock+0x14>)
 8007a8c:	8ad3      	ldrh	r3, [r2, #22]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a92:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8007a96:	4770      	bx	lr
 8007a98:	20000708 	.word	0x20000708

08007a9c <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a9c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007aa0:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8007aa2:	4a03      	ldr	r2, [pc, #12]	@ (8007ab0 <TRACE_UnLock+0x14>)
 8007aa4:	8ad3      	ldrh	r3, [r2, #22]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aaa:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8007aae:	4770      	bx	lr
 8007ab0:	20000708 	.word	0x20000708

08007ab4 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8007ab4:	4b02      	ldr	r3, [pc, #8]	@ (8007ac0 <TRACE_IsLocked+0xc>)
 8007ab6:	8ad8      	ldrh	r0, [r3, #22]
}
 8007ab8:	3800      	subs	r0, #0
 8007aba:	bf18      	it	ne
 8007abc:	2001      	movne	r0, #1
 8007abe:	4770      	bx	lr
 8007ac0:	20000708 	.word	0x20000708

08007ac4 <UTIL_ADV_TRACE_Init>:
{
 8007ac4:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8007ac6:	2218      	movs	r2, #24
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4807      	ldr	r0, [pc, #28]	@ (8007ae8 <UTIL_ADV_TRACE_Init+0x24>)
 8007acc:	f000 f98f 	bl	8007dee <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8007ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4805      	ldr	r0, [pc, #20]	@ (8007aec <UTIL_ADV_TRACE_Init+0x28>)
 8007ad8:	f000 f989 	bl	8007dee <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8007adc:	4b04      	ldr	r3, [pc, #16]	@ (8007af0 <UTIL_ADV_TRACE_Init+0x2c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4804      	ldr	r0, [pc, #16]	@ (8007af4 <UTIL_ADV_TRACE_Init+0x30>)
 8007ae2:	4798      	blx	r3
}
 8007ae4:	bd08      	pop	{r3, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000708 	.word	0x20000708
 8007aec:	20000508 	.word	0x20000508
 8007af0:	080086f8 	.word	0x080086f8
 8007af4:	08007c75 	.word	0x08007c75

08007af8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8007af8:	4b01      	ldr	r3, [pc, #4]	@ (8007b00 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8007afa:	6058      	str	r0, [r3, #4]
}
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000708 	.word	0x20000708

08007b04 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8007b04:	4b01      	ldr	r3, [pc, #4]	@ (8007b0c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8007b06:	7218      	strb	r0, [r3, #8]
}
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20000708 	.word	0x20000708

08007b10 <TRACE_Send>:
{
 8007b10:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b12:	f3ef 8310 	mrs	r3, PRIMASK
 8007b16:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8007b18:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8007b1a:	f7ff ffcb 	bl	8007ab4 <TRACE_IsLocked>
 8007b1e:	b118      	cbz	r0, 8007b28 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b20:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8007b24:	2000      	movs	r0, #0
}
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8007b28:	f7ff ffac 	bl	8007a84 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8007b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba0 <TRACE_Send+0x90>)
 8007b2e:	8a1a      	ldrh	r2, [r3, #16]
 8007b30:	8a5b      	ldrh	r3, [r3, #18]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d02e      	beq.n	8007b94 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8007b36:	491a      	ldr	r1, [pc, #104]	@ (8007ba0 <TRACE_Send+0x90>)
 8007b38:	7889      	ldrb	r1, [r1, #2]
 8007b3a:	2901      	cmp	r1, #1
 8007b3c:	d017      	beq.n	8007b6e <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8007b3e:	4a18      	ldr	r2, [pc, #96]	@ (8007ba0 <TRACE_Send+0x90>)
 8007b40:	7892      	ldrb	r2, [r2, #2]
 8007b42:	b932      	cbnz	r2, 8007b52 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8007b44:	4a16      	ldr	r2, [pc, #88]	@ (8007ba0 <TRACE_Send+0x90>)
 8007b46:	8a12      	ldrh	r2, [r2, #16]
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d91e      	bls.n	8007b8a <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	4a14      	ldr	r2, [pc, #80]	@ (8007ba0 <TRACE_Send+0x90>)
 8007b50:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8007b52:	4e13      	ldr	r6, [pc, #76]	@ (8007ba0 <TRACE_Send+0x90>)
 8007b54:	8a35      	ldrh	r5, [r6, #16]
 8007b56:	4b13      	ldr	r3, [pc, #76]	@ (8007ba4 <TRACE_Send+0x94>)
 8007b58:	441d      	add	r5, r3
 8007b5a:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8007b5e:	f7f8 ff51 	bl	8000a04 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8007b62:	4b11      	ldr	r3, [pc, #68]	@ (8007ba8 <TRACE_Send+0x98>)
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	8ab1      	ldrh	r1, [r6, #20]
 8007b68:	4628      	mov	r0, r5
 8007b6a:	4798      	blx	r3
 8007b6c:	e7db      	b.n	8007b26 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8007b6e:	480c      	ldr	r0, [pc, #48]	@ (8007ba0 <TRACE_Send+0x90>)
 8007b70:	8801      	ldrh	r1, [r0, #0]
 8007b72:	1a8a      	subs	r2, r1, r2
 8007b74:	b292      	uxth	r2, r2
 8007b76:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8007b78:	2102      	movs	r1, #2
 8007b7a:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8007b80:	2a00      	cmp	r2, #0
 8007b82:	d1dc      	bne.n	8007b3e <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007b84:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8007b86:	8201      	strh	r1, [r0, #16]
 8007b88:	e7d9      	b.n	8007b3e <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007b8a:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 8007b8e:	4b04      	ldr	r3, [pc, #16]	@ (8007ba0 <TRACE_Send+0x90>)
 8007b90:	829a      	strh	r2, [r3, #20]
 8007b92:	e7de      	b.n	8007b52 <TRACE_Send+0x42>
      TRACE_UnLock();
 8007b94:	f7ff ff82 	bl	8007a9c <TRACE_UnLock>
 8007b98:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8007b9c:	2000      	movs	r0, #0
}
 8007b9e:	e7c2      	b.n	8007b26 <TRACE_Send+0x16>
 8007ba0:	20000708 	.word	0x20000708
 8007ba4:	20000508 	.word	0x20000508
 8007ba8:	080086f8 	.word	0x080086f8

08007bac <UTIL_ADV_TRACE_COND_FSend>:
{
 8007bac:	b408      	push	{r3}
 8007bae:	b530      	push	{r4, r5, lr}
 8007bb0:	b086      	sub	sp, #24
 8007bb2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8007bba:	4b2b      	ldr	r3, [pc, #172]	@ (8007c68 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8007bbc:	7a1b      	ldrb	r3, [r3, #8]
 8007bbe:	4283      	cmp	r3, r0
 8007bc0:	d34c      	bcc.n	8007c5c <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8007bc2:	4b29      	ldr	r3, [pc, #164]	@ (8007c68 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	4399      	bics	r1, r3
 8007bc8:	d14b      	bne.n	8007c62 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8007bca:	4b27      	ldr	r3, [pc, #156]	@ (8007c68 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	b123      	cbz	r3, 8007bda <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8007bd0:	b11a      	cbz	r2, 8007bda <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8007bd2:	f10d 0102 	add.w	r1, sp, #2
 8007bd6:	a801      	add	r0, sp, #4
 8007bd8:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8007bda:	ab0a      	add	r3, sp, #40	@ 0x28
 8007bdc:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8007bde:	4622      	mov	r2, r4
 8007be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007be4:	4821      	ldr	r0, [pc, #132]	@ (8007c6c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8007be6:	f000 fc2f 	bl	8008448 <tiny_vsnprintf_like>
 8007bea:	b285      	uxth	r5, r0
  TRACE_Lock();
 8007bec:	f7ff ff4a 	bl	8007a84 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8007bf0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8007bf4:	18e8      	adds	r0, r5, r3
 8007bf6:	4669      	mov	r1, sp
 8007bf8:	b280      	uxth	r0, r0
 8007bfa:	f7ff feff 	bl	80079fc <TRACE_AllocateBufer>
 8007bfe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c02:	d026      	beq.n	8007c52 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8007c04:	2300      	movs	r3, #0
 8007c06:	e00d      	b.n	8007c24 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8007c08:	f8bd 2000 	ldrh.w	r2, [sp]
 8007c0c:	f103 0118 	add.w	r1, r3, #24
 8007c10:	4469      	add	r1, sp
 8007c12:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8007c16:	4916      	ldr	r1, [pc, #88]	@ (8007c70 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8007c18:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8007c1a:	3201      	adds	r2, #1
 8007c1c:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8007c20:	3301      	adds	r3, #1
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d8ed      	bhi.n	8007c08 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8007c2c:	f8bd 0000 	ldrh.w	r0, [sp]
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	4622      	mov	r2, r4
 8007c34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007c38:	4c0d      	ldr	r4, [pc, #52]	@ (8007c70 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8007c3a:	4420      	add	r0, r4
 8007c3c:	f000 fc04 	bl	8008448 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8007c40:	f7ff ff2c 	bl	8007a9c <TRACE_UnLock>
    return TRACE_Send();
 8007c44:	f7ff ff64 	bl	8007b10 <TRACE_Send>
}
 8007c48:	b006      	add	sp, #24
 8007c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c4e:	b001      	add	sp, #4
 8007c50:	4770      	bx	lr
  TRACE_UnLock();
 8007c52:	f7ff ff23 	bl	8007a9c <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8007c56:	f06f 0002 	mvn.w	r0, #2
 8007c5a:	e7f5      	b.n	8007c48 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8007c5c:	f06f 0004 	mvn.w	r0, #4
 8007c60:	e7f2      	b.n	8007c48 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8007c62:	f06f 0005 	mvn.w	r0, #5
 8007c66:	e7ef      	b.n	8007c48 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8007c68:	20000708 	.word	0x20000708
 8007c6c:	20000408 	.word	0x20000408
 8007c70:	20000508 	.word	0x20000508

08007c74 <TRACE_TxCpltCallback>:
{
 8007c74:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c76:	f3ef 8310 	mrs	r3, PRIMASK
 8007c7a:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8007c7c:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8007c7e:	4b26      	ldr	r3, [pc, #152]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007c80:	789b      	ldrb	r3, [r3, #2]
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d016      	beq.n	8007cb4 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8007c86:	4a24      	ldr	r2, [pc, #144]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007c88:	8a13      	ldrh	r3, [r2, #16]
 8007c8a:	8a90      	ldrh	r0, [r2, #20]
 8007c8c:	4403      	add	r3, r0
 8007c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c92:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8007c94:	4b20      	ldr	r3, [pc, #128]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007c96:	8a1a      	ldrh	r2, [r3, #16]
 8007c98:	8a5b      	ldrh	r3, [r3, #18]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d003      	beq.n	8007ca6 <TRACE_TxCpltCallback+0x32>
 8007c9e:	481e      	ldr	r0, [pc, #120]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007ca0:	8ac0      	ldrh	r0, [r0, #22]
 8007ca2:	2801      	cmp	r0, #1
 8007ca4:	d00b      	beq.n	8007cbe <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca6:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8007caa:	f7f8 feb1 	bl	8000a10 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8007cae:	f7ff fef5 	bl	8007a9c <TRACE_UnLock>
}
 8007cb2:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007cb4:	4b18      	ldr	r3, [pc, #96]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8007cba:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8007cbc:	e7ea      	b.n	8007c94 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8007cbe:	4816      	ldr	r0, [pc, #88]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007cc0:	7880      	ldrb	r0, [r0, #2]
 8007cc2:	2801      	cmp	r0, #1
 8007cc4:	d014      	beq.n	8007cf0 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8007cc6:	4a14      	ldr	r2, [pc, #80]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007cc8:	7892      	ldrb	r2, [r2, #2]
 8007cca:	b932      	cbnz	r2, 8007cda <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8007ccc:	4a12      	ldr	r2, [pc, #72]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007cce:	8a12      	ldrh	r2, [r2, #16]
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d91b      	bls.n	8007d0c <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8007cd4:	1a9b      	subs	r3, r3, r2
 8007cd6:	4a10      	ldr	r2, [pc, #64]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007cd8:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8007cda:	4b0f      	ldr	r3, [pc, #60]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007cdc:	8a18      	ldrh	r0, [r3, #16]
 8007cde:	4a0f      	ldr	r2, [pc, #60]	@ (8007d1c <TRACE_TxCpltCallback+0xa8>)
 8007ce0:	4410      	add	r0, r2
 8007ce2:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8007ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8007d20 <TRACE_TxCpltCallback+0xac>)
 8007ce8:	68d2      	ldr	r2, [r2, #12]
 8007cea:	8a99      	ldrh	r1, [r3, #20]
 8007cec:	4790      	blx	r2
 8007cee:	e7e0      	b.n	8007cb2 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8007cf0:	4c09      	ldr	r4, [pc, #36]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007cf2:	8820      	ldrh	r0, [r4, #0]
 8007cf4:	1a82      	subs	r2, r0, r2
 8007cf6:	b292      	uxth	r2, r2
 8007cf8:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8007cfa:	2002      	movs	r0, #2
 8007cfc:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8007cfe:	2000      	movs	r0, #0
 8007d00:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8007d02:	2a00      	cmp	r2, #0
 8007d04:	d1df      	bne.n	8007cc6 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007d06:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8007d08:	8220      	strh	r0, [r4, #16]
 8007d0a:	e7dc      	b.n	8007cc6 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007d0c:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 8007d10:	4b01      	ldr	r3, [pc, #4]	@ (8007d18 <TRACE_TxCpltCallback+0xa4>)
 8007d12:	829a      	strh	r2, [r3, #20]
 8007d14:	e7e1      	b.n	8007cda <TRACE_TxCpltCallback+0x66>
 8007d16:	bf00      	nop
 8007d18:	20000708 	.word	0x20000708
 8007d1c:	20000508 	.word	0x20000508
 8007d20:	080086f8 	.word	0x080086f8

08007d24 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007d24:	2300      	movs	r3, #0
 8007d26:	4a02      	ldr	r2, [pc, #8]	@ (8007d30 <UTIL_LPM_Init+0xc>)
 8007d28:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007d2a:	4a02      	ldr	r2, [pc, #8]	@ (8007d34 <UTIL_LPM_Init+0x10>)
 8007d2c:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007d2e:	4770      	bx	lr
 8007d30:	20000724 	.word	0x20000724
 8007d34:	20000720 	.word	0x20000720

08007d38 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d38:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007d3c:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8007d3e:	b141      	cbz	r1, 8007d52 <UTIL_LPM_SetStopMode+0x1a>
 8007d40:	2901      	cmp	r1, #1
 8007d42:	d103      	bne.n	8007d4c <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8007d44:	4906      	ldr	r1, [pc, #24]	@ (8007d60 <UTIL_LPM_SetStopMode+0x28>)
 8007d46:	680a      	ldr	r2, [r1, #0]
 8007d48:	4302      	orrs	r2, r0
 8007d4a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d4c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007d50:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8007d52:	4903      	ldr	r1, [pc, #12]	@ (8007d60 <UTIL_LPM_SetStopMode+0x28>)
 8007d54:	680a      	ldr	r2, [r1, #0]
 8007d56:	ea22 0200 	bic.w	r2, r2, r0
 8007d5a:	600a      	str	r2, [r1, #0]
      break;
 8007d5c:	e7f6      	b.n	8007d4c <UTIL_LPM_SetStopMode+0x14>
 8007d5e:	bf00      	nop
 8007d60:	20000724 	.word	0x20000724

08007d64 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d64:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007d68:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8007d6a:	b141      	cbz	r1, 8007d7e <UTIL_LPM_SetOffMode+0x1a>
 8007d6c:	2901      	cmp	r1, #1
 8007d6e:	d103      	bne.n	8007d78 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8007d70:	4906      	ldr	r1, [pc, #24]	@ (8007d8c <UTIL_LPM_SetOffMode+0x28>)
 8007d72:	680a      	ldr	r2, [r1, #0]
 8007d74:	4302      	orrs	r2, r0
 8007d76:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d78:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007d7c:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8007d7e:	4903      	ldr	r1, [pc, #12]	@ (8007d8c <UTIL_LPM_SetOffMode+0x28>)
 8007d80:	680a      	ldr	r2, [r1, #0]
 8007d82:	ea22 0200 	bic.w	r2, r2, r0
 8007d86:	600a      	str	r2, [r1, #0]
      break;
 8007d88:	e7f6      	b.n	8007d78 <UTIL_LPM_SetOffMode+0x14>
 8007d8a:	bf00      	nop
 8007d8c:	20000720 	.word	0x20000720

08007d90 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8007d90:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d92:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007d96:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8007d98:	4b0c      	ldr	r3, [pc, #48]	@ (8007dcc <UTIL_LPM_EnterLowPower+0x3c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	b13b      	cbz	r3, 8007dae <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8007d9e:	4d0c      	ldr	r5, [pc, #48]	@ (8007dd0 <UTIL_LPM_EnterLowPower+0x40>)
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8007da4:	686b      	ldr	r3, [r5, #4]
 8007da6:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da8:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8007dac:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8007dae:	4b09      	ldr	r3, [pc, #36]	@ (8007dd4 <UTIL_LPM_EnterLowPower+0x44>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	b12b      	cbz	r3, 8007dc0 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8007db4:	4d06      	ldr	r5, [pc, #24]	@ (8007dd0 <UTIL_LPM_EnterLowPower+0x40>)
 8007db6:	68ab      	ldr	r3, [r5, #8]
 8007db8:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8007dba:	68eb      	ldr	r3, [r5, #12]
 8007dbc:	4798      	blx	r3
 8007dbe:	e7f3      	b.n	8007da8 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8007dc0:	4d03      	ldr	r5, [pc, #12]	@ (8007dd0 <UTIL_LPM_EnterLowPower+0x40>)
 8007dc2:	692b      	ldr	r3, [r5, #16]
 8007dc4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8007dc6:	696b      	ldr	r3, [r5, #20]
 8007dc8:	4798      	blx	r3
 8007dca:	e7ed      	b.n	8007da8 <UTIL_LPM_EnterLowPower+0x18>
 8007dcc:	20000724 	.word	0x20000724
 8007dd0:	08008694 	.word	0x08008694
 8007dd4:	20000720 	.word	0x20000720

08007dd8 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8007dd8:	e004      	b.n	8007de4 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8007dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dde:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8007de2:	461a      	mov	r2, r3
 8007de4:	1e53      	subs	r3, r2, #1
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	d1f6      	bne.n	8007dda <UTIL_MEM_cpy_8+0x2>
    }
}
 8007dec:	4770      	bx	lr

08007dee <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8007dee:	e002      	b.n	8007df6 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8007df0:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8007df4:	461a      	mov	r2, r3
 8007df6:	1e53      	subs	r3, r2, #1
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	d1f8      	bne.n	8007df0 <UTIL_MEM_set_8+0x2>
  }
}
 8007dfe:	4770      	bx	lr

08007e00 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e00:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007e04:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8007e06:	4a06      	ldr	r2, [pc, #24]	@ (8007e20 <UTIL_SEQ_SetTask+0x20>)
 8007e08:	6813      	ldr	r3, [r2, #0]
 8007e0a:	4303      	orrs	r3, r0
 8007e0c:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007e0e:	4a05      	ldr	r2, [pc, #20]	@ (8007e24 <UTIL_SEQ_SetTask+0x24>)
 8007e10:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8007e14:	4303      	orrs	r3, r0
 8007e16:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e1a:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8007e1e:	4770      	bx	lr
 8007e20:	20000740 	.word	0x20000740
 8007e24:	20000728 	.word	0x20000728

08007e28 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8007e28:	4770      	bx	lr

08007e2a <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8007e2a:	4770      	bx	lr

08007e2c <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8007e2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e30:	d216      	bcs.n	8007e60 <SEQ_BitPosition+0x34>
 8007e32:	0400      	lsls	r0, r0, #16
 8007e34:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007e36:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8007e3a:	d202      	bcs.n	8007e42 <SEQ_BitPosition+0x16>
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8007e42:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8007e46:	d202      	bcs.n	8007e4e <SEQ_BitPosition+0x22>
 8007e48:	3304      	adds	r3, #4
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8007e4e:	0f00      	lsrs	r0, r0, #28
 8007e50:	4a04      	ldr	r2, [pc, #16]	@ (8007e64 <SEQ_BitPosition+0x38>)
 8007e52:	5c10      	ldrb	r0, [r2, r0]
 8007e54:	4418      	add	r0, r3
 8007e56:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8007e58:	f1c0 001f 	rsb	r0, r0, #31
}
 8007e5c:	b2c0      	uxtb	r0, r0
 8007e5e:	4770      	bx	lr
uint8_t n = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	e7e8      	b.n	8007e36 <SEQ_BitPosition+0xa>
 8007e64:	080089e4 	.word	0x080089e4

08007e68 <UTIL_SEQ_Run>:
{
 8007e68:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8007e6a:	4b42      	ldr	r3, [pc, #264]	@ (8007f74 <UTIL_SEQ_Run+0x10c>)
 8007e6c:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8007e6e:	4020      	ands	r0, r4
 8007e70:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8007e72:	4b41      	ldr	r3, [pc, #260]	@ (8007f78 <UTIL_SEQ_Run+0x110>)
 8007e74:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8007e76:	4b41      	ldr	r3, [pc, #260]	@ (8007f7c <UTIL_SEQ_Run+0x114>)
 8007e78:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8007e7a:	4941      	ldr	r1, [pc, #260]	@ (8007f80 <UTIL_SEQ_Run+0x118>)
 8007e7c:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 8007e7e:	4941      	ldr	r1, [pc, #260]	@ (8007f84 <UTIL_SEQ_Run+0x11c>)
 8007e80:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007e82:	e02f      	b.n	8007ee4 <UTIL_SEQ_Run+0x7c>
      counter++;
 8007e84:	3301      	adds	r3, #1
 8007e86:	e034      	b.n	8007ef2 <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007e88:	4d3f      	ldr	r5, [pc, #252]	@ (8007f88 <UTIL_SEQ_Run+0x120>)
 8007e8a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007e8e:	6868      	ldr	r0, [r5, #4]
 8007e90:	4010      	ands	r0, r2
 8007e92:	f7ff ffcb 	bl	8007e2c <SEQ_BitPosition>
 8007e96:	4e3d      	ldr	r6, [pc, #244]	@ (8007f8c <UTIL_SEQ_Run+0x124>)
 8007e98:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8007e9a:	686a      	ldr	r2, [r5, #4]
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	fa03 f000 	lsl.w	r0, r3, r0
 8007ea2:	ea22 0200 	bic.w	r2, r2, r0
 8007ea6:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007eac:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8007eae:	6832      	ldr	r2, [r6, #0]
 8007eb0:	fa03 f202 	lsl.w	r2, r3, r2
 8007eb4:	43d6      	mvns	r6, r2
 8007eb6:	4d30      	ldr	r5, [pc, #192]	@ (8007f78 <UTIL_SEQ_Run+0x110>)
 8007eb8:	6828      	ldr	r0, [r5, #0]
 8007eba:	ea20 0202 	bic.w	r2, r0, r2
 8007ebe:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d12d      	bne.n	8007f20 <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec4:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8007ec8:	4b30      	ldr	r3, [pc, #192]	@ (8007f8c <UTIL_SEQ_Run+0x124>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	4b30      	ldr	r3, [pc, #192]	@ (8007f90 <UTIL_SEQ_Run+0x128>)
 8007ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed2:	4798      	blx	r3
    local_taskset = TaskSet;
 8007ed4:	4b28      	ldr	r3, [pc, #160]	@ (8007f78 <UTIL_SEQ_Run+0x110>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 8007ed8:	4b28      	ldr	r3, [pc, #160]	@ (8007f7c <UTIL_SEQ_Run+0x114>)
 8007eda:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8007edc:	4928      	ldr	r1, [pc, #160]	@ (8007f80 <UTIL_SEQ_Run+0x118>)
 8007ede:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 8007ee0:	4928      	ldr	r1, [pc, #160]	@ (8007f84 <UTIL_SEQ_Run+0x11c>)
 8007ee2:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007ee4:	4002      	ands	r2, r0
 8007ee6:	4d23      	ldr	r5, [pc, #140]	@ (8007f74 <UTIL_SEQ_Run+0x10c>)
 8007ee8:	682d      	ldr	r5, [r5, #0]
 8007eea:	422a      	tst	r2, r5
 8007eec:	d020      	beq.n	8007f30 <UTIL_SEQ_Run+0xc8>
 8007eee:	400b      	ands	r3, r1
 8007ef0:	d11e      	bne.n	8007f30 <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007ef2:	4a25      	ldr	r2, [pc, #148]	@ (8007f88 <UTIL_SEQ_Run+0x120>)
 8007ef4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007ef8:	4002      	ands	r2, r0
 8007efa:	422a      	tst	r2, r5
 8007efc:	d0c2      	beq.n	8007e84 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8007efe:	4922      	ldr	r1, [pc, #136]	@ (8007f88 <UTIL_SEQ_Run+0x120>)
 8007f00:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8007f04:	4002      	ands	r2, r0
 8007f06:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f0c:	6849      	ldr	r1, [r1, #4]
 8007f0e:	4211      	tst	r1, r2
 8007f10:	d1ba      	bne.n	8007e88 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007f12:	491d      	ldr	r1, [pc, #116]	@ (8007f88 <UTIL_SEQ_Run+0x120>)
 8007f14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1c:	6048      	str	r0, [r1, #4]
 8007f1e:	e7b3      	b.n	8007e88 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8007f20:	3b01      	subs	r3, #1
 8007f22:	4819      	ldr	r0, [pc, #100]	@ (8007f88 <UTIL_SEQ_Run+0x120>)
 8007f24:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8007f28:	4032      	ands	r2, r6
 8007f2a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007f2e:	e7c7      	b.n	8007ec0 <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007f30:	4b16      	ldr	r3, [pc, #88]	@ (8007f8c <UTIL_SEQ_Run+0x124>)
 8007f32:	f04f 32ff 	mov.w	r2, #4294967295
 8007f36:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8007f38:	f7ff ff76 	bl	8007e28 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f3c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007f40:	b672      	cpsid	i
  local_taskset = TaskSet;
 8007f42:	4b0d      	ldr	r3, [pc, #52]	@ (8007f78 <UTIL_SEQ_Run+0x110>)
 8007f44:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8007f46:	4a0d      	ldr	r2, [pc, #52]	@ (8007f7c <UTIL_SEQ_Run+0x114>)
 8007f48:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8007f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007f80 <UTIL_SEQ_Run+0x118>)
 8007f4c:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8007f4e:	4013      	ands	r3, r2
 8007f50:	4a08      	ldr	r2, [pc, #32]	@ (8007f74 <UTIL_SEQ_Run+0x10c>)
 8007f52:	6812      	ldr	r2, [r2, #0]
 8007f54:	4213      	tst	r3, r2
 8007f56:	d103      	bne.n	8007f60 <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8007f58:	4b0a      	ldr	r3, [pc, #40]	@ (8007f84 <UTIL_SEQ_Run+0x11c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	420b      	tst	r3, r1
 8007f5e:	d006      	beq.n	8007f6e <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f60:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8007f64:	f7ff ff61 	bl	8007e2a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8007f68:	4b02      	ldr	r3, [pc, #8]	@ (8007f74 <UTIL_SEQ_Run+0x10c>)
 8007f6a:	601c      	str	r4, [r3, #0]
}
 8007f6c:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 8007f6e:	f7f8 fd45 	bl	80009fc <UTIL_SEQ_Idle>
 8007f72:	e7f5      	b.n	8007f60 <UTIL_SEQ_Run+0xf8>
 8007f74:	2000000c 	.word	0x2000000c
 8007f78:	20000740 	.word	0x20000740
 8007f7c:	2000073c 	.word	0x2000073c
 8007f80:	20000010 	.word	0x20000010
 8007f84:	20000738 	.word	0x20000738
 8007f88:	20000728 	.word	0x20000728
 8007f8c:	20000734 	.word	0x20000734
 8007f90:	20000730 	.word	0x20000730

08007f94 <UTIL_SEQ_RegTask>:
{
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f98:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007f9c:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8007f9e:	f7ff ff45 	bl	8007e2c <SEQ_BitPosition>
 8007fa2:	4b03      	ldr	r3, [pc, #12]	@ (8007fb0 <UTIL_SEQ_RegTask+0x1c>)
 8007fa4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa8:	f385 8810 	msr	PRIMASK, r5
}
 8007fac:	bd38      	pop	{r3, r4, r5, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000730 	.word	0x20000730

08007fb4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	f10d 0c08 	add.w	ip, sp, #8
 8007fbc:	e90c 0006 	stmdb	ip, {r1, r2}
 8007fc0:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	6002      	str	r2, [r0, #0]
 8007fc6:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8007fc8:	440b      	add	r3, r1
 8007fca:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8007fcc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007fd0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	b291      	uxth	r1, r2
 8007fd8:	b212      	sxth	r2, r2
 8007fda:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8007fdc:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8007fe0:	db04      	blt.n	8007fec <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8007fe6:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8007fea:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8007fec:	b002      	add	sp, #8
 8007fee:	b002      	add	sp, #8
 8007ff0:	4770      	bx	lr
	...

08007ff4 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8007ff4:	b530      	push	{r4, r5, lr}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8008002:	6003      	str	r3, [r0, #0]
 8008004:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8008006:	4d0b      	ldr	r5, [pc, #44]	@ (8008034 <SysTimeGet+0x40>)
 8008008:	692b      	ldr	r3, [r5, #16]
 800800a:	a805      	add	r0, sp, #20
 800800c:	4798      	blx	r3
 800800e:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8008010:	68eb      	ldr	r3, [r5, #12]
 8008012:	4798      	blx	r3
 8008014:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8008018:	686b      	ldr	r3, [r5, #4]
 800801a:	4798      	blx	r3
 800801c:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800801e:	9b05      	ldr	r3, [sp, #20]
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	9b04      	ldr	r3, [sp, #16]
 8008024:	aa02      	add	r2, sp, #8
 8008026:	ca06      	ldmia	r2, {r1, r2}
 8008028:	4620      	mov	r0, r4
 800802a:	f7ff ffc3 	bl	8007fb4 <SysTimeAdd>

  return sysTime;
}
 800802e:	4620      	mov	r0, r4
 8008030:	b007      	add	sp, #28
 8008032:	bd30      	pop	{r4, r5, pc}
 8008034:	080086b8 	.word	0x080086b8

08008038 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8008038:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800803a:	4b03      	ldr	r3, [pc, #12]	@ (8008048 <UTIL_TIMER_Init+0x10>)
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8008040:	4b02      	ldr	r3, [pc, #8]	@ (800804c <UTIL_TIMER_Init+0x14>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4798      	blx	r3
}
 8008046:	bd08      	pop	{r3, pc}
 8008048:	20000744 	.word	0x20000744
 800804c:	080086cc 	.word	0x080086cc

08008050 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8008050:	b1a8      	cbz	r0, 800807e <UTIL_TIMER_Create+0x2e>
{
 8008052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008054:	4617      	mov	r7, r2
 8008056:	461e      	mov	r6, r3
 8008058:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 800805a:	b193      	cbz	r3, 8008082 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 800805c:	2500      	movs	r5, #0
 800805e:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8008060:	4b09      	ldr	r3, [pc, #36]	@ (8008088 <UTIL_TIMER_Create+0x38>)
 8008062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008064:	4608      	mov	r0, r1
 8008066:	4798      	blx	r3
 8008068:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800806a:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 800806c:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800806e:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8008070:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8008072:	9b06      	ldr	r3, [sp, #24]
 8008074:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8008076:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8008078:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 800807a:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 800807c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800807e:	2001      	movs	r0, #1
}
 8008080:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8008082:	2001      	movs	r0, #1
 8008084:	e7fa      	b.n	800807c <UTIL_TIMER_Create+0x2c>
 8008086:	bf00      	nop
 8008088:	080086cc 	.word	0x080086cc

0800808c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800808c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800808e:	4c03      	ldr	r4, [pc, #12]	@ (800809c <UTIL_TIMER_GetCurrentTime+0x10>)
 8008090:	69e3      	ldr	r3, [r4, #28]
 8008092:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8008094:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008096:	4798      	blx	r3
}
 8008098:	bd10      	pop	{r4, pc}
 800809a:	bf00      	nop
 800809c:	080086cc 	.word	0x080086cc

080080a0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80080a4:	4d05      	ldr	r5, [pc, #20]	@ (80080bc <UTIL_TIMER_GetElapsedTime+0x1c>)
 80080a6:	69eb      	ldr	r3, [r5, #28]
 80080a8:	4798      	blx	r3
 80080aa:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80080ac:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80080ae:	4630      	mov	r0, r6
 80080b0:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80080b2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80080b4:	1a20      	subs	r0, r4, r0
 80080b6:	4798      	blx	r3
}
 80080b8:	bd70      	pop	{r4, r5, r6, pc}
 80080ba:	bf00      	nop
 80080bc:	080086cc 	.word	0x080086cc

080080c0 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80080c0:	4b05      	ldr	r3, [pc, #20]	@ (80080d8 <TimerExists+0x18>)
 80080c2:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80080c4:	e000      	b.n	80080c8 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80080c6:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80080c8:	b11b      	cbz	r3, 80080d2 <TimerExists+0x12>
    if( cur == TimerObject )
 80080ca:	4283      	cmp	r3, r0
 80080cc:	d1fb      	bne.n	80080c6 <TimerExists+0x6>
      return true;
 80080ce:	2001      	movs	r0, #1
  }
  return false;
}
 80080d0:	4770      	bx	lr
  return false;
 80080d2:	2000      	movs	r0, #0
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20000744 	.word	0x20000744

080080dc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80080e0:	4e09      	ldr	r6, [pc, #36]	@ (8008108 <TimerSetTimeout+0x2c>)
 80080e2:	6a33      	ldr	r3, [r6, #32]
 80080e4:	4798      	blx	r3
 80080e6:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80080e8:	2301      	movs	r3, #1
 80080ea:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80080ec:	6827      	ldr	r7, [r4, #0]
 80080ee:	69b6      	ldr	r6, [r6, #24]
 80080f0:	47b0      	blx	r6
 80080f2:	4428      	add	r0, r5
 80080f4:	4287      	cmp	r7, r0
 80080f6:	d202      	bcs.n	80080fe <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80080f8:	47b0      	blx	r6
 80080fa:	4428      	add	r0, r5
 80080fc:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80080fe:	4b02      	ldr	r3, [pc, #8]	@ (8008108 <TimerSetTimeout+0x2c>)
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	6820      	ldr	r0, [r4, #0]
 8008104:	4798      	blx	r3
}
 8008106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008108:	080086cc 	.word	0x080086cc

0800810c <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 800810c:	b368      	cbz	r0, 800816a <UTIL_TIMER_Stop+0x5e>
{
 800810e:	b510      	push	{r4, lr}
 8008110:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008112:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008116:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8008118:	4b15      	ldr	r3, [pc, #84]	@ (8008170 <UTIL_TIMER_Stop+0x64>)
 800811a:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 800811c:	2301      	movs	r3, #1
 800811e:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8008120:	b1e1      	cbz	r1, 800815c <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8008126:	4288      	cmp	r0, r1
 8008128:	d006      	beq.n	8008138 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800812a:	460b      	mov	r3, r1
        while( cur != NULL )
 800812c:	b1b3      	cbz	r3, 800815c <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 800812e:	4293      	cmp	r3, r2
 8008130:	d011      	beq.n	8008156 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8008132:	4619      	mov	r1, r3
            cur = cur->Next;
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	e7f9      	b.n	800812c <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8008138:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 800813a:	6948      	ldr	r0, [r1, #20]
 800813c:	b120      	cbz	r0, 8008148 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 800813e:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <UTIL_TIMER_Stop+0x64>)
 8008140:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8008142:	f7ff ffcb 	bl	80080dc <TimerSetTimeout>
 8008146:	e009      	b.n	800815c <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8008148:	4b0a      	ldr	r3, [pc, #40]	@ (8008174 <UTIL_TIMER_Stop+0x68>)
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	4798      	blx	r3
            TimerListHead = NULL;
 800814e:	4b08      	ldr	r3, [pc, #32]	@ (8008170 <UTIL_TIMER_Stop+0x64>)
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	e002      	b.n	800815c <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	b123      	cbz	r3, 8008164 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 800815a:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815c:	f384 8810 	msr	PRIMASK, r4
}
 8008160:	2000      	movs	r0, #0
}
 8008162:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8008164:	2300      	movs	r3, #0
 8008166:	614b      	str	r3, [r1, #20]
 8008168:	e7f8      	b.n	800815c <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 800816a:	2001      	movs	r0, #1
}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20000744 	.word	0x20000744
 8008174:	080086cc 	.word	0x080086cc

08008178 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8008178:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <TimerInsertTimer+0x28>)
 800817a:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800817c:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800817e:	e001      	b.n	8008184 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8008180:	461a      	mov	r2, r3
        next = next->Next;
 8008182:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8008184:	6951      	ldr	r1, [r2, #20]
 8008186:	b139      	cbz	r1, 8008198 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8008188:	6819      	ldr	r1, [r3, #0]
 800818a:	f8d0 c000 	ldr.w	ip, [r0]
 800818e:	458c      	cmp	ip, r1
 8008190:	d8f6      	bhi.n	8008180 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8008192:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8008194:	6143      	str	r3, [r0, #20]
        return;
 8008196:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8008198:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	6143      	str	r3, [r0, #20]
}
 800819e:	4770      	bx	lr
 80081a0:	20000744 	.word	0x20000744

080081a4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80081a4:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80081a6:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <TimerInsertNewHeadTimer+0x18>)
 80081a8:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80081aa:	b10b      	cbz	r3, 80081b0 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 80081ac:	2200      	movs	r2, #0
 80081ae:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80081b0:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80081b2:	4b02      	ldr	r3, [pc, #8]	@ (80081bc <TimerInsertNewHeadTimer+0x18>)
 80081b4:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80081b6:	f7ff ff91 	bl	80080dc <TimerSetTimeout>
}
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	20000744 	.word	0x20000744

080081c0 <UTIL_TIMER_Start>:
{
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d036      	beq.n	8008234 <UTIL_TIMER_Start+0x74>
 80081c6:	4604      	mov	r4, r0
 80081c8:	f7ff ff7a 	bl	80080c0 <TimerExists>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d134      	bne.n	800823a <UTIL_TIMER_Start+0x7a>
 80081d0:	7a65      	ldrb	r5, [r4, #9]
 80081d2:	2d00      	cmp	r5, #0
 80081d4:	d133      	bne.n	800823e <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081d6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80081da:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 80081dc:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80081de:	4b19      	ldr	r3, [pc, #100]	@ (8008244 <UTIL_TIMER_Start+0x84>)
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	4798      	blx	r3
    if( ticks < minValue )
 80081e4:	4287      	cmp	r7, r0
 80081e6:	d300      	bcc.n	80081ea <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 80081e8:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 80081ea:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80081f0:	2201      	movs	r2, #1
 80081f2:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80081f4:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80081f6:	4b14      	ldr	r3, [pc, #80]	@ (8008248 <UTIL_TIMER_Start+0x88>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	b183      	cbz	r3, 800821e <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80081fc:	4b11      	ldr	r3, [pc, #68]	@ (8008244 <UTIL_TIMER_Start+0x84>)
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	4418      	add	r0, r3
 8008206:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8008208:	4b0f      	ldr	r3, [pc, #60]	@ (8008248 <UTIL_TIMER_Start+0x88>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4298      	cmp	r0, r3
 8008210:	d20c      	bcs.n	800822c <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8008212:	4620      	mov	r0, r4
 8008214:	f7ff ffc6 	bl	80081a4 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008218:	f386 8810 	msr	PRIMASK, r6
}
 800821c:	e00b      	b.n	8008236 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 800821e:	4b09      	ldr	r3, [pc, #36]	@ (8008244 <UTIL_TIMER_Start+0x84>)
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8008224:	4620      	mov	r0, r4
 8008226:	f7ff ffbd 	bl	80081a4 <TimerInsertNewHeadTimer>
 800822a:	e7f5      	b.n	8008218 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 800822c:	4620      	mov	r0, r4
 800822e:	f7ff ffa3 	bl	8008178 <TimerInsertTimer>
 8008232:	e7f1      	b.n	8008218 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8008234:	2501      	movs	r5, #1
}
 8008236:	4628      	mov	r0, r5
 8008238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 800823a:	2501      	movs	r5, #1
 800823c:	e7fb      	b.n	8008236 <UTIL_TIMER_Start+0x76>
 800823e:	2501      	movs	r5, #1
 8008240:	e7f9      	b.n	8008236 <UTIL_TIMER_Start+0x76>
 8008242:	bf00      	nop
 8008244:	080086cc 	.word	0x080086cc
 8008248:	20000744 	.word	0x20000744

0800824c <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 800824c:	b198      	cbz	r0, 8008276 <UTIL_TIMER_SetPeriod+0x2a>
{
 800824e:	b510      	push	{r4, lr}
 8008250:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8008252:	4b0a      	ldr	r3, [pc, #40]	@ (800827c <UTIL_TIMER_SetPeriod+0x30>)
 8008254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008256:	4608      	mov	r0, r1
 8008258:	4798      	blx	r3
 800825a:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800825c:	4620      	mov	r0, r4
 800825e:	f7ff ff2f 	bl	80080c0 <TimerExists>
 8008262:	b908      	cbnz	r0, 8008268 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8008264:	2000      	movs	r0, #0
}
 8008266:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8008268:	4620      	mov	r0, r4
 800826a:	f7ff ff4f 	bl	800810c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800826e:	4620      	mov	r0, r4
 8008270:	f7ff ffa6 	bl	80081c0 <UTIL_TIMER_Start>
 8008274:	e7f7      	b.n	8008266 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8008276:	2001      	movs	r0, #1
}
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	080086cc 	.word	0x080086cc

08008280 <UTIL_TIMER_IRQ_Handler>:
{
 8008280:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008282:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008286:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8008288:	4c1e      	ldr	r4, [pc, #120]	@ (8008304 <UTIL_TIMER_IRQ_Handler+0x84>)
 800828a:	6963      	ldr	r3, [r4, #20]
 800828c:	4798      	blx	r3
 800828e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8008294:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8008296:	4b1c      	ldr	r3, [pc, #112]	@ (8008308 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	b923      	cbnz	r3, 80082a6 <UTIL_TIMER_IRQ_Handler+0x26>
 800829c:	e018      	b.n	80082d0 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 80082a2:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80082a4:	b1a3      	cbz	r3, 80082d0 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	42a2      	cmp	r2, r4
 80082aa:	d9f8      	bls.n	800829e <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 80082ac:	1a31      	subs	r1, r6, r0
 80082ae:	440a      	add	r2, r1
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	e7f6      	b.n	80082a2 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 80082b4:	4b14      	ldr	r3, [pc, #80]	@ (8008308 <UTIL_TIMER_IRQ_Handler+0x88>)
 80082b6:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80082b8:	6962      	ldr	r2, [r4, #20]
 80082ba:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80082c0:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80082c2:	68e3      	ldr	r3, [r4, #12]
 80082c4:	6920      	ldr	r0, [r4, #16]
 80082c6:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80082c8:	8963      	ldrh	r3, [r4, #10]
 80082ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ce:	d012      	beq.n	80082f6 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80082d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008308 <UTIL_TIMER_IRQ_Handler+0x88>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	b13b      	cbz	r3, 80082e6 <UTIL_TIMER_IRQ_Handler+0x66>
 80082d6:	681c      	ldr	r4, [r3, #0]
 80082d8:	2c00      	cmp	r4, #0
 80082da:	d0eb      	beq.n	80082b4 <UTIL_TIMER_IRQ_Handler+0x34>
 80082dc:	4b09      	ldr	r3, [pc, #36]	@ (8008304 <UTIL_TIMER_IRQ_Handler+0x84>)
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	4798      	blx	r3
 80082e2:	4284      	cmp	r4, r0
 80082e4:	d3e6      	bcc.n	80082b4 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80082e6:	4b08      	ldr	r3, [pc, #32]	@ (8008308 <UTIL_TIMER_IRQ_Handler+0x88>)
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	b108      	cbz	r0, 80082f0 <UTIL_TIMER_IRQ_Handler+0x70>
 80082ec:	7a03      	ldrb	r3, [r0, #8]
 80082ee:	b133      	cbz	r3, 80082fe <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f0:	f385 8810 	msr	PRIMASK, r5
}
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80082f6:	4620      	mov	r0, r4
 80082f8:	f7ff ff62 	bl	80081c0 <UTIL_TIMER_Start>
 80082fc:	e7e8      	b.n	80082d0 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80082fe:	f7ff feed 	bl	80080dc <TimerSetTimeout>
 8008302:	e7f5      	b.n	80082f0 <UTIL_TIMER_IRQ_Handler+0x70>
 8008304:	080086cc 	.word	0x080086cc
 8008308:	20000744 	.word	0x20000744

0800830c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800830c:	4601      	mov	r1, r0
  int i = 0;
 800830e:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8008310:	e008      	b.n	8008324 <ee_skip_atoi+0x18>
 8008312:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008316:	1c53      	adds	r3, r2, #1
 8008318:	600b      	str	r3, [r1, #0]
 800831a:	7813      	ldrb	r3, [r2, #0]
 800831c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008320:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8008324:	680a      	ldr	r2, [r1, #0]
 8008326:	7813      	ldrb	r3, [r2, #0]
 8008328:	3b30      	subs	r3, #48	@ 0x30
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b09      	cmp	r3, #9
 800832e:	d9f0      	bls.n	8008312 <ee_skip_atoi+0x6>
  return i;
}
 8008330:	4770      	bx	lr
	...

08008334 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8008334:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8008338:	b093      	sub	sp, #76	@ 0x4c
 800833a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800833c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800833e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8008342:	d110      	bne.n	8008366 <ee_number+0x32>
  char *dig = lower_digits;
 8008344:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 8008440 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8008348:	1e9f      	subs	r7, r3, #2
 800834a:	2f22      	cmp	r7, #34	@ 0x22
 800834c:	d875      	bhi.n	800843a <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 800834e:	f016 0401 	ands.w	r4, r6, #1
 8008352:	d00b      	beq.n	800836c <ee_number+0x38>
 8008354:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 8008358:	f016 0f02 	tst.w	r6, #2
 800835c:	d00f      	beq.n	800837e <ee_number+0x4a>
  {
    if (num < 0)
 800835e:	2a00      	cmp	r2, #0
 8008360:	db07      	blt.n	8008372 <ee_number+0x3e>
  sign = 0;
 8008362:	2700      	movs	r7, #0
 8008364:	e00c      	b.n	8008380 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8008366:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8008444 <ee_number+0x110>
 800836a:	e7ed      	b.n	8008348 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 800836c:	f04f 0e20 	mov.w	lr, #32
 8008370:	e7f2      	b.n	8008358 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8008372:	4252      	negs	r2, r2
      size--;
 8008374:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008376:	3e01      	subs	r6, #1
 8008378:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 800837a:	272d      	movs	r7, #45	@ 0x2d
 800837c:	e000      	b.n	8008380 <ee_number+0x4c>
  sign = 0;
 800837e:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8008380:	bb5a      	cbnz	r2, 80083da <ee_number+0xa6>
    tmp[i++] = '0';
 8008382:	2330      	movs	r3, #48	@ 0x30
 8008384:	f88d 3004 	strb.w	r3, [sp, #4]
 8008388:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 800838c:	45ac      	cmp	ip, r5
 800838e:	dd00      	ble.n	8008392 <ee_number+0x5e>
 8008390:	4665      	mov	r5, ip
  size -= precision;
 8008392:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008394:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8008396:	b31c      	cbz	r4, 80083e0 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8008398:	b11f      	cbz	r7, 80083a2 <ee_number+0x6e>
 800839a:	f800 7b01 	strb.w	r7, [r0], #1
 800839e:	3901      	subs	r1, #1
 80083a0:	d007      	beq.n	80083b2 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80083a8:	dd24      	ble.n	80083f4 <ee_number+0xc0>
 80083aa:	f800 eb01 	strb.w	lr, [r0], #1
 80083ae:	3901      	subs	r1, #1
 80083b0:	d1f7      	bne.n	80083a2 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 80083b2:	b013      	add	sp, #76	@ 0x4c
 80083b4:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80083b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80083bc:	fb03 2216 	mls	r2, r3, r6, r2
 80083c0:	f81a 8002 	ldrb.w	r8, [sl, r2]
 80083c4:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 80083c8:	446a      	add	r2, sp
 80083ca:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80083ce:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80083d0:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 80083d4:	2a00      	cmp	r2, #0
 80083d6:	d1ef      	bne.n	80083b8 <ee_number+0x84>
 80083d8:	e7d8      	b.n	800838c <ee_number+0x58>
  i = 0;
 80083da:	f04f 0c00 	mov.w	ip, #0
 80083de:	e7f9      	b.n	80083d4 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80083e6:	ddd7      	ble.n	8008398 <ee_number+0x64>
 80083e8:	2220      	movs	r2, #32
 80083ea:	f800 2b01 	strb.w	r2, [r0], #1
 80083ee:	3901      	subs	r1, #1
 80083f0:	d1f6      	bne.n	80083e0 <ee_number+0xac>
 80083f2:	e7de      	b.n	80083b2 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 80083f4:	4565      	cmp	r5, ip
 80083f6:	f105 35ff 	add.w	r5, r5, #4294967295
 80083fa:	dd05      	ble.n	8008408 <ee_number+0xd4>
 80083fc:	2230      	movs	r2, #48	@ 0x30
 80083fe:	f800 2b01 	strb.w	r2, [r0], #1
 8008402:	3901      	subs	r1, #1
 8008404:	d1f6      	bne.n	80083f4 <ee_number+0xc0>
 8008406:	e7d4      	b.n	80083b2 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8008408:	4662      	mov	r2, ip
 800840a:	2a00      	cmp	r2, #0
 800840c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008410:	dd09      	ble.n	8008426 <ee_number+0xf2>
 8008412:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 8008416:	446a      	add	r2, sp
 8008418:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 800841c:	f800 2b01 	strb.w	r2, [r0], #1
 8008420:	3901      	subs	r1, #1
 8008422:	d1f1      	bne.n	8008408 <ee_number+0xd4>
 8008424:	e7c5      	b.n	80083b2 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8008426:	2b00      	cmp	r3, #0
 8008428:	f103 33ff 	add.w	r3, r3, #4294967295
 800842c:	ddc1      	ble.n	80083b2 <ee_number+0x7e>
 800842e:	2220      	movs	r2, #32
 8008430:	f800 2b01 	strb.w	r2, [r0], #1
 8008434:	3901      	subs	r1, #1
 8008436:	d1f6      	bne.n	8008426 <ee_number+0xf2>
 8008438:	e7bb      	b.n	80083b2 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 800843a:	2000      	movs	r0, #0
 800843c:	e7b9      	b.n	80083b2 <ee_number+0x7e>
 800843e:	bf00      	nop
 8008440:	080089f4 	.word	0x080089f4
 8008444:	08008a1c 	.word	0x08008a1c

08008448 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8008448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800844c:	b087      	sub	sp, #28
 800844e:	9205      	str	r2, [sp, #20]
 8008450:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8008452:	1e0f      	subs	r7, r1, #0
 8008454:	f340 80b8 	ble.w	80085c8 <tiny_vsnprintf_like+0x180>
 8008458:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800845a:	4604      	mov	r4, r0
 800845c:	e004      	b.n	8008468 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 800845e:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8008462:	9b05      	ldr	r3, [sp, #20]
 8008464:	3301      	adds	r3, #1
 8008466:	9305      	str	r3, [sp, #20]
 8008468:	9905      	ldr	r1, [sp, #20]
 800846a:	780a      	ldrb	r2, [r1, #0]
 800846c:	b922      	cbnz	r2, 8008478 <tiny_vsnprintf_like+0x30>
 800846e:	1ba3      	subs	r3, r4, r6
 8008470:	1e78      	subs	r0, r7, #1
 8008472:	4283      	cmp	r3, r0
 8008474:	f2c0 80a2 	blt.w	80085bc <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8008478:	1ba3      	subs	r3, r4, r6
 800847a:	f107 38ff 	add.w	r8, r7, #4294967295
 800847e:	4543      	cmp	r3, r8
 8008480:	f280 809c 	bge.w	80085bc <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8008484:	2a25      	cmp	r2, #37	@ 0x25
 8008486:	d1ea      	bne.n	800845e <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8008488:	1c4b      	adds	r3, r1, #1
 800848a:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 800848c:	784b      	ldrb	r3, [r1, #1]
 800848e:	2b30      	cmp	r3, #48	@ 0x30
 8008490:	d020      	beq.n	80084d4 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8008492:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8008496:	3b30      	subs	r3, #48	@ 0x30
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b09      	cmp	r3, #9
 800849c:	d91d      	bls.n	80084da <tiny_vsnprintf_like+0x92>
    field_width = -1;
 800849e:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 80084a2:	9b05      	ldr	r3, [sp, #20]
 80084a4:	781a      	ldrb	r2, [r3, #0]
 80084a6:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d867      	bhi.n	800857e <tiny_vsnprintf_like+0x136>
 80084ae:	e8df f003 	tbb	[pc, r3]
 80084b2:	664a      	.short	0x664a
 80084b4:	66666666 	.word	0x66666666
 80084b8:	66666666 	.word	0x66666666
 80084bc:	66621e66 	.word	0x66621e66
 80084c0:	62666666 	.word	0x62666666
 80084c4:	66666666 	.word	0x66666666
 80084c8:	66666666 	.word	0x66666666
 80084cc:	19662866 	.word	0x19662866
 80084d0:	6666      	.short	0x6666
 80084d2:	7c          	.byte	0x7c
 80084d3:	00          	.byte	0x00
      flags |= ZEROPAD;
 80084d4:	f04f 0901 	mov.w	r9, #1
 80084d8:	e7dd      	b.n	8008496 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 80084da:	a805      	add	r0, sp, #20
 80084dc:	f7ff ff16 	bl	800830c <ee_skip_atoi>
 80084e0:	4605      	mov	r5, r0
 80084e2:	e7de      	b.n	80084a2 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 80084e4:	230a      	movs	r3, #10
 80084e6:	e031      	b.n	800854c <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80084e8:	2320      	movs	r3, #32
 80084ea:	f804 3b01 	strb.w	r3, [r4], #1
 80084ee:	3d01      	subs	r5, #1
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	dcf9      	bgt.n	80084e8 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80084f4:	9b04      	ldr	r3, [sp, #16]
 80084f6:	1d1a      	adds	r2, r3, #4
 80084f8:	9204      	str	r2, [sp, #16]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8008500:	e7af      	b.n	8008462 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8008502:	9b04      	ldr	r3, [sp, #16]
 8008504:	1d1a      	adds	r2, r3, #4
 8008506:	9204      	str	r2, [sp, #16]
 8008508:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 800850c:	f1b8 0f00 	cmp.w	r8, #0
 8008510:	d003      	beq.n	800851a <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8008512:	4640      	mov	r0, r8
 8008514:	f7f7 fe30 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8008518:	e006      	b.n	8008528 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 800851a:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80085cc <tiny_vsnprintf_like+0x184>
 800851e:	e7f8      	b.n	8008512 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8008520:	2220      	movs	r2, #32
 8008522:	f804 2b01 	strb.w	r2, [r4], #1
 8008526:	461d      	mov	r5, r3
 8008528:	1e6b      	subs	r3, r5, #1
 800852a:	4285      	cmp	r5, r0
 800852c:	dcf8      	bgt.n	8008520 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800852e:	2200      	movs	r2, #0
 8008530:	e006      	b.n	8008540 <tiny_vsnprintf_like+0xf8>
 8008532:	4643      	mov	r3, r8
 8008534:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008538:	f804 1b01 	strb.w	r1, [r4], #1
 800853c:	3201      	adds	r2, #1
 800853e:	4698      	mov	r8, r3
 8008540:	4282      	cmp	r2, r0
 8008542:	dbf6      	blt.n	8008532 <tiny_vsnprintf_like+0xea>
 8008544:	e78d      	b.n	8008462 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8008546:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 800854a:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 800854c:	f019 0f02 	tst.w	r9, #2
 8008550:	d02f      	beq.n	80085b2 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8008552:	9a04      	ldr	r2, [sp, #16]
 8008554:	1d11      	adds	r1, r2, #4
 8008556:	9104      	str	r1, [sp, #16]
 8008558:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800855a:	1ba1      	subs	r1, r4, r6
 800855c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	9001      	str	r0, [sp, #4]
 8008566:	9500      	str	r5, [sp, #0]
 8008568:	eba8 0101 	sub.w	r1, r8, r1
 800856c:	4620      	mov	r0, r4
 800856e:	f7ff fee1 	bl	8008334 <ee_number>
 8008572:	4604      	mov	r4, r0
 8008574:	e775      	b.n	8008462 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8008576:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 800857a:	230a      	movs	r3, #10
 800857c:	e7e6      	b.n	800854c <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800857e:	2a25      	cmp	r2, #37	@ 0x25
 8008580:	d002      	beq.n	8008588 <tiny_vsnprintf_like+0x140>
 8008582:	2325      	movs	r3, #37	@ 0x25
 8008584:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8008588:	1ba3      	subs	r3, r4, r6
 800858a:	4598      	cmp	r8, r3
 800858c:	dd0f      	ble.n	80085ae <tiny_vsnprintf_like+0x166>
        if (*fmt)
 800858e:	9b05      	ldr	r3, [sp, #20]
 8008590:	781a      	ldrb	r2, [r3, #0]
 8008592:	b13a      	cbz	r2, 80085a4 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8008594:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8008598:	1ba3      	subs	r3, r4, r6
 800859a:	4598      	cmp	r8, r3
 800859c:	f73f af61 	bgt.w	8008462 <tiny_vsnprintf_like+0x1a>
    base = 10;
 80085a0:	230a      	movs	r3, #10
 80085a2:	e7d3      	b.n	800854c <tiny_vsnprintf_like+0x104>
          --fmt;
 80085a4:	3b01      	subs	r3, #1
 80085a6:	9305      	str	r3, [sp, #20]
 80085a8:	e7f6      	b.n	8008598 <tiny_vsnprintf_like+0x150>
        base = 16;
 80085aa:	2310      	movs	r3, #16
 80085ac:	e7ce      	b.n	800854c <tiny_vsnprintf_like+0x104>
    base = 10;
 80085ae:	230a      	movs	r3, #10
 80085b0:	e7cc      	b.n	800854c <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 80085b2:	9a04      	ldr	r2, [sp, #16]
 80085b4:	1d11      	adds	r1, r2, #4
 80085b6:	9104      	str	r1, [sp, #16]
 80085b8:	6812      	ldr	r2, [r2, #0]
 80085ba:	e7ce      	b.n	800855a <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 80085bc:	2300      	movs	r3, #0
 80085be:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80085c0:	1ba0      	subs	r0, r4, r6
}
 80085c2:	b007      	add	sp, #28
 80085c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80085c8:	2000      	movs	r0, #0
 80085ca:	e7fa      	b.n	80085c2 <tiny_vsnprintf_like+0x17a>
 80085cc:	08008a44 	.word	0x08008a44

080085d0 <memset>:
 80085d0:	4402      	add	r2, r0
 80085d2:	4603      	mov	r3, r0
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d100      	bne.n	80085da <memset+0xa>
 80085d8:	4770      	bx	lr
 80085da:	f803 1b01 	strb.w	r1, [r3], #1
 80085de:	e7f9      	b.n	80085d4 <memset+0x4>

080085e0 <__libc_init_array>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	4d0d      	ldr	r5, [pc, #52]	@ (8008618 <__libc_init_array+0x38>)
 80085e4:	4c0d      	ldr	r4, [pc, #52]	@ (800861c <__libc_init_array+0x3c>)
 80085e6:	1b64      	subs	r4, r4, r5
 80085e8:	10a4      	asrs	r4, r4, #2
 80085ea:	2600      	movs	r6, #0
 80085ec:	42a6      	cmp	r6, r4
 80085ee:	d109      	bne.n	8008604 <__libc_init_array+0x24>
 80085f0:	4d0b      	ldr	r5, [pc, #44]	@ (8008620 <__libc_init_array+0x40>)
 80085f2:	4c0c      	ldr	r4, [pc, #48]	@ (8008624 <__libc_init_array+0x44>)
 80085f4:	f000 f818 	bl	8008628 <_init>
 80085f8:	1b64      	subs	r4, r4, r5
 80085fa:	10a4      	asrs	r4, r4, #2
 80085fc:	2600      	movs	r6, #0
 80085fe:	42a6      	cmp	r6, r4
 8008600:	d105      	bne.n	800860e <__libc_init_array+0x2e>
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f855 3b04 	ldr.w	r3, [r5], #4
 8008608:	4798      	blx	r3
 800860a:	3601      	adds	r6, #1
 800860c:	e7ee      	b.n	80085ec <__libc_init_array+0xc>
 800860e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008612:	4798      	blx	r3
 8008614:	3601      	adds	r6, #1
 8008616:	e7f2      	b.n	80085fe <__libc_init_array+0x1e>
 8008618:	08008a58 	.word	0x08008a58
 800861c:	08008a58 	.word	0x08008a58
 8008620:	08008a58 	.word	0x08008a58
 8008624:	08008a5c 	.word	0x08008a5c

08008628 <_init>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	bf00      	nop
 800862c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800862e:	bc08      	pop	{r3}
 8008630:	469e      	mov	lr, r3
 8008632:	4770      	bx	lr

08008634 <_fini>:
 8008634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008636:	bf00      	nop
 8008638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863a:	bc08      	pop	{r3}
 800863c:	469e      	mov	lr, r3
 800863e:	4770      	bx	lr
