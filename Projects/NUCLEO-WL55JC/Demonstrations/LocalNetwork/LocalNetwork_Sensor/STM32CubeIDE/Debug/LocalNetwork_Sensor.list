
LocalNetwork_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f00  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  0800a040  0800a040  0000b040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac08  0800ac08  0000c068  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac08  0800ac08  0000bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac10  0800ac10  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ac10  0800ac10  0000bc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800ac18  0800ac18  0000bc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800ac20  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000068  0800ac88  0000c068  2**2
                  ALLOC
 10 RAM1_region   00000000  20000968  20000968  0000c068  2**0
                  CONTENTS
 11 ._user_heap_stack 00001200  20000968  0800ac88  0000c968  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034e20  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007e0a  00000000  00000000  00040eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000de95  00000000  00000000  00048cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c68  00000000  00000000  00056b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000162c  00000000  00000000  000587c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002638c  00000000  00000000  00059dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000347a6  00000000  00000000  00080178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d06d8  00000000  00000000  000b491e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00184ff6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004d94  00000000  00000000  0018503c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ac  00000000  00000000  00189dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a028 	.word	0x0800a028

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800a028 	.word	0x0800a028

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <FhssChangeChannel>:
  * \param [IN] currentChannel   Index number of the current channel
  */
static void FhssChangeChannel(uint8_t currentChannel)
{
  UNUSED(currentChannel);
}
 8000520:	4770      	bx	lr
	...

08000524 <ChangeState>:
  if (SENS.State != State)
 8000524:	4b20      	ldr	r3, [pc, #128]	@ (80005a8 <ChangeState+0x84>)
 8000526:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800052a:	4283      	cmp	r3, r0
 800052c:	d100      	bne.n	8000530 <ChangeState+0xc>
 800052e:	4770      	bx	lr
{
 8000530:	b510      	push	{r4, lr}
 8000532:	4604      	mov	r4, r0
    SENS.State = State;
 8000534:	4b1c      	ldr	r3, [pc, #112]	@ (80005a8 <ChangeState+0x84>)
 8000536:	f883 00af 	strb.w	r0, [r3, #175]	@ 0xaf
    APP_LOG(TS_ON, VLEVEL_L, "   ==== State: ");
 800053a:	4b1c      	ldr	r3, [pc, #112]	@ (80005ac <ChangeState+0x88>)
 800053c:	2201      	movs	r2, #1
 800053e:	2100      	movs	r1, #0
 8000540:	4610      	mov	r0, r2
 8000542:	f008 fd25 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
    switch (State)
 8000546:	3c01      	subs	r4, #1
 8000548:	2c03      	cmp	r4, #3
 800054a:	d825      	bhi.n	8000598 <ChangeState+0x74>
 800054c:	e8df f004 	tbb	[pc, r4]
 8000550:	020f1d16 	.word	0x020f1d16
        APP_LOG(TS_OFF, VLEVEL_L, "Connected");
 8000554:	4b16      	ldr	r3, [pc, #88]	@ (80005b0 <ChangeState+0x8c>)
 8000556:	2200      	movs	r2, #0
 8000558:	4611      	mov	r1, r2
 800055a:	2001      	movs	r0, #1
 800055c:	f008 fd18 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_L, " ====\r\n");
 8000560:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <ChangeState+0x90>)
 8000562:	2200      	movs	r2, #0
 8000564:	4611      	mov	r1, r2
 8000566:	2001      	movs	r0, #1
 8000568:	f008 fd12 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
}
 800056c:	bd10      	pop	{r4, pc}
        APP_LOG(TS_OFF, VLEVEL_L, "Lost");
 800056e:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <ChangeState+0x94>)
 8000570:	2200      	movs	r2, #0
 8000572:	4611      	mov	r1, r2
 8000574:	2001      	movs	r0, #1
 8000576:	f008 fd0b 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800057a:	e7f1      	b.n	8000560 <ChangeState+0x3c>
        APP_LOG(TS_OFF, VLEVEL_L, "Scan");
 800057c:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <ChangeState+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	4611      	mov	r1, r2
 8000582:	2001      	movs	r0, #1
 8000584:	f008 fd04 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8000588:	e7ea      	b.n	8000560 <ChangeState+0x3c>
        APP_LOG(TS_OFF, VLEVEL_L, "Sync");
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <ChangeState+0x9c>)
 800058c:	2200      	movs	r2, #0
 800058e:	4611      	mov	r1, r2
 8000590:	2001      	movs	r0, #1
 8000592:	f008 fcfd 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8000596:	e7e3      	b.n	8000560 <ChangeState+0x3c>
        APP_LOG(TS_OFF, VLEVEL_L, "Dead");
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <ChangeState+0xa0>)
 800059a:	2200      	movs	r2, #0
 800059c:	4611      	mov	r1, r2
 800059e:	2001      	movs	r0, #1
 80005a0:	f008 fcf6 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80005a4:	e7dc      	b.n	8000560 <ChangeState+0x3c>
 80005a6:	bf00      	nop
 80005a8:	200000a0 	.word	0x200000a0
 80005ac:	0800a088 	.word	0x0800a088
 80005b0:	0800a098 	.word	0x0800a098
 80005b4:	0800a0c4 	.word	0x0800a0c4
 80005b8:	0800a0a4 	.word	0x0800a0a4
 80005bc:	0800a0ac 	.word	0x0800a0ac
 80005c0:	0800a0b4 	.word	0x0800a0b4
 80005c4:	0800a0bc 	.word	0x0800a0bc

080005c8 <RxError>:
{
 80005c8:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "Receive error\r\n");
 80005ca:	4b03      	ldr	r3, [pc, #12]	@ (80005d8 <RxError+0x10>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	2100      	movs	r1, #0
 80005d0:	4610      	mov	r0, r2
 80005d2:	f008 fcdd 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
}
 80005d6:	bd08      	pop	{r3, pc}
 80005d8:	0800a0cc 	.word	0x0800a0cc

080005dc <TxTimeout>:
{
 80005dc:	b508      	push	{r3, lr}
  Radio.Sleep();
 80005de:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <TxTimeout+0x18>)
 80005e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005e2:	4798      	blx	r3
  APP_LOG(TS_ON, VLEVEL_L, "Transmit timeout\r\n");
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <TxTimeout+0x1c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	2100      	movs	r1, #0
 80005ea:	4610      	mov	r0, r2
 80005ec:	f008 fcd0 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
}
 80005f0:	bd08      	pop	{r3, pc}
 80005f2:	bf00      	nop
 80005f4:	0800aa84 	.word	0x0800aa84
 80005f8:	0800a0dc 	.word	0x0800a0dc

080005fc <TxDone>:
{
 80005fc:	b508      	push	{r3, lr}
  Radio.Sleep();
 80005fe:	4b07      	ldr	r3, [pc, #28]	@ (800061c <TxDone+0x20>)
 8000600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000602:	4798      	blx	r3
  (*SENS.ActivityCallback)();
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <TxDone+0x24>)
 8000606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060a:	4798      	blx	r3
  APP_LOG(TS_ON, VLEVEL_M, "Transmit done\r\n");
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <TxDone+0x28>)
 800060e:	2201      	movs	r2, #1
 8000610:	2100      	movs	r1, #0
 8000612:	2002      	movs	r0, #2
 8000614:	f008 fcbc 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
}
 8000618:	bd08      	pop	{r3, pc}
 800061a:	bf00      	nop
 800061c:	0800aa84 	.word	0x0800aa84
 8000620:	200000a0 	.word	0x200000a0
 8000624:	0800a0f0 	.word	0x0800a0f0

08000628 <OneScan>:
  if (SENS.State != SENS_STATE_Scan)
 8000628:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <OneScan+0xd4>)
 800062a:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800062e:	2b01      	cmp	r3, #1
 8000630:	d163      	bne.n	80006fa <OneScan+0xd2>
{
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	b08b      	sub	sp, #44	@ 0x2c
  SENS.RegionNr++;
 8000636:	4a31      	ldr	r2, [pc, #196]	@ (80006fc <OneScan+0xd4>)
 8000638:	6fd3      	ldr	r3, [r2, #124]	@ 0x7c
 800063a:	3301      	adds	r3, #1
 800063c:	67d3      	str	r3, [r2, #124]	@ 0x7c
  if (SENS.RegionNr >= DEMO_Regions_n)
 800063e:	4a30      	ldr	r2, [pc, #192]	@ (8000700 <OneScan+0xd8>)
 8000640:	6812      	ldr	r2, [r2, #0]
 8000642:	4293      	cmp	r3, r2
 8000644:	d302      	bcc.n	800064c <OneScan+0x24>
    SENS.RegionNr = 0;
 8000646:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <OneScan+0xd4>)
 8000648:	2200      	movs	r2, #0
 800064a:	67da      	str	r2, [r3, #124]	@ 0x7c
  SENS.Region = &(DEMO_Regions[SENS.RegionNr]);
 800064c:	4c2b      	ldr	r4, [pc, #172]	@ (80006fc <OneScan+0xd4>)
 800064e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8000650:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000654:	0093      	lsls	r3, r2, #2
 8000656:	4a2b      	ldr	r2, [pc, #172]	@ (8000704 <OneScan+0xdc>)
 8000658:	4413      	add	r3, r2
 800065a:	67a3      	str	r3, [r4, #120]	@ 0x78
  SENS.SubregionNr = 0;
 800065c:	2200      	movs	r2, #0
 800065e:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  SENS.Subregion = &(SENS.Region->subregions[SENS.SubregionNr]);
 8000662:	691a      	ldr	r2, [r3, #16]
 8000664:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  Radio.SetChannel(SENS.Region->beacon_freq); /*Frequency*/
 8000668:	4a27      	ldr	r2, [pc, #156]	@ (8000708 <OneScan+0xe0>)
 800066a:	68d2      	ldr	r2, [r2, #12]
 800066c:	6858      	ldr	r0, [r3, #4]
 800066e:	4790      	blx	r2
  if (SENS.RegionNr == 1) /*FCC*/
 8000670:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8000672:	2b01      	cmp	r3, #1
 8000674:	d02a      	beq.n	80006cc <OneScan+0xa4>
    Radio.SetRxConfig(MODEM_LORA,
 8000676:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <OneScan+0xe0>)
 8000678:	699d      	ldr	r5, [r3, #24]
                      DEMO_BW_TO_SETTXCONFIG(SENS.Region->beacon_bw),     /*Bandwidth*/
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <OneScan+0xd4>)
 800067c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800067e:	7a19      	ldrb	r1, [r3, #8]
 8000680:	1fca      	subs	r2, r1, #7
    Radio.SetRxConfig(MODEM_LORA,
 8000682:	2a02      	cmp	r2, #2
 8000684:	d837      	bhi.n	80006f6 <OneScan+0xce>
                      DEMO_BW_TO_SETTXCONFIG(SENS.Region->beacon_bw),     /*Bandwidth*/
 8000686:	4611      	mov	r1, r2
                      SENS.Region->beacon_sf,     /*Spreading Factor*/
 8000688:	7a5a      	ldrb	r2, [r3, #9]
    Radio.SetRxConfig(MODEM_LORA,
 800068a:	2001      	movs	r0, #1
 800068c:	9009      	str	r0, [sp, #36]	@ 0x24
 800068e:	2400      	movs	r4, #0
 8000690:	9408      	str	r4, [sp, #32]
 8000692:	9407      	str	r4, [sp, #28]
 8000694:	9406      	str	r4, [sp, #24]
 8000696:	9405      	str	r4, [sp, #20]
 8000698:	2304      	movs	r3, #4
 800069a:	9304      	str	r3, [sp, #16]
 800069c:	9003      	str	r0, [sp, #12]
 800069e:	9402      	str	r4, [sp, #8]
 80006a0:	2326      	movs	r3, #38	@ 0x26
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9400      	str	r4, [sp, #0]
 80006a6:	4603      	mov	r3, r0
 80006a8:	47a8      	blx	r5
  SUBGRF_SetCadParams(LORA_CAD_02_SYMBOL,       /*Detect n symbols*/
 80006aa:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	2214      	movs	r2, #20
 80006b4:	2132      	movs	r1, #50	@ 0x32
 80006b6:	4618      	mov	r0, r3
 80006b8:	f008 f9cc 	bl	8008a54 <SUBGRF_SetCadParams>
  UTIL_TIMER_Start(&(SENS.CadTimer)); /*Start timeout*/
 80006bc:	4813      	ldr	r0, [pc, #76]	@ (800070c <OneScan+0xe4>)
 80006be:	f008 ff53 	bl	8009568 <UTIL_TIMER_Start>
  Radio.StartCad();     /*Start Scanning*/
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <OneScan+0xe0>)
 80006c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006c6:	4798      	blx	r3
}
 80006c8:	b00b      	add	sp, #44	@ 0x2c
 80006ca:	bd30      	pop	{r4, r5, pc}
    Radio.SetRxConfig(MODEM_LORA,
 80006cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <OneScan+0xe0>)
 80006ce:	699c      	ldr	r4, [r3, #24]
 80006d0:	2001      	movs	r0, #1
 80006d2:	9009      	str	r0, [sp, #36]	@ 0x24
 80006d4:	2200      	movs	r2, #0
 80006d6:	9208      	str	r2, [sp, #32]
 80006d8:	9207      	str	r2, [sp, #28]
 80006da:	9206      	str	r2, [sp, #24]
 80006dc:	9205      	str	r2, [sp, #20]
 80006de:	2304      	movs	r3, #4
 80006e0:	9304      	str	r3, [sp, #16]
 80006e2:	9003      	str	r0, [sp, #12]
 80006e4:	9202      	str	r2, [sp, #8]
 80006e6:	2326      	movs	r3, #38	@ 0x26
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	4603      	mov	r3, r0
 80006ee:	220c      	movs	r2, #12
 80006f0:	2102      	movs	r1, #2
 80006f2:	47a0      	blx	r4
 80006f4:	e7d9      	b.n	80006aa <OneScan+0x82>
    Radio.SetRxConfig(MODEM_LORA,
 80006f6:	2100      	movs	r1, #0
 80006f8:	e7c6      	b.n	8000688 <OneScan+0x60>
 80006fa:	4770      	bx	lr
 80006fc:	200000a0 	.word	0x200000a0
 8000700:	0800a2f8 	.word	0x0800a2f8
 8000704:	0800a378 	.word	0x0800a378
 8000708:	0800aa84 	.word	0x0800aa84
 800070c:	20000100 	.word	0x20000100

08000710 <CadTimeout>:
{
 8000710:	b510      	push	{r4, lr}
  Radio.Init(&SENS_RadioEvents);
 8000712:	4c07      	ldr	r4, [pc, #28]	@ (8000730 <CadTimeout+0x20>)
 8000714:	6823      	ldr	r3, [r4, #0]
 8000716:	4807      	ldr	r0, [pc, #28]	@ (8000734 <CadTimeout+0x24>)
 8000718:	4798      	blx	r3
  Radio.SetModem(MODEM_LORA);
 800071a:	68a3      	ldr	r3, [r4, #8]
 800071c:	2001      	movs	r0, #1
 800071e:	4798      	blx	r3
  Radio.SetPublicNetwork(false);
 8000720:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000722:	2000      	movs	r0, #0
 8000724:	4798      	blx	r3
  Radio.Standby();
 8000726:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000728:	4798      	blx	r3
  OneScan();
 800072a:	f7ff ff7d 	bl	8000628 <OneScan>
}
 800072e:	bd10      	pop	{r4, pc}
 8000730:	0800aa84 	.word	0x0800aa84
 8000734:	20000084 	.word	0x20000084

08000738 <RxTimeout>:
{
 8000738:	b508      	push	{r3, lr}
  if (SENS.State == SENS_STATE_Scan)
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <RxTimeout+0x30>)
 800073c:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8000740:	2b01      	cmp	r3, #1
 8000742:	d105      	bne.n	8000750 <RxTimeout+0x18>
    Radio.Standby();
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <RxTimeout+0x34>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000748:	4798      	blx	r3
    OneScan();
 800074a:	f7ff ff6d 	bl	8000628 <OneScan>
}
 800074e:	bd08      	pop	{r3, pc}
    APP_LOG(TS_ON, VLEVEL_L, "Receive timeout\r\n");
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <RxTimeout+0x38>)
 8000752:	2201      	movs	r2, #1
 8000754:	2100      	movs	r1, #0
 8000756:	4610      	mov	r0, r2
 8000758:	f008 fc1a 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
    Radio.Rx(0);
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <RxTimeout+0x34>)
 800075e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000760:	2000      	movs	r0, #0
 8000762:	4798      	blx	r3
}
 8000764:	e7f3      	b.n	800074e <RxTimeout+0x16>
 8000766:	bf00      	nop
 8000768:	200000a0 	.word	0x200000a0
 800076c:	0800aa84 	.word	0x0800aa84
 8000770:	0800a100 	.word	0x0800a100

08000774 <ReceiveSync>:
{
 8000774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000778:	b08a      	sub	sp, #40	@ 0x28
  Radio.Standby();      /*Prepare for RX*/
 800077a:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <ReceiveSync+0xc4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4798      	blx	r3
  if (SENS.Subregion->hopping == true)
 8000780:	4b2e      	ldr	r3, [pc, #184]	@ (800083c <ReceiveSync+0xc8>)
 8000782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000786:	7a9a      	ldrb	r2, [r3, #10]
 8000788:	f012 0f01 	tst.w	r2, #1
 800078c:	d04f      	beq.n	800082e <ReceiveSync+0xba>
    channel = &(SENS.Subregion->channels[SENS.Seed % SENS.Subregion->channels_n]);
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	492a      	ldr	r1, [pc, #168]	@ (800083c <ReceiveSync+0xc8>)
 8000792:	f891 10ac 	ldrb.w	r1, [r1, #172]	@ 0xac
 8000796:	691b      	ldr	r3, [r3, #16]
 8000798:	fb91 f0f3 	sdiv	r0, r1, r3
 800079c:	fb03 1110 	mls	r1, r3, r0, r1
 80007a0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  Radio.SetChannel(channel->freq); /*Frequency*/
 80007a4:	4c24      	ldr	r4, [pc, #144]	@ (8000838 <ReceiveSync+0xc4>)
 80007a6:	68e3      	ldr	r3, [r4, #12]
 80007a8:	6890      	ldr	r0, [r2, #8]
 80007aa:	4798      	blx	r3
  Radio.SetRxConfig(MODEM_LORA,
 80007ac:	69a6      	ldr	r6, [r4, #24]
                    DEMO_BW_TO_SETTXCONFIG(SENS.Region->beacon_bw),     /*Bandwidth*/
 80007ae:	4b23      	ldr	r3, [pc, #140]	@ (800083c <ReceiveSync+0xc8>)
 80007b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80007b2:	7a19      	ldrb	r1, [r3, #8]
 80007b4:	1fca      	subs	r2, r1, #7
  Radio.SetRxConfig(MODEM_LORA,
 80007b6:	2a02      	cmp	r2, #2
 80007b8:	d83b      	bhi.n	8000832 <ReceiveSync+0xbe>
                    DEMO_BW_TO_SETTXCONFIG(SENS.Region->beacon_bw),     /*Bandwidth*/
 80007ba:	4611      	mov	r1, r2
                    SENS.Region->beacon_sf,     /*Spreading Factor*/
 80007bc:	7a5a      	ldrb	r2, [r3, #9]
  Radio.SetRxConfig(MODEM_LORA,
 80007be:	2501      	movs	r5, #1
 80007c0:	9509      	str	r5, [sp, #36]	@ 0x24
 80007c2:	2400      	movs	r4, #0
 80007c4:	9408      	str	r4, [sp, #32]
 80007c6:	9407      	str	r4, [sp, #28]
 80007c8:	9406      	str	r4, [sp, #24]
 80007ca:	9505      	str	r5, [sp, #20]
 80007cc:	23ff      	movs	r3, #255	@ 0xff
 80007ce:	9304      	str	r3, [sp, #16]
 80007d0:	9403      	str	r4, [sp, #12]
 80007d2:	9402      	str	r4, [sp, #8]
 80007d4:	2308      	movs	r3, #8
 80007d6:	9301      	str	r3, [sp, #4]
 80007d8:	9400      	str	r4, [sp, #0]
 80007da:	462b      	mov	r3, r5
 80007dc:	4628      	mov	r0, r5
 80007de:	47b0      	blx	r6
  Radio.Rx(0);
 80007e0:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8000838 <ReceiveSync+0xc4>
 80007e4:	f8d8 3034 	ldr.w	r3, [r8, #52]	@ 0x34
 80007e8:	4620      	mov	r0, r4
 80007ea:	4798      	blx	r3
  SENS.ReceivingBeacon = false;
 80007ec:	4e13      	ldr	r6, [pc, #76]	@ (800083c <ReceiveSync+0xc8>)
 80007ee:	f886 40ad 	strb.w	r4, [r6, #173]	@ 0xad
  SENS.ReceivingSync = true;
 80007f2:	f886 50ae 	strb.w	r5, [r6, #174]	@ 0xae
  UTIL_TIMER_Stop(&SENS.ReceiveTimer);
 80007f6:	f106 0748 	add.w	r7, r6, #72	@ 0x48
 80007fa:	4638      	mov	r0, r7
 80007fc:	f008 fe5a 	bl	80094b4 <UTIL_TIMER_Stop>
                       + SENS_TIMING_PRERECEIVE + Radio.GetWakeupTime());    /*Add time of initialization to timeout*/
 8000800:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
 8000804:	4798      	blx	r3
  UTIL_TIMER_SetPeriod(&SENS.ReceiveTimer, DEMO_MAX_END_OF_PACKET_RX
 8000806:	f500 7175 	add.w	r1, r0, #980	@ 0x3d4
 800080a:	4638      	mov	r0, r7
 800080c:	f008 fef2 	bl	80095f4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&SENS.ReceiveTimer);
 8000810:	4638      	mov	r0, r7
 8000812:	f008 fea9 	bl	8009568 <UTIL_TIMER_Start>
  (*SENS.ActivityCallback)();
 8000816:	f8d6 3088 	ldr.w	r3, [r6, #136]	@ 0x88
 800081a:	4798      	blx	r3
  APP_LOG(TS_ON, VLEVEL_M, "Receive for sync\r\n");
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <ReceiveSync+0xcc>)
 800081e:	462a      	mov	r2, r5
 8000820:	4621      	mov	r1, r4
 8000822:	2002      	movs	r0, #2
 8000824:	f008 fbb4 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
}
 8000828:	b00a      	add	sp, #40	@ 0x28
 800082a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    channel = &(SENS.Subregion->channels[0]);   /*Nonhopping subregions use the first channel for Sync*/
 800082e:	695a      	ldr	r2, [r3, #20]
 8000830:	e7b8      	b.n	80007a4 <ReceiveSync+0x30>
  Radio.SetRxConfig(MODEM_LORA,
 8000832:	2100      	movs	r1, #0
 8000834:	e7c2      	b.n	80007bc <ReceiveSync+0x48>
 8000836:	bf00      	nop
 8000838:	0800aa84 	.word	0x0800aa84
 800083c:	200000a0 	.word	0x200000a0
 8000840:	0800a114 	.word	0x0800a114

08000844 <ReceiveBeacon>:
{
 8000844:	b530      	push	{r4, r5, lr}
 8000846:	b08b      	sub	sp, #44	@ 0x2c
  if (SENS.State != SENS_STATE_Scan)
 8000848:	4b42      	ldr	r3, [pc, #264]	@ (8000954 <ReceiveBeacon+0x110>)
 800084a:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800084e:	2b01      	cmp	r3, #1
 8000850:	d024      	beq.n	800089c <ReceiveBeacon+0x58>
    Radio.Standby();      /*Prepare for RX*/
 8000852:	4c41      	ldr	r4, [pc, #260]	@ (8000958 <ReceiveBeacon+0x114>)
 8000854:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000856:	4798      	blx	r3
    Radio.SetChannel(SENS.Region->beacon_freq); /*Frequency*/
 8000858:	68e3      	ldr	r3, [r4, #12]
 800085a:	4c3e      	ldr	r4, [pc, #248]	@ (8000954 <ReceiveBeacon+0x110>)
 800085c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800085e:	6850      	ldr	r0, [r2, #4]
 8000860:	4798      	blx	r3
    if (SENS.RegionNr == 1)
 8000862:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8000864:	2b01      	cmp	r3, #1
 8000866:	d049      	beq.n	80008fc <ReceiveBeacon+0xb8>
      Radio.SetRxConfig(MODEM_LORA,
 8000868:	4b3b      	ldr	r3, [pc, #236]	@ (8000958 <ReceiveBeacon+0x114>)
 800086a:	699d      	ldr	r5, [r3, #24]
                        DEMO_BW_TO_SETTXCONFIG(SENS.Region->beacon_bw),     /*Bandwidth*/
 800086c:	4b39      	ldr	r3, [pc, #228]	@ (8000954 <ReceiveBeacon+0x110>)
 800086e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000870:	7a19      	ldrb	r1, [r3, #8]
 8000872:	1fca      	subs	r2, r1, #7
      Radio.SetRxConfig(MODEM_LORA,
 8000874:	2a02      	cmp	r2, #2
 8000876:	d856      	bhi.n	8000926 <ReceiveBeacon+0xe2>
                        DEMO_BW_TO_SETTXCONFIG(SENS.Region->beacon_bw),     /*Bandwidth*/
 8000878:	4611      	mov	r1, r2
                        SENS.Region->beacon_sf,     /*Spreading Factor*/
 800087a:	7a5a      	ldrb	r2, [r3, #9]
      Radio.SetRxConfig(MODEM_LORA,
 800087c:	2001      	movs	r0, #1
 800087e:	9009      	str	r0, [sp, #36]	@ 0x24
 8000880:	2400      	movs	r4, #0
 8000882:	9408      	str	r4, [sp, #32]
 8000884:	9407      	str	r4, [sp, #28]
 8000886:	9406      	str	r4, [sp, #24]
 8000888:	9405      	str	r4, [sp, #20]
 800088a:	2304      	movs	r3, #4
 800088c:	9304      	str	r3, [sp, #16]
 800088e:	9003      	str	r0, [sp, #12]
 8000890:	9402      	str	r4, [sp, #8]
 8000892:	2326      	movs	r3, #38	@ 0x26
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	9400      	str	r4, [sp, #0]
 8000898:	4603      	mov	r3, r0
 800089a:	47a8      	blx	r5
  Radio.Rx(0);
 800089c:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <ReceiveBeacon+0x114>)
 800089e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008a0:	2000      	movs	r0, #0
 80008a2:	4798      	blx	r3
  SENS.ReceivingSync = false;
 80008a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000954 <ReceiveBeacon+0x110>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
  SENS.ReceivingBeacon = true;
 80008ac:	2201      	movs	r2, #1
 80008ae:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
  if ((SENS.State == SENS_STATE_Connect)
 80008b2:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d001      	beq.n	80008be <ReceiveBeacon+0x7a>
      || (SENS.State == SENS_STATE_Sync))
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d135      	bne.n	800092a <ReceiveBeacon+0xe6>
    UTIL_TIMER_Stop(&SENS.ReceiveTimer);
 80008be:	4d27      	ldr	r5, [pc, #156]	@ (800095c <ReceiveBeacon+0x118>)
 80008c0:	4628      	mov	r0, r5
 80008c2:	f008 fdf7 	bl	80094b4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&SENS.ReceiveTimer, DEMO_MAX_END_OF_PACKET_RX + 2 * SENS.Missed * SENS_TIMING_TOLERANCE
 80008c6:	6e2c      	ldr	r4, [r5, #96]	@ 0x60
 80008c8:	2364      	movs	r3, #100	@ 0x64
 80008ca:	fb03 f404 	mul.w	r4, r3, r4
                         + SENS_TIMING_PRERECEIVE + Radio.GetWakeupTime());    /*Add time of initialization to timeout*/
 80008ce:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <ReceiveBeacon+0x114>)
 80008d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008d2:	4798      	blx	r3
 80008d4:	1821      	adds	r1, r4, r0
    UTIL_TIMER_SetPeriod(&SENS.ReceiveTimer, DEMO_MAX_END_OF_PACKET_RX + 2 * SENS.Missed * SENS_TIMING_TOLERANCE
 80008d6:	f501 7175 	add.w	r1, r1, #980	@ 0x3d4
 80008da:	4628      	mov	r0, r5
 80008dc:	f008 fe8a 	bl	80095f4 <UTIL_TIMER_SetPeriod>
    APP_LOG(TS_ON, VLEVEL_M, "Receive for beacon\r\n");
 80008e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <ReceiveBeacon+0x11c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	2100      	movs	r1, #0
 80008e6:	2002      	movs	r0, #2
 80008e8:	f008 fb52 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&SENS.ReceiveTimer);
 80008ec:	4c1b      	ldr	r4, [pc, #108]	@ (800095c <ReceiveBeacon+0x118>)
 80008ee:	4620      	mov	r0, r4
 80008f0:	f008 fe3a 	bl	8009568 <UTIL_TIMER_Start>
  (*SENS.ActivityCallback)();
 80008f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80008f6:	4798      	blx	r3
}
 80008f8:	b00b      	add	sp, #44	@ 0x2c
 80008fa:	bd30      	pop	{r4, r5, pc}
      Radio.SetRxConfig(MODEM_LORA,
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <ReceiveBeacon+0x114>)
 80008fe:	699c      	ldr	r4, [r3, #24]
 8000900:	2001      	movs	r0, #1
 8000902:	9009      	str	r0, [sp, #36]	@ 0x24
 8000904:	2200      	movs	r2, #0
 8000906:	9208      	str	r2, [sp, #32]
 8000908:	9207      	str	r2, [sp, #28]
 800090a:	9206      	str	r2, [sp, #24]
 800090c:	9205      	str	r2, [sp, #20]
 800090e:	2304      	movs	r3, #4
 8000910:	9304      	str	r3, [sp, #16]
 8000912:	9003      	str	r0, [sp, #12]
 8000914:	9202      	str	r2, [sp, #8]
 8000916:	2326      	movs	r3, #38	@ 0x26
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	9200      	str	r2, [sp, #0]
 800091c:	4603      	mov	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	2102      	movs	r1, #2
 8000922:	47a0      	blx	r4
 8000924:	e7ba      	b.n	800089c <ReceiveBeacon+0x58>
      Radio.SetRxConfig(MODEM_LORA,
 8000926:	2100      	movs	r1, #0
 8000928:	e7a7      	b.n	800087a <ReceiveBeacon+0x36>
    UTIL_TIMER_Stop(&SENS.ReceiveTimer);
 800092a:	4c0c      	ldr	r4, [pc, #48]	@ (800095c <ReceiveBeacon+0x118>)
 800092c:	4620      	mov	r0, r4
 800092e:	f008 fdc1 	bl	80094b4 <UTIL_TIMER_Stop>
                         + SENS_TIMING_PRERECEIVE + Radio.GetWakeupTime());    /*Add time of initialization to timeout*/
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <ReceiveBeacon+0x114>)
 8000934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000936:	4798      	blx	r3
    UTIL_TIMER_SetPeriod(&SENS.ReceiveTimer, SENS_LOST_DUTY_RX
 8000938:	f500 517a 	add.w	r1, r0, #16000	@ 0x3e80
 800093c:	310a      	adds	r1, #10
 800093e:	4620      	mov	r0, r4
 8000940:	f008 fe58 	bl	80095f4 <UTIL_TIMER_SetPeriod>
    APP_LOG(TS_ON, VLEVEL_L, "Receive for the whole period\r\n");
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <ReceiveBeacon+0x120>)
 8000946:	2201      	movs	r2, #1
 8000948:	2100      	movs	r1, #0
 800094a:	4610      	mov	r0, r2
 800094c:	f008 fb20 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
 8000950:	e7cc      	b.n	80008ec <ReceiveBeacon+0xa8>
 8000952:	bf00      	nop
 8000954:	200000a0 	.word	0x200000a0
 8000958:	0800aa84 	.word	0x0800aa84
 800095c:	200000e8 	.word	0x200000e8
 8000960:	0800a128 	.word	0x0800a128
 8000964:	0800a140 	.word	0x0800a140

08000968 <CadDone>:
  * \brief CAD Done callback.
  *
  * \param [IN] channelDetected    Channel Activity detected during the CAD
  */
static void CadDone(bool channelActivityDetected)
{
 8000968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800096a:	4604      	mov	r4, r0
  UTIL_TIMER_Stop(&(SENS.CadTimer)); /*Stop timeout*/
 800096c:	4815      	ldr	r0, [pc, #84]	@ (80009c4 <CadDone+0x5c>)
 800096e:	f008 fda1 	bl	80094b4 <UTIL_TIMER_Stop>

  if (channelActivityDetected)
 8000972:	b324      	cbz	r4, 80009be <CadDone+0x56>
  {
    /*Receive Beacon*/
    SENS.ReceivingBeacon = true;
 8000974:	4f14      	ldr	r7, [pc, #80]	@ (80009c8 <CadDone+0x60>)
 8000976:	2401      	movs	r4, #1
 8000978:	f887 40ad 	strb.w	r4, [r7, #173]	@ 0xad

    Radio.Standby();
 800097c:	4e13      	ldr	r6, [pc, #76]	@ (80009cc <CadDone+0x64>)
 800097e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8000980:	4798      	blx	r3
    Radio.Rx(0);
 8000982:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8000984:	2000      	movs	r0, #0
 8000986:	4798      	blx	r3

    /*Receive maximally for length of the beacon*/
    UTIL_TIMER_Stop(&SENS.ReceiveTimer);
 8000988:	f107 0548 	add.w	r5, r7, #72	@ 0x48
 800098c:	4628      	mov	r0, r5
 800098e:	f008 fd91 	bl	80094b4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&SENS.ReceiveTimer, SENS.Region->beacon_length + Radio.GetWakeupTime());
 8000992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000994:	895f      	ldrh	r7, [r3, #10]
 8000996:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8000998:	4798      	blx	r3
 800099a:	1839      	adds	r1, r7, r0
 800099c:	4628      	mov	r0, r5
 800099e:	f008 fe29 	bl	80095f4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&SENS.ReceiveTimer);
 80009a2:	4628      	mov	r0, r5
 80009a4:	f008 fde0 	bl	8009568 <UTIL_TIMER_Start>
    APP_LOG(TS_ON, VLEVEL_L, "CAD OK\r\n");
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <CadDone+0x68>)
 80009aa:	4622      	mov	r2, r4
 80009ac:	2100      	movs	r1, #0
 80009ae:	4620      	mov	r0, r4
 80009b0:	f008 faee 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
  {
    OneScan(); /*Scan again*/
  }

  /*Notify*/
  (*SENS.ActivityCallback)();
 80009b4:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <CadDone+0x60>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ba:	4798      	blx	r3
}
 80009bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OneScan(); /*Scan again*/
 80009be:	f7ff fe33 	bl	8000628 <OneScan>
 80009c2:	e7f7      	b.n	80009b4 <CadDone+0x4c>
 80009c4:	20000100 	.word	0x20000100
 80009c8:	200000a0 	.word	0x200000a0
 80009cc:	0800aa84 	.word	0x0800aa84
 80009d0:	0800a160 	.word	0x0800a160

080009d4 <ReceiveTimeout>:
{
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	b082      	sub	sp, #8
  if (SENS.State == SENS_STATE_Scan)
 80009d8:	4b43      	ldr	r3, [pc, #268]	@ (8000ae8 <ReceiveTimeout+0x114>)
 80009da:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d031      	beq.n	8000a46 <ReceiveTimeout+0x72>
  Radio.Sleep();
 80009e2:	4b42      	ldr	r3, [pc, #264]	@ (8000aec <ReceiveTimeout+0x118>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e6:	4798      	blx	r3
  if (SENS.ReceivingBeacon == true) /*Beacon was missed*/
 80009e8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae8 <ReceiveTimeout+0x114>)
 80009ea:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d066      	beq.n	8000ac0 <ReceiveTimeout+0xec>
    SENS.ReceivingBeacon = false;
 80009f2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae8 <ReceiveTimeout+0x114>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
    if (SENS.State == SENS_STATE_Lost)  /*Beacon is lost, and wasn't found now*/
 80009fa:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d02b      	beq.n	8000a5a <ReceiveTimeout+0x86>
      SENS.Missed++;       /*Count missed beacons*/
 8000a02:	4c39      	ldr	r4, [pc, #228]	@ (8000ae8 <ReceiveTimeout+0x114>)
 8000a04:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8000a08:	3301      	adds	r3, #1
 8000a0a:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
      APP_LOG(TS_ON, VLEVEL_L, "Missed Beacon %u\r\n", SENS.Missed);
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	4b37      	ldr	r3, [pc, #220]	@ (8000af0 <ReceiveTimeout+0x11c>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	2100      	movs	r1, #0
 8000a16:	4610      	mov	r0, r2
 8000a18:	f008 faba 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
      if (SENS.Missed >= SENS_MAX_MISSED_TO_LOST)
 8000a1c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d92d      	bls.n	8000a80 <ReceiveTimeout+0xac>
        SENS.Codings.hdr.slot = 0;   /*Reset slot*/
 8000a24:	4623      	mov	r3, r4
 8000a26:	f894 209a 	ldrb.w	r2, [r4, #154]	@ 0x9a
 8000a2a:	f36f 0203 	bfc	r2, #0, #4
 8000a2e:	f884 209a 	strb.w	r2, [r4, #154]	@ 0x9a
        SENS.TxDutyCounter = 0; /*Reset duty cycle*/
 8000a32:	2400      	movs	r4, #0
 8000a34:	f8c3 4090 	str.w	r4, [r3, #144]	@ 0x90
        ChangeState(SENS_STATE_Lost);     /*Too many misses, lost*/
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f7ff fd73 	bl	8000524 <ChangeState>
        ReceiveBeacon(NULL);    /*Try to receive for one whole period*/
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f7ff ff00 	bl	8000844 <ReceiveBeacon>
 8000a44:	e040      	b.n	8000ac8 <ReceiveTimeout+0xf4>
    SENS.ReceivingBeacon = false;
 8000a46:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <ReceiveTimeout+0x114>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
    Radio.Standby();
 8000a4e:	4b27      	ldr	r3, [pc, #156]	@ (8000aec <ReceiveTimeout+0x118>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4798      	blx	r3
    OneScan();     /*When scanning, scan again immediately*/
 8000a54:	f7ff fde8 	bl	8000628 <OneScan>
    return;
 8000a58:	e03a      	b.n	8000ad0 <ReceiveTimeout+0xfc>
      UTIL_TIMER_Stop(&SENS.BeaconTimer);
 8000a5a:	4c26      	ldr	r4, [pc, #152]	@ (8000af4 <ReceiveTimeout+0x120>)
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	f008 fd29 	bl	80094b4 <UTIL_TIMER_Stop>
      UTIL_TIMER_SetPeriod(&SENS.BeaconTimer, SENS_LOST_DUTY_SLEEP);
 8000a62:	f44f 21fa 	mov.w	r1, #512000	@ 0x7d000
 8000a66:	4620      	mov	r0, r4
 8000a68:	f008 fdc4 	bl	80095f4 <UTIL_TIMER_SetPeriod>
      UTIL_TIMER_Start(&SENS.BeaconTimer);
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f008 fd7b 	bl	8009568 <UTIL_TIMER_Start>
      APP_LOG(TS_ON, VLEVEL_L, "Sleep to save power\r\n");
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <ReceiveTimeout+0x124>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	2100      	movs	r1, #0
 8000a78:	4610      	mov	r0, r2
 8000a7a:	f008 fa89 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
 8000a7e:	e023      	b.n	8000ac8 <ReceiveTimeout+0xf4>
        UTIL_TIMER_Stop(&SENS.BeaconTimer);
 8000a80:	4d1c      	ldr	r5, [pc, #112]	@ (8000af4 <ReceiveTimeout+0x120>)
 8000a82:	4628      	mov	r0, r5
 8000a84:	f008 fd16 	bl	80094b4 <UTIL_TIMER_Stop>
        UTIL_TIMER_SetPeriod(&SENS.BeaconTimer, (SENS.Missed + 1) * (DEMO_SLOT_NUMBER * 1000)
 8000a88:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 8000a8c:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8000a90:	fb02 3403 	mla	r4, r2, r3, r3
                             - SENS_TIMING_PRERECEIVE - Radio.GetWakeupTime()  /*Start the radio this earlier*/
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <ReceiveTimeout+0x118>)
 8000a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a98:	4798      	blx	r3
 8000a9a:	1a24      	subs	r4, r4, r0
                             - SENS.Missed * SENS_TIMING_TOLERANCE /*Subtract tolerance*/
 8000a9c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8000aa0:	2232      	movs	r2, #50	@ 0x32
 8000aa2:	fb02 4413 	mls	r4, r2, r3, r4
                             + SENS.BeaconTime - UTIL_TIMER_GetCurrentTime()); /*Make the timer absolute to the last known period start*/
 8000aa6:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8000aa8:	441c      	add	r4, r3
 8000aaa:	f008 fcc3 	bl	8009434 <UTIL_TIMER_GetCurrentTime>
 8000aae:	1a21      	subs	r1, r4, r0
        UTIL_TIMER_SetPeriod(&SENS.BeaconTimer, (SENS.Missed + 1) * (DEMO_SLOT_NUMBER * 1000)
 8000ab0:	390a      	subs	r1, #10
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	f008 fd9e 	bl	80095f4 <UTIL_TIMER_SetPeriod>
        UTIL_TIMER_Start(&SENS.BeaconTimer);
 8000ab8:	4628      	mov	r0, r5
 8000aba:	f008 fd55 	bl	8009568 <UTIL_TIMER_Start>
 8000abe:	e003      	b.n	8000ac8 <ReceiveTimeout+0xf4>
  else if (SENS.ReceivingSync == true)  /*Sync was missed*/
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <ReceiveTimeout+0x114>)
 8000ac2:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8000ac6:	b92b      	cbnz	r3, 8000ad4 <ReceiveTimeout+0x100>
  (*SENS.ActivityCallback)();
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <ReceiveTimeout+0x114>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ace:	4798      	blx	r3
}
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
    SENS.ReceivingSync = false;
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <ReceiveTimeout+0x114>)
 8000ad8:	f883 10ae 	strb.w	r1, [r3, #174]	@ 0xae
    APP_LOG(TS_ON, VLEVEL_L, "Missed Sync\r\n");
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <ReceiveTimeout+0x128>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	f008 fa55 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
 8000ae6:	e7ef      	b.n	8000ac8 <ReceiveTimeout+0xf4>
 8000ae8:	200000a0 	.word	0x200000a0
 8000aec:	0800aa84 	.word	0x0800aa84
 8000af0:	0800a184 	.word	0x0800a184
 8000af4:	200000b8 	.word	0x200000b8
 8000af8:	0800a16c 	.word	0x0800a16c
 8000afc:	0800a198 	.word	0x0800a198

08000b00 <Transmit>:
{
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	b090      	sub	sp, #64	@ 0x40
  if (SENS.GetDataCallback != NULL)
 8000b04:	4bb4      	ldr	r3, [pc, #720]	@ (8000dd8 <Transmit+0x2d8>)
 8000b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000b0a:	b103      	cbz	r3, 8000b0e <Transmit+0xe>
    SENS.GetDataCallback();     /*Get new data to transmit*/
 8000b0c:	4798      	blx	r3
  if (SENS.Subregion->hopping == true)
 8000b0e:	4bb2      	ldr	r3, [pc, #712]	@ (8000dd8 <Transmit+0x2d8>)
 8000b10:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8000b14:	7aa3      	ldrb	r3, [r4, #10]
 8000b16:	f013 0f01 	tst.w	r3, #1
 8000b1a:	f000 80da 	beq.w	8000cd2 <Transmit+0x1d2>
    uint32_t channel_count = SENS.Subregion->channels_n;
 8000b1e:	6925      	ldr	r5, [r4, #16]
    uint32_t pseudorandom = SENS.Seed;
 8000b20:	4bad      	ldr	r3, [pc, #692]	@ (8000dd8 <Transmit+0x2d8>)
 8000b22:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
    for (int i = 1; i < SENS.Codings.hdr.slot; i++)
 8000b26:	2001      	movs	r0, #1
 8000b28:	e000      	b.n	8000b2c <Transmit+0x2c>
 8000b2a:	3001      	adds	r0, #1
 8000b2c:	4aaa      	ldr	r2, [pc, #680]	@ (8000dd8 <Transmit+0x2d8>)
 8000b2e:	f892 209a 	ldrb.w	r2, [r2, #154]	@ 0x9a
 8000b32:	f002 020f 	and.w	r2, r2, #15
 8000b36:	4282      	cmp	r2, r0
 8000b38:	dd17      	ble.n	8000b6a <Transmit+0x6a>
      pseudorandom = DEMO_PSEUDORANDOM_NEXT(pseudorandom);
 8000b3a:	b903      	cbnz	r3, 8000b3e <Transmit+0x3e>
 8000b3c:	4ba7      	ldr	r3, [pc, #668]	@ (8000ddc <Transmit+0x2dc>)
  * @param last previous generated number (cannot be 0x00000000 and cannot be 0x7fffffff)
  * @return almost 31 bits of pseudorandom number (numbers 0x00000000 and 0x7fffffff cannot happen)
  */
static inline uint32_t DEMO_PRND_Next(uint32_t last)
{
  uint64_t x = (uint64_t)(last) * DEMO_PRND_A;          /* x = last * A */
 8000b3e:	4aa8      	ldr	r2, [pc, #672]	@ (8000de0 <Transmit+0x2e0>)
 8000b40:	fba3 3202 	umull	r3, r2, r3, r2
  x = (x >> DEMO_PRND_P_MERS) + (x & DEMO_PRND_P);      /* x / w + x % w almost mod P, P = w-1 */
 8000b44:	0fd9      	lsrs	r1, r3, #31
 8000b46:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 8000b4a:	0fd2      	lsrs	r2, r2, #31
 8000b4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b50:	18cb      	adds	r3, r1, r3
 8000b52:	f142 0200 	adc.w	r2, r2, #0
  if (x >= DEMO_PRND_P)
 8000b56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	f172 0200 	sbcs.w	r2, r2, #0
 8000b60:	d3e3      	bcc.n	8000b2a <Transmit+0x2a>
  {
    return x - DEMO_PRND_P;                             /* The rest of mod P */
 8000b62:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	3301      	adds	r3, #1
 8000b68:	e7df      	b.n	8000b2a <Transmit+0x2a>
    channel = &(SENS.Subregion->channels[pseudorandom % channel_count]);
 8000b6a:	6964      	ldr	r4, [r4, #20]
 8000b6c:	fbb3 f2f5 	udiv	r2, r3, r5
 8000b70:	fb05 3312 	mls	r3, r5, r2, r3
 8000b74:	eb04 1403 	add.w	r4, r4, r3, lsl #4
  Radio.Standby();
 8000b78:	4d9a      	ldr	r5, [pc, #616]	@ (8000de4 <Transmit+0x2e4>)
 8000b7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000b7c:	4798      	blx	r3
  Radio.SetChannel(channel->freq); /*Set the right frequency*/
 8000b7e:	68eb      	ldr	r3, [r5, #12]
 8000b80:	68a0      	ldr	r0, [r4, #8]
 8000b82:	4798      	blx	r3
  if (SENS.Subregion->lbt)
 8000b84:	4b94      	ldr	r3, [pc, #592]	@ (8000dd8 <Transmit+0x2d8>)
 8000b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b8a:	7a9b      	ldrb	r3, [r3, #10]
 8000b8c:	f013 0f02 	tst.w	r3, #2
 8000b90:	d01f      	beq.n	8000bd2 <Transmit+0xd2>
    if (SENS.Codings.hdr.mode == true) /*LoRa*/
 8000b92:	4b91      	ldr	r3, [pc, #580]	@ (8000dd8 <Transmit+0x2d8>)
 8000b94:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8000b98:	f013 0f10 	tst.w	r3, #16
 8000b9c:	f000 80a1 	beq.w	8000ce2 <Transmit+0x1e2>
      packet_length = DEMO_TimeOnAirLora(&SENS.Codings.lora, SENS.Codings.hdr.data_lim);
 8000ba0:	488d      	ldr	r0, [pc, #564]	@ (8000dd8 <Transmit+0x2d8>)
 8000ba2:	f890 109b 	ldrb.w	r1, [r0, #155]	@ 0x9b
 8000ba6:	f001 011f 	and.w	r1, r1, #31
 8000baa:	309c      	adds	r0, #156	@ 0x9c
 8000bac:	f000 fd70 	bl	8001690 <DEMO_TimeOnAirLora>
    if (DEMO_WaitForFreeChannel((SENS.Codings.hdr.mode == true) ? MODEM_LORA : MODEM_FSK, SENS.Subregion->lbt_rssi,
 8000bb0:	4b89      	ldr	r3, [pc, #548]	@ (8000dd8 <Transmit+0x2d8>)
 8000bb2:	f893 509a 	ldrb.w	r5, [r3, #154]	@ 0x9a
 8000bb6:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8000bba:	f5c0 736b 	rsb	r3, r0, #940	@ 0x3ac
 8000bbe:	7aca      	ldrb	r2, [r1, #11]
 8000bc0:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8000bc4:	f3c5 1000 	ubfx	r0, r5, #4, #1
 8000bc8:	f000 fce2 	bl	8001590 <DEMO_WaitForFreeChannel>
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	f000 8091 	beq.w	8000cf4 <Transmit+0x1f4>
  if (SENS.Codings.hdr.mode == true)  /*LoRa*/
 8000bd2:	4b81      	ldr	r3, [pc, #516]	@ (8000dd8 <Transmit+0x2d8>)
 8000bd4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8000bd8:	f013 0f10 	tst.w	r3, #16
 8000bdc:	f000 8098 	beq.w	8000d10 <Transmit+0x210>
    mod_params.PacketType = PACKET_TYPE_LORA;
 8000be0:	2601      	movs	r6, #1
 8000be2:	f88d 6010 	strb.w	r6, [sp, #16]
    mod_params.Params.LoRa.SpreadingFactor = DEMO_GetSpreadingFactor(&(SENS.Codings.lora));
 8000be6:	4d80      	ldr	r5, [pc, #512]	@ (8000de8 <Transmit+0x2e8>)
 8000be8:	4628      	mov	r0, r5
 8000bea:	f000 fd1f 	bl	800162c <DEMO_GetSpreadingFactor>
 8000bee:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
    mod_params.Params.LoRa.Bandwidth = DEMO_GetBandwidth(&(SENS.Codings.lora));
 8000bf2:	4628      	mov	r0, r5
 8000bf4:	f000 fd1e 	bl	8001634 <DEMO_GetBandwidth>
 8000bf8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
    mod_params.Params.LoRa.CodingRate = DEMO_GetCoderate(&(SENS.Codings.lora));
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	f000 fd39 	bl	8001674 <DEMO_GetCoderate>
 8000c02:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
    mod_params.Params.LoRa.LowDatarateOptimize = SENS.Codings.lora.de;
 8000c06:	782b      	ldrb	r3, [r5, #0]
 8000c08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c0c:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
    pck_params.PacketType = PACKET_TYPE_LORA;
 8000c10:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
    if ((mod_params.Params.LoRa.SpreadingFactor == LORA_SF5) || (mod_params.Params.LoRa.SpreadingFactor == LORA_SF6))
 8000c14:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8000c18:	3b05      	subs	r3, #5
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	42b3      	cmp	r3, r6
 8000c1e:	d973      	bls.n	8000d08 <Transmit+0x208>
      pck_params.Params.LoRa.PreambleLength = 8;
 8000c20:	2308      	movs	r3, #8
 8000c22:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
    pck_params.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8000c26:	2200      	movs	r2, #0
 8000c28:	f88d 203c 	strb.w	r2, [sp, #60]	@ 0x3c
    pck_params.Params.LoRa.PayloadLength = SENS.Codings.hdr.data_lim;
 8000c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8000dd8 <Transmit+0x2d8>)
 8000c2e:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8000c32:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000c36:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
    pck_params.Params.LoRa.CrcMode = LORA_CRC_ON;
 8000c3a:	2501      	movs	r5, #1
 8000c3c:	f88d 503e 	strb.w	r5, [sp, #62]	@ 0x3e
    pck_params.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8000c40:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
    SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000c44:	4628      	mov	r0, r5
 8000c46:	f007 fd63 	bl	8008710 <SUBGRF_SetPacketType>
    SUBGRF_SetModulationParams(&mod_params);
 8000c4a:	a804      	add	r0, sp, #16
 8000c4c:	f007 fe08 	bl	8008860 <SUBGRF_SetModulationParams>
    SUBGRF_SetPacketParams(&pck_params);
 8000c50:	a80b      	add	r0, sp, #44	@ 0x2c
 8000c52:	f007 fe8d 	bl	8008970 <SUBGRF_SetPacketParams>
    uint8_t reg = (DEMO_SYNCWORD_LORA_SENS >> 8) & 0xFF;
 8000c56:	2314      	movs	r3, #20
 8000c58:	f88d 3008 	strb.w	r3, [sp, #8]
    SUBGRF_WriteRegisters(REG_LR_SYNCWORD, &reg, 1);
 8000c5c:	462a      	mov	r2, r5
 8000c5e:	a902      	add	r1, sp, #8
 8000c60:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8000c64:	f007 fa5e 	bl	8008124 <SUBGRF_WriteRegisters>
    reg = DEMO_SYNCWORD_LORA_SENS & 0xFF;
 8000c68:	2324      	movs	r3, #36	@ 0x24
 8000c6a:	f88d 3008 	strb.w	r3, [sp, #8]
    SUBGRF_WriteRegisters(REG_LR_SYNCWORD + 1, &reg, 1);
 8000c6e:	462a      	mov	r2, r5
 8000c70:	a902      	add	r1, sp, #8
 8000c72:	f240 7041 	movw	r0, #1857	@ 0x741
 8000c76:	f007 fa55 	bl	8008124 <SUBGRF_WriteRegisters>
    ant_switch = SUBGRF_SetRfTxPower(channel->power);
 8000c7a:	f994 0000 	ldrsb.w	r0, [r4]
 8000c7e:	f007 ffc3 	bl	8008c08 <SUBGRF_SetRfTxPower>
 8000c82:	4605      	mov	r5, r0
  SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8000c84:	2300      	movs	r3, #0
 8000c86:	461a      	mov	r2, r3
 8000c88:	f240 2101 	movw	r1, #513	@ 0x201
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	f007 fca0 	bl	80085d2 <SUBGRF_SetDioIrqParams>
  SUBGRF_SetSwitch(ant_switch, RFSWITCH_TX);  /*Set RF switch*/
 8000c92:	2101      	movs	r1, #1
 8000c94:	4628      	mov	r0, r5
 8000c96:	f007 ffa3 	bl	8008be0 <SUBGRF_SetSwitch>
  SUBGRF_SendPayload(SENS.Packet, SENS.Codings.hdr.data_lim, 0);
 8000c9a:	4d4f      	ldr	r5, [pc, #316]	@ (8000dd8 <Transmit+0x2d8>)
 8000c9c:	f895 109b 	ldrb.w	r1, [r5, #155]	@ 0x9b
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f001 011f 	and.w	r1, r1, #31
 8000ca6:	f105 00b0 	add.w	r0, r5, #176	@ 0xb0
 8000caa:	f007 fb19 	bl	80082e0 <SUBGRF_SendPayload>
  SENS.Header.packet_cnt++;   /*Count number of sent packets*/
 8000cae:	f895 30b4 	ldrb.w	r3, [r5, #180]	@ 0xb4
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	f885 30b4 	strb.w	r3, [r5, #180]	@ 0xb4
  APP_LOG(TS_ON, VLEVEL_M, "Tx at %d\r\n", channel->freq);
 8000cb8:	68a3      	ldr	r3, [r4, #8]
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8000dec <Transmit+0x2ec>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f008 f964 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
  (*SENS.ActivityCallback)();
 8000cc8:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 8000ccc:	4798      	blx	r3
}
 8000cce:	b010      	add	sp, #64	@ 0x40
 8000cd0:	bd70      	pop	{r4, r5, r6, pc}
    channel = &(SENS.Subregion->channels[SENS.Codings.hdr.chan_nr]);  /*Channel set by Concentrator*/
 8000cd2:	6964      	ldr	r4, [r4, #20]
 8000cd4:	4b40      	ldr	r3, [pc, #256]	@ (8000dd8 <Transmit+0x2d8>)
 8000cd6:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8000ce0:	e74a      	b.n	8000b78 <Transmit+0x78>
      packet_length = DEMO_TimeOnAirFsk(&SENS.Codings.fsk, SENS.Codings.hdr.data_lim);
 8000ce2:	483d      	ldr	r0, [pc, #244]	@ (8000dd8 <Transmit+0x2d8>)
 8000ce4:	f890 109b 	ldrb.w	r1, [r0, #155]	@ 0x9b
 8000ce8:	f001 011f 	and.w	r1, r1, #31
 8000cec:	309e      	adds	r0, #158	@ 0x9e
 8000cee:	f000 fd0b 	bl	8001708 <DEMO_TimeOnAirFsk>
 8000cf2:	e75d      	b.n	8000bb0 <Transmit+0xb0>
      Radio.Sleep();
 8000cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8000de4 <Transmit+0x2e4>)
 8000cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf8:	4798      	blx	r3
      APP_LOG(TS_ON, VLEVEL_L, "Failed to transmit due to LBT\r\n");
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000df0 <Transmit+0x2f0>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4610      	mov	r0, r2
 8000d02:	f008 f945 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
      return; /*Sending failed*/
 8000d06:	e7e2      	b.n	8000cce <Transmit+0x1ce>
      pck_params.Params.LoRa.PreambleLength = 12;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8000d0e:	e78a      	b.n	8000c26 <Transmit+0x126>
    mod_params.PacketType = PACKET_TYPE_GFSK;
 8000d10:	2600      	movs	r6, #0
 8000d12:	f88d 6010 	strb.w	r6, [sp, #16]
    mod_params.Params.Gfsk.BitRate = SENS.Codings.fsk.br;
 8000d16:	4d30      	ldr	r5, [pc, #192]	@ (8000dd8 <Transmit+0x2d8>)
 8000d18:	f8b5 309e 	ldrh.w	r3, [r5, #158]	@ 0x9e
 8000d1c:	f895 20a0 	ldrb.w	r2, [r5, #160]	@ 0xa0
 8000d20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d24:	9305      	str	r3, [sp, #20]
    mod_params.Params.Gfsk.ModulationShaping = DEMO_GetShaping(&(SENS.Codings.fsk));
 8000d26:	f105 009e 	add.w	r0, r5, #158	@ 0x9e
 8000d2a:	f000 fc67 	bl	80015fc <DEMO_GetShaping>
 8000d2e:	f88d 001c 	strb.w	r0, [sp, #28]
    mod_params.Params.Gfsk.Bandwidth = 0x1F;    /*Not used in TX*/
 8000d32:	231f      	movs	r3, #31
 8000d34:	f88d 301d 	strb.w	r3, [sp, #29]
    mod_params.Params.Gfsk.Fdev = SENS.Codings.fsk.fdev;
 8000d38:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	@ 0xa2
 8000d3c:	f895 20a4 	ldrb.w	r2, [r5, #164]	@ 0xa4
 8000d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d44:	9306      	str	r3, [sp, #24]
    pck_params.PacketType = PACKET_TYPE_GFSK;
 8000d46:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
    pck_params.Params.Gfsk.PreambleLength = (4 << 3); /*Convert byte into bit*/
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
    pck_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000d50:	2204      	movs	r2, #4
 8000d52:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
    pck_params.Params.Gfsk.SyncWordLength = (4 << 3); /*Convert byte into bit*/
 8000d56:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
    pck_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000d5a:	f88d 6032 	strb.w	r6, [sp, #50]	@ 0x32
    pck_params.Params.Gfsk.HeaderType = RADIO_PACKET_VARIABLE_LENGTH;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
    pck_params.Params.Gfsk.PayloadLength = SENS.Codings.hdr.data_lim;
 8000d64:	f895 309b 	ldrb.w	r3, [r5, #155]	@ 0x9b
 8000d68:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000d6c:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
    pck_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000d70:	23f2      	movs	r3, #242	@ 0xf2
 8000d72:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
    pck_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000d76:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
    SUBGRF_SetPacketType(PACKET_TYPE_GFSK);
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	f007 fcc8 	bl	8008710 <SUBGRF_SetPacketType>
    SUBGRF_SetModulationParams(&mod_params);
 8000d80:	a804      	add	r0, sp, #16
 8000d82:	f007 fd6d 	bl	8008860 <SUBGRF_SetModulationParams>
    SUBGRF_SetPacketParams(&pck_params);
 8000d86:	a80b      	add	r0, sp, #44	@ 0x2c
 8000d88:	f007 fdf2 	bl	8008970 <SUBGRF_SetPacketParams>
    uint8_t syncword[8] = DEMO_SYNCWORD_FSK_SENS;
 8000d8c:	4a19      	ldr	r2, [pc, #100]	@ (8000df4 <Transmit+0x2f4>)
 8000d8e:	ab02      	add	r3, sp, #8
 8000d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d94:	e883 0003 	stmia.w	r3, {r0, r1}
    SUBGRF_SetSyncWord(syncword);
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f007 f9d3 	bl	8008144 <SUBGRF_SetSyncWord>
    SUBGRF_SetWhiteningSeed(0x01FF);
 8000d9e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8000da2:	f007 f9a6 	bl	80080f2 <SUBGRF_SetWhiteningSeed>
    int32_t TxConfig = RBI_GetTxConfig();
 8000da6:	f001 fd22 	bl	80027ee <RBI_GetTxConfig>
    if (((TxConfig == RBI_CONF_RFO_LP_HP) && (channel->power > 15)) || (TxConfig == RBI_CONF_RFO_HP))
 8000daa:	4603      	mov	r3, r0
 8000dac:	b910      	cbnz	r0, 8000db4 <Transmit+0x2b4>
 8000dae:	6822      	ldr	r2, [r4, #0]
 8000db0:	2a0f      	cmp	r2, #15
 8000db2:	dc0c      	bgt.n	8000dce <Transmit+0x2ce>
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d00c      	beq.n	8000dd2 <Transmit+0x2d2>
    uint8_t paSelect = RFO_LP;
 8000db8:	2501      	movs	r5, #1
    SUBGRF_SetTxParams(paSelect, channel->power, DEMO_GetRampUp(&(SENS.Codings.fsk)));
 8000dba:	6826      	ldr	r6, [r4, #0]
 8000dbc:	480e      	ldr	r0, [pc, #56]	@ (8000df8 <Transmit+0x2f8>)
 8000dbe:	f000 fc31 	bl	8001624 <DEMO_GetRampUp>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	b271      	sxtb	r1, r6
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	f007 fcbc 	bl	8008744 <SUBGRF_SetTxParams>
    ant_switch = paSelect;
 8000dcc:	e75a      	b.n	8000c84 <Transmit+0x184>
      paSelect = RFO_HP;
 8000dce:	2502      	movs	r5, #2
 8000dd0:	e7f3      	b.n	8000dba <Transmit+0x2ba>
 8000dd2:	2502      	movs	r5, #2
 8000dd4:	e7f1      	b.n	8000dba <Transmit+0x2ba>
 8000dd6:	bf00      	nop
 8000dd8:	200000a0 	.word	0x200000a0
 8000ddc:	00032b87 	.word	0x00032b87
 8000de0:	03b36ab7 	.word	0x03b36ab7
 8000de4:	0800aa84 	.word	0x0800aa84
 8000de8:	2000013c 	.word	0x2000013c
 8000dec:	0800a1c8 	.word	0x0800a1c8
 8000df0:	0800a1a8 	.word	0x0800a1a8
 8000df4:	0800a040 	.word	0x0800a040
 8000df8:	2000013e 	.word	0x2000013e

08000dfc <ValidReceivedBeacon>:
  if ((Beacon->version_major != VERSION_MAJOR) /*Concentrator with the correct version*/
 8000dfc:	7803      	ldrb	r3, [r0, #0]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	f040 80a0 	bne.w	8000f48 <ValidReceivedBeacon+0x14c>
{
 8000e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	4604      	mov	r4, r0
      || ((SENS.State == SENS_STATE_Connect) && (SENS.SubregionNr != Beacon->subregion)))      /*Check subregion*/
 8000e10:	4b4f      	ldr	r3, [pc, #316]	@ (8000f50 <ValidReceivedBeacon+0x154>)
 8000e12:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d107      	bne.n	8000e2a <ValidReceivedBeacon+0x2e>
 8000e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f50 <ValidReceivedBeacon+0x154>)
 8000e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e20:	7802      	ldrb	r2, [r0, #0]
 8000e22:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8000e26:	f040 8091 	bne.w	8000f4c <ValidReceivedBeacon+0x150>
  SENS.BeaconTime = UTIL_TIMER_GetCurrentTime() - Beacon->offset;
 8000e2a:	f008 fb03 	bl	8009434 <UTIL_TIMER_GetCurrentTime>
 8000e2e:	78a3      	ldrb	r3, [r4, #2]
 8000e30:	78e2      	ldrb	r2, [r4, #3]
 8000e32:	f002 0203 	and.w	r2, r2, #3
 8000e36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000e3a:	1ac0      	subs	r0, r0, r3
 8000e3c:	4e44      	ldr	r6, [pc, #272]	@ (8000f50 <ValidReceivedBeacon+0x154>)
 8000e3e:	f8c6 0094 	str.w	r0, [r6, #148]	@ 0x94
  UTIL_TIMER_Stop(&SENS.SyncTimer);
 8000e42:	f106 0730 	add.w	r7, r6, #48	@ 0x30
 8000e46:	4638      	mov	r0, r7
 8000e48:	f008 fb34 	bl	80094b4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&SENS.SyncTimer, 1000 - Beacon->offset
 8000e4c:	78a5      	ldrb	r5, [r4, #2]
 8000e4e:	78e3      	ldrb	r3, [r4, #3]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
                       - SENS_TIMING_PRERECEIVE - Radio.GetWakeupTime());
 8000e58:	4b3e      	ldr	r3, [pc, #248]	@ (8000f54 <ValidReceivedBeacon+0x158>)
 8000e5a:	f8d3 805c 	ldr.w	r8, [r3, #92]	@ 0x5c
 8000e5e:	47c0      	blx	r8
 8000e60:	1829      	adds	r1, r5, r0
  UTIL_TIMER_SetPeriod(&SENS.SyncTimer, 1000 - Beacon->offset
 8000e62:	f5c1 7177 	rsb	r1, r1, #988	@ 0x3dc
 8000e66:	3102      	adds	r1, #2
 8000e68:	4638      	mov	r0, r7
 8000e6a:	f008 fbc3 	bl	80095f4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&SENS.SyncTimer);
 8000e6e:	4638      	mov	r0, r7
 8000e70:	f008 fb7a 	bl	8009568 <UTIL_TIMER_Start>
  UTIL_TIMER_Stop(&SENS.BeaconTimer);
 8000e74:	f106 0718 	add.w	r7, r6, #24
 8000e78:	4638      	mov	r0, r7
 8000e7a:	f008 fb1b 	bl	80094b4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&SENS.BeaconTimer, DEMO_SLOT_NUMBER * 1000 - Beacon->offset
 8000e7e:	78a5      	ldrb	r5, [r4, #2]
 8000e80:	78e3      	ldrb	r3, [r4, #3]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
                       - SENS_TIMING_PRERECEIVE - Radio.GetWakeupTime());
 8000e8a:	47c0      	blx	r8
 8000e8c:	1829      	adds	r1, r5, r0
  UTIL_TIMER_SetPeriod(&SENS.BeaconTimer, DEMO_SLOT_NUMBER * 1000 - Beacon->offset
 8000e8e:	f5c1 5179 	rsb	r1, r1, #15936	@ 0x3e40
 8000e92:	3136      	adds	r1, #54	@ 0x36
 8000e94:	4638      	mov	r0, r7
 8000e96:	f008 fbad 	bl	80095f4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&SENS.BeaconTimer);
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	f008 fb64 	bl	8009568 <UTIL_TIMER_Start>
  APP_LOG(TS_ON, VLEVEL_M, "Beacon received, seed = 0x%02x, offset = %hu ms\r\n", Beacon->seed,
 8000ea0:	7861      	ldrb	r1, [r4, #1]
 8000ea2:	78a3      	ldrb	r3, [r4, #2]
 8000ea4:	78e2      	ldrb	r2, [r4, #3]
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	9100      	str	r1, [sp, #0]
 8000eb2:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <ValidReceivedBeacon+0x15c>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f008 f869 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
  if ((SENS.State == SENS_STATE_Scan)
 8000ebe:	f896 30af 	ldrb.w	r3, [r6, #175]	@ 0xaf
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d013      	beq.n	8000eee <ValidReceivedBeacon+0xf2>
      || (SENS.State == SENS_STATE_Lost))
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d011      	beq.n	8000eee <ValidReceivedBeacon+0xf2>
  if (SENS.State != SENS_STATE_Connect)
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <ValidReceivedBeacon+0x154>)
 8000ecc:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d11d      	bne.n	8000f10 <ValidReceivedBeacon+0x114>
  SENS.Seed = Beacon->seed;
 8000ed4:	7862      	ldrb	r2, [r4, #1]
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <ValidReceivedBeacon+0x154>)
 8000ed8:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
  SENS.ReceivingBeacon = false;
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
  SENS.Missed = 0; /*Clear counter of missed beacons*/
 8000ee2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  return true;
 8000ee6:	2001      	movs	r0, #1
}
 8000ee8:	b004      	add	sp, #16
 8000eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SENS.Codings.hdr.slot = 0;     /*Reset slot*/
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <ValidReceivedBeacon+0x154>)
 8000ef0:	f893 209a 	ldrb.w	r2, [r3, #154]	@ 0x9a
 8000ef4:	f36f 0203 	bfc	r2, #0, #4
 8000ef8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    SENS.TxDutyCounter = 0; /*Reset duty cycle*/
 8000efc:	2100      	movs	r1, #0
 8000efe:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
    UTIL_LPM_SetStopMode(1 << CFG_LPM_SENS_Id, UTIL_LPM_ENABLE); /*Re-enable STOP mode*/
 8000f02:	2004      	movs	r0, #4
 8000f04:	f008 f90a 	bl	800911c <UTIL_LPM_SetStopMode>
    ChangeState(SENS_STATE_Sync);     /*Change lower states to sync*/
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f7ff fb0b 	bl	8000524 <ChangeState>
 8000f0e:	e7dc      	b.n	8000eca <ValidReceivedBeacon+0xce>
    SENS.SubregionNr = Beacon->subregion; /*Store subregion*/
 8000f10:	7821      	ldrb	r1, [r4, #0]
 8000f12:	08c9      	lsrs	r1, r1, #3
 8000f14:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <ValidReceivedBeacon+0x154>)
 8000f16:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
    SENS.Subregion = &(SENS.Region->subregions[Beacon->subregion]);
 8000f1a:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 8000f1c:	6918      	ldr	r0, [r3, #16]
 8000f1e:	7823      	ldrb	r3, [r4, #0]
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f26:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 8000f2a:	f8c2 5080 	str.w	r5, [r2, #128]	@ 0x80
    APP_LOG(TS_ON, VLEVEL_M, "Subregion set to %i.%i - %s\r\n", SENS.RegionNr, SENS.SubregionNr, SENS.Subregion->name);
 8000f2e:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	9101      	str	r1, [sp, #4]
 8000f36:	6fd3      	ldr	r3, [r2, #124]	@ 0x7c
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <ValidReceivedBeacon+0x160>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2002      	movs	r0, #2
 8000f42:	f008 f825 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
 8000f46:	e7c5      	b.n	8000ed4 <ValidReceivedBeacon+0xd8>
    return false;       /*Reject this*/
 8000f48:	2000      	movs	r0, #0
}
 8000f4a:	4770      	bx	lr
    return false;       /*Reject this*/
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	e7cb      	b.n	8000ee8 <ValidReceivedBeacon+0xec>
 8000f50:	200000a0 	.word	0x200000a0
 8000f54:	0800aa84 	.word	0x0800aa84
 8000f58:	0800a1d4 	.word	0x0800a1d4
 8000f5c:	0800a208 	.word	0x0800a208

08000f60 <StartScanning>:
{
 8000f60:	b510      	push	{r4, lr}
  Radio.Init(&SENS_RadioEvents);
 8000f62:	4c0d      	ldr	r4, [pc, #52]	@ (8000f98 <StartScanning+0x38>)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <StartScanning+0x3c>)
 8000f68:	4798      	blx	r3
  Radio.SetModem(MODEM_LORA);
 8000f6a:	68a3      	ldr	r3, [r4, #8]
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	4798      	blx	r3
  Radio.SetPublicNetwork(false);
 8000f70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000f72:	2000      	movs	r0, #0
 8000f74:	4798      	blx	r3
  Radio.Standby();
 8000f76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000f78:	4798      	blx	r3
  ChangeState(SENS_STATE_Scan);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff fad2 	bl	8000524 <ChangeState>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_SENS_Id, UTIL_LPM_DISABLE);
 8000f80:	2101      	movs	r1, #1
 8000f82:	2004      	movs	r0, #4
 8000f84:	f008 f8ca 	bl	800911c <UTIL_LPM_SetStopMode>
  SENS.RegionNr = DEMO_Regions_n;
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <StartScanning+0x40>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <StartScanning+0x44>)
 8000f8e:	67da      	str	r2, [r3, #124]	@ 0x7c
  OneScan();
 8000f90:	f7ff fb4a 	bl	8000628 <OneScan>
}
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	bf00      	nop
 8000f98:	0800aa84 	.word	0x0800aa84
 8000f9c:	20000084 	.word	0x20000084
 8000fa0:	0800a2f8 	.word	0x0800a2f8
 8000fa4:	200000a0 	.word	0x200000a0

08000fa8 <ProcessCodingChanges>:
{
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	4606      	mov	r6, r0
  uint32_t Len = Size - 4;       /*Get number of bytes in codings*/
 8000fb0:	1f0d      	subs	r5, r1, #4
  for (uint32_t offset = 0; (offset + sizeof(DEMO_coding_combined_t)) <= Len;)  /*While there is enough data for header*/
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	e011      	b.n	8000fda <ProcessCodingChanges+0x32>
      if (combined.hdr.mode == true)     /*LoRa*/
 8000fb6:	f011 0f10 	tst.w	r1, #16
 8000fba:	d07e      	beq.n	80010ba <ProcessCodingChanges+0x112>
        if (offset + sizeof(DEMO_coding_lora_t) > Len)    /*No space left for the rest of the coding*/
 8000fbc:	3404      	adds	r4, #4
 8000fbe:	42ac      	cmp	r4, r5
 8000fc0:	f200 80ca 	bhi.w	8001158 <ProcessCodingChanges+0x1b0>
        if ((combined.hdr.slot == SENS.Codings.hdr.slot)     /*Slot fits*/
 8000fc4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8000fc8:	f001 010f 	and.w	r1, r1, #15
 8000fcc:	4b64      	ldr	r3, [pc, #400]	@ (8001160 <ProcessCodingChanges+0x1b8>)
 8000fce:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	4299      	cmp	r1, r3
 8000fd8:	d033      	beq.n	8001042 <ProcessCodingChanges+0x9a>
  for (uint32_t offset = 0; (offset + sizeof(DEMO_coding_combined_t)) <= Len;)  /*While there is enough data for header*/
 8000fda:	1ca2      	adds	r2, r4, #2
 8000fdc:	42aa      	cmp	r2, r5
 8000fde:	f200 80bb 	bhi.w	8001158 <ProcessCodingChanges+0x1b0>
    memcpy(&combined, &(Sync->codings[offset]), sizeof(DEMO_coding_combined_t)); /*Copy header to parseable structure*/
 8000fe2:	1933      	adds	r3, r6, r4
 8000fe4:	889b      	ldrh	r3, [r3, #4]
 8000fe6:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (combined.connect.mark == DEMO_HDR_CONNECT_MARK)  /*Connect accept and slot control*/
 8000fea:	b2d9      	uxtb	r1, r3
 8000fec:	f013 0f0f 	tst.w	r3, #15
 8000ff0:	d1e1      	bne.n	8000fb6 <ProcessCodingChanges+0xe>
      offset += sizeof(DEMO_coding_connect_t);
 8000ff2:	1c63      	adds	r3, r4, #1
      if (offset + sizeof(uint32_t) > Len)    /*No space left for eui*/
 8000ff4:	3405      	adds	r4, #5
 8000ff6:	42ac      	cmp	r4, r5
 8000ff8:	f200 80ae 	bhi.w	8001158 <ProcessCodingChanges+0x1b0>
      memcpy(&eui, &(Sync->codings[offset]), sizeof(uint32_t));  /*Get eui*/
 8000ffc:	4433      	add	r3, r6
 8000ffe:	685b      	ldr	r3, [r3, #4]
      if ((eui == SENS.Header.eui)
 8001000:	4a57      	ldr	r2, [pc, #348]	@ (8001160 <ProcessCodingChanges+0x1b8>)
 8001002:	f8d2 20b0 	ldr.w	r2, [r2, #176]	@ 0xb0
 8001006:	429a      	cmp	r2, r3
 8001008:	d1e7      	bne.n	8000fda <ProcessCodingChanges+0x32>
          && (combined.connect.slot > 1)
 800100a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800100e:	091a      	lsrs	r2, r3, #4
 8001010:	2b1f      	cmp	r3, #31
 8001012:	d9e2      	bls.n	8000fda <ProcessCodingChanges+0x32>
          && ((Sync->occupied & (1 << combined.connect.slot)) != 0))
 8001014:	8833      	ldrh	r3, [r6, #0]
 8001016:	4113      	asrs	r3, r2
 8001018:	f013 0f01 	tst.w	r3, #1
 800101c:	d0dd      	beq.n	8000fda <ProcessCodingChanges+0x32>
        SENS.Codings.hdr.slot = combined.connect.slot;
 800101e:	4b50      	ldr	r3, [pc, #320]	@ (8001160 <ProcessCodingChanges+0x1b8>)
 8001020:	f893 109a 	ldrb.w	r1, [r3, #154]	@ 0x9a
 8001024:	f362 0103 	bfi	r1, r2, #0, #4
 8001028:	f883 109a 	strb.w	r1, [r3, #154]	@ 0x9a
        APP_LOG(TS_ON, VLEVEL_M, "Connected to slot = %u\r\n", SENS.Codings.hdr.slot);
 800102c:	9200      	str	r2, [sp, #0]
 800102e:	4b4d      	ldr	r3, [pc, #308]	@ (8001164 <ProcessCodingChanges+0x1bc>)
 8001030:	2201      	movs	r2, #1
 8001032:	2100      	movs	r1, #0
 8001034:	2002      	movs	r0, #2
 8001036:	f007 ffab 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
        ChangeState(SENS_STATE_Connect); /*Connected*/
 800103a:	2004      	movs	r0, #4
 800103c:	f7ff fa72 	bl	8000524 <ChangeState>
 8001040:	e7cb      	b.n	8000fda <ProcessCodingChanges+0x32>
            && (SENS.State == SENS_STATE_Connect))
 8001042:	4b47      	ldr	r3, [pc, #284]	@ (8001160 <ProcessCodingChanges+0x1b8>)
 8001044:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8001048:	2b04      	cmp	r3, #4
 800104a:	d1c6      	bne.n	8000fda <ProcessCodingChanges+0x32>
          SENS.Codings.hdr = combined.hdr;
 800104c:	4f44      	ldr	r7, [pc, #272]	@ (8001160 <ProcessCodingChanges+0x1b8>)
 800104e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001052:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
          memcpy(&(SENS.Codings.lora), &(Sync->codings[offset]), sizeof(DEMO_coding_lora_t));
 8001056:	4432      	add	r2, r6
 8001058:	8893      	ldrh	r3, [r2, #4]
 800105a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
          DEMO_ValidateCodingHdr(&(SENS.Codings.hdr), SENS.Subregion);
 800105e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001062:	f107 009a 	add.w	r0, r7, #154	@ 0x9a
 8001066:	f000 fba9 	bl	80017bc <DEMO_ValidateCodingHdr>
          DEMO_ValidateCodingLora(&(SENS.Codings.lora));
 800106a:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 800106e:	f000 fbbc 	bl	80017ea <DEMO_ValidateCodingLora>
          SENS.TxDutyCounter = 0;
 8001072:	f04f 0800 	mov.w	r8, #0
 8001076:	f8c7 8090 	str.w	r8, [r7, #144]	@ 0x90
          APP_LOG(TS_ON, VLEVEL_M, "Changed to LoRa f = %u Hz, ", SENS.Subregion->channels[SENS.Codings.hdr.chan_nr].freq);
 800107a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 8001084:	0952      	lsrs	r2, r2, #5
 8001086:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4b36      	ldr	r3, [pc, #216]	@ (8001168 <ProcessCodingChanges+0x1c0>)
 8001090:	2201      	movs	r2, #1
 8001092:	4641      	mov	r1, r8
 8001094:	2002      	movs	r0, #2
 8001096:	f007 ff7b 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
          APP_LOG(TS_OFF, VLEVEL_M, "period = %u, data_lim = %u B\r\n", SENS.Codings.hdr.period, SENS.Codings.hdr.data_lim);
 800109a:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 80010a4:	f002 021f 	and.w	r2, r2, #31
 80010a8:	9201      	str	r2, [sp, #4]
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	4b2f      	ldr	r3, [pc, #188]	@ (800116c <ProcessCodingChanges+0x1c4>)
 80010ae:	4642      	mov	r2, r8
 80010b0:	4641      	mov	r1, r8
 80010b2:	2002      	movs	r0, #2
 80010b4:	f007 ff6c 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
 80010b8:	e78f      	b.n	8000fda <ProcessCodingChanges+0x32>
        if (offset + sizeof(DEMO_coding_fsk_t) > Len)    /*No space left for the rest of the coding*/
 80010ba:	340a      	adds	r4, #10
 80010bc:	42ac      	cmp	r4, r5
 80010be:	d84b      	bhi.n	8001158 <ProcessCodingChanges+0x1b0>
        if ((combined.hdr.slot == SENS.Codings.hdr.slot)     /*Slot fits*/
 80010c0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80010c4:	f001 010f 	and.w	r1, r1, #15
 80010c8:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <ProcessCodingChanges+0x1b8>)
 80010ca:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	4299      	cmp	r1, r3
 80010d4:	d181      	bne.n	8000fda <ProcessCodingChanges+0x32>
            && (SENS.State == SENS_STATE_Connect))
 80010d6:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <ProcessCodingChanges+0x1b8>)
 80010d8:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80010dc:	2b04      	cmp	r3, #4
 80010de:	f47f af7c 	bne.w	8000fda <ProcessCodingChanges+0x32>
          SENS.Codings.hdr = combined.hdr;
 80010e2:	4f1f      	ldr	r7, [pc, #124]	@ (8001160 <ProcessCodingChanges+0x1b8>)
 80010e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80010e8:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
          memcpy(&(SENS.Codings.fsk), &(Sync->codings[offset]), sizeof(DEMO_coding_fsk_t));
 80010ec:	4432      	add	r2, r6
 80010ee:	f107 089e 	add.w	r8, r7, #158	@ 0x9e
 80010f2:	6851      	ldr	r1, [r2, #4]
 80010f4:	6893      	ldr	r3, [r2, #8]
 80010f6:	f8c7 109e 	str.w	r1, [r7, #158]	@ 0x9e
 80010fa:	f8c7 30a2 	str.w	r3, [r7, #162]	@ 0xa2
          DEMO_ValidateCodingHdr(&(SENS.Codings.hdr), SENS.Subregion);
 80010fe:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001102:	f107 009a 	add.w	r0, r7, #154	@ 0x9a
 8001106:	f000 fb59 	bl	80017bc <DEMO_ValidateCodingHdr>
          DEMO_ValidateCodingFsk(&(SENS.Codings.fsk));
 800110a:	4640      	mov	r0, r8
 800110c:	f000 fb8e 	bl	800182c <DEMO_ValidateCodingFsk>
          SENS.TxDutyCounter = 0;
 8001110:	f04f 0800 	mov.w	r8, #0
 8001114:	f8c7 8090 	str.w	r8, [r7, #144]	@ 0x90
          APP_LOG(TS_ON, VLEVEL_M, "Changed to FSK f = %u Hz, ", SENS.Subregion->channels[SENS.Codings.hdr.chan_nr].freq);
 8001118:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 8001122:	0952      	lsrs	r2, r2, #5
 8001124:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <ProcessCodingChanges+0x1c8>)
 800112e:	2201      	movs	r2, #1
 8001130:	4641      	mov	r1, r8
 8001132:	2002      	movs	r0, #2
 8001134:	f007 ff2c 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
          APP_LOG(TS_OFF, VLEVEL_M, "period = %u, data_lim = %u B\r\n", SENS.Codings.hdr.period, SENS.Codings.hdr.data_lim);
 8001138:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 8001142:	f002 021f 	and.w	r2, r2, #31
 8001146:	9201      	str	r2, [sp, #4]
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <ProcessCodingChanges+0x1c4>)
 800114c:	4642      	mov	r2, r8
 800114e:	4641      	mov	r1, r8
 8001150:	2002      	movs	r0, #2
 8001152:	f007 ff1d 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
 8001156:	e740      	b.n	8000fda <ProcessCodingChanges+0x32>
}
 8001158:	b004      	add	sp, #16
 800115a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800115e:	bf00      	nop
 8001160:	200000a0 	.word	0x200000a0
 8001164:	0800a228 	.word	0x0800a228
 8001168:	0800a244 	.word	0x0800a244
 800116c:	0800a260 	.word	0x0800a260
 8001170:	0800a280 	.word	0x0800a280

08001174 <ValidReceivedSync>:
{
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	b087      	sub	sp, #28
 8001178:	4604      	mov	r4, r0
 800117a:	460d      	mov	r5, r1
 800117c:	4616      	mov	r6, r2
  PROBE_GPIO_WRITE(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_SET);
 800117e:	4f5b      	ldr	r7, [pc, #364]	@ (80012ec <ValidReceivedSync+0x178>)
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001186:	4638      	mov	r0, r7
 8001188:	f002 fcaa 	bl	8003ae0 <HAL_GPIO_WritePin>
  PROBE_GPIO_WRITE(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001192:	4638      	mov	r0, r7
 8001194:	f002 fca4 	bl	8003ae0 <HAL_GPIO_WritePin>
  if ((Sync->subregion != SENS.SubregionNr) /*Subregion must fit*/
 8001198:	78a2      	ldrb	r2, [r4, #2]
 800119a:	4b55      	ldr	r3, [pc, #340]	@ (80012f0 <ValidReceivedSync+0x17c>)
 800119c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a0:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 80011a4:	f040 809a 	bne.w	80012dc <ValidReceivedSync+0x168>
      || (Sync->seed != SENS.Seed)    /*Seed must fit*/
 80011a8:	78e2      	ldrb	r2, [r4, #3]
 80011aa:	4b51      	ldr	r3, [pc, #324]	@ (80012f0 <ValidReceivedSync+0x17c>)
 80011ac:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f040 8096 	bne.w	80012e2 <ValidReceivedSync+0x16e>
      || (Sync->version_major != VERSION_MAJOR)) /*Only concentrator with the correct version*/
 80011b6:	78a3      	ldrb	r3, [r4, #2]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d001      	beq.n	80011c4 <ValidReceivedSync+0x50>
    return false;
 80011c0:	2000      	movs	r0, #0
 80011c2:	e08c      	b.n	80012de <ValidReceivedSync+0x16a>
  SENS.Occupied = Sync->occupied;
 80011c4:	8822      	ldrh	r2, [r4, #0]
 80011c6:	4b4a      	ldr	r3, [pc, #296]	@ (80012f0 <ValidReceivedSync+0x17c>)
 80011c8:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
  APP_LOG(TS_ON, VLEVEL_M, "Sync received, occupied = bs");
 80011cc:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <ValidReceivedSync+0x180>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	2100      	movs	r1, #0
 80011d2:	2002      	movs	r0, #2
 80011d4:	f007 fedc 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
  char oc_str[17] = "..............\r\n";
 80011d8:	af01      	add	r7, sp, #4
 80011da:	f8df c11c 	ldr.w	ip, [pc, #284]	@ 80012f8 <ValidReceivedSync+0x184>
 80011de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011e2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80011e4:	f8dc 3000 	ldr.w	r3, [ip]
 80011e8:	703b      	strb	r3, [r7, #0]
  uint16_t oc_shift = Sync->occupied >> 2;
 80011ea:	8820      	ldrh	r0, [r4, #0]
 80011ec:	0880      	lsrs	r0, r0, #2
  for (int i = 0; i < (DEMO_SLOT_NUMBER - 2); oc_shift >>= 1, i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	e001      	b.n	80011f6 <ValidReceivedSync+0x82>
 80011f2:	0840      	lsrs	r0, r0, #1
 80011f4:	3301      	adds	r3, #1
 80011f6:	2b0d      	cmp	r3, #13
 80011f8:	dc09      	bgt.n	800120e <ValidReceivedSync+0x9a>
    if (oc_shift & 0x1)
 80011fa:	f010 0f01 	tst.w	r0, #1
 80011fe:	d0f8      	beq.n	80011f2 <ValidReceivedSync+0x7e>
      oc_str[i] = '0';
 8001200:	2130      	movs	r1, #48	@ 0x30
 8001202:	f103 0218 	add.w	r2, r3, #24
 8001206:	446a      	add	r2, sp
 8001208:	f802 1c14 	strb.w	r1, [r2, #-20]
 800120c:	e7f1      	b.n	80011f2 <ValidReceivedSync+0x7e>
  APP_LOG(TS_OFF, VLEVEL_M, oc_str);
 800120e:	ab01      	add	r3, sp, #4
 8001210:	2200      	movs	r2, #0
 8001212:	4611      	mov	r1, r2
 8001214:	2002      	movs	r0, #2
 8001216:	f007 febb 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
  if ((SENS.State == SENS_STATE_Connect)
 800121a:	4b35      	ldr	r3, [pc, #212]	@ (80012f0 <ValidReceivedSync+0x17c>)
 800121c:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8001220:	2b04      	cmp	r3, #4
 8001222:	d109      	bne.n	8001238 <ValidReceivedSync+0xc4>
      && ((Sync->occupied & (0x1 << SENS.Codings.hdr.slot)) == 0))
 8001224:	8823      	ldrh	r3, [r4, #0]
 8001226:	4a32      	ldr	r2, [pc, #200]	@ (80012f0 <ValidReceivedSync+0x17c>)
 8001228:	f892 209a 	ldrb.w	r2, [r2, #154]	@ 0x9a
 800122c:	f002 020f 	and.w	r2, r2, #15
 8001230:	4113      	asrs	r3, r2
 8001232:	f013 0f01 	tst.w	r3, #1
 8001236:	d018      	beq.n	800126a <ValidReceivedSync+0xf6>
    ProcessCodingChanges(Sync, Size);       /*Parse coding changes or connect accept*/
 8001238:	4629      	mov	r1, r5
 800123a:	4620      	mov	r0, r4
 800123c:	f7ff feb4 	bl	8000fa8 <ProcessCodingChanges>
  if (SENS.State != SENS_STATE_Connect)
 8001240:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <ValidReceivedSync+0x17c>)
 8001242:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8001246:	2b04      	cmp	r3, #4
 8001248:	d117      	bne.n	800127a <ValidReceivedSync+0x106>
  if (SENS.Codings.hdr.slot > 0) /*do not transmit if no free slot is available*/
 800124a:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <ValidReceivedSync+0x17c>)
 800124c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8001250:	f013 0f0f 	tst.w	r3, #15
 8001254:	d047      	beq.n	80012e6 <ValidReceivedSync+0x172>
    if (SENS.TxDutyCounter == 0) /*Limit duty cycle*/
 8001256:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <ValidReceivedSync+0x17c>)
 8001258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800125c:	b1e3      	cbz	r3, 8001298 <ValidReceivedSync+0x124>
      SENS.TxDutyCounter--;
 800125e:	3b01      	subs	r3, #1
 8001260:	4a23      	ldr	r2, [pc, #140]	@ (80012f0 <ValidReceivedSync+0x17c>)
 8001262:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return true;
 8001266:	2001      	movs	r0, #1
 8001268:	e039      	b.n	80012de <ValidReceivedSync+0x16a>
    SENS.TxDutyCounter = 0; /*Reset duty cycle*/
 800126a:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <ValidReceivedSync+0x17c>)
 800126c:	2200      	movs	r2, #0
 800126e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    ChangeState(SENS_STATE_Sync); /*Last used slot is now unoccupied, un-connected*/
 8001272:	2002      	movs	r0, #2
 8001274:	f7ff f956 	bl	8000524 <ChangeState>
 8001278:	e7e2      	b.n	8001240 <ValidReceivedSync+0xcc>
    DEMO_DefaultCoding(&(SENS.Codings), DEMO_ChooseRandomSlot(Sync->occupied, RadioRandom), SENS.Region);
 800127a:	4631      	mov	r1, r6
 800127c:	8820      	ldrh	r0, [r4, #0]
 800127e:	f000 fb21 	bl	80018c4 <DEMO_ChooseRandomSlot>
 8001282:	4601      	mov	r1, r0
 8001284:	4c1a      	ldr	r4, [pc, #104]	@ (80012f0 <ValidReceivedSync+0x17c>)
 8001286:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8001288:	f104 009a 	add.w	r0, r4, #154	@ 0x9a
 800128c:	f000 fa4e 	bl	800172c <DEMO_DefaultCoding>
    SENS.Missed = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8001296:	e7d8      	b.n	800124a <ValidReceivedSync+0xd6>
      SENS.TxDutyCounter = SENS.Codings.hdr.period;
 8001298:	4c15      	ldr	r4, [pc, #84]	@ (80012f0 <ValidReceivedSync+0x17c>)
 800129a:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      UTIL_TIMER_Stop(&SENS.TransmitTimer);
 80012a4:	4620      	mov	r0, r4
 80012a6:	f008 f905 	bl	80094b4 <UTIL_TIMER_Stop>
                           SENS.Codings.hdr.slot * 1000 + SENS.BeaconTime - UTIL_TIMER_GetCurrentTime() - Radio.GetWakeupTime());
 80012aa:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 80012b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012ba:	fb02 5503 	mla	r5, r2, r3, r5
 80012be:	f008 f8b9 	bl	8009434 <UTIL_TIMER_GetCurrentTime>
 80012c2:	1a2d      	subs	r5, r5, r0
 80012c4:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <ValidReceivedSync+0x188>)
 80012c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c8:	4798      	blx	r3
      UTIL_TIMER_SetPeriod(&SENS.TransmitTimer,
 80012ca:	1a29      	subs	r1, r5, r0
 80012cc:	4620      	mov	r0, r4
 80012ce:	f008 f991 	bl	80095f4 <UTIL_TIMER_SetPeriod>
      UTIL_TIMER_Start(&SENS.TransmitTimer); /*Start timer for the transmission slot*/
 80012d2:	4620      	mov	r0, r4
 80012d4:	f008 f948 	bl	8009568 <UTIL_TIMER_Start>
  return true;
 80012d8:	2001      	movs	r0, #1
 80012da:	e000      	b.n	80012de <ValidReceivedSync+0x16a>
    return false;
 80012dc:	2000      	movs	r0, #0
}
 80012de:	b007      	add	sp, #28
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
 80012e2:	2000      	movs	r0, #0
 80012e4:	e7fb      	b.n	80012de <ValidReceivedSync+0x16a>
  return true;
 80012e6:	2001      	movs	r0, #1
 80012e8:	e7f9      	b.n	80012de <ValidReceivedSync+0x16a>
 80012ea:	bf00      	nop
 80012ec:	48000400 	.word	0x48000400
 80012f0:	200000a0 	.word	0x200000a0
 80012f4:	0800a29c 	.word	0x0800a29c
 80012f8:	0800a2bc 	.word	0x0800a2bc
 80012fc:	0800aa84 	.word	0x0800aa84

08001300 <RxDone>:
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	b089      	sub	sp, #36	@ 0x24
 8001304:	4605      	mov	r5, r0
 8001306:	460c      	mov	r4, r1
  if (SENS.ReceivingBeacon == true) /*Receiving beacon*/
 8001308:	4b41      	ldr	r3, [pc, #260]	@ (8001410 <RxDone+0x110>)
 800130a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800130e:	2b00      	cmp	r3, #0
 8001310:	d049      	beq.n	80013a6 <RxDone+0xa6>
    if (size != 4) /*Beacon must be 4 bytes*/
 8001312:	2904      	cmp	r1, #4
 8001314:	d00c      	beq.n	8001330 <RxDone+0x30>
      if (SENS.State == SENS_STATE_Scan)
 8001316:	4b3e      	ldr	r3, [pc, #248]	@ (8001410 <RxDone+0x110>)
 8001318:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800131c:	2b01      	cmp	r3, #1
 800131e:	d004      	beq.n	800132a <RxDone+0x2a>
        Radio.Rx(0); /*Continue receiving*/
 8001320:	4b3c      	ldr	r3, [pc, #240]	@ (8001414 <RxDone+0x114>)
 8001322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001324:	2000      	movs	r0, #0
 8001326:	4798      	blx	r3
      return;
 8001328:	e053      	b.n	80013d2 <RxDone+0xd2>
        OneScan(); /*Continue scanning*/
 800132a:	f7ff f97d 	bl	8000628 <OneScan>
 800132e:	e050      	b.n	80013d2 <RxDone+0xd2>
    memcpy(&beacon, payload, size);
 8001330:	460a      	mov	r2, r1
 8001332:	4601      	mov	r1, r0
 8001334:	a801      	add	r0, sp, #4
 8001336:	f008 fa2b 	bl	8009790 <memcpy>
    uint8_t bytesum = payload[0] + payload[1] + payload[2] + payload[3];
 800133a:	782b      	ldrb	r3, [r5, #0]
 800133c:	786a      	ldrb	r2, [r5, #1]
 800133e:	4413      	add	r3, r2
 8001340:	78aa      	ldrb	r2, [r5, #2]
 8001342:	fa52 f383 	uxtab	r3, r2, r3
 8001346:	78ea      	ldrb	r2, [r5, #3]
 8001348:	fa52 f383 	uxtab	r3, r2, r3
 800134c:	b2db      	uxtb	r3, r3
    if ((beacon.pattern != DEMO_BEACON_PATTERN) /*Pattern must fit*/
 800134e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001352:	f002 020c 	and.w	r2, r2, #12
 8001356:	2a08      	cmp	r2, #8
 8001358:	d115      	bne.n	8001386 <RxDone+0x86>
        || (((bytesum + (bytesum >> 4)) & 0xf) != 0)) /*Checksum doesn't fit*/
 800135a:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 800135e:	f013 0f0f 	tst.w	r3, #15
 8001362:	d110      	bne.n	8001386 <RxDone+0x86>
    Radio.Sleep(); /*Turn off the radio*/
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <RxDone+0x114>)
 8001366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001368:	4798      	blx	r3
    if (ValidReceivedBeacon(&beacon) == true)
 800136a:	a801      	add	r0, sp, #4
 800136c:	f7ff fd46 	bl	8000dfc <ValidReceivedBeacon>
 8001370:	bb20      	cbnz	r0, 80013bc <RxDone+0xbc>
      if (SENS.State == SENS_STATE_Scan)
 8001372:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <RxDone+0x110>)
 8001374:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8001378:	2b01      	cmp	r3, #1
 800137a:	d011      	beq.n	80013a0 <RxDone+0xa0>
        Radio.Rx(0); /*Continue receiving*/
 800137c:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <RxDone+0x114>)
 800137e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001380:	2000      	movs	r0, #0
 8001382:	4798      	blx	r3
      return;
 8001384:	e025      	b.n	80013d2 <RxDone+0xd2>
      if (SENS.State == SENS_STATE_Scan)
 8001386:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <RxDone+0x110>)
 8001388:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800138c:	2b01      	cmp	r3, #1
 800138e:	d004      	beq.n	800139a <RxDone+0x9a>
        Radio.Rx(0); /*Continue receiving*/
 8001390:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <RxDone+0x114>)
 8001392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001394:	2000      	movs	r0, #0
 8001396:	4798      	blx	r3
      return;
 8001398:	e01b      	b.n	80013d2 <RxDone+0xd2>
        OneScan(); /*Continue scanning*/
 800139a:	f7ff f945 	bl	8000628 <OneScan>
 800139e:	e018      	b.n	80013d2 <RxDone+0xd2>
        OneScan(); /*Continue scanning*/
 80013a0:	f7ff f942 	bl	8000628 <OneScan>
 80013a4:	e015      	b.n	80013d2 <RxDone+0xd2>
  else if ((SENS.ReceivingSync == true) /*Receiving Sync*/
 80013a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <RxDone+0x110>)
 80013a8:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 80013ac:	b133      	cbz	r3, 80013bc <RxDone+0xbc>
           && ((SENS.State == SENS_STATE_Connect) || (SENS.State == SENS_STATE_Sync))) /*Only in sync*/
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <RxDone+0x110>)
 80013b0:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d00e      	beq.n	80013d6 <RxDone+0xd6>
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d00c      	beq.n	80013d6 <RxDone+0xd6>
  UTIL_TIMER_Stop(&SENS.ReceiveTimer);      /*Stop receive timeout*/
 80013bc:	4c16      	ldr	r4, [pc, #88]	@ (8001418 <RxDone+0x118>)
 80013be:	4620      	mov	r0, r4
 80013c0:	f008 f878 	bl	80094b4 <UTIL_TIMER_Stop>
  SENS.ReceivingBeacon = false;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
  SENS.ReceivingSync = false;
 80013ca:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
  (*SENS.ActivityCallback)();
 80013ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80013d0:	4798      	blx	r3
}
 80013d2:	b009      	add	sp, #36	@ 0x24
 80013d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size < 4) /*Sync must be at least 4 bytes*/
 80013d6:	2c03      	cmp	r4, #3
 80013d8:	d914      	bls.n	8001404 <RxDone+0x104>
    uint32_t radio_random = Radio.Random();     /*Get random number before going to sleep*/
 80013da:	4f0e      	ldr	r7, [pc, #56]	@ (8001414 <RxDone+0x114>)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	4798      	blx	r3
 80013e0:	4606      	mov	r6, r0
    Radio.Sleep(); /*Turn off the radio*/
 80013e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e4:	4798      	blx	r3
    memcpy(&sync, payload, size);
 80013e6:	4622      	mov	r2, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	a801      	add	r0, sp, #4
 80013ec:	f008 f9d0 	bl	8009790 <memcpy>
    if (ValidReceivedSync(&sync, size, radio_random) == true)
 80013f0:	4632      	mov	r2, r6
 80013f2:	4621      	mov	r1, r4
 80013f4:	a801      	add	r0, sp, #4
 80013f6:	f7ff febd 	bl	8001174 <ValidReceivedSync>
 80013fa:	2800      	cmp	r0, #0
 80013fc:	d1de      	bne.n	80013bc <RxDone+0xbc>
      Radio.Rx(0); /*Continue receiving*/
 80013fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001400:	4798      	blx	r3
      return;
 8001402:	e7e6      	b.n	80013d2 <RxDone+0xd2>
      Radio.Rx(0); /*Continue receiving*/
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <RxDone+0x114>)
 8001406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001408:	2000      	movs	r0, #0
 800140a:	4798      	blx	r3
      return;
 800140c:	e7e1      	b.n	80013d2 <RxDone+0xd2>
 800140e:	bf00      	nop
 8001410:	200000a0 	.word	0x200000a0
 8001414:	0800aa84 	.word	0x0800aa84
 8001418:	200000e8 	.word	0x200000e8

0800141c <SENS_Init>:
{
 800141c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001420:	b083      	sub	sp, #12
 8001422:	4680      	mov	r8, r0
 8001424:	460f      	mov	r7, r1
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001426:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800142a:	b672      	cpsid	i
  SENS_RadioEvents.TxDone = TxDone;
 800142c:	4838      	ldr	r0, [pc, #224]	@ (8001510 <SENS_Init+0xf4>)
 800142e:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <SENS_Init+0xf8>)
 8001430:	6003      	str	r3, [r0, #0]
  SENS_RadioEvents.TxTimeout = TxTimeout;
 8001432:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <SENS_Init+0xfc>)
 8001434:	6043      	str	r3, [r0, #4]
  SENS_RadioEvents.RxDone = RxDone;
 8001436:	4b39      	ldr	r3, [pc, #228]	@ (800151c <SENS_Init+0x100>)
 8001438:	6083      	str	r3, [r0, #8]
  SENS_RadioEvents.RxTimeout = RxTimeout;
 800143a:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <SENS_Init+0x104>)
 800143c:	60c3      	str	r3, [r0, #12]
  SENS_RadioEvents.RxError = RxError;
 800143e:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <SENS_Init+0x108>)
 8001440:	6103      	str	r3, [r0, #16]
  SENS_RadioEvents.FhssChangeChannel = FhssChangeChannel;
 8001442:	4b39      	ldr	r3, [pc, #228]	@ (8001528 <SENS_Init+0x10c>)
 8001444:	6143      	str	r3, [r0, #20]
  SENS_RadioEvents.CadDone = CadDone;
 8001446:	4b39      	ldr	r3, [pc, #228]	@ (800152c <SENS_Init+0x110>)
 8001448:	6183      	str	r3, [r0, #24]
  Radio.Init(&SENS_RadioEvents);
 800144a:	4e39      	ldr	r6, [pc, #228]	@ (8001530 <SENS_Init+0x114>)
 800144c:	6833      	ldr	r3, [r6, #0]
 800144e:	4798      	blx	r3
  Radio.SetModem(MODEM_LORA);
 8001450:	68b3      	ldr	r3, [r6, #8]
 8001452:	2001      	movs	r0, #1
 8001454:	4798      	blx	r3
  Radio.SetPublicNetwork(false);        /*Set to private network*/
 8001456:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8001458:	2000      	movs	r0, #0
 800145a:	4798      	blx	r3
  Radio.Standby();
 800145c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800145e:	4798      	blx	r3
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001460:	4b34      	ldr	r3, [pc, #208]	@ (8001534 <SENS_Init+0x118>)
 8001462:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  SENS.Header.eui = LL_FLASH_GetUDN();  /*Get EUI from HW*/
 8001466:	4d34      	ldr	r5, [pc, #208]	@ (8001538 <SENS_Init+0x11c>)
 8001468:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
  APP_LOG(TS_OFF, VLEVEL_L, "eui=0x%08x\r\n", SENS.Header.eui);        /*Print eui to console*/
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	4b33      	ldr	r3, [pc, #204]	@ (800153c <SENS_Init+0x120>)
 8001470:	2200      	movs	r2, #0
 8001472:	4611      	mov	r1, r2
 8001474:	2001      	movs	r0, #1
 8001476:	f007 fd8b 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
  SENS.Header.packet_cnt = 0;
 800147a:	2400      	movs	r4, #0
 800147c:	f885 40b4 	strb.w	r4, [r5, #180]	@ 0xb4
  SENS.Header.version_major = VERSION_MAJOR;
 8001480:	f895 30b5 	ldrb.w	r3, [r5, #181]	@ 0xb5
 8001484:	2201      	movs	r2, #1
 8001486:	f362 0302 	bfi	r3, r2, #0, #3
 800148a:	f885 30b5 	strb.w	r3, [r5, #181]	@ 0xb5
  SENS.Header.version_minor = VERSION_MINOR;
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f364 03c7 	bfi	r3, r4, #3, #5
 8001494:	f885 30b5 	strb.w	r3, [r5, #181]	@ 0xb5
  SENS.GetDataCallback = GetDataCallback;
 8001498:	f8c5 8084 	str.w	r8, [r5, #132]	@ 0x84
  SENS.ActivityCallback = ActivityCallback;
 800149c:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
  SENS.BeaconTime = 0;
 80014a0:	f8c5 4094 	str.w	r4, [r5, #148]	@ 0x94
  SENS.ReceivingBeacon = false;
 80014a4:	f885 40ad 	strb.w	r4, [r5, #173]	@ 0xad
  SENS.ReceivingSync = false;
 80014a8:	f885 40ae 	strb.w	r4, [r5, #174]	@ 0xae
  UTIL_TIMER_Create(&SENS.BeaconTimer, 0, UTIL_TIMER_ONESHOT, ReceiveBeacon, NULL);
 80014ac:	9400      	str	r4, [sp, #0]
 80014ae:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <SENS_Init+0x124>)
 80014b0:	4622      	mov	r2, r4
 80014b2:	4621      	mov	r1, r4
 80014b4:	f105 0018 	add.w	r0, r5, #24
 80014b8:	f007 ff98 	bl	80093ec <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&SENS.SyncTimer, 0, UTIL_TIMER_ONESHOT, ReceiveSync, NULL);
 80014bc:	9400      	str	r4, [sp, #0]
 80014be:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <SENS_Init+0x128>)
 80014c0:	4622      	mov	r2, r4
 80014c2:	4621      	mov	r1, r4
 80014c4:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80014c8:	f007 ff90 	bl	80093ec <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&SENS.TransmitTimer, 0, UTIL_TIMER_ONESHOT, Transmit, NULL);
 80014cc:	9400      	str	r4, [sp, #0]
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <SENS_Init+0x12c>)
 80014d0:	4622      	mov	r2, r4
 80014d2:	4621      	mov	r1, r4
 80014d4:	4628      	mov	r0, r5
 80014d6:	f007 ff89 	bl	80093ec <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&SENS.ReceiveTimer, 0, UTIL_TIMER_ONESHOT, ReceiveTimeout, NULL);
 80014da:	9400      	str	r4, [sp, #0]
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <SENS_Init+0x130>)
 80014de:	4622      	mov	r2, r4
 80014e0:	4621      	mov	r1, r4
 80014e2:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80014e6:	f007 ff81 	bl	80093ec <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&SENS.CadTimer, SENS_CAD_TIMEOUT, UTIL_TIMER_ONESHOT, CadTimeout, NULL);
 80014ea:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 80014ec:	4798      	blx	r3
 80014ee:	9400      	str	r4, [sp, #0]
 80014f0:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <SENS_Init+0x134>)
 80014f2:	4622      	mov	r2, r4
 80014f4:	f100 0132 	add.w	r1, r0, #50	@ 0x32
 80014f8:	f105 0060 	add.w	r0, r5, #96	@ 0x60
 80014fc:	f007 ff76 	bl	80093ec <UTIL_TIMER_Create>
  StartScanning();
 8001500:	f7ff fd2e 	bl	8000f60 <StartScanning>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001504:	f389 8810 	msr	PRIMASK, r9
}
 8001508:	4620      	mov	r0, r4
 800150a:	b003      	add	sp, #12
 800150c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001510:	20000084 	.word	0x20000084
 8001514:	080005fd 	.word	0x080005fd
 8001518:	080005dd 	.word	0x080005dd
 800151c:	08001301 	.word	0x08001301
 8001520:	08000739 	.word	0x08000739
 8001524:	080005c9 	.word	0x080005c9
 8001528:	08000521 	.word	0x08000521
 800152c:	08000969 	.word	0x08000969
 8001530:	0800aa84 	.word	0x0800aa84
 8001534:	1fff7000 	.word	0x1fff7000
 8001538:	200000a0 	.word	0x200000a0
 800153c:	0800a2d0 	.word	0x0800a2d0
 8001540:	08000845 	.word	0x08000845
 8001544:	08000775 	.word	0x08000775
 8001548:	08000b01 	.word	0x08000b01
 800154c:	080009d5 	.word	0x080009d5
 8001550:	08000711 	.word	0x08000711

08001554 <SENS_WriteSensorData>:
{
 8001554:	b510      	push	{r4, lr}
 8001556:	4604      	mov	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "Sensor data written\r\n");
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <SENS_WriteSensorData+0x28>)
 800155a:	2201      	movs	r2, #1
 800155c:	2100      	movs	r1, #0
 800155e:	2002      	movs	r0, #2
 8001560:	f007 fd16 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001564:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
  memcpy(SENS.Data, Data, sizeof(DEMO_data_1_0_t));  /*Store data*/
 800156a:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <SENS_WriteSensorData+0x2c>)
 800156c:	8820      	ldrh	r0, [r4, #0]
 800156e:	78a1      	ldrb	r1, [r4, #2]
 8001570:	8018      	strh	r0, [r3, #0]
 8001572:	7099      	strb	r1, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001574:	f382 8810 	msr	PRIMASK, r2
}
 8001578:	bd10      	pop	{r4, pc}
 800157a:	bf00      	nop
 800157c:	0800a2e0 	.word	0x0800a2e0
 8001580:	20000156 	.word	0x20000156

08001584 <SENS_GetState>:
}
 8001584:	4b01      	ldr	r3, [pc, #4]	@ (800158c <SENS_GetState+0x8>)
 8001586:	f893 00af 	ldrb.w	r0, [r3, #175]	@ 0xaf
 800158a:	4770      	bx	lr
 800158c:	200000a0 	.word	0x200000a0

08001590 <DEMO_WaitForFreeChannel>:
  * @param Scan time for which the channel needs to be free [ms]
  * @param MaxWait Wait maximally this long before giving up [ms]
  * @return true if the channel is free, false if the channel is busy
  */
bool DEMO_WaitForFreeChannel(RadioModems_t Modem, int16_t RssiThreshold, uint32_t Scan, uint32_t MaxWait)
{
 8001590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001594:	4680      	mov	r8, r0
 8001596:	460f      	mov	r7, r1
 8001598:	4692      	mov	sl, r2
 800159a:	461e      	mov	r6, r3
  UTIL_TIMER_Time_t start = UTIL_TIMER_GetCurrentTime();    /*Time when this business started*/
 800159c:	f007 ff4a 	bl	8009434 <UTIL_TIMER_GetCurrentTime>
 80015a0:	4605      	mov	r5, r0
  UTIL_TIMER_Time_t now = start;      /*Current time, to save on reading from RTC calendar*/
  UTIL_TIMER_Time_t free_from;        /*Last time when the channel was busy*/

  Radio.Rx(0);
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <DEMO_WaitForFreeChannel+0x68>)
 80015a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a6:	2000      	movs	r0, #0
 80015a8:	4798      	blx	r3
  RADIO_DELAY_MS(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f000 fdca 	bl	8002144 <HAL_Delay>

  free_from = UTIL_TIMER_GetCurrentTime();    /*Do not count radio init to the free time*/
 80015b0:	f007 ff40 	bl	8009434 <UTIL_TIMER_GetCurrentTime>
 80015b4:	4681      	mov	r9, r0
  UTIL_TIMER_Time_t now = start;      /*Current time, to save on reading from RTC calendar*/
 80015b6:	462c      	mov	r4, r5

  while ((now - start) < MaxWait)       /*Check maximal time limit*/
 80015b8:	e005      	b.n	80015c6 <DEMO_WaitForFreeChannel+0x36>
 80015ba:	f38b 8810 	msr	PRIMASK, fp
      free_from = now;  /*Reset time when the channel became free*/
    }
    else        /*Channel is currently free*/
    {
      UTILS_EXIT_CRITICAL_SECTION();
      if ((now - free_from) > Scan) /*Channel is free for needed time*/
 80015be:	eba4 0309 	sub.w	r3, r4, r9
 80015c2:	4553      	cmp	r3, sl
 80015c4:	d815      	bhi.n	80015f2 <DEMO_WaitForFreeChannel+0x62>
  while ((now - start) < MaxWait)       /*Check maximal time limit*/
 80015c6:	1b64      	subs	r4, r4, r5
 80015c8:	42b4      	cmp	r4, r6
 80015ca:	d20f      	bcs.n	80015ec <DEMO_WaitForFreeChannel+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015cc:	f3ef 8b10 	mrs	fp, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
    now = UTIL_TIMER_GetCurrentTime();
 80015d2:	f007 ff2f 	bl	8009434 <UTIL_TIMER_GetCurrentTime>
 80015d6:	4604      	mov	r4, r0
    if (Radio.Rssi(Modem) > RssiThreshold)     /*Channel is currently busy*/
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <DEMO_WaitForFreeChannel+0x68>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	4640      	mov	r0, r8
 80015de:	4798      	blx	r3
 80015e0:	42b8      	cmp	r0, r7
 80015e2:	ddea      	ble.n	80015ba <DEMO_WaitForFreeChannel+0x2a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015e4:	f38b 8810 	msr	PRIMASK, fp
      free_from = now;  /*Reset time when the channel became free*/
 80015e8:	46a1      	mov	r9, r4
 80015ea:	e7ec      	b.n	80015c6 <DEMO_WaitForFreeChannel+0x36>
        return true;
      }
    }
  }

  return false;     /*Channel is busy and time is up*/
 80015ec:	2000      	movs	r0, #0
}
 80015ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return true;
 80015f2:	2001      	movs	r0, #1
 80015f4:	e7fb      	b.n	80015ee <DEMO_WaitForFreeChannel+0x5e>
 80015f6:	bf00      	nop
 80015f8:	0800aa84 	.word	0x0800aa84

080015fc <DEMO_GetShaping>:
  * @param coding FSH coding
  * @return shaping
  */
RadioModShapings_t DEMO_GetShaping(const DEMO_coding_fsk_t *coding)
{
  switch (coding->bt)
 80015fc:	79c3      	ldrb	r3, [r0, #7]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	3b01      	subs	r3, #1
 8001604:	2b03      	cmp	r3, #3
 8001606:	d803      	bhi.n	8001610 <DEMO_GetShaping+0x14>
 8001608:	e8df f003 	tbb	[pc, r3]
 800160c:	0806040a 	.word	0x0806040a
 8001610:	2000      	movs	r0, #0
 8001612:	4770      	bx	lr
    default:    /*Off*/
      return MOD_SHAPING_OFF;
    case 1:     /*0.3*/
      return MOD_SHAPING_G_BT_03;
    case 2:     /*0.5*/
      return MOD_SHAPING_G_BT_05;
 8001614:	2009      	movs	r0, #9
 8001616:	4770      	bx	lr
    case 3:     /*0.7*/
      return MOD_SHAPING_G_BT_07;
 8001618:	200a      	movs	r0, #10
 800161a:	4770      	bx	lr
    case 4:     /*1*/
      return MOD_SHAPING_G_BT_1;
 800161c:	200b      	movs	r0, #11
 800161e:	4770      	bx	lr
      return MOD_SHAPING_G_BT_03;
 8001620:	2008      	movs	r0, #8

  }
}
 8001622:	4770      	bx	lr

08001624 <DEMO_GetRampUp>:
  * @param coding FSK coding
  * @return ramp up
  */
RadioRampTimes_t DEMO_GetRampUp(const DEMO_coding_fsk_t *coding)
{
  return (RadioRampTimes_t)coding->rise;        /*Values fit*/
 8001624:	78c0      	ldrb	r0, [r0, #3]
}
 8001626:	f000 0007 	and.w	r0, r0, #7
 800162a:	4770      	bx	lr

0800162c <DEMO_GetSpreadingFactor>:
  * @param coding LoRa coding
  * @return spreading factor
  */
RadioLoRaSpreadingFactors_t DEMO_GetSpreadingFactor(const DEMO_coding_lora_t *coding)
{
  return (RadioLoRaSpreadingFactors_t)coding->sf;       /*Values fit*/
 800162c:	7840      	ldrb	r0, [r0, #1]
}
 800162e:	f000 000f 	and.w	r0, r0, #15
 8001632:	4770      	bx	lr

08001634 <DEMO_GetBandwidth>:
  * @param coding LoRa coding
  * @return spreading factor
  */
RadioLoRaBandwidths_t DEMO_GetBandwidth(const DEMO_coding_lora_t *coding)
{
  switch (coding->bw)
 8001634:	7803      	ldrb	r3, [r0, #0]
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	3b01      	subs	r3, #1
 800163a:	2b08      	cmp	r3, #8
 800163c:	d806      	bhi.n	800164c <DEMO_GetBandwidth+0x18>
 800163e:	e8df f003 	tbb	[pc, r3]
 8001642:	0717      	.short	0x0717
 8001644:	0f0d0b09 	.word	0x0f0d0b09
 8001648:	1311      	.short	0x1311
 800164a:	15          	.byte	0x15
 800164b:	00          	.byte	0x00
 800164c:	2000      	movs	r0, #0
 800164e:	4770      	bx	lr
    default:     /*7.8 kHz*/
      return LORA_BW_007;
    case 1:     /*10.4 kHz*/
      return LORA_BW_010;
    case 2:     /*15.6 kHz*/
      return LORA_BW_015;
 8001650:	2001      	movs	r0, #1
 8001652:	4770      	bx	lr
    case 3:     /*20.8 kHz*/
      return LORA_BW_020;
 8001654:	2009      	movs	r0, #9
 8001656:	4770      	bx	lr
    case 4:     /*31.25 kHz*/
      return LORA_BW_031;
 8001658:	2002      	movs	r0, #2
 800165a:	4770      	bx	lr
    case 5:     /*41.7 kHz*/
      return LORA_BW_041;
 800165c:	200a      	movs	r0, #10
 800165e:	4770      	bx	lr
    case 6:     /*62.5 kHz*/
      return LORA_BW_062;
 8001660:	2003      	movs	r0, #3
 8001662:	4770      	bx	lr
    case 7:     /*125 kHz*/
      return LORA_BW_125;
 8001664:	2004      	movs	r0, #4
 8001666:	4770      	bx	lr
    case 8:     /*250 kHz*/
      return LORA_BW_250;
 8001668:	2005      	movs	r0, #5
 800166a:	4770      	bx	lr
    case 9:     /*500 kHz*/
      return LORA_BW_500;
 800166c:	2006      	movs	r0, #6
 800166e:	4770      	bx	lr
      return LORA_BW_010;
 8001670:	2008      	movs	r0, #8
  }
}
 8001672:	4770      	bx	lr

08001674 <DEMO_GetCoderate>:
  * @param coding LoRa coding
  * @return spreading factor
  */
RadioLoRaCodingRates_t DEMO_GetCoderate(const DEMO_coding_lora_t *coding)
{
  return (RadioLoRaCodingRates_t)coding->cr;    /*Values fit*/
 8001674:	7800      	ldrb	r0, [r0, #0]
}
 8001676:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800167a:	4770      	bx	lr

0800167c <CheckLimits>:
  * @param max upper limit
  * @return output limited variable
  */
static int CheckLimits(int input, int min, int max)
{
  if (input < min)
 800167c:	4288      	cmp	r0, r1
 800167e:	db02      	blt.n	8001686 <CheckLimits+0xa>
  {
    return min;
  }
  else if (input > max)
 8001680:	4290      	cmp	r0, r2
 8001682:	dc02      	bgt.n	800168a <CheckLimits+0xe>
 8001684:	4770      	bx	lr
    return min;
 8001686:	4608      	mov	r0, r1
 8001688:	4770      	bx	lr
  {
    return max;
 800168a:	4610      	mov	r0, r2
  }

  return input;
}
 800168c:	4770      	bx	lr
	...

08001690 <DEMO_TimeOnAirLora>:
{
 8001690:	b500      	push	{lr}
 8001692:	4684      	mov	ip, r0
  t_s = (1000000 << Coding->sf) / DEMO_BW_TO_HZ(Coding->bw); /*Symbol time [us]*/
 8001694:	7843      	ldrb	r3, [r0, #1]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <DEMO_TimeOnAirLora+0x68>)
 800169c:	409a      	lsls	r2, r3
 800169e:	7800      	ldrb	r0, [r0, #0]
 80016a0:	288f      	cmp	r0, #143	@ 0x8f
 80016a2:	d827      	bhi.n	80016f4 <DEMO_TimeOnAirLora+0x64>
 80016a4:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 80016a8:	4814      	ldr	r0, [pc, #80]	@ (80016fc <DEMO_TimeOnAirLora+0x6c>)
 80016aa:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 80016ae:	fb92 f2f0 	sdiv	r2, r2, r0
  n_payload = 8 + DEMO_MAX(
 80016b2:	ebc3 0041 	rsb	r0, r3, r1, lsl #1
 80016b6:	300b      	adds	r0, #11
 80016b8:	f89c 1000 	ldrb.w	r1, [ip]
 80016bc:	f001 0c01 	and.w	ip, r1, #1
 80016c0:	eba3 034c 	sub.w	r3, r3, ip, lsl #1
 80016c4:	4418      	add	r0, r3
 80016c6:	0080      	lsls	r0, r0, #2
 80016c8:	3801      	subs	r0, #1
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	fb90 f0f3 	sdiv	r0, r0, r3
 80016d0:	f3c1 0142 	ubfx	r1, r1, #1, #3
 80016d4:	3104      	adds	r1, #4
 80016d6:	fb01 f000 	mul.w	r0, r1, r0
 80016da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80016de:	3008      	adds	r0, #8
  return ((32 + 17 + (4 * n_payload)) * t_s / 4000); /* ((8 + 4.25 + n_payload) * t_s / 1000) */
 80016e0:	0080      	lsls	r0, r0, #2
 80016e2:	3031      	adds	r0, #49	@ 0x31
 80016e4:	fb02 f000 	mul.w	r0, r2, r0
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <DEMO_TimeOnAirLora+0x70>)
 80016ea:	fba3 3000 	umull	r3, r0, r3, r0
}
 80016ee:	0a00      	lsrs	r0, r0, #8
 80016f0:	f85d fb04 	ldr.w	pc, [sp], #4
  t_s = (1000000 << Coding->sf) / DEMO_BW_TO_HZ(Coding->bw); /*Symbol time [us]*/
 80016f4:	4803      	ldr	r0, [pc, #12]	@ (8001704 <DEMO_TimeOnAirLora+0x74>)
 80016f6:	e7da      	b.n	80016ae <DEMO_TimeOnAirLora+0x1e>
 80016f8:	000f4240 	.word	0x000f4240
 80016fc:	0800a858 	.word	0x0800a858
 8001700:	10624dd3 	.word	0x10624dd3
 8001704:	0007a120 	.word	0x0007a120

08001708 <DEMO_TimeOnAirFsk>:
  return (1000 * (4 + 4 + Payload + 1 + 2) * 8) / Coding->br; /*Return packet length [ms]*/
 8001708:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800170c:	fb03 f101 	mul.w	r1, r3, r1
 8001710:	f501 31ab 	add.w	r1, r1, #87552	@ 0x15600
 8001714:	f501 71e0 	add.w	r1, r1, #448	@ 0x1c0
 8001718:	7803      	ldrb	r3, [r0, #0]
 800171a:	7842      	ldrb	r2, [r0, #1]
 800171c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001720:	7882      	ldrb	r2, [r0, #2]
 8001722:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
}
 8001726:	fbb1 f0f0 	udiv	r0, r1, r0
 800172a:	4770      	bx	lr

0800172c <DEMO_DefaultCoding>:
{
 800172c:	b500      	push	{lr}
  if ((SlotNr < 2) || (SlotNr >= DEMO_SLOT_NUMBER))
 800172e:	1e8b      	subs	r3, r1, #2
 8001730:	2b0d      	cmp	r3, #13
 8001732:	d900      	bls.n	8001736 <DEMO_DefaultCoding+0xa>
    SlotNr = 0;
 8001734:	2100      	movs	r1, #0
  Codings->hdr.data_lim = DEMO_SENSOR_MAX_PAYLOAD;
 8001736:	7843      	ldrb	r3, [r0, #1]
 8001738:	f04f 0c1a 	mov.w	ip, #26
 800173c:	f36c 0304 	bfi	r3, ip, #0, #5
 8001740:	7043      	strb	r3, [r0, #1]
  Codings->hdr.mode = DEMO_DEFAULT_LORA;
 8001742:	7803      	ldrb	r3, [r0, #0]
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	7003      	strb	r3, [r0, #0]
  Codings->hdr.period = 0;
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f36f 1347 	bfc	r3, #5, #3
 8001750:	7003      	strb	r3, [r0, #0]
  Codings->hdr.slot = SlotNr;
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f361 0303 	bfi	r3, r1, #0, #4
 8001758:	7003      	strb	r3, [r0, #0]
  Codings->hdr.chan_nr = 0;
 800175a:	7843      	ldrb	r3, [r0, #1]
 800175c:	f36f 1347 	bfc	r3, #5, #3
 8001760:	7043      	strb	r3, [r0, #1]
  Codings->lora.bw = Region->beacon_bw;
 8001762:	7a11      	ldrb	r1, [r2, #8]
 8001764:	7883      	ldrb	r3, [r0, #2]
 8001766:	f361 1307 	bfi	r3, r1, #4, #4
 800176a:	7083      	strb	r3, [r0, #2]
  Codings->lora.cr = DEMO_DEFAULT_CR;
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2101      	movs	r1, #1
 8001770:	f361 0343 	bfi	r3, r1, #1, #3
 8001774:	7083      	strb	r3, [r0, #2]
  Codings->lora.de = DEMO_DEFAULT_DE;
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f36f 0300 	bfc	r3, #0, #1
 800177c:	7083      	strb	r3, [r0, #2]
  Codings->lora.sf = Region->beacon_sf;
 800177e:	7a52      	ldrb	r2, [r2, #9]
 8001780:	78c3      	ldrb	r3, [r0, #3]
 8001782:	f362 0303 	bfi	r3, r2, #0, #4
 8001786:	70c3      	strb	r3, [r0, #3]
  Codings->fsk.br = DEMO_DEFAULT_BR;
 8001788:	2300      	movs	r3, #0
 800178a:	f04f 0c50 	mov.w	ip, #80	@ 0x50
 800178e:	f880 c004 	strb.w	ip, [r0, #4]
 8001792:	f06f 013c 	mvn.w	r1, #60	@ 0x3c
 8001796:	7141      	strb	r1, [r0, #5]
 8001798:	7183      	strb	r3, [r0, #6]
  Codings->fsk.bt = DEMO_DEFAULT_BT;
 800179a:	f890 e00b 	ldrb.w	lr, [r0, #11]
 800179e:	2202      	movs	r2, #2
 80017a0:	f362 0e02 	bfi	lr, r2, #0, #3
 80017a4:	f880 e00b 	strb.w	lr, [r0, #11]
  Codings->fsk.fdev = DEMO_DEFAULT_FDEV;
 80017a8:	f880 c008 	strb.w	ip, [r0, #8]
 80017ac:	7241      	strb	r1, [r0, #9]
 80017ae:	7283      	strb	r3, [r0, #10]
  Codings->fsk.rise = DEMO_DEFAULT_RISE;
 80017b0:	79c3      	ldrb	r3, [r0, #7]
 80017b2:	f362 0302 	bfi	r3, r2, #0, #3
 80017b6:	71c3      	strb	r3, [r0, #7]
}
 80017b8:	f85d fb04 	ldr.w	pc, [sp], #4

080017bc <DEMO_ValidateCodingHdr>:
  * @brief Validate and copy coding header.
  * @param Hdr structure to validate
  * @param Subregion pointer to subregion used to validate
  */
void DEMO_ValidateCodingHdr(DEMO_coding_hdr_t *Hdr, const DEMO_Subregion_t *Subregion)
{
 80017bc:	b570      	push	{r4, r5, r6, lr}
 80017be:	4604      	mov	r4, r0
 80017c0:	460e      	mov	r6, r1
  Hdr->data_lim = CheckLimits(Hdr->data_lim, 5, DEMO_SENSOR_MAX_PAYLOAD);
 80017c2:	7845      	ldrb	r5, [r0, #1]
 80017c4:	221a      	movs	r2, #26
 80017c6:	2105      	movs	r1, #5
 80017c8:	f005 001f 	and.w	r0, r5, #31
 80017cc:	f7ff ff56 	bl	800167c <CheckLimits>
 80017d0:	f360 0504 	bfi	r5, r0, #0, #5
 80017d4:	7065      	strb	r5, [r4, #1]

  if (Hdr->chan_nr >= Subregion->channels_n)
 80017d6:	b2ea      	uxtb	r2, r5
 80017d8:	6933      	ldr	r3, [r6, #16]
 80017da:	ebb3 1f52 	cmp.w	r3, r2, lsr #5
 80017de:	dc03      	bgt.n	80017e8 <DEMO_ValidateCodingHdr+0x2c>
  {
    Hdr->chan_nr = 0;
 80017e0:	b2eb      	uxtb	r3, r5
 80017e2:	f36f 1347 	bfc	r3, #5, #3
 80017e6:	7063      	strb	r3, [r4, #1]
  }
}
 80017e8:	bd70      	pop	{r4, r5, r6, pc}

080017ea <DEMO_ValidateCodingLora>:
/**
  * @brief Validate and copy coding parameters.
  * @param Coding structure to validate
  */
void DEMO_ValidateCodingLora(DEMO_coding_lora_t *Coding)
{
 80017ea:	b538      	push	{r3, r4, r5, lr}
 80017ec:	4604      	mov	r4, r0
  Coding->bw = CheckLimits(Coding->bw, DEMO_LORA_PARAM_BW_MIN, DEMO_LORA_PARAM_BW_MAX);
 80017ee:	7805      	ldrb	r5, [r0, #0]
 80017f0:	2209      	movs	r2, #9
 80017f2:	2100      	movs	r1, #0
 80017f4:	0928      	lsrs	r0, r5, #4
 80017f6:	f7ff ff41 	bl	800167c <CheckLimits>
 80017fa:	f360 1507 	bfi	r5, r0, #4, #4
 80017fe:	7025      	strb	r5, [r4, #0]
  Coding->cr = CheckLimits(Coding->cr, DEMO_LORA_PARAM_CR_MIN, DEMO_LORA_PARAM_CR_MAX);
 8001800:	b2ed      	uxtb	r5, r5
 8001802:	2204      	movs	r2, #4
 8001804:	2101      	movs	r1, #1
 8001806:	f3c5 0042 	ubfx	r0, r5, #1, #3
 800180a:	f7ff ff37 	bl	800167c <CheckLimits>
 800180e:	f360 0543 	bfi	r5, r0, #1, #3
 8001812:	7025      	strb	r5, [r4, #0]
  Coding->sf = CheckLimits(Coding->sf, DEMO_LORA_PARAM_SF_MIN, DEMO_LORA_PARAM_SF_MAX);
 8001814:	7865      	ldrb	r5, [r4, #1]
 8001816:	220c      	movs	r2, #12
 8001818:	2106      	movs	r1, #6
 800181a:	f005 000f 	and.w	r0, r5, #15
 800181e:	f7ff ff2d 	bl	800167c <CheckLimits>
 8001822:	f360 0503 	bfi	r5, r0, #0, #4
 8001826:	7065      	strb	r5, [r4, #1]
}
 8001828:	bd38      	pop	{r3, r4, r5, pc}
	...

0800182c <DEMO_ValidateCodingFsk>:
/**
  * @brief Validate and copy coding parameters.
  * @param Coding structure to validate
  */
void DEMO_ValidateCodingFsk(DEMO_coding_fsk_t *Coding)
{
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	4604      	mov	r4, r0
  Coding->br = CheckLimits(Coding->br, DEMO_FSK_PARAM_BR_MIN, DEMO_FSK_PARAM_BR_MAX);
 8001830:	7803      	ldrb	r3, [r0, #0]
 8001832:	7842      	ldrb	r2, [r0, #1]
 8001834:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001838:	7880      	ldrb	r0, [r0, #2]
 800183a:	4f1b      	ldr	r7, [pc, #108]	@ (80018a8 <DEMO_ValidateCodingFsk+0x7c>)
 800183c:	463a      	mov	r2, r7
 800183e:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001842:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001846:	f7ff ff19 	bl	800167c <CheckLimits>
 800184a:	2600      	movs	r6, #0
 800184c:	7020      	strb	r0, [r4, #0]
 800184e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001852:	7063      	strb	r3, [r4, #1]
 8001854:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8001858:	70a0      	strb	r0, [r4, #2]
  Coding->bt = CheckLimits(Coding->bt, DEMO_FSK_PARAM_BT_MIN, DEMO_FSK_PARAM_BT_MAX);
 800185a:	79e5      	ldrb	r5, [r4, #7]
 800185c:	2204      	movs	r2, #4
 800185e:	4631      	mov	r1, r6
 8001860:	f005 0007 	and.w	r0, r5, #7
 8001864:	f7ff ff0a 	bl	800167c <CheckLimits>
 8001868:	f360 0502 	bfi	r5, r0, #0, #3
 800186c:	71e5      	strb	r5, [r4, #7]
  Coding->fdev = CheckLimits(Coding->fdev, DEMO_FSK_PARAM_FDEV_MIN, DEMO_FSK_PARAM_FDEV_MAX);
 800186e:	7923      	ldrb	r3, [r4, #4]
 8001870:	7962      	ldrb	r2, [r4, #5]
 8001872:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001876:	79a0      	ldrb	r0, [r4, #6]
 8001878:	463a      	mov	r2, r7
 800187a:	4631      	mov	r1, r6
 800187c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001880:	f7ff fefc 	bl	800167c <CheckLimits>
 8001884:	7120      	strb	r0, [r4, #4]
 8001886:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800188a:	7163      	strb	r3, [r4, #5]
 800188c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8001890:	71a0      	strb	r0, [r4, #6]
  Coding->rise = CheckLimits(Coding->rise, DEMO_FSK_PARAM_RISE_MIN, DEMO_FSK_PARAM_RISE_MAX);
 8001892:	78e5      	ldrb	r5, [r4, #3]
 8001894:	2207      	movs	r2, #7
 8001896:	4631      	mov	r1, r6
 8001898:	ea05 0002 	and.w	r0, r5, r2
 800189c:	f7ff feee 	bl	800167c <CheckLimits>
 80018a0:	f360 0502 	bfi	r5, r0, #0, #3
 80018a4:	70e5      	strb	r5, [r4, #3]
}
 80018a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a8:	000493e0 	.word	0x000493e0

080018ac <DEMO_CountFreeSlots>:
  * @return number of free slots
  */
uint32_t DEMO_CountFreeSlots(uint16_t Occupied)
{
  uint32_t free_slots = DEMO_SLOT_NUMBER - 2;   /*Slots 0 and 1 are taken by Beacon and Sync*/
  for (uint16_t oc_copy = (Occupied & ~0x3); (free_slots > 0) && (oc_copy != 0x0000); free_slots--)
 80018ac:	f020 0303 	bic.w	r3, r0, #3
 80018b0:	b29b      	uxth	r3, r3
  uint32_t free_slots = DEMO_SLOT_NUMBER - 2;   /*Slots 0 and 1 are taken by Beacon and Sync*/
 80018b2:	200e      	movs	r0, #14
  for (uint16_t oc_copy = (Occupied & ~0x3); (free_slots > 0) && (oc_copy != 0x0000); free_slots--)
 80018b4:	e002      	b.n	80018bc <DEMO_CountFreeSlots+0x10>
  {
    oc_copy &= oc_copy - 1; /*Remove least significant 1*/
 80018b6:	1e5a      	subs	r2, r3, #1
 80018b8:	4013      	ands	r3, r2
  for (uint16_t oc_copy = (Occupied & ~0x3); (free_slots > 0) && (oc_copy != 0x0000); free_slots--)
 80018ba:	3801      	subs	r0, #1
 80018bc:	b108      	cbz	r0, 80018c2 <DEMO_CountFreeSlots+0x16>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f9      	bne.n	80018b6 <DEMO_CountFreeSlots+0xa>
  }
  return free_slots;
}
 80018c2:	4770      	bx	lr

080018c4 <DEMO_ChooseRandomSlot>:
  * @param Occupied mask of occupied slots, true if occupied, slot 0 and slot 1 are reserved
  * @param Random random input for the random selection (should be much larger than number of channels)
  * @return selected slot number
  */
uint32_t DEMO_ChooseRandomSlot(uint16_t Occupied, uint32_t Random)
{
 80018c4:	b538      	push	{r3, r4, r5, lr}
 80018c6:	4604      	mov	r4, r0
 80018c8:	460d      	mov	r5, r1
  uint32_t random_nr = DEMO_CountFreeSlots(Occupied); /*Get number of free slots*/
 80018ca:	f7ff ffef 	bl	80018ac <DEMO_CountFreeSlots>
  if (random_nr == 0)
 80018ce:	4603      	mov	r3, r0
 80018d0:	b198      	cbz	r0, 80018fa <DEMO_ChooseRandomSlot+0x36>
  {
    return 0;   /*No slot left*/
  }
  random_nr = (Random % random_nr) + 1;   /*Get random number between 1 and number of free slots*/
 80018d2:	fbb5 f2f0 	udiv	r2, r5, r0
 80018d6:	fb00 5112 	mls	r1, r0, r2, r5
 80018da:	3101      	adds	r1, #1

  /*Offset for used slots*/
  uint32_t slot;
  for (slot = 1; (slot < DEMO_SLOT_NUMBER) && (random_nr > 0); random_nr--)
 80018dc:	2301      	movs	r3, #1
 80018de:	e006      	b.n	80018ee <DEMO_ChooseRandomSlot+0x2a>
  {
    do
    {
      slot++; /*Find next free slot*/
 80018e0:	3301      	adds	r3, #1
    } while ((Occupied & (1 << slot)) != 0);
 80018e2:	fa44 f203 	asr.w	r2, r4, r3
 80018e6:	f012 0f01 	tst.w	r2, #1
 80018ea:	d1f9      	bne.n	80018e0 <DEMO_ChooseRandomSlot+0x1c>
  for (slot = 1; (slot < DEMO_SLOT_NUMBER) && (random_nr > 0); random_nr--)
 80018ec:	3901      	subs	r1, #1
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	d801      	bhi.n	80018f6 <DEMO_ChooseRandomSlot+0x32>
 80018f2:	2900      	cmp	r1, #0
 80018f4:	d1f4      	bne.n	80018e0 <DEMO_ChooseRandomSlot+0x1c>
  }

  if (slot == DEMO_SLOT_NUMBER) /*Error, this shouldn't happen*/
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d001      	beq.n	80018fe <DEMO_ChooseRandomSlot+0x3a>
  {
    return 0;
  }

  return slot;
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	e7fb      	b.n	80018fa <DEMO_ChooseRandomSlot+0x36>
	...

08001904 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001904:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001906:	4813      	ldr	r0, [pc, #76]	@ (8001954 <MX_ADC_Init+0x50>)
 8001908:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <MX_ADC_Init+0x54>)
 800190a:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800190c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001910:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001912:	2300      	movs	r3, #0
 8001914:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001916:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001918:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800191a:	2204      	movs	r2, #4
 800191c:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800191e:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001920:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001922:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8001924:	2201      	movs	r2, #1
 8001926:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001928:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800192c:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800192e:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001930:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001934:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001938:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800193a:	2207      	movs	r2, #7
 800193c:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800193e:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001940:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001944:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001946:	f000 ff9f 	bl	8002888 <HAL_ADC_Init>
 800194a:	b900      	cbnz	r0, 800194e <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800194c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800194e:	f000 fa21 	bl	8001d94 <Error_Handler>
}
 8001952:	e7fb      	b.n	800194c <MX_ADC_Init+0x48>
 8001954:	2000016c 	.word	0x2000016c
 8001958:	40012400 	.word	0x40012400

0800195c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 800195c:	6802      	ldr	r2, [r0, #0]
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_ADC_MspInit+0x28>)
 8001960:	429a      	cmp	r2, r3
 8001962:	d000      	beq.n	8001966 <HAL_ADC_MspInit+0xa>
 8001964:	4770      	bx	lr
{
 8001966:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800196e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001972:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800197a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800197c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800197e:	b002      	add	sp, #8
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40012400 	.word	0x40012400

08001988 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001988:	6802      	ldr	r2, [r0, #0]
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_ADC_MspDeInit+0x18>)
 800198c:	429a      	cmp	r2, r3
 800198e:	d000      	beq.n	8001992 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001990:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001992:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001996:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001998:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800199c:	6613      	str	r3, [r2, #96]	@ 0x60
 800199e:	e7f7      	b.n	8001990 <HAL_ADC_MspDeInit+0x8>
 80019a0:	40012400 	.word	0x40012400

080019a4 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80019a4:	b530      	push	{r4, r5, lr}
 80019a6:	b085      	sub	sp, #20
 80019a8:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 80019aa:	2300      	movs	r3, #0
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 80019b2:	f7ff ffa7 	bl	8001904 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80019b6:	4816      	ldr	r0, [pc, #88]	@ (8001a10 <ADC_ReadChannels+0x6c>)
 80019b8:	f001 fb9e 	bl	80030f8 <HAL_ADCEx_Calibration_Start>
 80019bc:	b9f8      	cbnz	r0, 80019fe <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80019be:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80019c4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019c6:	a901      	add	r1, sp, #4
 80019c8:	4811      	ldr	r0, [pc, #68]	@ (8001a10 <ADC_ReadChannels+0x6c>)
 80019ca:	f001 f8d7 	bl	8002b7c <HAL_ADC_ConfigChannel>
 80019ce:	b9c8      	cbnz	r0, 8001a04 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80019d0:	480f      	ldr	r0, [pc, #60]	@ (8001a10 <ADC_ReadChannels+0x6c>)
 80019d2:	f001 fa95 	bl	8002f00 <HAL_ADC_Start>
 80019d6:	b9c0      	cbnz	r0, 8001a0a <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80019d8:	4c0d      	ldr	r4, [pc, #52]	@ (8001a10 <ADC_ReadChannels+0x6c>)
 80019da:	f04f 31ff 	mov.w	r1, #4294967295
 80019de:	4620      	mov	r0, r4
 80019e0:	f001 f86a 	bl	8002ab8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80019e4:	4620      	mov	r0, r4
 80019e6:	f001 fb67 	bl	80030b8 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80019ea:	4620      	mov	r0, r4
 80019ec:	f001 f8c3 	bl	8002b76 <HAL_ADC_GetValue>
 80019f0:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80019f2:	4620      	mov	r0, r4
 80019f4:	f001 fb00 	bl	8002ff8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80019f8:	4628      	mov	r0, r5
 80019fa:	b005      	add	sp, #20
 80019fc:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80019fe:	f000 f9c9 	bl	8001d94 <Error_Handler>
 8001a02:	e7dc      	b.n	80019be <ADC_ReadChannels+0x1a>
    Error_Handler();
 8001a04:	f000 f9c6 	bl	8001d94 <Error_Handler>
 8001a08:	e7e2      	b.n	80019d0 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8001a0a:	f000 f9c3 	bl	8001d94 <Error_Handler>
 8001a0e:	e7e3      	b.n	80019d8 <ADC_ReadChannels+0x34>
 8001a10:	2000016c 	.word	0x2000016c

08001a14 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8001a14:	4b01      	ldr	r3, [pc, #4]	@ (8001a1c <SYS_InitMeasurement+0x8>)
 8001a16:	4a02      	ldr	r2, [pc, #8]	@ (8001a20 <SYS_InitMeasurement+0xc>)
 8001a18:	601a      	str	r2, [r3, #0]
}
 8001a1a:	4770      	bx	lr
 8001a1c:	2000016c 	.word	0x2000016c
 8001a20:	40012400 	.word	0x40012400

08001a24 <SYS_GetBatteryLevel>:
{
 8001a24:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001a26:	480d      	ldr	r0, [pc, #52]	@ (8001a5c <SYS_GetBatteryLevel+0x38>)
 8001a28:	f7ff ffbc 	bl	80019a4 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8001a2c:	b1a0      	cbz	r0, 8001a58 <SYS_GetBatteryLevel+0x34>
 8001a2e:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001a30:	4a0b      	ldr	r2, [pc, #44]	@ (8001a60 <SYS_GetBatteryLevel+0x3c>)
 8001a32:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	@ 0xaa
 8001a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a3a:	4290      	cmp	r0, r2
 8001a3c:	d007      	beq.n	8001a4e <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001a3e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001a42:	fb02 f000 	mul.w	r0, r2, r0
 8001a46:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a4a:	b280      	uxth	r0, r0
 8001a4c:	e005      	b.n	8001a5a <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001a4e:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <SYS_GetBatteryLevel+0x40>)
 8001a50:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a54:	b280      	uxth	r0, r0
 8001a56:	e000      	b.n	8001a5a <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001a58:	2000      	movs	r0, #0
}
 8001a5a:	bd08      	pop	{r3, pc}
 8001a5c:	b4002000 	.word	0xb4002000
 8001a60:	1fff7500 	.word	0x1fff7500
 8001a64:	004c08d8 	.word	0x004c08d8

08001a68 <SYS_GetTemperatureLevel>:
{
 8001a68:	b510      	push	{r4, lr}
 8001a6a:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001a72:	f7ff ffd7 	bl	8001a24 <SYS_GetBatteryLevel>
 8001a76:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001a78:	4821      	ldr	r0, [pc, #132]	@ (8001b00 <SYS_GetTemperatureLevel+0x98>)
 8001a7a:	f7ff ff93 	bl	80019a4 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001a7e:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <SYS_GetTemperatureLevel+0x9c>)
 8001a80:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	@ 0xc8
 8001a84:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	@ 0xa8
 8001a88:	428a      	cmp	r2, r1
 8001a8a:	d01d      	beq.n	8001ac8 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001a8c:	fb00 f304 	mul.w	r3, r0, r4
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	481d      	ldr	r0, [pc, #116]	@ (8001b08 <SYS_GetTemperatureLevel+0xa0>)
 8001a94:	fba0 0303 	umull	r0, r3, r0, r3
 8001a98:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001a9c:	2064      	movs	r0, #100	@ 0x64
 8001a9e:	fb00 f303 	mul.w	r3, r0, r3
 8001aa2:	1a52      	subs	r2, r2, r1
 8001aa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8001aa8:	331e      	adds	r3, #30
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001ab0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001abe:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8001ac2:	b200      	sxth	r0, r0
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001ac8:	fb04 f000 	mul.w	r0, r4, r0
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <SYS_GetTemperatureLevel+0xa4>)
 8001ace:	fba3 2300 	umull	r2, r3, r3, r0
 8001ad2:	1ac4      	subs	r4, r0, r3
 8001ad4:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001ad8:	0adb      	lsrs	r3, r3, #11
 8001ada:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8001ae6:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <SYS_GetTemperatureLevel+0xa8>)
 8001aec:	fb82 1203 	smull	r1, r2, r2, r3
 8001af0:	17db      	asrs	r3, r3, #31
 8001af2:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 8001af6:	331e      	adds	r3, #30
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001afe:	e7d7      	b.n	8001ab0 <SYS_GetTemperatureLevel+0x48>
 8001b00:	b0001000 	.word	0xb0001000
 8001b04:	1fff7500 	.word	0x1fff7500
 8001b08:	09ee009f 	.word	0x09ee009f
 8001b0c:	00100101 	.word	0x00100101
 8001b10:	68db8bad 	.word	0x68db8bad

08001b14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b14:	b500      	push	{lr}
 8001b16:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001b1e:	f042 0204 	orr.w	r2, r2, #4
 8001b22:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001b26:	f002 0204 	and.w	r2, r2, #4
 8001b2a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001b2c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001b30:	f042 0201 	orr.w	r2, r2, #1
 8001b34:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001b3e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2102      	movs	r1, #2
 8001b44:	200f      	movs	r0, #15
 8001b46:	f001 fbdd 	bl	8003304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b4a:	200f      	movs	r0, #15
 8001b4c:	f001 fbea 	bl	8003324 <HAL_NVIC_EnableIRQ>

}
 8001b50:	b003      	add	sp, #12
 8001b52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001b58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b5c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	2400      	movs	r4, #0
 8001b60:	9403      	str	r4, [sp, #12]
 8001b62:	9404      	str	r4, [sp, #16]
 8001b64:	9405      	str	r4, [sp, #20]
 8001b66:	9406      	str	r4, [sp, #24]
 8001b68:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b70:	f042 0202 	orr.w	r2, r2, #2
 8001b74:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b78:	f002 0202 	and.w	r2, r2, #2
 8001b7c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b7e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b82:	f042 0204 	orr.w	r2, r2, #4
 8001b86:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b8a:	f002 0204 	and.w	r2, r2, #4
 8001b8e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001b90:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001ba2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001ba4:	4e1a      	ldr	r6, [pc, #104]	@ (8001c10 <MX_GPIO_Init+0xb8>)
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 8001bac:	4630      	mov	r0, r6
 8001bae:	f001 ff97 	bl	8003ae0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001bb2:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8001bb6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2501      	movs	r5, #1
 8001bba:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc2:	a903      	add	r1, sp, #12
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f001 fe3b 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8001bca:	f04f 0803 	mov.w	r8, #3
 8001bce:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bd2:	f44f 1704 	mov.w	r7, #2162688	@ 0x210000
 8001bd6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	a903      	add	r1, sp, #12
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be0:	f001 fe2e 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001be4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001be8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bea:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	a903      	add	r1, sp, #12
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	f001 fe23 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001bfa:	2340      	movs	r3, #64	@ 0x40
 8001bfc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bfe:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c00:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8001c02:	a903      	add	r1, sp, #12
 8001c04:	4803      	ldr	r0, [pc, #12]	@ (8001c14 <MX_GPIO_Init+0xbc>)
 8001c06:	f001 fe1b 	bl	8003840 <HAL_GPIO_Init>

}
 8001c0a:	b008      	add	sp, #32
 8001c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c10:	48000400 	.word	0x48000400
 8001c14:	48000800 	.word	0x48000800

08001c18 <LedsOff>:
/**
 * @brief Turn all LEDs off.
 * Used as a timer callback.
 */
static void LedsOff(void* context)
{
 8001c18:	b510      	push	{r4, lr}
  UNUSED(context);

#if SENS_LED_BLINK != 0
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8001c1a:	4c0a      	ldr	r4, [pc, #40]	@ (8001c44 <LedsOff+0x2c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c22:	4620      	mov	r0, r4
 8001c24:	f001 ff5c 	bl	8003ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f001 ff56 	bl	8003ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f001 ff50 	bl	8003ae0 <HAL_GPIO_WritePin>
#endif /*SENS_LED_BLINK*/
}
 8001c40:	bd10      	pop	{r4, pc}
 8001c42:	bf00      	nop
 8001c44:	48000400 	.word	0x48000400

08001c48 <LedBlink>:

/**
 * @brief Do a short blink with a LED.
 */
static void LedBlink(void)
{
 8001c48:	b510      	push	{r4, lr}
#if SENS_LED_BLINK != 0
  if(UTIL_TIMER_IsRunning(&LedTimer))    /*Timer is already running, LED flashing is too fast*/
 8001c4a:	4844      	ldr	r0, [pc, #272]	@ (8001d5c <LedBlink+0x114>)
 8001c4c:	f007 fbec 	bl	8009428 <UTIL_TIMER_IsRunning>
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d05b      	beq.n	8001d0c <LedBlink+0xc4>
  {
    switch(SENS_GetState())
 8001c54:	f7ff fc96 	bl	8001584 <SENS_GetState>
 8001c58:	3801      	subs	r0, #1
 8001c5a:	2803      	cmp	r0, #3
 8001c5c:	d815      	bhi.n	8001c8a <LedBlink+0x42>
 8001c5e:	e8df f000 	tbb	[pc, r0]
 8001c62:	422f      	.short	0x422f
 8001c64:	021c      	.short	0x021c
    {
      case SENS_STATE_Connect:
        HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 8001c66:	4c3e      	ldr	r4, [pc, #248]	@ (8001d60 <LedBlink+0x118>)
 8001c68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f001 ff3c 	bl	8003aea <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8001c72:	2200      	movs	r2, #0
 8001c74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f001 ff31 	bl	8003ae0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c84:	4620      	mov	r0, r4
 8001c86:	f001 ff2b 	bl	8003ae0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
        break;
      default: break;
    }
    UTIL_TIMER_Stop(&LedTimer);
 8001c8a:	4c34      	ldr	r4, [pc, #208]	@ (8001d5c <LedBlink+0x114>)
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f007 fc11 	bl	80094b4 <UTIL_TIMER_Stop>
    UTIL_TIMER_Start(&LedTimer);
 8001c92:	4620      	mov	r0, r4
 8001c94:	f007 fc68 	bl	8009568 <UTIL_TIMER_Start>
      default: break;
    }
    UTIL_TIMER_Start(&LedTimer);
  }
#endif /*SENS_LED_BLINK*/
}
 8001c98:	bd10      	pop	{r4, pc}
        HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8001c9a:	4c31      	ldr	r4, [pc, #196]	@ (8001d60 <LedBlink+0x118>)
 8001c9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f001 ff22 	bl	8003aea <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cac:	4620      	mov	r0, r4
 8001cae:	f001 ff17 	bl	8003ae0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f001 ff11 	bl	8003ae0 <HAL_GPIO_WritePin>
        break;
 8001cbe:	e7e4      	b.n	8001c8a <LedBlink+0x42>
        HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8001cc0:	4c27      	ldr	r4, [pc, #156]	@ (8001d60 <LedBlink+0x118>)
 8001cc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f001 ff0f 	bl	8003aea <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f001 ff04 	bl	8003ae0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f001 fefe 	bl	8003ae0 <HAL_GPIO_WritePin>
        break;
 8001ce4:	e7d1      	b.n	8001c8a <LedBlink+0x42>
        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); /* LED_BLUE */
 8001ce6:	4c1e      	ldr	r4, [pc, #120]	@ (8001d60 <LedBlink+0x118>)
 8001ce8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cec:	4620      	mov	r0, r4
 8001cee:	f001 fefc 	bl	8003aea <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f001 fef1 	bl	8003ae0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d04:	4620      	mov	r0, r4
 8001d06:	f001 feeb 	bl	8003ae0 <HAL_GPIO_WritePin>
        break;
 8001d0a:	e7be      	b.n	8001c8a <LedBlink+0x42>
    switch(SENS_GetState())
 8001d0c:	f7ff fc3a 	bl	8001584 <SENS_GetState>
 8001d10:	3801      	subs	r0, #1
 8001d12:	2803      	cmp	r0, #3
 8001d14:	d809      	bhi.n	8001d2a <LedBlink+0xe2>
 8001d16:	e8df f000 	tbb	[pc, r0]
 8001d1a:	1a13      	.short	0x1a13
 8001d1c:	020c      	.short	0x020c
        HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d24:	480e      	ldr	r0, [pc, #56]	@ (8001d60 <LedBlink+0x118>)
 8001d26:	f001 fedb 	bl	8003ae0 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&LedTimer);
 8001d2a:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <LedBlink+0x114>)
 8001d2c:	f007 fc1c 	bl	8009568 <UTIL_TIMER_Start>
}
 8001d30:	e7b2      	b.n	8001c98 <LedBlink+0x50>
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8001d32:	2201      	movs	r2, #1
 8001d34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d38:	4809      	ldr	r0, [pc, #36]	@ (8001d60 <LedBlink+0x118>)
 8001d3a:	f001 fed1 	bl	8003ae0 <HAL_GPIO_WritePin>
        break;
 8001d3e:	e7f4      	b.n	8001d2a <LedBlink+0xe2>
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8001d40:	2201      	movs	r2, #1
 8001d42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d46:	4806      	ldr	r0, [pc, #24]	@ (8001d60 <LedBlink+0x118>)
 8001d48:	f001 feca 	bl	8003ae0 <HAL_GPIO_WritePin>
        break;
 8001d4c:	e7ed      	b.n	8001d2a <LedBlink+0xe2>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <LedBlink+0x118>)
 8001d56:	f001 fec3 	bl	8003ae0 <HAL_GPIO_WritePin>
        break;
 8001d5a:	e7e6      	b.n	8001d2a <LedBlink+0xe2>
 8001d5c:	200001d0 	.word	0x200001d0
 8001d60:	48000400 	.word	0x48000400

08001d64 <WriteDataCallback>:
{
 8001d64:	b510      	push	{r4, lr}
  data.voltage=SYS_GetBatteryLevel()/50;
 8001d66:	f7ff fe5d 	bl	8001a24 <SYS_GetBatteryLevel>
 8001d6a:	4c08      	ldr	r4, [pc, #32]	@ (8001d8c <WriteDataCallback+0x28>)
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <WriteDataCallback+0x2c>)
 8001d6e:	fba3 3000 	umull	r3, r0, r3, r0
 8001d72:	0900      	lsrs	r0, r0, #4
 8001d74:	70a0      	strb	r0, [r4, #2]
  data.temperature=(SYS_GetTemperatureLevel()*100)>>8;
 8001d76:	f7ff fe77 	bl	8001a68 <SYS_GetTemperatureLevel>
 8001d7a:	2364      	movs	r3, #100	@ 0x64
 8001d7c:	fb03 f000 	mul.w	r0, r3, r0
 8001d80:	1200      	asrs	r0, r0, #8
 8001d82:	8020      	strh	r0, [r4, #0]
  SENS_WriteSensorData(&data);
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff fbe5 	bl	8001554 <SENS_WriteSensorData>
}
 8001d8a:	bd10      	pop	{r4, pc}
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	51eb851f 	.word	0x51eb851f

08001d94 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <Error_Handler+0x2>

08001d98 <SystemClock_Config>:
{
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9c:	2248      	movs	r2, #72	@ 0x48
 8001d9e:	2100      	movs	r1, #0
 8001da0:	a808      	add	r0, sp, #32
 8001da2:	f007 fcc1 	bl	8009728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da6:	2400      	movs	r4, #0
 8001da8:	9401      	str	r4, [sp, #4]
 8001daa:	9402      	str	r4, [sp, #8]
 8001dac:	9403      	str	r4, [sp, #12]
 8001dae:	9404      	str	r4, [sp, #16]
 8001db0:	9405      	str	r4, [sp, #20]
 8001db2:	9406      	str	r4, [sp, #24]
 8001db4:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001db6:	f001 fea1 	bl	8003afc <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001dba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dbe:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001dc2:	f023 0318 	bic.w	r3, r3, #24
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dce:	6813      	ldr	r3, [r2, #0]
 8001dd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001de4:	2324      	movs	r3, #36	@ 0x24
 8001de6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001de8:	2381      	movs	r3, #129	@ 0x81
 8001dea:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001dec:	2301      	movs	r3, #1
 8001dee:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001df0:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001df2:	23b0      	movs	r3, #176	@ 0xb0
 8001df4:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001df6:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df8:	a808      	add	r0, sp, #32
 8001dfa:	f002 f819 	bl	8003e30 <HAL_RCC_OscConfig>
 8001dfe:	b970      	cbnz	r0, 8001e1e <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001e00:	234f      	movs	r3, #79	@ 0x4f
 8001e02:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001e04:	2300      	movs	r3, #0
 8001e06:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e08:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e0a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e0c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001e0e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e10:	2102      	movs	r1, #2
 8001e12:	a801      	add	r0, sp, #4
 8001e14:	f002 fb3e 	bl	8004494 <HAL_RCC_ClockConfig>
 8001e18:	b918      	cbnz	r0, 8001e22 <SystemClock_Config+0x8a>
}
 8001e1a:	b01a      	add	sp, #104	@ 0x68
 8001e1c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001e1e:	f7ff ffb9 	bl	8001d94 <Error_Handler>
    Error_Handler();
 8001e22:	f7ff ffb7 	bl	8001d94 <Error_Handler>
	...

08001e28 <main>:
{
 8001e28:	b500      	push	{lr}
 8001e2a:	b083      	sub	sp, #12
  HAL_Init();
 8001e2c:	f000 fcf0 	bl	8002810 <HAL_Init>
  SystemClock_Config();
 8001e30:	f7ff ffb2 	bl	8001d98 <SystemClock_Config>
  MX_GPIO_Init();
 8001e34:	f7ff fe90 	bl	8001b58 <MX_GPIO_Init>
  SystemApp_Init();
 8001e38:	f000 f942 	bl	80020c0 <SystemApp_Init>
  UTIL_TIMER_Create(&LedTimer, 125, UTIL_TIMER_ONESHOT, LedsOff, NULL);
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	9400      	str	r4, [sp, #0]
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <main+0x48>)
 8001e42:	4622      	mov	r2, r4
 8001e44:	217d      	movs	r1, #125	@ 0x7d
 8001e46:	480b      	ldr	r0, [pc, #44]	@ (8001e74 <main+0x4c>)
 8001e48:	f007 fad0 	bl	80093ec <UTIL_TIMER_Create>
  APP_LOG(TS_OFF, VLEVEL_L,
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <main+0x50>)
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <main+0x54>)
 8001e52:	4622      	mov	r2, r4
 8001e54:	4621      	mov	r1, r4
 8001e56:	2001      	movs	r0, #1
 8001e58:	f007 f89a 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
  SENS_Init(WriteDataCallback, LedBlink);
 8001e5c:	4908      	ldr	r1, [pc, #32]	@ (8001e80 <main+0x58>)
 8001e5e:	4809      	ldr	r0, [pc, #36]	@ (8001e84 <main+0x5c>)
 8001e60:	f7ff fadc 	bl	800141c <SENS_Init>
    UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f007 f9dc 	bl	8009224 <UTIL_SEQ_Run>
  while (1)
 8001e6c:	e7fa      	b.n	8001e64 <main+0x3c>
 8001e6e:	bf00      	nop
 8001e70:	08001c19 	.word	0x08001c19
 8001e74:	200001d0 	.word	0x200001d0
 8001e78:	0800a8d0 	.word	0x0800a8d0
 8001e7c:	0800a87c 	.word	0x0800a87c
 8001e80:	08001c49 	.word	0x08001c49
 8001e84:	08001d65 	.word	0x08001d65

08001e88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e88:	b500      	push	{lr}
 8001e8a:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001e8c:	222c      	movs	r2, #44	@ 0x2c
 8001e8e:	2100      	movs	r1, #0
 8001e90:	a801      	add	r0, sp, #4
 8001e92:	f007 fc49 	bl	8009728 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e96:	4819      	ldr	r0, [pc, #100]	@ (8001efc <MX_RTC_Init+0x74>)
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <MX_RTC_Init+0x78>)
 8001e9a:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001e9c:	231f      	movs	r3, #31
 8001e9e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ea4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ea6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ea8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eac:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001eae:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001eb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eb4:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001eb6:	f002 fe39 	bl	8004b2c <HAL_RTC_Init>
 8001eba:	b9a8      	cbnz	r0, 8001ee8 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001ebc:	480f      	ldr	r0, [pc, #60]	@ (8001efc <MX_RTC_Init+0x74>)
 8001ebe:	f002 ff79 	bl	8004db4 <HAL_RTCEx_SetSSRU_IT>
 8001ec2:	b9a0      	cbnz	r0, 8001eee <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ec8:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001eca:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ecc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ed0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ed2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ed6:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001ed8:	a901      	add	r1, sp, #4
 8001eda:	4808      	ldr	r0, [pc, #32]	@ (8001efc <MX_RTC_Init+0x74>)
 8001edc:	f002 fe8e 	bl	8004bfc <HAL_RTC_SetAlarm_IT>
 8001ee0:	b940      	cbnz	r0, 8001ef4 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ee2:	b00d      	add	sp, #52	@ 0x34
 8001ee4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001ee8:	f7ff ff54 	bl	8001d94 <Error_Handler>
 8001eec:	e7e6      	b.n	8001ebc <MX_RTC_Init+0x34>
    Error_Handler();
 8001eee:	f7ff ff51 	bl	8001d94 <Error_Handler>
 8001ef2:	e7e7      	b.n	8001ec4 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001ef4:	f7ff ff4e 	bl	8001d94 <Error_Handler>
}
 8001ef8:	e7f3      	b.n	8001ee2 <MX_RTC_Init+0x5a>
 8001efa:	bf00      	nop
 8001efc:	200001e8 	.word	0x200001e8
 8001f00:	40002800 	.word	0x40002800

08001f04 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f04:	b510      	push	{r4, lr}
 8001f06:	b090      	sub	sp, #64	@ 0x40
 8001f08:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0a:	2238      	movs	r2, #56	@ 0x38
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	a802      	add	r0, sp, #8
 8001f10:	f007 fc0a 	bl	8009728 <memset>
  if(rtcHandle->Instance==RTC)
 8001f14:	6822      	ldr	r2, [r4, #0]
 8001f16:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <HAL_RTC_MspInit+0x7c>)
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f1c:	b010      	add	sp, #64	@ 0x40
 8001f1e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f24:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f2a:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2c:	a802      	add	r0, sp, #8
 8001f2e:	f002 fc15 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	bb08      	cbnz	r0, 8001f78 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f38:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001f3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f4a:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f52:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001f54:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	4611      	mov	r1, r2
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f001 f9d2 	bl	8003304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001f60:	2002      	movs	r0, #2
 8001f62:	f001 f9df 	bl	8003324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	4611      	mov	r1, r2
 8001f6a:	202a      	movs	r0, #42	@ 0x2a
 8001f6c:	f001 f9ca 	bl	8003304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001f70:	202a      	movs	r0, #42	@ 0x2a
 8001f72:	f001 f9d7 	bl	8003324 <HAL_NVIC_EnableIRQ>
}
 8001f76:	e7d1      	b.n	8001f1c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001f78:	f7ff ff0c 	bl	8001d94 <Error_Handler>
 8001f7c:	e7da      	b.n	8001f34 <HAL_RTC_MspInit+0x30>
 8001f7e:	bf00      	nop
 8001f80:	40002800 	.word	0x40002800

08001f84 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001f84:	4770      	bx	lr

08001f86 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001f86:	4770      	bx	lr

08001f88 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001f88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001f8a:	f000 fc57 	bl	800283c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	4b02      	ldr	r3, [pc, #8]	@ (8001f9c <PWR_EnterStopMode+0x14>)
 8001f92:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001f96:	f001 fe15 	bl	8003bc4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001f9a:	bd08      	pop	{r3, pc}
 8001f9c:	58000400 	.word	0x58000400

08001fa0 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001fa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001fa2:	f000 fc52 	bl	800284a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001fa6:	bd08      	pop	{r3, pc}

08001fa8 <PWR_ExitStopMode>:
{
 8001fa8:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001faa:	f000 fc4e 	bl	800284a <HAL_ResumeTick>
  vcom_Resume();
 8001fae:	f000 fbb5 	bl	800271c <vcom_Resume>
}
 8001fb2:	bd08      	pop	{r3, pc}

08001fb4 <PWR_EnterSleepMode>:
{
 8001fb4:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001fb6:	f000 fc41 	bl	800283c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001fba:	2101      	movs	r1, #1
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f001 fda5 	bl	8003b0c <HAL_PWR_EnterSLEEPMode>
}
 8001fc2:	bd08      	pop	{r3, pc}

08001fc4 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc4:	4770      	bx	lr

08001fc6 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <NMI_Handler>

08001fc8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <HardFault_Handler>

08001fca <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <MemManage_Handler>

08001fcc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <BusFault_Handler>

08001fce <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <UsageFault_Handler>

08001fd0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd0:	4770      	bx	lr

08001fd2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd2:	4770      	bx	lr

08001fd4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd4:	4770      	bx	lr

08001fd6 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd6:	4770      	bx	lr

08001fd8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001fd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001fda:	4802      	ldr	r0, [pc, #8]	@ (8001fe4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001fdc:	f002 ff16 	bl	8004e0c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001fe0:	bd08      	pop	{r3, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200001e8 	.word	0x200001e8

08001fe8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001fe8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001fea:	4802      	ldr	r0, [pc, #8]	@ (8001ff4 <DMA1_Channel5_IRQHandler+0xc>)
 8001fec:	f001 fba0 	bl	8003730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ff0:	bd08      	pop	{r3, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000023c 	.word	0x2000023c

08001ff8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001ff8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001ffa:	4802      	ldr	r0, [pc, #8]	@ (8002004 <LPUART1_IRQHandler+0xc>)
 8001ffc:	f003 fbc8 	bl	8005790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002000:	bd08      	pop	{r3, pc}
 8002002:	bf00      	nop
 8002004:	2000029c 	.word	0x2000029c

08002008 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002008:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800200a:	4802      	ldr	r0, [pc, #8]	@ (8002014 <RTC_Alarm_IRQHandler+0xc>)
 800200c:	f002 fd08 	bl	8004a20 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002010:	bd08      	pop	{r3, pc}
 8002012:	bf00      	nop
 8002014:	200001e8 	.word	0x200001e8

08002018 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002018:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800201a:	4802      	ldr	r0, [pc, #8]	@ (8002024 <SUBGHZ_Radio_IRQHandler+0xc>)
 800201c:	f003 f9ae 	bl	800537c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002020:	bd08      	pop	{r3, pc}
 8002022:	bf00      	nop
 8002024:	20000220 	.word	0x20000220

08002028 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002028:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <MX_SUBGHZ_Init+0x18>)
 800202c:	2308      	movs	r3, #8
 800202e:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002030:	f002 ff22 	bl	8004e78 <HAL_SUBGHZ_Init>
 8002034:	b900      	cbnz	r0, 8002038 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002036:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002038:	f7ff feac 	bl	8001d94 <Error_Handler>
}
 800203c:	e7fb      	b.n	8002036 <MX_SUBGHZ_Init+0xe>
 800203e:	bf00      	nop
 8002040:	20000220 	.word	0x20000220

08002044 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002044:	b500      	push	{lr}
 8002046:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800205c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	4611      	mov	r1, r2
 8002062:	2032      	movs	r0, #50	@ 0x32
 8002064:	f001 f94e 	bl	8003304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002068:	2032      	movs	r0, #50	@ 0x32
 800206a:	f001 f95b 	bl	8003324 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800206e:	b003      	add	sp, #12
 8002070:	f85d fb04 	ldr.w	pc, [sp], #4

08002074 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002074:	b40c      	push	{r2, r3}
 8002076:	b500      	push	{lr}
 8002078:	b083      	sub	sp, #12
 800207a:	ab04      	add	r3, sp, #16
 800207c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002080:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002082:	f007 fb43 	bl	800970c <vsniprintf>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002086:	b003      	add	sp, #12
 8002088:	f85d eb04 	ldr.w	lr, [sp], #4
 800208c:	b002      	add	sp, #8
 800208e:	4770      	bx	lr

08002090 <TimestampNow>:
{
 8002090:	b530      	push	{r4, r5, lr}
 8002092:	b085      	sub	sp, #20
 8002094:	4604      	mov	r4, r0
 8002096:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8002098:	a802      	add	r0, sp, #8
 800209a:	f007 f979 	bl	8009390 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800209e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	9b02      	ldr	r3, [sp, #8]
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <TimestampNow+0x2c>)
 80020a8:	2110      	movs	r1, #16
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7ff ffe2 	bl	8002074 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7fe f865 	bl	8000180 <strlen>
 80020b6:	8028      	strh	r0, [r5, #0]
}
 80020b8:	b005      	add	sp, #20
 80020ba:	bd30      	pop	{r4, r5, pc}
 80020bc:	0800a8f0 	.word	0x0800a8f0

080020c0 <SystemApp_Init>:
{
 80020c0:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80020c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c6:	6893      	ldr	r3, [r2, #8]
 80020c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80020cc:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 80020ce:	f007 f981 	bl	80093d4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80020d2:	2401      	movs	r4, #1
 80020d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <SystemApp_Init+0x40>)
 80020d6:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 80020d8:	f000 f83e 	bl	8002158 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 80020dc:	f006 fee4 	bl	8008ea8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80020e0:	4808      	ldr	r0, [pc, #32]	@ (8002104 <SystemApp_Init+0x44>)
 80020e2:	f006 fefb 	bl	8008edc <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80020e6:	2002      	movs	r0, #2
 80020e8:	f006 fefe 	bl	8008ee8 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80020ec:	f7ff fc92 	bl	8001a14 <SYS_InitMeasurement>
  UTIL_LPM_Init();
 80020f0:	f007 f80a 	bl	8009108 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80020f4:	4621      	mov	r1, r4
 80020f6:	4620      	mov	r0, r4
 80020f8:	f007 f826 	bl	8009148 <UTIL_LPM_SetOffMode>
}
 80020fc:	bd10      	pop	{r4, pc}
 80020fe:	bf00      	nop
 8002100:	2000022c 	.word	0x2000022c
 8002104:	08002091 	.word	0x08002091

08002108 <UTIL_SEQ_Idle>:
{
 8002108:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 800210a:	f007 f833 	bl	8009174 <UTIL_LPM_EnterLowPower>
}
 800210e:	bd08      	pop	{r3, pc}

08002110 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002110:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002112:	2101      	movs	r1, #1
 8002114:	2002      	movs	r0, #2
 8002116:	f007 f801 	bl	800911c <UTIL_LPM_SetStopMode>
}
 800211a:	bd08      	pop	{r3, pc}

0800211c <UTIL_ADV_TRACE_PostSendHook>:
{
 800211c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800211e:	2100      	movs	r1, #0
 8002120:	2002      	movs	r0, #2
 8002122:	f006 fffb 	bl	800911c <UTIL_LPM_SetStopMode>
}
 8002126:	bd08      	pop	{r3, pc}

08002128 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002128:	2000      	movs	r0, #0
 800212a:	4770      	bx	lr

0800212c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800212c:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800212e:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <HAL_GetTick+0x14>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b90b      	cbnz	r3, 8002138 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8002134:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8002136:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8002138:	f000 f8b8 	bl	80022ac <TIMER_IF_GetTimerValue>
 800213c:	e7fb      	b.n	8002136 <HAL_GetTick+0xa>
 800213e:	bf00      	nop
 8002140:	2000022c 	.word	0x2000022c

08002144 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002144:	b500      	push	{lr}
 8002146:	b083      	sub	sp, #12
 8002148:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800214a:	9801      	ldr	r0, [sp, #4]
 800214c:	f000 f994 	bl	8002478 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002150:	b003      	add	sp, #12
 8002152:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002158 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800215c:	b088      	sub	sp, #32

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800215e:	f000 fb7b 	bl	8002858 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002162:	f000 fb81 	bl	8002868 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002166:	f000 fb87 	bl	8002878 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800216a:	2400      	movs	r4, #0
 800216c:	9403      	str	r4, [sp, #12]
 800216e:	9404      	str	r4, [sp, #16]
 8002170:	9405      	str	r4, [sp, #20]
 8002172:	9406      	str	r4, [sp, #24]
 8002174:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002176:	2301      	movs	r3, #1
 8002178:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002184:	f042 0202 	orr.w	r2, r2, #2
 8002188:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800218a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800218c:	f002 0202 	and.w	r2, r2, #2
 8002190:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002192:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002194:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002196:	f042 0202 	orr.w	r2, r2, #2
 800219a:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800219c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800219e:	f002 0202 	and.w	r2, r2, #2
 80021a2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80021a4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021a8:	f042 0202 	orr.w	r2, r2, #2
 80021ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80021b6:	9b00      	ldr	r3, [sp, #0]
  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();
  PROBE_LINE3_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80021b8:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
 80021bc:	f8cd 800c 	str.w	r8, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80021c0:	4d12      	ldr	r5, [pc, #72]	@ (800220c <DBG_Init+0xb4>)
 80021c2:	a903      	add	r1, sp, #12
 80021c4:	4628      	mov	r0, r5
 80021c6:	f001 fb3b 	bl	8003840 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80021ca:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 80021ce:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80021d0:	a903      	add	r1, sp, #12
 80021d2:	4628      	mov	r0, r5
 80021d4:	f001 fb34 	bl	8003840 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80021d8:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
 80021dc:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80021de:	a903      	add	r1, sp, #12
 80021e0:	4628      	mov	r0, r5
 80021e2:	f001 fb2d 	bl	8003840 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80021e6:	4622      	mov	r2, r4
 80021e8:	4641      	mov	r1, r8
 80021ea:	4628      	mov	r0, r5
 80021ec:	f001 fc78 	bl	8003ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80021f0:	4622      	mov	r2, r4
 80021f2:	4639      	mov	r1, r7
 80021f4:	4628      	mov	r0, r5
 80021f6:	f001 fc73 	bl	8003ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80021fa:	4622      	mov	r2, r4
 80021fc:	4631      	mov	r1, r6
 80021fe:	4628      	mov	r0, r5
 8002200:	f001 fc6e 	bl	8003ae0 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002204:	b008      	add	sp, #32
 8002206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800220a:	bf00      	nop
 800220c:	48000400 	.word	0x48000400

08002210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002210:	b510      	push	{r4, lr}
 8002212:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a0c      	ldr	r2, [pc, #48]	@ (8002248 <_sbrk+0x38>)
 8002216:	490d      	ldr	r1, [pc, #52]	@ (800224c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002218:	480d      	ldr	r0, [pc, #52]	@ (8002250 <_sbrk+0x40>)
 800221a:	6800      	ldr	r0, [r0, #0]
 800221c:	b140      	cbz	r0, 8002230 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221e:	480c      	ldr	r0, [pc, #48]	@ (8002250 <_sbrk+0x40>)
 8002220:	6800      	ldr	r0, [r0, #0]
 8002222:	4403      	add	r3, r0
 8002224:	1a52      	subs	r2, r2, r1
 8002226:	4293      	cmp	r3, r2
 8002228:	d806      	bhi.n	8002238 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800222a:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <_sbrk+0x40>)
 800222c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800222e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002230:	4807      	ldr	r0, [pc, #28]	@ (8002250 <_sbrk+0x40>)
 8002232:	4c08      	ldr	r4, [pc, #32]	@ (8002254 <_sbrk+0x44>)
 8002234:	6004      	str	r4, [r0, #0]
 8002236:	e7f2      	b.n	800221e <_sbrk+0xe>
    errno = ENOMEM;
 8002238:	f007 fa7e 	bl	8009738 <__errno>
 800223c:	230c      	movs	r3, #12
 800223e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	e7f3      	b.n	800222e <_sbrk+0x1e>
 8002246:	bf00      	nop
 8002248:	20008000 	.word	0x20008000
 800224c:	00001000 	.word	0x00001000
 8002250:	20000230 	.word	0x20000230
 8002254:	20000968 	.word	0x20000968

08002258 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <TIMER_IF_SetTimerContext+0x1c>)
 800225a:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800225c:	e001      	b.n	8002262 <TIMER_IF_SetTimerContext+0xa>
 800225e:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <TIMER_IF_SetTimerContext+0x1c>)
 8002260:	6898      	ldr	r0, [r3, #8]
 8002262:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <TIMER_IF_SetTimerContext+0x1c>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4283      	cmp	r3, r0
 8002268:	d1f9      	bne.n	800225e <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 800226a:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 800226c:	4b02      	ldr	r3, [pc, #8]	@ (8002278 <TIMER_IF_SetTimerContext+0x20>)
 800226e:	6018      	str	r0, [r3, #0]
}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40002800 	.word	0x40002800
 8002278:	20000234 	.word	0x20000234

0800227c <TIMER_IF_GetTimerContext>:
}
 800227c:	4b01      	ldr	r3, [pc, #4]	@ (8002284 <TIMER_IF_GetTimerContext+0x8>)
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000234 	.word	0x20000234

08002288 <TIMER_IF_GetTimerElapsedTime>:
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800228a:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800228c:	e001      	b.n	8002292 <TIMER_IF_GetTimerElapsedTime+0xa>
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002290:	6898      	ldr	r0, [r3, #8]
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4283      	cmp	r3, r0
 8002298:	d1f9      	bne.n	800228e <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 800229a:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800229c:	4b02      	ldr	r3, [pc, #8]	@ (80022a8 <TIMER_IF_GetTimerElapsedTime+0x20>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	1ac0      	subs	r0, r0, r3
 80022a2:	4770      	bx	lr
 80022a4:	40002800 	.word	0x40002800
 80022a8:	20000234 	.word	0x20000234

080022ac <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80022ac:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <TIMER_IF_GetTimerValue+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b153      	cbz	r3, 80022c8 <TIMER_IF_GetTimerValue+0x1c>
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <TIMER_IF_GetTimerValue+0x24>)
 80022b4:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022b6:	e001      	b.n	80022bc <TIMER_IF_GetTimerValue+0x10>
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <TIMER_IF_GetTimerValue+0x24>)
 80022ba:	6898      	ldr	r0, [r3, #8]
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <TIMER_IF_GetTimerValue+0x24>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4283      	cmp	r3, r0
 80022c2:	d1f9      	bne.n	80022b8 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 80022c4:	43c0      	mvns	r0, r0
 80022c6:	4770      	bx	lr
  uint32_t ret = 0;
 80022c8:	2000      	movs	r0, #0
}
 80022ca:	4770      	bx	lr
 80022cc:	20000238 	.word	0x20000238
 80022d0:	40002800 	.word	0x40002800

080022d4 <TIMER_IF_GetMinimumTimeout>:
}
 80022d4:	2003      	movs	r0, #3
 80022d6:	4770      	bx	lr

080022d8 <TIMER_IF_Convert_ms2Tick>:
{
 80022d8:	b508      	push	{r3, lr}
 80022da:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80022dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022e0:	2300      	movs	r3, #0
 80022e2:	0280      	lsls	r0, r0, #10
 80022e4:	0d89      	lsrs	r1, r1, #22
 80022e6:	f7fd ffa3 	bl	8000230 <__aeabi_uldivmod>
}
 80022ea:	bd08      	pop	{r3, pc}

080022ec <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80022ec:	0ec2      	lsrs	r2, r0, #27
 80022ee:	0143      	lsls	r3, r0, #5
 80022f0:	1a1b      	subs	r3, r3, r0
 80022f2:	f162 0200 	sbc.w	r2, r2, #0
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	181b      	adds	r3, r3, r0
 8002300:	f142 0000 	adc.w	r0, r2, #0
 8002304:	00c0      	lsls	r0, r0, #3
 8002306:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800230a:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 800230e:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8002312:	4770      	bx	lr

08002314 <TIMER_IF_StopTimer>:
{
 8002314:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002316:	4b07      	ldr	r3, [pc, #28]	@ (8002334 <TIMER_IF_StopTimer+0x20>)
 8002318:	2201      	movs	r2, #1
 800231a:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800231c:	4c06      	ldr	r4, [pc, #24]	@ (8002338 <TIMER_IF_StopTimer+0x24>)
 800231e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002322:	4620      	mov	r0, r4
 8002324:	f002 fb3c 	bl	80049a0 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002328:	f04f 33ff 	mov.w	r3, #4294967295
 800232c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800232e:	2000      	movs	r0, #0
 8002330:	bd10      	pop	{r4, pc}
 8002332:	bf00      	nop
 8002334:	40002800 	.word	0x40002800
 8002338:	200001e8 	.word	0x200001e8

0800233c <TIMER_IF_BkUp_Write_MSBticks>:
{
 800233c:	b508      	push	{r3, lr}
 800233e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002340:	2102      	movs	r1, #2
 8002342:	4802      	ldr	r0, [pc, #8]	@ (800234c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8002344:	f002 fd77 	bl	8004e36 <HAL_RTCEx_BKUPWrite>
}
 8002348:	bd08      	pop	{r3, pc}
 800234a:	bf00      	nop
 800234c:	200001e8 	.word	0x200001e8

08002350 <TIMER_IF_Init>:
{
 8002350:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8002352:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <TIMER_IF_Init+0x40>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b10b      	cbz	r3, 800235c <TIMER_IF_Init+0xc>
}
 8002358:	2000      	movs	r0, #0
 800235a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800235c:	4c0d      	ldr	r4, [pc, #52]	@ (8002394 <TIMER_IF_Init+0x44>)
 800235e:	f04f 35ff 	mov.w	r5, #4294967295
 8002362:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8002364:	f7ff fd90 	bl	8001e88 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8002368:	f7ff ffd4 	bl	8002314 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800236c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002370:	4620      	mov	r0, r4
 8002372:	f002 fb15 	bl	80049a0 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002376:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002378:	4620      	mov	r0, r4
 800237a:	f002 fcfb 	bl	8004d74 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff ffdc 	bl	800233c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8002384:	f7ff ff68 	bl	8002258 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8002388:	4b01      	ldr	r3, [pc, #4]	@ (8002390 <TIMER_IF_Init+0x40>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e7e3      	b.n	8002358 <TIMER_IF_Init+0x8>
 8002390:	20000238 	.word	0x20000238
 8002394:	200001e8 	.word	0x200001e8

08002398 <TIMER_IF_BkUp_Write_Seconds>:
{
 8002398:	b508      	push	{r3, lr}
 800239a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800239c:	2100      	movs	r1, #0
 800239e:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 80023a0:	f002 fd49 	bl	8004e36 <HAL_RTCEx_BKUPWrite>
}
 80023a4:	bd08      	pop	{r3, pc}
 80023a6:	bf00      	nop
 80023a8:	200001e8 	.word	0x200001e8

080023ac <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80023ac:	b508      	push	{r3, lr}
 80023ae:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80023b0:	2101      	movs	r1, #1
 80023b2:	4802      	ldr	r0, [pc, #8]	@ (80023bc <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80023b4:	f002 fd3f 	bl	8004e36 <HAL_RTCEx_BKUPWrite>
}
 80023b8:	bd08      	pop	{r3, pc}
 80023ba:	bf00      	nop
 80023bc:	200001e8 	.word	0x200001e8

080023c0 <TIMER_IF_StartTimer>:
{
 80023c0:	b510      	push	{r4, lr}
 80023c2:	b08c      	sub	sp, #48	@ 0x30
 80023c4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80023c6:	222c      	movs	r2, #44	@ 0x2c
 80023c8:	2100      	movs	r1, #0
 80023ca:	a801      	add	r0, sp, #4
 80023cc:	f007 f9ac 	bl	8009728 <memset>
  TIMER_IF_StopTimer();
 80023d0:	f7ff ffa0 	bl	8002314 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <TIMER_IF_StartTimer+0x48>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80023da:	2300      	movs	r3, #0
 80023dc:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80023de:	43e4      	mvns	r4, r4
 80023e0:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80023e2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80023e4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80023e8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80023ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ee:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023f0:	2201      	movs	r2, #1
 80023f2:	a901      	add	r1, sp, #4
 80023f4:	4805      	ldr	r0, [pc, #20]	@ (800240c <TIMER_IF_StartTimer+0x4c>)
 80023f6:	f002 fc01 	bl	8004bfc <HAL_RTC_SetAlarm_IT>
 80023fa:	b910      	cbnz	r0, 8002402 <TIMER_IF_StartTimer+0x42>
}
 80023fc:	2000      	movs	r0, #0
 80023fe:	b00c      	add	sp, #48	@ 0x30
 8002400:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002402:	f7ff fcc7 	bl	8001d94 <Error_Handler>
 8002406:	e7f9      	b.n	80023fc <TIMER_IF_StartTimer+0x3c>
 8002408:	20000234 	.word	0x20000234
 800240c:	200001e8 	.word	0x200001e8

08002410 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002410:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002412:	2102      	movs	r1, #2
 8002414:	4801      	ldr	r0, [pc, #4]	@ (800241c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8002416:	f002 fd15 	bl	8004e44 <HAL_RTCEx_BKUPRead>
}
 800241a:	bd08      	pop	{r3, pc}
 800241c:	200001e8 	.word	0x200001e8

08002420 <TIMER_IF_GetTime>:
{
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4605      	mov	r5, r0
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <TIMER_IF_GetTime+0x34>)
 8002426:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002428:	e001      	b.n	800242e <TIMER_IF_GetTime+0xe>
 800242a:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <TIMER_IF_GetTime+0x34>)
 800242c:	689c      	ldr	r4, [r3, #8]
 800242e:	4a09      	ldr	r2, [pc, #36]	@ (8002454 <TIMER_IF_GetTime+0x34>)
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	42a2      	cmp	r2, r4
 8002434:	d1f9      	bne.n	800242a <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8002436:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002438:	f7ff ffea 	bl	8002410 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800243c:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800243e:	0aa4      	lsrs	r4, r4, #10
 8002440:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002444:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002448:	f7ff ff50 	bl	80022ec <TIMER_IF_Convert_Tick2ms>
 800244c:	8028      	strh	r0, [r5, #0]
}
 800244e:	4620      	mov	r0, r4
 8002450:	bd38      	pop	{r3, r4, r5, pc}
 8002452:	bf00      	nop
 8002454:	40002800 	.word	0x40002800

08002458 <TIMER_IF_BkUp_Read_Seconds>:
{
 8002458:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800245a:	2100      	movs	r1, #0
 800245c:	4801      	ldr	r0, [pc, #4]	@ (8002464 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 800245e:	f002 fcf1 	bl	8004e44 <HAL_RTCEx_BKUPRead>
}
 8002462:	bd08      	pop	{r3, pc}
 8002464:	200001e8 	.word	0x200001e8

08002468 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8002468:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800246a:	2101      	movs	r1, #1
 800246c:	4801      	ldr	r0, [pc, #4]	@ (8002474 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 800246e:	f002 fce9 	bl	8004e44 <HAL_RTCEx_BKUPRead>
}
 8002472:	bd08      	pop	{r3, pc}
 8002474:	200001e8 	.word	0x200001e8

08002478 <TIMER_IF_DelayMs>:
{
 8002478:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800247a:	f7ff ff2d 	bl	80022d8 <TIMER_IF_Convert_ms2Tick>
 800247e:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <TIMER_IF_DelayMs+0x3c>)
 8002480:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002482:	e001      	b.n	8002488 <TIMER_IF_DelayMs+0x10>
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <TIMER_IF_DelayMs+0x3c>)
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <TIMER_IF_DelayMs+0x3c>)
 800248a:	6892      	ldr	r2, [r2, #8]
 800248c:	428a      	cmp	r2, r1
 800248e:	d1f9      	bne.n	8002484 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8002490:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002492:	e00a      	b.n	80024aa <TIMER_IF_DelayMs+0x32>
 8002494:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <TIMER_IF_DelayMs+0x3c>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a06      	ldr	r2, [pc, #24]	@ (80024b4 <TIMER_IF_DelayMs+0x3c>)
 800249a:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800249c:	429a      	cmp	r2, r3
 800249e:	d1f9      	bne.n	8002494 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 80024a0:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80024a2:	1a5b      	subs	r3, r3, r1
 80024a4:	4283      	cmp	r3, r0
 80024a6:	d203      	bcs.n	80024b0 <TIMER_IF_DelayMs+0x38>
    __NOP();
 80024a8:	bf00      	nop
 80024aa:	4b02      	ldr	r3, [pc, #8]	@ (80024b4 <TIMER_IF_DelayMs+0x3c>)
 80024ac:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80024ae:	e7f3      	b.n	8002498 <TIMER_IF_DelayMs+0x20>
}
 80024b0:	bd08      	pop	{r3, pc}
 80024b2:	bf00      	nop
 80024b4:	40002800 	.word	0x40002800

080024b8 <HAL_RTC_AlarmAEventCallback>:
{
 80024b8:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80024ba:	f007 f8b5 	bl	8009628 <UTIL_TIMER_IRQ_Handler>
}
 80024be:	bd08      	pop	{r3, pc}

080024c0 <HAL_RTCEx_SSRUEventCallback>:
{
 80024c0:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80024c2:	f7ff ffa5 	bl	8002410 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80024c6:	3001      	adds	r0, #1
 80024c8:	f7ff ff38 	bl	800233c <TIMER_IF_BkUp_Write_MSBticks>
}
 80024cc:	bd08      	pop	{r3, pc}
	...

080024d0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80024d0:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80024d2:	4818      	ldr	r0, [pc, #96]	@ (8002534 <MX_LPUART1_UART_Init+0x64>)
 80024d4:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <MX_LPUART1_UART_Init+0x68>)
 80024d6:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 80024d8:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80024dc:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024de:	2300      	movs	r3, #0
 80024e0:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80024e2:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80024e4:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80024e6:	220c      	movs	r2, #12
 80024e8:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ec:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024ee:	6243      	str	r3, [r0, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f0:	6283      	str	r3, [r0, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 80024f2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80024f6:	6643      	str	r3, [r0, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80024f8:	f004 f802 	bl	8006500 <HAL_UART_Init>
 80024fc:	b970      	cbnz	r0, 800251c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024fe:	2100      	movs	r1, #0
 8002500:	480c      	ldr	r0, [pc, #48]	@ (8002534 <MX_LPUART1_UART_Init+0x64>)
 8002502:	f004 f9b2 	bl	800686a <HAL_UARTEx_SetTxFifoThreshold>
 8002506:	b960      	cbnz	r0, 8002522 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002508:	2100      	movs	r1, #0
 800250a:	480a      	ldr	r0, [pc, #40]	@ (8002534 <MX_LPUART1_UART_Init+0x64>)
 800250c:	f004 f9d2 	bl	80068b4 <HAL_UARTEx_SetRxFifoThreshold>
 8002510:	b950      	cbnz	r0, 8002528 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8002512:	4808      	ldr	r0, [pc, #32]	@ (8002534 <MX_LPUART1_UART_Init+0x64>)
 8002514:	f004 f985 	bl	8006822 <HAL_UARTEx_EnableFifoMode>
 8002518:	b948      	cbnz	r0, 800252e <MX_LPUART1_UART_Init+0x5e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800251a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800251c:	f7ff fc3a 	bl	8001d94 <Error_Handler>
 8002520:	e7ed      	b.n	80024fe <MX_LPUART1_UART_Init+0x2e>
    Error_Handler();
 8002522:	f7ff fc37 	bl	8001d94 <Error_Handler>
 8002526:	e7ef      	b.n	8002508 <MX_LPUART1_UART_Init+0x38>
    Error_Handler();
 8002528:	f7ff fc34 	bl	8001d94 <Error_Handler>
 800252c:	e7f1      	b.n	8002512 <MX_LPUART1_UART_Init+0x42>
    Error_Handler();
 800252e:	f7ff fc31 	bl	8001d94 <Error_Handler>
}
 8002532:	e7f2      	b.n	800251a <MX_LPUART1_UART_Init+0x4a>
 8002534:	2000029c 	.word	0x2000029c
 8002538:	40008000 	.word	0x40008000

0800253c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800253c:	b530      	push	{r4, r5, lr}
 800253e:	b097      	sub	sp, #92	@ 0x5c
 8002540:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002542:	2100      	movs	r1, #0
 8002544:	9111      	str	r1, [sp, #68]	@ 0x44
 8002546:	9112      	str	r1, [sp, #72]	@ 0x48
 8002548:	9113      	str	r1, [sp, #76]	@ 0x4c
 800254a:	9114      	str	r1, [sp, #80]	@ 0x50
 800254c:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800254e:	2238      	movs	r2, #56	@ 0x38
 8002550:	a803      	add	r0, sp, #12
 8002552:	f007 f8e9 	bl	8009728 <memset>
  if(uartHandle->Instance==LPUART1)
 8002556:	6822      	ldr	r2, [r4, #0]
 8002558:	4b2e      	ldr	r3, [pc, #184]	@ (8002614 <HAL_UART_MspInit+0xd8>)
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800255e:	b017      	add	sp, #92	@ 0x5c
 8002560:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002562:	2320      	movs	r3, #32
 8002564:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8002566:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800256a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800256c:	a803      	add	r0, sp, #12
 800256e:	f002 f8f5 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 8002572:	2800      	cmp	r0, #0
 8002574:	d144      	bne.n	8002600 <HAL_UART_MspInit+0xc4>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002582:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002584:	f002 0201 	and.w	r2, r2, #1
 8002588:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800258a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800258c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800259c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800259e:	230c      	movs	r3, #12
 80025a0:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2500      	movs	r5, #0
 80025a8:	9513      	str	r5, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80025ae:	2308      	movs	r3, #8
 80025b0:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	a911      	add	r1, sp, #68	@ 0x44
 80025b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025b8:	f001 f942 	bl	8003840 <HAL_GPIO_Init>
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 80025bc:	4816      	ldr	r0, [pc, #88]	@ (8002618 <HAL_UART_MspInit+0xdc>)
 80025be:	4b17      	ldr	r3, [pc, #92]	@ (800261c <HAL_UART_MspInit+0xe0>)
 80025c0:	6003      	str	r3, [r0, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80025c2:	2316      	movs	r3, #22
 80025c4:	6043      	str	r3, [r0, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025c6:	2310      	movs	r3, #16
 80025c8:	6083      	str	r3, [r0, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ca:	60c5      	str	r5, [r0, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	6103      	str	r3, [r0, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d0:	6145      	str	r5, [r0, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025d2:	6185      	str	r5, [r0, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80025d4:	61c5      	str	r5, [r0, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025d6:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80025d8:	f000 ff1c 	bl	8003414 <HAL_DMA_Init>
 80025dc:	b998      	cbnz	r0, 8002606 <HAL_UART_MspInit+0xca>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80025de:	2110      	movs	r1, #16
 80025e0:	480d      	ldr	r0, [pc, #52]	@ (8002618 <HAL_UART_MspInit+0xdc>)
 80025e2:	f001 f919 	bl	8003818 <HAL_DMA_ConfigChannelAttributes>
 80025e6:	b988      	cbnz	r0, 800260c <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_UART_MspInit+0xdc>)
 80025ea:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80025ec:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2102      	movs	r1, #2
 80025f2:	2026      	movs	r0, #38	@ 0x26
 80025f4:	f000 fe86 	bl	8003304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80025f8:	2026      	movs	r0, #38	@ 0x26
 80025fa:	f000 fe93 	bl	8003324 <HAL_NVIC_EnableIRQ>
}
 80025fe:	e7ae      	b.n	800255e <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002600:	f7ff fbc8 	bl	8001d94 <Error_Handler>
 8002604:	e7b7      	b.n	8002576 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8002606:	f7ff fbc5 	bl	8001d94 <Error_Handler>
 800260a:	e7e8      	b.n	80025de <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800260c:	f7ff fbc2 	bl	8001d94 <Error_Handler>
 8002610:	e7ea      	b.n	80025e8 <HAL_UART_MspInit+0xac>
 8002612:	bf00      	nop
 8002614:	40008000 	.word	0x40008000
 8002618:	2000023c 	.word	0x2000023c
 800261c:	40020058 	.word	0x40020058

08002620 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==LPUART1)
 8002620:	6802      	ldr	r2, [r0, #0]
 8002622:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <HAL_UART_MspDeInit+0x34>)
 8002624:	429a      	cmp	r2, r3
 8002626:	d000      	beq.n	800262a <HAL_UART_MspDeInit+0xa>
 8002628:	4770      	bx	lr
{
 800262a:	b510      	push	{r4, lr}
 800262c:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800262e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002632:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	65d3      	str	r3, [r2, #92]	@ 0x5c

    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800263a:	210c      	movs	r1, #12
 800263c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002640:	f001 f9d0 	bl	80039e4 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002644:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002646:	f000 ff57 	bl	80034f8 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 800264a:	2026      	movs	r0, #38	@ 0x26
 800264c:	f000 fe6e 	bl	800332c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 8002650:	bd10      	pop	{r4, pc}
 8002652:	bf00      	nop
 8002654:	40008000 	.word	0x40008000

08002658 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002658:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800265a:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <vcom_Init+0x20>)
 800265c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800265e:	f7ff fa59 	bl	8001b14 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002662:	f7ff ff35 	bl	80024d0 <MX_LPUART1_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002666:	4a05      	ldr	r2, [pc, #20]	@ (800267c <vcom_Init+0x24>)
 8002668:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002670:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002674:	2000      	movs	r0, #0
 8002676:	bd08      	pop	{r3, pc}
 8002678:	20000334 	.word	0x20000334
 800267c:	58000800 	.word	0x58000800

08002680 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002680:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8002682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	63da      	str	r2, [r3, #60]	@ 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 800268e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
  __HAL_RCC_LPUART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&hlpuart1);
 8002696:	4804      	ldr	r0, [pc, #16]	@ (80026a8 <vcom_DeInit+0x28>)
 8002698:	f7ff ffc2 	bl	8002620 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800269c:	200f      	movs	r0, #15
 800269e:	f000 fe45 	bl	800332c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80026a2:	2000      	movs	r0, #0
 80026a4:	bd08      	pop	{r3, pc}
 80026a6:	bf00      	nop
 80026a8:	2000029c 	.word	0x2000029c

080026ac <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80026ac:	b508      	push	{r3, lr}
 80026ae:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80026b0:	4601      	mov	r1, r0
 80026b2:	4802      	ldr	r0, [pc, #8]	@ (80026bc <vcom_Trace_DMA+0x10>)
 80026b4:	f002 ffa8 	bl	8005608 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80026b8:	2000      	movs	r0, #0
 80026ba:	bd08      	pop	{r3, pc}
 80026bc:	2000029c 	.word	0x2000029c

080026c0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80026c0:	b510      	push	{r4, lr}
 80026c2:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80026c4:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <vcom_ReceiveInit+0x50>)
 80026c6:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80026c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80026cc:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 80026ce:	ab02      	add	r3, sp, #8
 80026d0:	e913 0006 	ldmdb	r3, {r1, r2}
 80026d4:	480f      	ldr	r0, [pc, #60]	@ (8002714 <vcom_ReceiveInit+0x54>)
 80026d6:	f004 f84c 	bl	8006772 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET);
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <vcom_ReceiveInit+0x54>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80026e4:	d1f9      	bne.n	80026da <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_REACK) == RESET);
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80026ec:	d0fb      	beq.n	80026e6 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80026f4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 80026f6:	4c07      	ldr	r4, [pc, #28]	@ (8002714 <vcom_ReceiveInit+0x54>)
 80026f8:	4620      	mov	r0, r4
 80026fa:	f004 f87b 	bl	80067f4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&hlpuart1, &charRx, 1);
 80026fe:	2201      	movs	r2, #1
 8002700:	4905      	ldr	r1, [pc, #20]	@ (8002718 <vcom_ReceiveInit+0x58>)
 8002702:	4620      	mov	r0, r4
 8002704:	f003 ffce 	bl	80066a4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002708:	2000      	movs	r0, #0
 800270a:	b002      	add	sp, #8
 800270c:	bd10      	pop	{r4, pc}
 800270e:	bf00      	nop
 8002710:	20000330 	.word	0x20000330
 8002714:	2000029c 	.word	0x2000029c
 8002718:	20000338 	.word	0x20000338

0800271c <vcom_Resume>:

void vcom_Resume(void)
{
 800271c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800271e:	4804      	ldr	r0, [pc, #16]	@ (8002730 <vcom_Resume+0x14>)
 8002720:	f000 fe78 	bl	8003414 <HAL_DMA_Init>
 8002724:	b900      	cbnz	r0, 8002728 <vcom_Resume+0xc>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002726:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002728:	f7ff fb34 	bl	8001d94 <Error_Handler>
}
 800272c:	e7fb      	b.n	8002726 <vcom_Resume+0xa>
 800272e:	bf00      	nop
 8002730:	2000023c 	.word	0x2000023c

08002734 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == LPUART1)
 8002736:	6802      	ldr	r2, [r0, #0]
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <HAL_UART_TxCpltCallback+0x18>)
 800273a:	429a      	cmp	r2, r3
 800273c:	d000      	beq.n	8002740 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800273e:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002740:	4b03      	ldr	r3, [pc, #12]	@ (8002750 <HAL_UART_TxCpltCallback+0x1c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2000      	movs	r0, #0
 8002746:	4798      	blx	r3
}
 8002748:	e7f9      	b.n	800273e <HAL_UART_TxCpltCallback+0xa>
 800274a:	bf00      	nop
 800274c:	40008000 	.word	0x40008000
 8002750:	20000334 	.word	0x20000334

08002754 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == LPUART1)
 8002754:	6802      	ldr	r2, [r0, #0]
 8002756:	4b0a      	ldr	r3, [pc, #40]	@ (8002780 <HAL_UART_RxCpltCallback+0x2c>)
 8002758:	429a      	cmp	r2, r3
 800275a:	d000      	beq.n	800275e <HAL_UART_RxCpltCallback+0xa>
 800275c:	4770      	bx	lr
{
 800275e:	b510      	push	{r4, lr}
 8002760:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <HAL_UART_RxCpltCallback+0x30>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	b12b      	cbz	r3, 8002774 <HAL_UART_RxCpltCallback+0x20>
 8002768:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 800276c:	b912      	cbnz	r2, 8002774 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800276e:	2101      	movs	r1, #1
 8002770:	4805      	ldr	r0, [pc, #20]	@ (8002788 <HAL_UART_RxCpltCallback+0x34>)
 8002772:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002774:	2201      	movs	r2, #1
 8002776:	4904      	ldr	r1, [pc, #16]	@ (8002788 <HAL_UART_RxCpltCallback+0x34>)
 8002778:	4620      	mov	r0, r4
 800277a:	f003 ff93 	bl	80066a4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800277e:	bd10      	pop	{r4, pc}
 8002780:	40008000 	.word	0x40008000
 8002784:	20000330 	.word	0x20000330
 8002788:	20000338 	.word	0x20000338

0800278c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800278c:	480d      	ldr	r0, [pc, #52]	@ (80027c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800278e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002790:	f000 f83d 	bl	800280e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002794:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002796:	490d      	ldr	r1, [pc, #52]	@ (80027cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002798:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <LoopForever+0xe>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027ac:	4c0a      	ldr	r4, [pc, #40]	@ (80027d8 <LoopForever+0x16>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027ba:	f006 ffc3 	bl	8009744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027be:	f7ff fb33 	bl	8001e28 <main>

080027c2 <LoopForever>:

LoopForever:
    b LoopForever
 80027c2:	e7fe      	b.n	80027c2 <LoopForever>
  ldr   r0, =_estack
 80027c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80027d0:	0800ac20 	.word	0x0800ac20
  ldr r2, =_sbss
 80027d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80027d8:	20000968 	.word	0x20000968

080027dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC_IRQHandler>

080027de <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80027de:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80027e0:	f004 f88e 	bl	8006900 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80027e4:	bd08      	pop	{r3, pc}

080027e6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80027e6:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80027e8:	f004 f8cc 	bl	8006984 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80027ec:	bd08      	pop	{r3, pc}

080027ee <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80027ee:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80027f0:	f004 f916 	bl	8006a20 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80027f4:	bd08      	pop	{r3, pc}

080027f6 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80027f6:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80027f8:	f004 f914 	bl	8006a24 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80027fc:	bd08      	pop	{r3, pc}

080027fe <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80027fe:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002800:	f004 f912 	bl	8006a28 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002804:	bd08      	pop	{r3, pc}

08002806 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002806:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002808:	f004 f910 	bl	8006a2c <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800280c:	bd08      	pop	{r3, pc}

0800280e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800280e:	4770      	bx	lr

08002810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002810:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002812:	2003      	movs	r0, #3
 8002814:	f000 fd64 	bl	80032e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002818:	f001 fafa 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_Init+0x28>)
 800281e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002820:	200f      	movs	r0, #15
 8002822:	f7ff fc81 	bl	8002128 <HAL_InitTick>
 8002826:	b110      	cbz	r0, 800282e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002828:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800282a:	4620      	mov	r0, r4
 800282c:	bd10      	pop	{r4, pc}
 800282e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002830:	f7ff fbc8 	bl	8001fc4 <HAL_MspInit>
 8002834:	e7f9      	b.n	800282a <HAL_Init+0x1a>
 8002836:	bf00      	nop
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800283c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002840:	6913      	ldr	r3, [r2, #16]
 8002842:	f023 0302 	bic.w	r3, r3, #2
 8002846:	6113      	str	r3, [r2, #16]
}
 8002848:	4770      	bx	lr

0800284a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800284a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800284e:	6913      	ldr	r3, [r2, #16]
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6113      	str	r3, [r2, #16]
}
 8002856:	4770      	bx	lr

08002858 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002858:	4a02      	ldr	r2, [pc, #8]	@ (8002864 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800285a:	6853      	ldr	r3, [r2, #4]
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002862:	4770      	bx	lr
 8002864:	e0042000 	.word	0xe0042000

08002868 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002868:	4a02      	ldr	r2, [pc, #8]	@ (8002874 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800286a:	6853      	ldr	r3, [r2, #4]
 800286c:	f023 0302 	bic.w	r3, r3, #2
 8002870:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002872:	4770      	bx	lr
 8002874:	e0042000 	.word	0xe0042000

08002878 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002878:	4a02      	ldr	r2, [pc, #8]	@ (8002884 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800287a:	6853      	ldr	r3, [r2, #4]
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002882:	4770      	bx	lr
 8002884:	e0042000 	.word	0xe0042000

08002888 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002888:	b530      	push	{r4, r5, lr}
 800288a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800288c:	2300      	movs	r3, #0
 800288e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002890:	2800      	cmp	r0, #0
 8002892:	f000 8106 	beq.w	8002aa2 <HAL_ADC_Init+0x21a>
 8002896:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002898:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800289a:	b1bb      	cbz	r3, 80028cc <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800289c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800289e:	6893      	ldr	r3, [r2, #8]
 80028a0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80028a4:	d11f      	bne.n	80028e6 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 80028a6:	6893      	ldr	r3, [r2, #8]
 80028a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028ac:	f023 0317 	bic.w	r3, r3, #23
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028b6:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa8 <HAL_ADC_Init+0x220>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	099b      	lsrs	r3, r3, #6
 80028bc:	4a7b      	ldr	r2, [pc, #492]	@ (8002aac <HAL_ADC_Init+0x224>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	3301      	adds	r3, #1
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80028ca:	e009      	b.n	80028e0 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 80028cc:	f7ff f846 	bl	800195c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80028d0:	2300      	movs	r3, #0
 80028d2:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80028d4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80028d8:	e7e0      	b.n	800289c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80028da:	9b01      	ldr	r3, [sp, #4]
 80028dc:	3b01      	subs	r3, #1
 80028de:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80028e0:	9b01      	ldr	r3, [sp, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f9      	bne.n	80028da <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028e6:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028e8:	6893      	ldr	r3, [r2, #8]
 80028ea:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80028ee:	f040 809a 	bne.w	8002a26 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028f4:	f043 0310 	orr.w	r3, r3, #16
 80028f8:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002902:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002904:	6893      	ldr	r3, [r2, #8]
 8002906:	f013 0304 	ands.w	r3, r3, #4
 800290a:	d000      	beq.n	800290e <HAL_ADC_Init+0x86>
 800290c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800290e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002910:	f011 0f10 	tst.w	r1, #16
 8002914:	f040 80be 	bne.w	8002a94 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002918:	2b00      	cmp	r3, #0
 800291a:	f040 80bb 	bne.w	8002a94 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002920:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800292a:	6893      	ldr	r3, [r2, #8]
 800292c:	f013 0f01 	tst.w	r3, #1
 8002930:	d14f      	bne.n	80029d2 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002932:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002934:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002936:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800293a:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800293c:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002940:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002942:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002946:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002948:	b109      	cbz	r1, 800294e <HAL_ADC_Init+0xc6>
 800294a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800294e:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8002950:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002952:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002954:	6921      	ldr	r1, [r4, #16]
 8002956:	2900      	cmp	r1, #0
 8002958:	db67      	blt.n	8002a2a <HAL_ADC_Init+0x1a2>
 800295a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800295e:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002960:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002964:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002968:	f894 1020 	ldrb.w	r1, [r4, #32]
 800296c:	2901      	cmp	r1, #1
 800296e:	d05f      	beq.n	8002a30 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002970:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002972:	b121      	cbz	r1, 800297e <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002974:	f401 71e0 	and.w	r1, r1, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002978:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800297a:	4329      	orrs	r1, r5
 800297c:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800297e:	68d1      	ldr	r1, [r2, #12]
 8002980:	f421 31fe 	bic.w	r1, r1, #130048	@ 0x1fc00
 8002984:	f421 71ff 	bic.w	r1, r1, #510	@ 0x1fe
 8002988:	4319      	orrs	r1, r3
 800298a:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800298c:	6863      	ldr	r3, [r4, #4]
 800298e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002992:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002994:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002996:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 800299a:	2901      	cmp	r1, #1
 800299c:	d055      	beq.n	8002a4a <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800299e:	6821      	ldr	r1, [r4, #0]
 80029a0:	690d      	ldr	r5, [r1, #16]
 80029a2:	4b43      	ldr	r3, [pc, #268]	@ (8002ab0 <HAL_ADC_Init+0x228>)
 80029a4:	402b      	ands	r3, r5
 80029a6:	4313      	orrs	r3, r2
 80029a8:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80029aa:	6863      	ldr	r3, [r4, #4]
 80029ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80029b0:	d00f      	beq.n	80029d2 <HAL_ADC_Init+0x14a>
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b6:	d00c      	beq.n	80029d2 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80029b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029bc:	d009      	beq.n	80029d2 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80029be:	493d      	ldr	r1, [pc, #244]	@ (8002ab4 <HAL_ADC_Init+0x22c>)
 80029c0:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 80029c4:	f422 1270 	bic.w	r2, r2, #3932160	@ 0x3c0000
 80029c8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3708 	str.w	r3, [r1, #1800]	@ 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80029d2:	6821      	ldr	r1, [r4, #0]
 80029d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 80029d6:	694a      	ldr	r2, [r1, #20]
 80029d8:	f022 0207 	bic.w	r2, r2, #7
 80029dc:	4313      	orrs	r3, r2
 80029de:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80029e4:	6953      	ldr	r3, [r2, #20]
 80029e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ea:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80029ee:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80029f0:	6923      	ldr	r3, [r4, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d133      	bne.n	8002a5e <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80029fa:	f063 030f 	orn	r3, r3, #15
 80029fe:	6293      	str	r3, [r2, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a00:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8002a08:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d039      	beq.n	8002a82 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a10:	f023 0312 	bic.w	r3, r3, #18
 8002a14:	f043 0310 	orr.w	r3, r3, #16
 8002a18:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002a22:	2001      	movs	r0, #1
 8002a24:	e03b      	b.n	8002a9e <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a26:	2000      	movs	r0, #0
 8002a28:	e76c      	b.n	8002904 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a2a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002a2e:	e796      	b.n	800295e <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a30:	b915      	cbnz	r5, 8002a38 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a36:	e79b      	b.n	8002970 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a38:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002a3a:	f041 0120 	orr.w	r1, r1, #32
 8002a3e:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a40:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002a42:	f041 0101 	orr.w	r1, r1, #1
 8002a46:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8002a48:	e792      	b.n	8002970 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8002a4a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a4c:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002a4e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002a50:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002a52:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002a54:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002a56:	431a      	orrs	r2, r3
 8002a58:	f042 0201 	orr.w	r2, r2, #1
 8002a5c:	e79f      	b.n	800299e <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a62:	d1cd      	bne.n	8002a00 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002a64:	6821      	ldr	r1, [r4, #0]
 8002a66:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8002a68:	69e3      	ldr	r3, [r4, #28]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	f003 031c 	and.w	r3, r3, #28
 8002a72:	f06f 020f 	mvn.w	r2, #15
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a80:	e7be      	b.n	8002a00 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8002a82:	2300      	movs	r3, #0
 8002a84:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002a86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a88:	f023 0303 	bic.w	r3, r3, #3
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002a92:	e004      	b.n	8002a9e <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a96:	f043 0310 	orr.w	r3, r3, #16
 8002a9a:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a9c:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002a9e:	b003      	add	sp, #12
 8002aa0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	e7fb      	b.n	8002a9e <HAL_ADC_Init+0x216>
 8002aa6:	bf00      	nop
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	053e2d63 	.word	0x053e2d63
 8002ab0:	1ffffc02 	.word	0x1ffffc02
 8002ab4:	40012000 	.word	0x40012000

08002ab8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	4604      	mov	r4, r0
 8002abc:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002abe:	6946      	ldr	r6, [r0, #20]
 8002ac0:	2e08      	cmp	r6, #8
 8002ac2:	d005      	beq.n	8002ad0 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002ac4:	6803      	ldr	r3, [r0, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f013 0f01 	tst.w	r3, #1
 8002acc:	d11e      	bne.n	8002b0c <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002ace:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ad0:	f7ff fb2c 	bl	800212c <HAL_GetTick>
 8002ad4:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4232      	tst	r2, r6
 8002adc:	d11c      	bne.n	8002b18 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ade:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002ae2:	d0f8      	beq.n	8002ad6 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ae4:	f7ff fb22 	bl	800212c <HAL_GetTick>
 8002ae8:	1bc3      	subs	r3, r0, r7
 8002aea:	42ab      	cmp	r3, r5
 8002aec:	d801      	bhi.n	8002af2 <HAL_ADC_PollForConversion+0x3a>
 8002aee:	2d00      	cmp	r5, #0
 8002af0:	d1f1      	bne.n	8002ad6 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4233      	tst	r3, r6
 8002af8:	d1ed      	bne.n	8002ad6 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002afa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	65a3      	str	r3, [r4, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002b02:	2300      	movs	r3, #0
 8002b04:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002b08:	2003      	movs	r0, #3
 8002b0a:	e028      	b.n	8002b5e <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 8002b14:	2001      	movs	r0, #1
 8002b16:	e022      	b.n	8002b5e <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b18:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1e:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8002b26:	d115      	bne.n	8002b54 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b28:	7ea2      	ldrb	r2, [r4, #26]
 8002b2a:	b99a      	cbnz	r2, 8002b54 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	f012 0f08 	tst.w	r2, #8
 8002b32:	d00f      	beq.n	8002b54 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	f012 0f04 	tst.w	r2, #4
 8002b3a:	d111      	bne.n	8002b60 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	f022 020c 	bic.w	r2, r2, #12
 8002b42:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002b44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002b46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002b54:	7e20      	ldrb	r0, [r4, #24]
 8002b56:	b960      	cbnz	r0, 8002b72 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002b62:	f043 0320 	orr.w	r3, r3, #32
 8002b66:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b68:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002b70:	e7f0      	b.n	8002b54 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002b72:	2000      	movs	r0, #0
 8002b74:	e7f3      	b.n	8002b5e <HAL_ADC_PollForConversion+0xa6>

08002b76 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b76:	6803      	ldr	r3, [r0, #0]
 8002b78:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002b7c:	b470      	push	{r4, r5, r6}
 8002b7e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b80:	2200      	movs	r2, #0
 8002b82:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b84:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002b86:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8002b8a:	2a01      	cmp	r2, #1
 8002b8c:	f000 8103 	beq.w	8002d96 <HAL_ADC_ConfigChannel+0x21a>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2201      	movs	r2, #1
 8002b94:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b98:	6802      	ldr	r2, [r0, #0]
 8002b9a:	6890      	ldr	r0, [r2, #8]
 8002b9c:	f010 0f04 	tst.w	r0, #4
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ba4:	f042 0220 	orr.w	r2, r2, #32
 8002ba8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
}
 8002bb2:	b003      	add	sp, #12
 8002bb4:	bc70      	pop	{r4, r5, r6}
 8002bb6:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002bb8:	6848      	ldr	r0, [r1, #4]
 8002bba:	2802      	cmp	r0, #2
 8002bbc:	f000 809c 	beq.w	8002cf8 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002bc0:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8002bc4:	d027      	beq.n	8002c16 <HAL_ADC_ConfigChannel+0x9a>
 8002bc6:	4d75      	ldr	r5, [pc, #468]	@ (8002d9c <HAL_ADC_ConfigChannel+0x220>)
 8002bc8:	42ac      	cmp	r4, r5
 8002bca:	d024      	beq.n	8002c16 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002bcc:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8002bce:	f000 001f 	and.w	r0, r0, #31
 8002bd2:	250f      	movs	r5, #15
 8002bd4:	4085      	lsls	r5, r0
 8002bd6:	ea24 0505 	bic.w	r5, r4, r5
 8002bda:	680c      	ldr	r4, [r1, #0]
 8002bdc:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002be0:	2e00      	cmp	r6, #0
 8002be2:	d131      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0xcc>
 8002be4:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002be8:	4084      	lsls	r4, r0
 8002bea:	432c      	orrs	r4, r5
 8002bec:	661c      	str	r4, [r3, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002bee:	684c      	ldr	r4, [r1, #4]
 8002bf0:	08a0      	lsrs	r0, r4, #2
 8002bf2:	3001      	adds	r0, #1
 8002bf4:	69dd      	ldr	r5, [r3, #28]
 8002bf6:	42a8      	cmp	r0, r5
 8002bf8:	d813      	bhi.n	8002c22 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bfa:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002bfc:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8002bfe:	f004 041f 	and.w	r4, r4, #31
 8002c02:	260f      	movs	r6, #15
 8002c04:	40a6      	lsls	r6, r4
 8002c06:	ea20 0006 	bic.w	r0, r0, r6
 8002c0a:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002c0e:	40a5      	lsls	r5, r4
 8002c10:	4328      	orrs	r0, r5
 8002c12:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8002c14:	e005      	b.n	8002c22 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002c16:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c18:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8002c1a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002c1e:	4320      	orrs	r0, r4
 8002c20:	6290      	str	r0, [r2, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c22:	681c      	ldr	r4, [r3, #0]
 8002c24:	680d      	ldr	r5, [r1, #0]
 8002c26:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002c28:	6960      	ldr	r0, [r4, #20]
 8002c2a:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8002c2e:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8002c32:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002c36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c3a:	4302      	orrs	r2, r0
 8002c3c:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c3e:	680a      	ldr	r2, [r1, #0]
 8002c40:	2a00      	cmp	r2, #0
 8002c42:	db09      	blt.n	8002c58 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7b1      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c4c:	b114      	cbz	r4, 8002c54 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002c4e:	fab4 f484 	clz	r4, r4
 8002c52:	e7c9      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002c54:	2420      	movs	r4, #32
 8002c56:	e7c7      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c58:	4951      	ldr	r1, [pc, #324]	@ (8002da0 <HAL_ADC_ConfigChannel+0x224>)
 8002c5a:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
 8002c5e:	f000 71e0 	and.w	r1, r0, #29360128	@ 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c62:	4c50      	ldr	r4, [pc, #320]	@ (8002da4 <HAL_ADC_ConfigChannel+0x228>)
 8002c64:	42a2      	cmp	r2, r4
 8002c66:	d007      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c68:	4c4f      	ldr	r4, [pc, #316]	@ (8002da8 <HAL_ADC_ConfigChannel+0x22c>)
 8002c6a:	42a2      	cmp	r2, r4
 8002c6c:	d026      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c6e:	4c4f      	ldr	r4, [pc, #316]	@ (8002dac <HAL_ADC_ConfigChannel+0x230>)
 8002c70:	42a2      	cmp	r2, r4
 8002c72:	d032      	beq.n	8002cda <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c74:	2000      	movs	r0, #0
 8002c76:	e799      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c78:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8002c7c:	d1f4      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c7e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c82:	4847      	ldr	r0, [pc, #284]	@ (8002da0 <HAL_ADC_ConfigChannel+0x224>)
 8002c84:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8002c88:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002c8c:	4311      	orrs	r1, r2
 8002c8e:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c92:	4a47      	ldr	r2, [pc, #284]	@ (8002db0 <HAL_ADC_ConfigChannel+0x234>)
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	0992      	lsrs	r2, r2, #6
 8002c98:	4946      	ldr	r1, [pc, #280]	@ (8002db4 <HAL_ADC_ConfigChannel+0x238>)
 8002c9a:	fba1 1202 	umull	r1, r2, r1, r2
 8002c9e:	0992      	lsrs	r2, r2, #6
 8002ca0:	3201      	adds	r2, #1
 8002ca2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002caa:	e002      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8002cac:	9a01      	ldr	r2, [sp, #4]
 8002cae:	3a01      	subs	r2, #1
 8002cb0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002cb2:	9a01      	ldr	r2, [sp, #4]
 8002cb4:	2a00      	cmp	r2, #0
 8002cb6:	d1f9      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e777      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cbc:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8002cc0:	d1d5      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc2:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8002cc6:	4836      	ldr	r0, [pc, #216]	@ (8002da0 <HAL_ADC_ConfigChannel+0x224>)
 8002cc8:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8002ccc:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd6:	2000      	movs	r0, #0
}
 8002cd8:	e768      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002cda:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 8002cde:	d158      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce0:	f441 0280 	orr.w	r2, r1, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ce4:	482e      	ldr	r0, [pc, #184]	@ (8002da0 <HAL_ADC_ConfigChannel+0x224>)
 8002ce6:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8002cea:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf4:	2000      	movs	r0, #0
}
 8002cf6:	e759      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cf8:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8002cfc:	d002      	beq.n	8002d04 <HAL_ADC_ConfigChannel+0x188>
 8002cfe:	4827      	ldr	r0, [pc, #156]	@ (8002d9c <HAL_ADC_ConfigChannel+0x220>)
 8002d00:	4284      	cmp	r4, r0
 8002d02:	d106      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002d04:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002d06:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8002d08:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002d0c:	ea20 0004 	bic.w	r0, r0, r4
 8002d10:	6290      	str	r0, [r2, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d12:	680a      	ldr	r2, [r1, #0]
 8002d14:	2a00      	cmp	r2, #0
 8002d16:	db01      	blt.n	8002d1c <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d18:	2000      	movs	r0, #0
 8002d1a:	e747      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d1c:	4920      	ldr	r1, [pc, #128]	@ (8002da0 <HAL_ADC_ConfigChannel+0x224>)
 8002d1e:	f8d1 1708 	ldr.w	r1, [r1, #1800]	@ 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d22:	4820      	ldr	r0, [pc, #128]	@ (8002da4 <HAL_ADC_ConfigChannel+0x228>)
 8002d24:	4282      	cmp	r2, r0
 8002d26:	d007      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d28:	481f      	ldr	r0, [pc, #124]	@ (8002da8 <HAL_ADC_ConfigChannel+0x22c>)
 8002d2a:	4282      	cmp	r2, r0
 8002d2c:	d013      	beq.n	8002d56 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d2e:	481f      	ldr	r0, [pc, #124]	@ (8002dac <HAL_ADC_ConfigChannel+0x230>)
 8002d30:	4282      	cmp	r2, r0
 8002d32:	d01f      	beq.n	8002d74 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d34:	2000      	movs	r0, #0
 8002d36:	e739      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d38:	f001 71a0 	and.w	r1, r1, #20971520	@ 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d3c:	f100 4010 	add.w	r0, r0, #2415919104	@ 0x90000000
 8002d40:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 8002d44:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8002d48:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d52:	2000      	movs	r0, #0
}
 8002d54:	e72a      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d56:	f401 0240 	and.w	r2, r1, #12582912	@ 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d5a:	f100 4008 	add.w	r0, r0, #2281701376	@ 0x88000000
 8002d5e:	f500 4060 	add.w	r0, r0, #57344	@ 0xe000
 8002d62:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8002d66:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d70:	2000      	movs	r0, #0
}
 8002d72:	e71b      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d74:	f001 72c0 	and.w	r2, r1, #25165824	@ 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d78:	f100 400c 	add.w	r0, r0, #2348810240	@ 0x8c000000
 8002d7c:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8002d80:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8002d84:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8e:	2000      	movs	r0, #0
}
 8002d90:	e70c      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
 8002d92:	2000      	movs	r0, #0
 8002d94:	e70a      	b.n	8002bac <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8002d96:	2002      	movs	r0, #2
 8002d98:	e70b      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x36>
 8002d9a:	bf00      	nop
 8002d9c:	80000004 	.word	0x80000004
 8002da0:	40012000 	.word	0x40012000
 8002da4:	b0001000 	.word	0xb0001000
 8002da8:	b8004000 	.word	0xb8004000
 8002dac:	b4002000 	.word	0xb4002000
 8002db0:	20000004 	.word	0x20000004
 8002db4:	053e2d63 	.word	0x053e2d63

08002db8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002db8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002dba:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	f012 0f04 	tst.w	r2, #4
 8002dc2:	d02a      	beq.n	8002e1a <ADC_ConversionStop+0x62>
 8002dc4:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	f012 0f02 	tst.w	r2, #2
 8002dcc:	d107      	bne.n	8002dde <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002dd4:	f022 0217 	bic.w	r2, r2, #23
 8002dd8:	f042 0210 	orr.w	r2, r2, #16
 8002ddc:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dde:	f7ff f9a5 	bl	800212c <HAL_GetTick>
 8002de2:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f013 0f04 	tst.w	r3, #4
 8002dec:	d013      	beq.n	8002e16 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002dee:	f7ff f99d 	bl	800212c <HAL_GetTick>
 8002df2:	1b43      	subs	r3, r0, r5
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d9f5      	bls.n	8002de4 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f013 0f04 	tst.w	r3, #4
 8002e00:	d0f0      	beq.n	8002de4 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e04:	f043 0310 	orr.w	r3, r3, #16
 8002e08:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8002e12:	2001      	movs	r0, #1
 8002e14:	e002      	b.n	8002e1c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e16:	2000      	movs	r0, #0
 8002e18:	e000      	b.n	8002e1c <ADC_ConversionStop+0x64>
 8002e1a:	2000      	movs	r0, #0
}
 8002e1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002e20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e20:	b530      	push	{r4, r5, lr}
 8002e22:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e28:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	f012 0f01 	tst.w	r2, #1
 8002e30:	d15b      	bne.n	8002eea <ADC_Enable+0xca>
 8002e32:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	4a2e      	ldr	r2, [pc, #184]	@ (8002ef0 <ADC_Enable+0xd0>)
 8002e38:	4211      	tst	r1, r2
 8002e3a:	d117      	bne.n	8002e6c <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e42:	f022 0217 	bic.w	r2, r2, #23
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e4c:	4b29      	ldr	r3, [pc, #164]	@ (8002ef4 <ADC_Enable+0xd4>)
 8002e4e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002e52:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8002e56:	d019      	beq.n	8002e8c <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e58:	4b27      	ldr	r3, [pc, #156]	@ (8002ef8 <ADC_Enable+0xd8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	4a27      	ldr	r2, [pc, #156]	@ (8002efc <ADC_Enable+0xdc>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002e68:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002e6a:	e00c      	b.n	8002e86 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002e6e:	f043 0310 	orr.w	r3, r3, #16
 8002e72:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e74:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	e035      	b.n	8002eec <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8002e80:	9b01      	ldr	r3, [sp, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002e86:	9b01      	ldr	r3, [sp, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f9      	bne.n	8002e80 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e8c:	7e63      	ldrb	r3, [r4, #25]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e92:	2000      	movs	r0, #0
 8002e94:	e02a      	b.n	8002eec <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8002e96:	f7ff f949 	bl	800212c <HAL_GetTick>
 8002e9a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	f012 0f01 	tst.w	r2, #1
 8002ea4:	d11f      	bne.n	8002ee6 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	f012 0f01 	tst.w	r2, #1
 8002eac:	d107      	bne.n	8002ebe <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002eb4:	f022 0217 	bic.w	r2, r2, #23
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ebe:	f7ff f935 	bl	800212c <HAL_GetTick>
 8002ec2:	1b40      	subs	r0, r0, r5
 8002ec4:	2802      	cmp	r0, #2
 8002ec6:	d9e9      	bls.n	8002e9c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f013 0f01 	tst.w	r3, #1
 8002ed0:	d1e4      	bne.n	8002e9c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002ed4:	f043 0310 	orr.w	r3, r3, #16
 8002ed8:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eda:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	e002      	b.n	8002eec <ADC_Enable+0xcc>
  return HAL_OK;
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	e000      	b.n	8002eec <ADC_Enable+0xcc>
 8002eea:	2000      	movs	r0, #0
}
 8002eec:	b003      	add	sp, #12
 8002eee:	bd30      	pop	{r4, r5, pc}
 8002ef0:	80000017 	.word	0x80000017
 8002ef4:	40012000 	.word	0x40012000
 8002ef8:	20000004 	.word	0x20000004
 8002efc:	053e2d63 	.word	0x053e2d63

08002f00 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f00:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f013 0f04 	tst.w	r3, #4
 8002f08:	d128      	bne.n	8002f5c <HAL_ADC_Start+0x5c>
{
 8002f0a:	b510      	push	{r4, lr}
 8002f0c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8002f0e:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d024      	beq.n	8002f60 <HAL_ADC_Start+0x60>
 8002f16:	2301      	movs	r3, #1
 8002f18:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8002f1c:	f7ff ff80 	bl	8002e20 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002f20:	b9c0      	cbnz	r0, 8002f54 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8002f22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f30:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8002f32:	2300      	movs	r3, #0
 8002f34:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	211c      	movs	r1, #28
 8002f3a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002f3c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f40:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002f42:	6893      	ldr	r3, [r2, #8]
 8002f44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f48:	f023 0317 	bic.w	r3, r3, #23
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6093      	str	r3, [r2, #8]
}
 8002f52:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8002f54:	2300      	movs	r3, #0
 8002f56:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8002f5a:	e7fa      	b.n	8002f52 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8002f5c:	2002      	movs	r0, #2
}
 8002f5e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002f60:	2002      	movs	r0, #2
 8002f62:	e7f6      	b.n	8002f52 <HAL_ADC_Start+0x52>

08002f64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f64:	b538      	push	{r3, r4, r5, lr}
 8002f66:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f68:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f6a:	6893      	ldr	r3, [r2, #8]
 8002f6c:	f013 0302 	ands.w	r3, r3, #2
 8002f70:	d000      	beq.n	8002f74 <ADC_Disable+0x10>
 8002f72:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f74:	6891      	ldr	r1, [r2, #8]
 8002f76:	f011 0f01 	tst.w	r1, #1
 8002f7a:	d039      	beq.n	8002ff0 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d139      	bne.n	8002ff4 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f80:	6893      	ldr	r3, [r2, #8]
 8002f82:	f003 0305 	and.w	r3, r3, #5
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d009      	beq.n	8002f9e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f8c:	f043 0310 	orr.w	r3, r3, #16
 8002f90:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f92:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	e029      	b.n	8002ff2 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8002f9e:	6893      	ldr	r3, [r2, #8]
 8002fa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fa4:	f023 0317 	bic.w	r3, r3, #23
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fb4:	f7ff f8ba 	bl	800212c <HAL_GetTick>
 8002fb8:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f013 0f01 	tst.w	r3, #1
 8002fc2:	d013      	beq.n	8002fec <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fc4:	f7ff f8b2 	bl	800212c <HAL_GetTick>
 8002fc8:	1b40      	subs	r0, r0, r5
 8002fca:	2802      	cmp	r0, #2
 8002fcc:	d9f5      	bls.n	8002fba <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f013 0f01 	tst.w	r3, #1
 8002fd6:	d0f0      	beq.n	8002fba <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002fda:	f043 0310 	orr.w	r3, r3, #16
 8002fde:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8002fe8:	2001      	movs	r0, #1
 8002fea:	e002      	b.n	8002ff2 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fec:	2000      	movs	r0, #0
 8002fee:	e000      	b.n	8002ff2 <ADC_Disable+0x8e>
 8002ff0:	2000      	movs	r0, #0
}
 8002ff2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e7fc      	b.n	8002ff2 <ADC_Disable+0x8e>

08002ff8 <HAL_ADC_DeInit>:
{
 8002ff8:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d056      	beq.n	80030ac <HAL_ADC_DeInit+0xb4>
 8002ffe:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003000:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003002:	f043 0302 	orr.w	r3, r3, #2
 8003006:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003008:	f7ff fed6 	bl	8002db8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800300c:	4606      	mov	r6, r0
 800300e:	2800      	cmp	r0, #0
 8003010:	d03d      	beq.n	800308e <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003012:	6822      	ldr	r2, [r4, #0]
 8003014:	6853      	ldr	r3, [r2, #4]
 8003016:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	f240 329f 	movw	r2, #927	@ 0x39f
 8003026:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003028:	6822      	ldr	r2, [r4, #0]
 800302a:	68d1      	ldr	r1, [r2, #12]
 800302c:	4b20      	ldr	r3, [pc, #128]	@ (80030b0 <HAL_ADC_DeInit+0xb8>)
 800302e:	400b      	ands	r3, r1
 8003030:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	6913      	ldr	r3, [r2, #16]
 8003036:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800303a:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800303c:	6822      	ldr	r2, [r4, #0]
 800303e:	6953      	ldr	r3, [r2, #20]
 8003040:	f023 0307 	bic.w	r3, r3, #7
 8003044:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003046:	6822      	ldr	r2, [r4, #0]
 8003048:	6a13      	ldr	r3, [r2, #32]
 800304a:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800304e:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003054:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8003058:	6253      	str	r3, [r2, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800305a:	6822      	ldr	r2, [r4, #0]
 800305c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800305e:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8003062:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003068:	2500      	movs	r5, #0
 800306a:	629d      	str	r5, [r3, #40]	@ 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800306c:	4a11      	ldr	r2, [pc, #68]	@ (80030b4 <HAL_ADC_DeInit+0xbc>)
 800306e:	f8d2 3708 	ldr.w	r3, [r2, #1800]	@ 0x708
 8003072:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003076:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
  HAL_ADC_MspDeInit(hadc);
 800307a:	4620      	mov	r0, r4
 800307c:	f7fe fc84 	bl	8001988 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003080:	6625      	str	r5, [r4, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003082:	65e5      	str	r5, [r4, #92]	@ 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003084:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003086:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 800308a:	4630      	mov	r0, r6
 800308c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800308e:	4620      	mov	r0, r4
 8003090:	f7ff ff68 	bl	8002f64 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003094:	4606      	mov	r6, r0
 8003096:	b908      	cbnz	r0, 800309c <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8003098:	2301      	movs	r3, #1
 800309a:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800309c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800309e:	6893      	ldr	r3, [r2, #8]
 80030a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80030a4:	f023 0317 	bic.w	r3, r3, #23
 80030a8:	6093      	str	r3, [r2, #8]
}
 80030aa:	e7b2      	b.n	8003012 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80030ac:	2601      	movs	r6, #1
 80030ae:	e7ec      	b.n	800308a <HAL_ADC_DeInit+0x92>
 80030b0:	833e0200 	.word	0x833e0200
 80030b4:	40012000 	.word	0x40012000

080030b8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80030b8:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d019      	beq.n	80030f4 <HAL_ADC_Stop+0x3c>
{
 80030c0:	b510      	push	{r4, lr}
 80030c2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80030c4:	2301      	movs	r3, #1
 80030c6:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030ca:	f7ff fe75 	bl	8002db8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80030ce:	b118      	cbz	r0, 80030d8 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80030d0:	2300      	movs	r3, #0
 80030d2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80030d6:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80030d8:	4620      	mov	r0, r4
 80030da:	f7ff ff43 	bl	8002f64 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80030de:	2800      	cmp	r0, #0
 80030e0:	d1f6      	bne.n	80030d0 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80030e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80030f2:	e7ed      	b.n	80030d0 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80030f4:	2002      	movs	r0, #2
}
 80030f6:	4770      	bx	lr

080030f8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80030f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003100:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003104:	2b01      	cmp	r3, #1
 8003106:	f000 8094 	beq.w	8003232 <HAL_ADCEx_Calibration_Start+0x13a>
 800310a:	4604      	mov	r4, r0
 800310c:	2301      	movs	r3, #1
 800310e:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003112:	f7ff ff27 	bl	8002f64 <ADC_Disable>
 8003116:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003118:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	f012 0201 	ands.w	r2, r2, #1
 8003120:	d009      	beq.n	8003136 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003122:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003124:	f043 0310 	orr.w	r3, r3, #16
 8003128:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800312a:	2300      	movs	r3, #0
 800312c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  return tmp_hal_status;
}
 8003130:	4628      	mov	r0, r5
 8003132:	b003      	add	sp, #12
 8003134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003136:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003138:	f421 7181 	bic.w	r1, r1, #258	@ 0x102
 800313c:	f041 0102 	orr.w	r1, r1, #2
 8003140:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003142:	68de      	ldr	r6, [r3, #12]
 8003144:	f426 46ff 	bic.w	r6, r6, #32640	@ 0x7f80
 8003148:	f026 067c 	bic.w	r6, r6, #124	@ 0x7c
 800314c:	0436      	lsls	r6, r6, #16
 800314e:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003150:	68d9      	ldr	r1, [r3, #12]
 8003152:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8003156:	f021 0103 	bic.w	r1, r1, #3
 800315a:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 800315c:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800315e:	e005      	b.n	800316c <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003160:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003168:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800316a:	3201      	adds	r2, #1
 800316c:	2a07      	cmp	r2, #7
 800316e:	d81e      	bhi.n	80031ae <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003170:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003172:	688b      	ldr	r3, [r1, #8]
 8003174:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003178:	f023 0317 	bic.w	r3, r3, #23
 800317c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003180:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003182:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	2900      	cmp	r1, #0
 8003188:	daea      	bge.n	8003160 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 800318a:	9b01      	ldr	r3, [sp, #4]
 800318c:	3301      	adds	r3, #1
 800318e:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003190:	9b01      	ldr	r3, [sp, #4]
 8003192:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003196:	d3f4      	bcc.n	8003182 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003198:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800319a:	f023 0312 	bic.w	r3, r3, #18
 800319e:	f043 0310 	orr.w	r3, r3, #16
 80031a2:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 80031a4:	2300      	movs	r3, #0
 80031a6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 80031aa:	2501      	movs	r5, #1
 80031ac:	e7c0      	b.n	8003130 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 80031ae:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 80031b2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80031b4:	6893      	ldr	r3, [r2, #8]
 80031b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031ba:	f023 0317 	bic.w	r3, r3, #23
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80031c4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 80031c6:	f8d2 30b4 	ldr.w	r3, [r2, #180]	@ 0xb4
 80031ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80031ce:	4318      	orrs	r0, r3
 80031d0:	f8c2 00b4 	str.w	r0, [r2, #180]	@ 0xb4
    LL_ADC_Disable(hadc->Instance);
 80031d4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80031d6:	6893      	ldr	r3, [r2, #8]
 80031d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031dc:	f023 0317 	bic.w	r3, r3, #23
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80031e6:	f7fe ffa1 	bl	800212c <HAL_GetTick>
 80031ea:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031ec:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	f012 0f01 	tst.w	r2, #1
 80031f4:	d109      	bne.n	800320a <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	4332      	orrs	r2, r6
 80031fa:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80031fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031fe:	f023 0303 	bic.w	r3, r3, #3
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003208:	e78f      	b.n	800312a <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800320a:	f7fe ff8f 	bl	800212c <HAL_GetTick>
 800320e:	1bc3      	subs	r3, r0, r7
 8003210:	2b02      	cmp	r3, #2
 8003212:	d9eb      	bls.n	80031ec <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f013 0f01 	tst.w	r3, #1
 800321c:	d0e6      	beq.n	80031ec <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003220:	f043 0310 	orr.w	r3, r3, #16
 8003224:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003226:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800322e:	2501      	movs	r5, #1
 8003230:	e77e      	b.n	8003130 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003232:	2502      	movs	r5, #2
 8003234:	e77c      	b.n	8003130 <HAL_ADCEx_Calibration_Start+0x38>
	...

08003238 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003238:	2800      	cmp	r0, #0
 800323a:	db07      	blt.n	800324c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323c:	f000 021f 	and.w	r2, r0, #31
 8003240:	0940      	lsrs	r0, r0, #5
 8003242:	2301      	movs	r3, #1
 8003244:	4093      	lsls	r3, r2
 8003246:	4a02      	ldr	r2, [pc, #8]	@ (8003250 <__NVIC_EnableIRQ+0x18>)
 8003248:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e100 	.word	0xe000e100

08003254 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003254:	2800      	cmp	r0, #0
 8003256:	db0c      	blt.n	8003272 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003258:	f000 021f 	and.w	r2, r0, #31
 800325c:	0940      	lsrs	r0, r0, #5
 800325e:	2301      	movs	r3, #1
 8003260:	4093      	lsls	r3, r2
 8003262:	3020      	adds	r0, #32
 8003264:	4a03      	ldr	r2, [pc, #12]	@ (8003274 <__NVIC_DisableIRQ+0x20>)
 8003266:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800326a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800326e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003272:	4770      	bx	lr
 8003274:	e000e100 	.word	0xe000e100

08003278 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003278:	2800      	cmp	r0, #0
 800327a:	db08      	blt.n	800328e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327c:	0109      	lsls	r1, r1, #4
 800327e:	b2c9      	uxtb	r1, r1
 8003280:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003284:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003288:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800328c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	f000 000f 	and.w	r0, r0, #15
 8003292:	0109      	lsls	r1, r1, #4
 8003294:	b2c9      	uxtb	r1, r1
 8003296:	4b01      	ldr	r3, [pc, #4]	@ (800329c <__NVIC_SetPriority+0x24>)
 8003298:	5419      	strb	r1, [r3, r0]
  }
}
 800329a:	4770      	bx	lr
 800329c:	e000ed14 	.word	0xe000ed14

080032a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a6:	f1c0 0c07 	rsb	ip, r0, #7
 80032aa:	f1bc 0f04 	cmp.w	ip, #4
 80032ae:	bf28      	it	cs
 80032b0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b4:	1d03      	adds	r3, r0, #4
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d90f      	bls.n	80032da <NVIC_EncodePriority+0x3a>
 80032ba:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	f04f 3eff 	mov.w	lr, #4294967295
 80032c0:	fa0e f00c 	lsl.w	r0, lr, ip
 80032c4:	ea21 0100 	bic.w	r1, r1, r0
 80032c8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ca:	fa0e fe03 	lsl.w	lr, lr, r3
 80032ce:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80032d2:	ea41 0002 	orr.w	r0, r1, r2
 80032d6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032da:	2300      	movs	r3, #0
 80032dc:	e7ee      	b.n	80032bc <NVIC_EncodePriority+0x1c>
	...

080032e0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e0:	4a07      	ldr	r2, [pc, #28]	@ (8003300 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80032e2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ec:	0200      	lsls	r0, r0, #8
 80032ee:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80032f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80032fc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003304:	b510      	push	{r4, lr}
 8003306:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_NVIC_SetPriority+0x1c>)
 800330a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003310:	f7ff ffc6 	bl	80032a0 <NVIC_EncodePriority>
 8003314:	4601      	mov	r1, r0
 8003316:	4620      	mov	r0, r4
 8003318:	f7ff ffae 	bl	8003278 <__NVIC_SetPriority>
}
 800331c:	bd10      	pop	{r4, pc}
 800331e:	bf00      	nop
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003324:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003326:	f7ff ff87 	bl	8003238 <__NVIC_EnableIRQ>
}
 800332a:	bd08      	pop	{r3, pc}

0800332c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800332c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800332e:	f7ff ff91 	bl	8003254 <__NVIC_DisableIRQ>
}
 8003332:	bd08      	pop	{r3, pc}

08003334 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003334:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003336:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8003338:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 800333c:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003340:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003342:	b124      	cbz	r4, 800334e <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003344:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8003346:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 800334a:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800334e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003350:	f004 0c1c 	and.w	ip, r4, #28
 8003354:	2401      	movs	r4, #1
 8003356:	fa04 f40c 	lsl.w	r4, r4, ip
 800335a:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 800335e:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003362:	6804      	ldr	r4, [r0, #0]
 8003364:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003366:	6883      	ldr	r3, [r0, #8]
 8003368:	2b10      	cmp	r3, #16
 800336a:	d005      	beq.n	8003378 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800336c:	6803      	ldr	r3, [r0, #0]
 800336e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003370:	6803      	ldr	r3, [r0, #0]
 8003372:	60da      	str	r2, [r3, #12]
  }
}
 8003374:	bc10      	pop	{r4}
 8003376:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003378:	6803      	ldr	r3, [r0, #0]
 800337a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800337c:	6803      	ldr	r3, [r0, #0]
 800337e:	60d9      	str	r1, [r3, #12]
 8003380:	e7f8      	b.n	8003374 <DMA_SetConfig+0x40>
	...

08003384 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003384:	6803      	ldr	r3, [r0, #0]
 8003386:	4a14      	ldr	r2, [pc, #80]	@ (80033d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d816      	bhi.n	80033ba <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800338c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800338e:	f022 0203 	bic.w	r2, r2, #3
 8003392:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003396:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 800339a:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800339c:	b2db      	uxtb	r3, r3
 800339e:	3b08      	subs	r3, #8
 80033a0:	4a0e      	ldr	r2, [pc, #56]	@ (80033dc <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033a8:	4a0d      	ldr	r2, [pc, #52]	@ (80033e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80033aa:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2201      	movs	r2, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	6503      	str	r3, [r0, #80]	@ 0x50
}
 80033b8:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80033ba:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80033bc:	f022 0103 	bic.w	r1, r2, #3
 80033c0:	4a08      	ldr	r2, [pc, #32]	@ (80033e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 80033c2:	440a      	add	r2, r1
 80033c4:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3b08      	subs	r3, #8
 80033ca:	4a04      	ldr	r2, [pc, #16]	@ (80033dc <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	3307      	adds	r3, #7
 80033d4:	e7e8      	b.n	80033a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80033d6:	bf00      	nop
 80033d8:	40020407 	.word	0x40020407
 80033dc:	cccccccd 	.word	0xcccccccd
 80033e0:	40020880 	.word	0x40020880
 80033e4:	4002081c 	.word	0x4002081c

080033e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033e8:	6843      	ldr	r3, [r0, #4]
 80033ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033ee:	4a07      	ldr	r2, [pc, #28]	@ (800340c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80033f0:	441a      	add	r2, r3
 80033f2:	0092      	lsls	r2, r2, #2
 80033f4:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033f6:	4a06      	ldr	r2, [pc, #24]	@ (8003410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80033f8:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033fa:	3b01      	subs	r3, #1
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2201      	movs	r2, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	1000823f 	.word	0x1000823f
 8003410:	40020940 	.word	0x40020940

08003414 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003414:	2800      	cmp	r0, #0
 8003416:	d060      	beq.n	80034da <HAL_DMA_Init+0xc6>
{
 8003418:	b510      	push	{r4, lr}
 800341a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800341c:	6802      	ldr	r2, [r0, #0]
 800341e:	4b30      	ldr	r3, [pc, #192]	@ (80034e0 <HAL_DMA_Init+0xcc>)
 8003420:	429a      	cmp	r2, r3
 8003422:	d842      	bhi.n	80034aa <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003424:	4b2f      	ldr	r3, [pc, #188]	@ (80034e4 <HAL_DMA_Init+0xd0>)
 8003426:	4413      	add	r3, r2
 8003428:	492f      	ldr	r1, [pc, #188]	@ (80034e8 <HAL_DMA_Init+0xd4>)
 800342a:	fba1 1303 	umull	r1, r3, r1, r3
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003434:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_DMA_Init+0xd8>)
 8003436:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003438:	2302      	movs	r3, #2
 800343a:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003448:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800344a:	6821      	ldr	r1, [r4, #0]
 800344c:	680a      	ldr	r2, [r1, #0]
 800344e:	68a3      	ldr	r3, [r4, #8]
 8003450:	68e0      	ldr	r0, [r4, #12]
 8003452:	4303      	orrs	r3, r0
 8003454:	6920      	ldr	r0, [r4, #16]
 8003456:	4303      	orrs	r3, r0
 8003458:	6960      	ldr	r0, [r4, #20]
 800345a:	4303      	orrs	r3, r0
 800345c:	69a0      	ldr	r0, [r4, #24]
 800345e:	4303      	orrs	r3, r0
 8003460:	69e0      	ldr	r0, [r4, #28]
 8003462:	4303      	orrs	r3, r0
 8003464:	6a20      	ldr	r0, [r4, #32]
 8003466:	4303      	orrs	r3, r0
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800346c:	4620      	mov	r0, r4
 800346e:	f7ff ff89 	bl	8003384 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003472:	68a3      	ldr	r3, [r4, #8]
 8003474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003478:	d022      	beq.n	80034c0 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800347a:	6863      	ldr	r3, [r4, #4]
 800347c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800347e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003482:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003484:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003486:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003488:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800348a:	6863      	ldr	r3, [r4, #4]
 800348c:	3b01      	subs	r3, #1
 800348e:	2b03      	cmp	r3, #3
 8003490:	d919      	bls.n	80034c6 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003496:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003498:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800349a:	2000      	movs	r0, #0
 800349c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800349e:	2301      	movs	r3, #1
 80034a0:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 80034a4:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 80034a8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034aa:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_DMA_Init+0xdc>)
 80034ac:	4413      	add	r3, r2
 80034ae:	490e      	ldr	r1, [pc, #56]	@ (80034e8 <HAL_DMA_Init+0xd4>)
 80034b0:	fba1 1303 	umull	r1, r3, r1, r3
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80034ba:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <HAL_DMA_Init+0xe0>)
 80034bc:	6403      	str	r3, [r0, #64]	@ 0x40
 80034be:	e7bb      	b.n	8003438 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034c0:	2300      	movs	r3, #0
 80034c2:	6063      	str	r3, [r4, #4]
 80034c4:	e7d9      	b.n	800347a <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7ff ff8e 	bl	80033e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80034d4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	e7df      	b.n	800349a <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80034da:	2001      	movs	r0, #1
}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40020407 	.word	0x40020407
 80034e4:	bffdfff8 	.word	0xbffdfff8
 80034e8:	cccccccd 	.word	0xcccccccd
 80034ec:	40020000 	.word	0x40020000
 80034f0:	bffdfbf8 	.word	0xbffdfbf8
 80034f4:	40020400 	.word	0x40020400

080034f8 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d04b      	beq.n	8003594 <HAL_DMA_DeInit+0x9c>
{
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003500:	6802      	ldr	r2, [r0, #0]
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800350a:	6802      	ldr	r2, [r0, #0]
 800350c:	4b22      	ldr	r3, [pc, #136]	@ (8003598 <HAL_DMA_DeInit+0xa0>)
 800350e:	429a      	cmp	r2, r3
 8003510:	d82c      	bhi.n	800356c <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003512:	4b22      	ldr	r3, [pc, #136]	@ (800359c <HAL_DMA_DeInit+0xa4>)
 8003514:	4413      	add	r3, r2
 8003516:	4922      	ldr	r1, [pc, #136]	@ (80035a0 <HAL_DMA_DeInit+0xa8>)
 8003518:	fba1 1303 	umull	r1, r3, r1, r3
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003522:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <HAL_DMA_DeInit+0xac>)
 8003524:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8003526:	2500      	movs	r5, #0
 8003528:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800352a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800352c:	f003 021c 	and.w	r2, r3, #28
 8003530:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003532:	2301      	movs	r3, #1
 8003534:	4093      	lsls	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003538:	4620      	mov	r0, r4
 800353a:	f7ff ff23 	bl	8003384 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800353e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003540:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003542:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003544:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003546:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003548:	6863      	ldr	r3, [r4, #4]
 800354a:	3b01      	subs	r3, #1
 800354c:	2b03      	cmp	r3, #3
 800354e:	d918      	bls.n	8003582 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8003550:	2000      	movs	r0, #0
 8003552:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003554:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003556:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8003558:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800355a:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800355c:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800355e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003560:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003562:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003566:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 800356a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800356c:	4b0e      	ldr	r3, [pc, #56]	@ (80035a8 <HAL_DMA_DeInit+0xb0>)
 800356e:	4413      	add	r3, r2
 8003570:	490b      	ldr	r1, [pc, #44]	@ (80035a0 <HAL_DMA_DeInit+0xa8>)
 8003572:	fba1 1303 	umull	r1, r3, r1, r3
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800357c:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <HAL_DMA_DeInit+0xb4>)
 800357e:	6403      	str	r3, [r0, #64]	@ 0x40
 8003580:	e7d1      	b.n	8003526 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003582:	4620      	mov	r0, r4
 8003584:	f7ff ff30 	bl	80033e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003588:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800358a:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800358c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800358e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	e7dd      	b.n	8003550 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003594:	2001      	movs	r0, #1
}
 8003596:	4770      	bx	lr
 8003598:	40020407 	.word	0x40020407
 800359c:	bffdfff8 	.word	0xbffdfff8
 80035a0:	cccccccd 	.word	0xcccccccd
 80035a4:	40020000 	.word	0x40020000
 80035a8:	bffdfbf8 	.word	0xbffdfbf8
 80035ac:	40020400 	.word	0x40020400

080035b0 <HAL_DMA_Start_IT>:
{
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80035b4:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 80035b8:	2801      	cmp	r0, #1
 80035ba:	d043      	beq.n	8003644 <HAL_DMA_Start_IT+0x94>
 80035bc:	2001      	movs	r0, #1
 80035be:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 80035c2:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 80035c6:	b2c0      	uxtb	r0, r0
 80035c8:	2801      	cmp	r0, #1
 80035ca:	d006      	beq.n	80035da <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80035d0:	2300      	movs	r3, #0
 80035d2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 80035d6:	2001      	movs	r0, #1
}
 80035d8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80035da:	2002      	movs	r0, #2
 80035dc:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e0:	2000      	movs	r0, #0
 80035e2:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80035e4:	6825      	ldr	r5, [r4, #0]
 80035e6:	6828      	ldr	r0, [r5, #0]
 80035e8:	f020 0001 	bic.w	r0, r0, #1
 80035ec:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035ee:	4620      	mov	r0, r4
 80035f0:	f7ff fea0 	bl	8003334 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80035f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80035f6:	b1d3      	cbz	r3, 800362e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f8:	6822      	ldr	r2, [r4, #0]
 80035fa:	6813      	ldr	r3, [r2, #0]
 80035fc:	f043 030e 	orr.w	r3, r3, #14
 8003600:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003602:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800360a:	d003      	beq.n	8003614 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003612:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8003614:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003616:	b11b      	cbz	r3, 8003620 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800361e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003620:	6822      	ldr	r2, [r4, #0]
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2000      	movs	r0, #0
 800362c:	e7d4      	b.n	80035d8 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	6813      	ldr	r3, [r2, #0]
 8003632:	f023 0304 	bic.w	r3, r3, #4
 8003636:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	f043 030a 	orr.w	r3, r3, #10
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e7de      	b.n	8003602 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003644:	2002      	movs	r0, #2
 8003646:	e7c7      	b.n	80035d8 <HAL_DMA_Start_IT+0x28>

08003648 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003648:	4603      	mov	r3, r0
 800364a:	2800      	cmp	r0, #0
 800364c:	d034      	beq.n	80036b8 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800364e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	2a02      	cmp	r2, #2
 8003656:	d006      	beq.n	8003666 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003658:	2204      	movs	r2, #4
 800365a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800365c:	2200      	movs	r2, #0
 800365e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8003662:	2001      	movs	r0, #1
 8003664:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003666:	6801      	ldr	r1, [r0, #0]
 8003668:	680a      	ldr	r2, [r1, #0]
 800366a:	f022 020e 	bic.w	r2, r2, #14
 800366e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003670:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003672:	680a      	ldr	r2, [r1, #0]
 8003674:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003678:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800367a:	6801      	ldr	r1, [r0, #0]
 800367c:	680a      	ldr	r2, [r1, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003684:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003686:	f002 011c 	and.w	r1, r2, #28
 800368a:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800368c:	2201      	movs	r2, #1
 800368e:	408a      	lsls	r2, r1
 8003690:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003692:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003694:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003696:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003698:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800369a:	b132      	cbz	r2, 80036aa <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800369c:	6811      	ldr	r1, [r2, #0]
 800369e:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80036a2:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036a6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80036a8:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80036b0:	2000      	movs	r0, #0
 80036b2:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 80036b6:	4770      	bx	lr
    return HAL_ERROR;
 80036b8:	2001      	movs	r0, #1
}
 80036ba:	4770      	bx	lr

080036bc <HAL_DMA_Abort_IT>:
{
 80036bc:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036be:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d003      	beq.n	80036d0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c8:	2304      	movs	r3, #4
 80036ca:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80036cc:	2001      	movs	r0, #1
}
 80036ce:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d0:	6802      	ldr	r2, [r0, #0]
 80036d2:	6813      	ldr	r3, [r2, #0]
 80036d4:	f023 030e 	bic.w	r3, r3, #14
 80036d8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80036da:	6802      	ldr	r2, [r0, #0]
 80036dc:	6813      	ldr	r3, [r2, #0]
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036e4:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ec:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ee:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80036f0:	f003 021c 	and.w	r2, r3, #28
 80036f4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80036f6:	2301      	movs	r3, #1
 80036f8:	4093      	lsls	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036fc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80036fe:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003700:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003702:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003704:	b133      	cbz	r3, 8003714 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800370c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800370e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003710:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8003712:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003714:	2301      	movs	r3, #1
 8003716:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800371a:	2300      	movs	r3, #0
 800371c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8003720:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003722:	b113      	cbz	r3, 800372a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003724:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003726:	2000      	movs	r0, #0
 8003728:	e7d1      	b.n	80036ce <HAL_DMA_Abort_IT+0x12>
 800372a:	2000      	movs	r0, #0
 800372c:	e7cf      	b.n	80036ce <HAL_DMA_Abort_IT+0x12>
	...

08003730 <HAL_DMA_IRQHandler>:
{
 8003730:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003732:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003734:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003736:	6804      	ldr	r4, [r0, #0]
 8003738:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800373a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800373c:	f003 031c 	and.w	r3, r3, #28
 8003740:	2204      	movs	r2, #4
 8003742:	409a      	lsls	r2, r3
 8003744:	420a      	tst	r2, r1
 8003746:	d015      	beq.n	8003774 <HAL_DMA_IRQHandler+0x44>
 8003748:	f015 0f04 	tst.w	r5, #4
 800374c:	d012      	beq.n	8003774 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	f013 0f20 	tst.w	r3, #32
 8003754:	d103      	bne.n	800375e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800375e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003760:	f003 021c 	and.w	r2, r3, #28
 8003764:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003766:	2304      	movs	r3, #4
 8003768:	4093      	lsls	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800376c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800376e:	b103      	cbz	r3, 8003772 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003770:	4798      	blx	r3
}
 8003772:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003774:	2202      	movs	r2, #2
 8003776:	409a      	lsls	r2, r3
 8003778:	420a      	tst	r2, r1
 800377a:	d028      	beq.n	80037ce <HAL_DMA_IRQHandler+0x9e>
 800377c:	f015 0f02 	tst.w	r5, #2
 8003780:	d025      	beq.n	80037ce <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	f013 0f20 	tst.w	r3, #32
 8003788:	d106      	bne.n	8003798 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	f023 030a 	bic.w	r3, r3, #10
 8003790:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003792:	2301      	movs	r3, #1
 8003794:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003798:	6802      	ldr	r2, [r0, #0]
 800379a:	4b1c      	ldr	r3, [pc, #112]	@ (800380c <HAL_DMA_IRQHandler+0xdc>)
 800379c:	429a      	cmp	r2, r3
 800379e:	d90e      	bls.n	80037be <HAL_DMA_IRQHandler+0x8e>
 80037a0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80037a2:	f003 021c 	and.w	r2, r3, #28
 80037a6:	2302      	movs	r3, #2
 80037a8:	4093      	lsls	r3, r2
 80037aa:	4a19      	ldr	r2, [pc, #100]	@ (8003810 <HAL_DMA_IRQHandler+0xe0>)
 80037ac:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80037ae:	2300      	movs	r3, #0
 80037b0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 80037b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0db      	beq.n	8003772 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80037ba:	4798      	blx	r3
 80037bc:	e7d9      	b.n	8003772 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80037be:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80037c0:	f003 021c 	and.w	r2, r3, #28
 80037c4:	2302      	movs	r3, #2
 80037c6:	4093      	lsls	r3, r2
 80037c8:	4a12      	ldr	r2, [pc, #72]	@ (8003814 <HAL_DMA_IRQHandler+0xe4>)
 80037ca:	6053      	str	r3, [r2, #4]
 80037cc:	e7ef      	b.n	80037ae <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80037ce:	2208      	movs	r2, #8
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	420b      	tst	r3, r1
 80037d6:	d0cc      	beq.n	8003772 <HAL_DMA_IRQHandler+0x42>
 80037d8:	f015 0f08 	tst.w	r5, #8
 80037dc:	d0c9      	beq.n	8003772 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	f023 030e 	bic.w	r3, r3, #14
 80037e4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037e6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80037e8:	f003 031c 	and.w	r3, r3, #28
 80037ec:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80037ee:	2201      	movs	r2, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037f6:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80037f8:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80037fc:	2300      	movs	r3, #0
 80037fe:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8003802:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0b4      	beq.n	8003772 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003808:	4798      	blx	r3
  return;
 800380a:	e7b2      	b.n	8003772 <HAL_DMA_IRQHandler+0x42>
 800380c:	40020080 	.word	0x40020080
 8003810:	40020400 	.word	0x40020400
 8003814:	40020000 	.word	0x40020000

08003818 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003818:	b178      	cbz	r0, 800383a <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 800381a:	6803      	ldr	r3, [r0, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800381e:	f011 0f10 	tst.w	r1, #16
 8003822:	d004      	beq.n	800382e <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003824:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8003828:	d004      	beq.n	8003834 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 800382a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 800382e:	601a      	str	r2, [r3, #0]
  return status;
 8003830:	2000      	movs	r0, #0
 8003832:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003834:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003838:	e7f9      	b.n	800382e <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 800383a:	2001      	movs	r0, #1
}
 800383c:	4770      	bx	lr
	...

08003840 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003842:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003844:	e069      	b.n	800391a <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003846:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003848:	005e      	lsls	r6, r3, #1
 800384a:	2403      	movs	r4, #3
 800384c:	40b4      	lsls	r4, r6
 800384e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003852:	68cc      	ldr	r4, [r1, #12]
 8003854:	40b4      	lsls	r4, r6
 8003856:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003858:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800385a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800385c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003860:	684c      	ldr	r4, [r1, #4]
 8003862:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003866:	409c      	lsls	r4, r3
 8003868:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800386a:	6044      	str	r4, [r0, #4]
 800386c:	e066      	b.n	800393c <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800386e:	08dd      	lsrs	r5, r3, #3
 8003870:	3508      	adds	r5, #8
 8003872:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003876:	f003 0c07 	and.w	ip, r3, #7
 800387a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800387e:	f04f 0e0f 	mov.w	lr, #15
 8003882:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003886:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800388a:	690c      	ldr	r4, [r1, #16]
 800388c:	fa04 f40c 	lsl.w	r4, r4, ip
 8003890:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003894:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003898:	e067      	b.n	800396a <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800389a:	2402      	movs	r4, #2
 800389c:	e000      	b.n	80038a0 <HAL_GPIO_Init+0x60>
 800389e:	2400      	movs	r4, #0
 80038a0:	fa04 f40e 	lsl.w	r4, r4, lr
 80038a4:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038a6:	f10c 0c02 	add.w	ip, ip, #2
 80038aa:	4d4b      	ldr	r5, [pc, #300]	@ (80039d8 <HAL_GPIO_Init+0x198>)
 80038ac:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038b0:	4c4a      	ldr	r4, [pc, #296]	@ (80039dc <HAL_GPIO_Init+0x19c>)
 80038b2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80038b4:	43d4      	mvns	r4, r2
 80038b6:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038ba:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80038be:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 80038c2:	d001      	beq.n	80038c8 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80038c4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80038c8:	4d44      	ldr	r5, [pc, #272]	@ (80039dc <HAL_GPIO_Init+0x19c>)
 80038ca:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80038cc:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80038ce:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038d2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80038d6:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 80038da:	d001      	beq.n	80038e0 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80038dc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80038e0:	4d3e      	ldr	r5, [pc, #248]	@ (80039dc <HAL_GPIO_Init+0x19c>)
 80038e2:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80038e4:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80038e8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038ec:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80038f0:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 80038f4:	d001      	beq.n	80038fa <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80038f6:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80038fa:	4d38      	ldr	r5, [pc, #224]	@ (80039dc <HAL_GPIO_Init+0x19c>)
 80038fc:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003900:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003904:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003906:	684e      	ldr	r6, [r1, #4]
 8003908:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800390c:	d001      	beq.n	8003912 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 800390e:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003912:	4a32      	ldr	r2, [pc, #200]	@ (80039dc <HAL_GPIO_Init+0x19c>)
 8003914:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003918:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800391a:	680a      	ldr	r2, [r1, #0]
 800391c:	fa32 f403 	lsrs.w	r4, r2, r3
 8003920:	d058      	beq.n	80039d4 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003922:	f04f 0c01 	mov.w	ip, #1
 8003926:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800392a:	ea1c 0202 	ands.w	r2, ip, r2
 800392e:	d0f3      	beq.n	8003918 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003930:	684c      	ldr	r4, [r1, #4]
 8003932:	f004 0403 	and.w	r4, r4, #3
 8003936:	3c01      	subs	r4, #1
 8003938:	2c01      	cmp	r4, #1
 800393a:	d984      	bls.n	8003846 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393c:	684c      	ldr	r4, [r1, #4]
 800393e:	f004 0403 	and.w	r4, r4, #3
 8003942:	2c03      	cmp	r4, #3
 8003944:	d00c      	beq.n	8003960 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003946:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003948:	005d      	lsls	r5, r3, #1
 800394a:	f04f 0c03 	mov.w	ip, #3
 800394e:	fa0c fc05 	lsl.w	ip, ip, r5
 8003952:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003956:	688c      	ldr	r4, [r1, #8]
 8003958:	40ac      	lsls	r4, r5
 800395a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800395e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003960:	684c      	ldr	r4, [r1, #4]
 8003962:	f004 0403 	and.w	r4, r4, #3
 8003966:	2c02      	cmp	r4, #2
 8003968:	d081      	beq.n	800386e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800396a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800396c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003970:	f04f 0c03 	mov.w	ip, #3
 8003974:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003978:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800397c:	684c      	ldr	r4, [r1, #4]
 800397e:	f004 0403 	and.w	r4, r4, #3
 8003982:	fa04 f40e 	lsl.w	r4, r4, lr
 8003986:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800398a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800398c:	684c      	ldr	r4, [r1, #4]
 800398e:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8003992:	d0c1      	beq.n	8003918 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003994:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003998:	f10c 0502 	add.w	r5, ip, #2
 800399c:	4c0e      	ldr	r4, [pc, #56]	@ (80039d8 <HAL_GPIO_Init+0x198>)
 800399e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80039a2:	f003 0e03 	and.w	lr, r3, #3
 80039a6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80039aa:	2407      	movs	r4, #7
 80039ac:	fa04 f40e 	lsl.w	r4, r4, lr
 80039b0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039b4:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80039b8:	f43f af71 	beq.w	800389e <HAL_GPIO_Init+0x5e>
 80039bc:	4c08      	ldr	r4, [pc, #32]	@ (80039e0 <HAL_GPIO_Init+0x1a0>)
 80039be:	42a0      	cmp	r0, r4
 80039c0:	d006      	beq.n	80039d0 <HAL_GPIO_Init+0x190>
 80039c2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80039c6:	42a0      	cmp	r0, r4
 80039c8:	f43f af67 	beq.w	800389a <HAL_GPIO_Init+0x5a>
 80039cc:	2407      	movs	r4, #7
 80039ce:	e767      	b.n	80038a0 <HAL_GPIO_Init+0x60>
 80039d0:	2401      	movs	r4, #1
 80039d2:	e765      	b.n	80038a0 <HAL_GPIO_Init+0x60>
  }
}
 80039d4:	bd70      	pop	{r4, r5, r6, pc}
 80039d6:	bf00      	nop
 80039d8:	40010000 	.word	0x40010000
 80039dc:	58000800 	.word	0x58000800
 80039e0:	48000400 	.word	0x48000400

080039e4 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80039e4:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80039e6:	fa31 f203 	lsrs.w	r2, r1, r3
 80039ea:	d071      	beq.n	8003ad0 <HAL_GPIO_DeInit+0xec>
{
 80039ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ee:	e02e      	b.n	8003a4e <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80039f0:	2502      	movs	r5, #2
 80039f2:	e000      	b.n	80039f6 <HAL_GPIO_DeInit+0x12>
 80039f4:	2500      	movs	r5, #0
 80039f6:	fa05 f50c 	lsl.w	r5, r5, ip
 80039fa:	42a5      	cmp	r5, r4
 80039fc:	d049      	beq.n	8003a92 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80039fe:	6804      	ldr	r4, [r0, #0]
 8003a00:	005d      	lsls	r5, r3, #1
 8003a02:	f04f 0c03 	mov.w	ip, #3
 8003a06:	fa0c fc05 	lsl.w	ip, ip, r5
 8003a0a:	ea44 040c 	orr.w	r4, r4, ip
 8003a0e:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003a10:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003a14:	f10e 0e08 	add.w	lr, lr, #8
 8003a18:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003a1c:	f003 0607 	and.w	r6, r3, #7
 8003a20:	00b6      	lsls	r6, r6, #2
 8003a22:	250f      	movs	r5, #15
 8003a24:	40b5      	lsls	r5, r6
 8003a26:	ea24 0405 	bic.w	r4, r4, r5
 8003a2a:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a2e:	6884      	ldr	r4, [r0, #8]
 8003a30:	ea24 040c 	bic.w	r4, r4, ip
 8003a34:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a36:	6844      	ldr	r4, [r0, #4]
 8003a38:	ea24 0202 	bic.w	r2, r4, r2
 8003a3c:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a3e:	68c2      	ldr	r2, [r0, #12]
 8003a40:	ea22 020c 	bic.w	r2, r2, ip
 8003a44:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003a46:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003a48:	fa31 f203 	lsrs.w	r2, r1, r3
 8003a4c:	d03f      	beq.n	8003ace <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003a52:	ea12 0701 	ands.w	r7, r2, r1
 8003a56:	d0f6      	beq.n	8003a46 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003a58:	089e      	lsrs	r6, r3, #2
 8003a5a:	1cb5      	adds	r5, r6, #2
 8003a5c:	4c1d      	ldr	r4, [pc, #116]	@ (8003ad4 <HAL_GPIO_DeInit+0xf0>)
 8003a5e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003a62:	f003 0c03 	and.w	ip, r3, #3
 8003a66:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003a6a:	f04f 0e07 	mov.w	lr, #7
 8003a6e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003a72:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003a76:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8003a7a:	d0bb      	beq.n	80039f4 <HAL_GPIO_DeInit+0x10>
 8003a7c:	4d16      	ldr	r5, [pc, #88]	@ (8003ad8 <HAL_GPIO_DeInit+0xf4>)
 8003a7e:	42a8      	cmp	r0, r5
 8003a80:	d005      	beq.n	8003a8e <HAL_GPIO_DeInit+0xaa>
 8003a82:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003a86:	42a8      	cmp	r0, r5
 8003a88:	d0b2      	beq.n	80039f0 <HAL_GPIO_DeInit+0xc>
 8003a8a:	2507      	movs	r5, #7
 8003a8c:	e7b3      	b.n	80039f6 <HAL_GPIO_DeInit+0x12>
 8003a8e:	2501      	movs	r5, #1
 8003a90:	e7b1      	b.n	80039f6 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8003a92:	4c12      	ldr	r4, [pc, #72]	@ (8003adc <HAL_GPIO_DeInit+0xf8>)
 8003a94:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8003a98:	ea25 0507 	bic.w	r5, r5, r7
 8003a9c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003aa0:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8003aa4:	ea25 0507 	bic.w	r5, r5, r7
 8003aa8:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8003aac:	6825      	ldr	r5, [r4, #0]
 8003aae:	ea25 0507 	bic.w	r5, r5, r7
 8003ab2:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003ab4:	6865      	ldr	r5, [r4, #4]
 8003ab6:	ea25 0507 	bic.w	r5, r5, r7
 8003aba:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003abc:	4d05      	ldr	r5, [pc, #20]	@ (8003ad4 <HAL_GPIO_DeInit+0xf0>)
 8003abe:	3602      	adds	r6, #2
 8003ac0:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8003ac4:	ea24 040e 	bic.w	r4, r4, lr
 8003ac8:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8003acc:	e797      	b.n	80039fe <HAL_GPIO_DeInit+0x1a>
  }
}
 8003ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40010000 	.word	0x40010000
 8003ad8:	48000400 	.word	0x48000400
 8003adc:	58000800 	.word	0x58000800

08003ae0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ae0:	b10a      	cbz	r2, 8003ae6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ae2:	6181      	str	r1, [r0, #24]
 8003ae4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ae6:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003ae8:	4770      	bx	lr

08003aea <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aea:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aec:	ea01 0203 	and.w	r2, r1, r3
 8003af0:	ea21 0103 	bic.w	r1, r1, r3
 8003af4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003af8:	6181      	str	r1, [r0, #24]
}
 8003afa:	4770      	bx	lr

08003afc <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003afc:	4a02      	ldr	r2, [pc, #8]	@ (8003b08 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003afe:	6813      	ldr	r3, [r2, #0]
 8003b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b04:	6013      	str	r3, [r2, #0]
}
 8003b06:	4770      	bx	lr
 8003b08:	58000400 	.word	0x58000400

08003b0c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003b10:	b9a0      	cbnz	r0, 8003b3c <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003b12:	4b0f      	ldr	r3, [pc, #60]	@ (8003b50 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003b1a:	d10a      	bne.n	8003b32 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b54 <HAL_PWR_EnterSLEEPMode+0x48>)
 8003b1e:	6913      	ldr	r3, [r2, #16]
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003b26:	2c01      	cmp	r4, #1
 8003b28:	d010      	beq.n	8003b4c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003b2a:	bf40      	sev
    __WFE();
 8003b2c:	bf20      	wfe
    __WFE();
 8003b2e:	bf20      	wfe
  }
}
 8003b30:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003b32:	f000 f821 	bl	8003b78 <HAL_PWREx_DisableLowPowerRunMode>
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_PWR_EnterSLEEPMode+0x10>
 8003b3a:	e7f9      	b.n	8003b30 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003b3c:	4b04      	ldr	r3, [pc, #16]	@ (8003b50 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003b44:	d1ea      	bne.n	8003b1c <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8003b46:	f000 f80f 	bl	8003b68 <HAL_PWREx_EnableLowPowerRunMode>
 8003b4a:	e7e7      	b.n	8003b1c <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8003b4c:	bf30      	wfi
 8003b4e:	e7ef      	b.n	8003b30 <HAL_PWR_EnterSLEEPMode+0x24>
 8003b50:	58000400 	.word	0x58000400
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003b58:	4b02      	ldr	r3, [pc, #8]	@ (8003b64 <HAL_PWREx_GetVoltageRange+0xc>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
}
 8003b5c:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	58000400 	.word	0x58000400

08003b68 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003b68:	4a02      	ldr	r2, [pc, #8]	@ (8003b74 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b70:	6013      	str	r3, [r2, #0]
}
 8003b72:	4770      	bx	lr
 8003b74:	58000400 	.word	0x58000400

08003b78 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003b78:	4a0f      	ldr	r2, [pc, #60]	@ (8003bb8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b80:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003b82:	4b0e      	ldr	r3, [pc, #56]	@ (8003bbc <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2232      	movs	r2, #50	@ 0x32
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc0 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003b94:	e000      	b.n	8003b98 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8003b96:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003b98:	4a07      	ldr	r2, [pc, #28]	@ (8003bb8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003b9a:	6952      	ldr	r2, [r2, #20]
 8003b9c:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8003ba0:	d001      	beq.n	8003ba6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f7      	bne.n	8003b96 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003ba6:	4b04      	ldr	r3, [pc, #16]	@ (8003bb8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003bae:	d101      	bne.n	8003bb4 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	4770      	bx	lr
    return HAL_TIMEOUT;
 8003bb4:	2003      	movs	r0, #3
}
 8003bb6:	4770      	bx	lr
 8003bb8:	58000400 	.word	0x58000400
 8003bbc:	20000004 	.word	0x20000004
 8003bc0:	431bde83 	.word	0x431bde83

08003bc4 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8003bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf8 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	f023 0307 	bic.w	r3, r3, #7
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003bd4:	6913      	ldr	r3, [r2, #16]
 8003bd6:	f043 0304 	orr.w	r3, r3, #4
 8003bda:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003bdc:	2801      	cmp	r0, #1
 8003bde:	d008      	beq.n	8003bf2 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003be0:	bf40      	sev
    __WFE();
 8003be2:	bf20      	wfe
    __WFE();
 8003be4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003be6:	4a05      	ldr	r2, [pc, #20]	@ (8003bfc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003be8:	6913      	ldr	r3, [r2, #16]
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6113      	str	r3, [r2, #16]
}
 8003bf0:	4770      	bx	lr
    __WFI();
 8003bf2:	bf30      	wfi
 8003bf4:	e7f7      	b.n	8003be6 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8003bf6:	bf00      	nop
 8003bf8:	58000400 	.word	0x58000400
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003c00:	b530      	push	{r4, r5, lr}
 8003c02:	b089      	sub	sp, #36	@ 0x24
 8003c04:	4604      	mov	r4, r0
 8003c06:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003c08:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb4 <RCC_SetFlashLatency+0xb4>)
 8003c0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c0e:	9006      	str	r0, [sp, #24]
 8003c10:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003c14:	f103 0208 	add.w	r2, r3, #8
 8003c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c1c:	9004      	str	r0, [sp, #16]
 8003c1e:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003c22:	ad01      	add	r5, sp, #4
 8003c24:	3310      	adds	r3, #16
 8003c26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c2e:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8003c32:	d007      	beq.n	8003c44 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c34:	2300      	movs	r3, #0
 8003c36:	e014      	b.n	8003c62 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8003c38:	aa08      	add	r2, sp, #32
 8003c3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003c3e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003c42:	e01e      	b.n	8003c82 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d808      	bhi.n	8003c5c <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c4a:	aa08      	add	r2, sp, #32
 8003c4c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003c50:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8003c54:	42a2      	cmp	r2, r4
 8003c56:	d2ef      	bcs.n	8003c38 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c58:	3301      	adds	r3, #1
 8003c5a:	e7f4      	b.n	8003c46 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003c5c:	2500      	movs	r5, #0
 8003c5e:	e010      	b.n	8003c82 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c60:	3301      	adds	r3, #1
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d80c      	bhi.n	8003c80 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c66:	aa08      	add	r2, sp, #32
 8003c68:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003c6c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8003c70:	42a2      	cmp	r2, r4
 8003c72:	d3f5      	bcc.n	8003c60 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c74:	aa08      	add	r2, sp, #32
 8003c76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003c7a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003c7e:	e000      	b.n	8003c82 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003c80:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c82:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb8 <RCC_SetFlashLatency+0xb8>)
 8003c84:	6813      	ldr	r3, [r2, #0]
 8003c86:	f023 0307 	bic.w	r3, r3, #7
 8003c8a:	432b      	orrs	r3, r5
 8003c8c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c8e:	f7fe fa4d 	bl	800212c <HAL_GetTick>
 8003c92:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c94:	4b08      	ldr	r3, [pc, #32]	@ (8003cb8 <RCC_SetFlashLatency+0xb8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	42ab      	cmp	r3, r5
 8003c9e:	d006      	beq.n	8003cae <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ca0:	f7fe fa44 	bl	800212c <HAL_GetTick>
 8003ca4:	1b00      	subs	r0, r0, r4
 8003ca6:	2802      	cmp	r0, #2
 8003ca8:	d9f4      	bls.n	8003c94 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8003caa:	2003      	movs	r0, #3
 8003cac:	e000      	b.n	8003cb0 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8003cae:	2000      	movs	r0, #0
}
 8003cb0:	b009      	add	sp, #36	@ 0x24
 8003cb2:	bd30      	pop	{r4, r5, pc}
 8003cb4:	0800a048 	.word	0x0800a048
 8003cb8:	58004000 	.word	0x58004000

08003cbc <RCC_SetFlashLatencyFromMSIRange>:
{
 8003cbc:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003cbe:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8003cc4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ccc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	4a08      	ldr	r2, [pc, #32]	@ (8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8003cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cda:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003cde:	f7ff ff3b 	bl	8003b58 <HAL_PWREx_GetVoltageRange>
 8003ce2:	4601      	mov	r1, r0
 8003ce4:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8003ce6:	fba3 3404 	umull	r3, r4, r3, r4
 8003cea:	0ca0      	lsrs	r0, r4, #18
 8003cec:	f7ff ff88 	bl	8003c00 <RCC_SetFlashLatency>
}
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	bf00      	nop
 8003cf4:	0800a94c 	.word	0x0800a94c
 8003cf8:	0800a9ac 	.word	0x0800a9ac
 8003cfc:	431bde83 	.word	0x431bde83

08003d00 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d04:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d0c:	f011 010c 	ands.w	r1, r1, #12
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x28>
 8003d12:	290c      	cmp	r1, #12
 8003d14:	d006      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d16:	2904      	cmp	r1, #4
 8003d18:	d047      	beq.n	8003daa <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d1a:	2908      	cmp	r1, #8
 8003d1c:	d03b      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8003d1e:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8003d20:	4610      	mov	r0, r2
 8003d22:	e026      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d1f6      	bne.n	8003d16 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f013 0308 	ands.w	r3, r3, #8
 8003d32:	d00d      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x50>
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f013 0308 	ands.w	r3, r3, #8
 8003d3e:	d124      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003d40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d44:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003d48:	4a2e      	ldr	r2, [pc, #184]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d4e:	e00e      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	f012 0f08 	tst.w	r2, #8
 8003d5a:	d112      	bne.n	8003d82 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d64:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003d68:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d6e:	b1d1      	cbz	r1, 8003da6 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8003d70:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d7c:	2b0c      	cmp	r3, #12
 8003d7e:	d01a      	beq.n	8003db6 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8003d80:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003d82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	e7ee      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x68>
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8e:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003d90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d94:	e7d8      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 8003da0:	d106      	bne.n	8003db0 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8003da2:	4819      	ldr	r0, [pc, #100]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da4:	e7e5      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8003da6:	4610      	mov	r0, r2
 8003da8:	e7e3      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8003daa:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8003dac:	4817      	ldr	r0, [pc, #92]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dae:	e7e0      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8003db0:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8003db2:	4816      	ldr	r0, [pc, #88]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003db4:	e7dd      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d009      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xd8>
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d108      	bne.n	8003dda <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8003dd2:	d115      	bne.n	8003e00 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003dda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dde:	68cb      	ldr	r3, [r1, #12]
 8003de0:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003de4:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003de8:	68cb      	ldr	r3, [r1, #12]
 8003dea:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003dee:	3301      	adds	r3, #1
 8003df0:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003df4:	68c8      	ldr	r0, [r1, #12]
 8003df6:	0f40      	lsrs	r0, r0, #29
 8003df8:	3001      	adds	r0, #1
 8003dfa:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8003dfe:	e7bf      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8003e00:	4a02      	ldr	r2, [pc, #8]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e02:	e7ea      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0xda>
 8003e04:	0800a94c 	.word	0x0800a94c
 8003e08:	01e84800 	.word	0x01e84800
 8003e0c:	00f42400 	.word	0x00f42400

08003e10 <HAL_RCC_GetHCLKFreq>:
{
 8003e10:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003e12:	f7ff ff75 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e20:	4a02      	ldr	r2, [pc, #8]	@ (8003e2c <HAL_RCC_GetHCLKFreq+0x1c>)
 8003e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003e26:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e2a:	bd08      	pop	{r3, pc}
 8003e2c:	0800a9ac 	.word	0x0800a9ac

08003e30 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003e30:	2800      	cmp	r0, #0
 8003e32:	f000 8311 	beq.w	8004458 <HAL_RCC_OscConfig+0x628>
{
 8003e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e38:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e3e:	689d      	ldr	r5, [r3, #8]
 8003e40:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003e44:	68de      	ldr	r6, [r3, #12]
 8003e46:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e4a:	6803      	ldr	r3, [r0, #0]
 8003e4c:	f013 0f20 	tst.w	r3, #32
 8003e50:	d02a      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e52:	2d00      	cmp	r5, #0
 8003e54:	d065      	beq.n	8003f22 <HAL_RCC_OscConfig+0xf2>
 8003e56:	2d0c      	cmp	r5, #12
 8003e58:	d061      	beq.n	8003f1e <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e5a:	6a23      	ldr	r3, [r4, #32]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80bf 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e6e:	f7fe f95d 	bl	800212c <HAL_GetTick>
 8003e72:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f013 0f02 	tst.w	r3, #2
 8003e7e:	f000 80a7 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	f042 0208 	orr.w	r2, r2, #8
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003e94:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003e96:	430a      	orrs	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e9a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003ea2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ea6:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	f013 0f01 	tst.w	r3, #1
 8003eae:	f000 80b5 	beq.w	800401c <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003eb2:	2d08      	cmp	r5, #8
 8003eb4:	f000 80ae 	beq.w	8004014 <HAL_RCC_OscConfig+0x1e4>
 8003eb8:	2d0c      	cmp	r5, #12
 8003eba:	f000 80a8 	beq.w	800400e <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003ebe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ec2:	6813      	ldr	r3, [r2, #0]
 8003ec4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ec8:	68a1      	ldr	r1, [r4, #8]
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ece:	6863      	ldr	r3, [r4, #4]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed4:	f000 80c4 	beq.w	8004060 <HAL_RCC_OscConfig+0x230>
 8003ed8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003edc:	f000 80c5 	beq.w	800406a <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003eea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003ef2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef4:	6863      	ldr	r3, [r4, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80c2 	beq.w	8004080 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8003efc:	f7fe f916 	bl	800212c <HAL_GetTick>
 8003f00:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003f0c:	f040 8086 	bne.w	800401c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fe f90c 	bl	800212c <HAL_GetTick>
 8003f14:	1bc0      	subs	r0, r0, r7
 8003f16:	2864      	cmp	r0, #100	@ 0x64
 8003f18:	d9f3      	bls.n	8003f02 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8003f1a:	2003      	movs	r0, #3
 8003f1c:	e2a9      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f1e:	2e01      	cmp	r6, #1
 8003f20:	d19b      	bne.n	8003e5a <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003f22:	6a23      	ldr	r3, [r4, #32]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8299 	beq.w	800445c <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f2a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f013 0f08 	tst.w	r3, #8
 8003f36:	d029      	beq.n	8003f8c <HAL_RCC_OscConfig+0x15c>
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f42:	4298      	cmp	r0, r3
 8003f44:	d92a      	bls.n	8003f9c <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f46:	f7ff feb9 	bl	8003cbc <RCC_SetFlashLatencyFromMSIRange>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	f040 8288 	bne.w	8004460 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	f042 0208 	orr.w	r2, r2, #8
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003f62:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003f70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f74:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f76:	f7ff ff4b 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003f7a:	4bba      	ldr	r3, [pc, #744]	@ (8004264 <HAL_RCC_OscConfig+0x434>)
 8003f7c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003f7e:	4bba      	ldr	r3, [pc, #744]	@ (8004268 <HAL_RCC_OscConfig+0x438>)
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	f7fe f8d1 	bl	8002128 <HAL_InitTick>
        if (status != HAL_OK)
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d08e      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x78>
 8003f8a:	e272      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f9a:	e7d2      	b.n	8003f42 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003fae:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003fbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003fc0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fc2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003fc4:	f7ff fe7a 	bl	8003cbc <RCC_SetFlashLatencyFromMSIRange>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d0d4      	beq.n	8003f76 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8003fcc:	2001      	movs	r0, #1
 8003fce:	e250      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd0:	f7fe f8ac 	bl	800212c <HAL_GetTick>
 8003fd4:	1bc0      	subs	r0, r0, r7
 8003fd6:	2802      	cmp	r0, #2
 8003fd8:	f67f af4c 	bls.w	8003e74 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8003fdc:	2003      	movs	r0, #3
 8003fde:	e248      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003fe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003fec:	f7fe f89e 	bl	800212c <HAL_GetTick>
 8003ff0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f013 0f02 	tst.w	r3, #2
 8003ffc:	f43f af54 	beq.w	8003ea8 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004000:	f7fe f894 	bl	800212c <HAL_GetTick>
 8004004:	1bc0      	subs	r0, r0, r7
 8004006:	2802      	cmp	r0, #2
 8004008:	d9f3      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 800400a:	2003      	movs	r0, #3
 800400c:	e231      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800400e:	2e03      	cmp	r6, #3
 8004010:	f47f af55 	bne.w	8003ebe <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004014:	6863      	ldr	r3, [r4, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8224 	beq.w	8004464 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	f013 0f02 	tst.w	r3, #2
 8004022:	d056      	beq.n	80040d2 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004024:	2d04      	cmp	r5, #4
 8004026:	d03d      	beq.n	80040a4 <HAL_RCC_OscConfig+0x274>
 8004028:	2d0c      	cmp	r5, #12
 800402a:	d039      	beq.n	80040a0 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 808a 	beq.w	8004148 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004034:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800403e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004040:	f7fe f874 	bl	800212c <HAL_GetTick>
 8004044:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004050:	d136      	bne.n	80040c0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004052:	f7fe f86b 	bl	800212c <HAL_GetTick>
 8004056:	1b80      	subs	r0, r0, r6
 8004058:	2802      	cmp	r0, #2
 800405a:	d9f4      	bls.n	8004046 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 800405c:	2003      	movs	r0, #3
 800405e:	e208      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	e744      	b.n	8003ef4 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8004074:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800407c:	601a      	str	r2, [r3, #0]
}
 800407e:	e739      	b.n	8003ef4 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8004080:	f7fe f854 	bl	800212c <HAL_GetTick>
 8004084:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004090:	d0c4      	beq.n	800401c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004092:	f7fe f84b 	bl	800212c <HAL_GetTick>
 8004096:	1bc0      	subs	r0, r0, r7
 8004098:	2864      	cmp	r0, #100	@ 0x64
 800409a:	d9f4      	bls.n	8004086 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 800409c:	2003      	movs	r0, #3
 800409e:	e1e8      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040a0:	2e02      	cmp	r6, #2
 80040a2:	d1c3      	bne.n	800402c <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 81de 	beq.w	8004468 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ac:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80040ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040b2:	6853      	ldr	r3, [r2, #4]
 80040b4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80040b8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80040bc:	6053      	str	r3, [r2, #4]
}
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80040c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040c6:	6853      	ldr	r3, [r2, #4]
 80040c8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80040cc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80040d0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	f013 0f08 	tst.w	r3, #8
 80040d8:	d07e      	beq.n	80041d8 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040da:	69a3      	ldr	r3, [r4, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d062      	beq.n	80041a6 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 80040e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80040e8:	69e1      	ldr	r1, [r4, #28]
 80040ea:	f003 0210 	and.w	r2, r3, #16
 80040ee:	4291      	cmp	r1, r2
 80040f0:	d011      	beq.n	8004116 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80040f2:	f003 0203 	and.w	r2, r3, #3
 80040f6:	2a02      	cmp	r2, #2
 80040f8:	f000 81b8 	beq.w	800446c <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80040fc:	f013 0f01 	tst.w	r3, #1
 8004100:	d138      	bne.n	8004174 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004102:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004106:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800410a:	f023 0310 	bic.w	r3, r3, #16
 800410e:	69e1      	ldr	r1, [r4, #28]
 8004110:	430b      	orrs	r3, r1
 8004112:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004116:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800411a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004126:	f7fe f801 	bl	800212c <HAL_GetTick>
 800412a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004134:	f013 0f02 	tst.w	r3, #2
 8004138:	d14e      	bne.n	80041d8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800413a:	f7fd fff7 	bl	800212c <HAL_GetTick>
 800413e:	1b80      	subs	r0, r0, r6
 8004140:	2811      	cmp	r0, #17
 8004142:	d9f3      	bls.n	800412c <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8004144:	2003      	movs	r0, #3
 8004146:	e194      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800414c:	6813      	ldr	r3, [r2, #0]
 800414e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004152:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004154:	f7fd ffea 	bl	800212c <HAL_GetTick>
 8004158:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800415a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004164:	d0b5      	beq.n	80040d2 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004166:	f7fd ffe1 	bl	800212c <HAL_GetTick>
 800416a:	1b80      	subs	r0, r0, r6
 800416c:	2802      	cmp	r0, #2
 800416e:	d9f4      	bls.n	800415a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8004170:	2003      	movs	r0, #3
 8004172:	e17e      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004178:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8004184:	f7fd ffd2 	bl	800212c <HAL_GetTick>
 8004188:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004192:	f013 0f02 	tst.w	r3, #2
 8004196:	d0b4      	beq.n	8004102 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004198:	f7fd ffc8 	bl	800212c <HAL_GetTick>
 800419c:	1b80      	subs	r0, r0, r6
 800419e:	2811      	cmp	r0, #17
 80041a0:	d9f3      	bls.n	800418a <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 80041a2:	2003      	movs	r0, #3
 80041a4:	e165      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80041a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041aa:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80041b6:	f7fd ffb9 	bl	800212c <HAL_GetTick>
 80041ba:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c4:	f013 0f02 	tst.w	r3, #2
 80041c8:	d006      	beq.n	80041d8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ca:	f7fd ffaf 	bl	800212c <HAL_GetTick>
 80041ce:	1b80      	subs	r0, r0, r6
 80041d0:	2811      	cmp	r0, #17
 80041d2:	d9f3      	bls.n	80041bc <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80041d4:	2003      	movs	r0, #3
 80041d6:	e14c      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	f013 0f04 	tst.w	r3, #4
 80041de:	f000 80b8 	beq.w	8004352 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80041e2:	4b22      	ldr	r3, [pc, #136]	@ (800426c <HAL_RCC_OscConfig+0x43c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80041ea:	d110      	bne.n	800420e <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 80041ec:	f7ff fc86 	bl	8003afc <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80041f0:	f7fd ff9c 	bl	800212c <HAL_GetTick>
 80041f4:	4606      	mov	r6, r0
 80041f6:	4b1d      	ldr	r3, [pc, #116]	@ (800426c <HAL_RCC_OscConfig+0x43c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80041fe:	d106      	bne.n	800420e <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004200:	f7fd ff94 	bl	800212c <HAL_GetTick>
 8004204:	1b80      	subs	r0, r0, r6
 8004206:	2802      	cmp	r0, #2
 8004208:	d9f5      	bls.n	80041f6 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 800420a:	2003      	movs	r0, #3
 800420c:	e131      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800420e:	68e3      	ldr	r3, [r4, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d068      	beq.n	80042e6 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004214:	2b85      	cmp	r3, #133	@ 0x85
 8004216:	d001      	beq.n	800421c <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004218:	2b05      	cmp	r3, #5
 800421a:	d107      	bne.n	800422c <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800421c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004220:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800422c:	f7fd ff7e 	bl	800212c <HAL_GetTick>
 8004230:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004232:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004236:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424a:	f013 0f02 	tst.w	r3, #2
 800424e:	d10f      	bne.n	8004270 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fd ff6c 	bl	800212c <HAL_GetTick>
 8004254:	1b80      	subs	r0, r0, r6
 8004256:	f241 3388 	movw	r3, #5000	@ 0x1388
 800425a:	4298      	cmp	r0, r3
 800425c:	d9f1      	bls.n	8004242 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 800425e:	2003      	movs	r0, #3
 8004260:	e107      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
 8004262:	bf00      	nop
 8004264:	20000004 	.word	0x20000004
 8004268:	20000008 	.word	0x20000008
 800426c:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004270:	68e3      	ldr	r3, [r4, #12]
 8004272:	2b81      	cmp	r3, #129	@ 0x81
 8004274:	d001      	beq.n	800427a <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004276:	2b85      	cmp	r3, #133	@ 0x85
 8004278:	d11a      	bne.n	80042b0 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 800427a:	f7fd ff57 	bl	800212c <HAL_GetTick>
 800427e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004284:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800428c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004298:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800429c:	d159      	bne.n	8004352 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fd ff45 	bl	800212c <HAL_GetTick>
 80042a2:	1b80      	subs	r0, r0, r6
 80042a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042a8:	4298      	cmp	r0, r3
 80042aa:	d9f1      	bls.n	8004290 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80042ac:	2003      	movs	r0, #3
 80042ae:	e0e0      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 80042b0:	f7fd ff3c 	bl	800212c <HAL_GetTick>
 80042b4:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80042b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80042be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80042d2:	d03e      	beq.n	8004352 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fd ff2a 	bl	800212c <HAL_GetTick>
 80042d8:	1b80      	subs	r0, r0, r6
 80042da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042de:	4298      	cmp	r0, r3
 80042e0:	d9f1      	bls.n	80042c6 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 80042e2:	2003      	movs	r0, #3
 80042e4:	e0c5      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80042e6:	f7fd ff21 	bl	800212c <HAL_GetTick>
 80042ea:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80042ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80042f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004304:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004308:	d008      	beq.n	800431c <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fd ff0f 	bl	800212c <HAL_GetTick>
 800430e:	1b80      	subs	r0, r0, r6
 8004310:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004314:	4298      	cmp	r0, r3
 8004316:	d9f1      	bls.n	80042fc <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8004318:	2003      	movs	r0, #3
 800431a:	e0aa      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 800431c:	f7fd ff06 	bl	800212c <HAL_GetTick>
 8004320:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004322:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004326:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	f013 0f02 	tst.w	r3, #2
 800433e:	d008      	beq.n	8004352 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004340:	f7fd fef4 	bl	800212c <HAL_GetTick>
 8004344:	1b80      	subs	r0, r0, r6
 8004346:	f241 3388 	movw	r3, #5000	@ 0x1388
 800434a:	4298      	cmp	r0, r3
 800434c:	d9f1      	bls.n	8004332 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 800434e:	2003      	movs	r0, #3
 8004350:	e08f      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004352:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 808b 	beq.w	8004470 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800435a:	2d0c      	cmp	r5, #12
 800435c:	d060      	beq.n	8004420 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800435e:	2b02      	cmp	r3, #2
 8004360:	d016      	beq.n	8004390 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004362:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004366:	6813      	ldr	r3, [r2, #0]
 8004368:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800436c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800436e:	f7fd fedd 	bl	800212c <HAL_GetTick>
 8004372:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800437e:	d148      	bne.n	8004412 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004380:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004384:	68d1      	ldr	r1, [r2, #12]
 8004386:	4b41      	ldr	r3, [pc, #260]	@ (800448c <HAL_RCC_OscConfig+0x65c>)
 8004388:	400b      	ands	r3, r1
 800438a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800438c:	2000      	movs	r0, #0
 800438e:	e070      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004390:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004394:	6813      	ldr	r3, [r2, #0]
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800439a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800439c:	f7fd fec6 	bl	800212c <HAL_GetTick>
 80043a0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80043ac:	d12a      	bne.n	8004404 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043b2:	68d3      	ldr	r3, [r2, #12]
 80043b4:	4936      	ldr	r1, [pc, #216]	@ (8004490 <HAL_RCC_OscConfig+0x660>)
 80043b6:	4019      	ands	r1, r3
 80043b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80043ba:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80043bc:	4303      	orrs	r3, r0
 80043be:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80043c0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80043c4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80043c6:	4303      	orrs	r3, r0
 80043c8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80043ca:	4303      	orrs	r3, r0
 80043cc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80043ce:	4303      	orrs	r3, r0
 80043d0:	4319      	orrs	r1, r3
 80043d2:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80043d4:	6813      	ldr	r3, [r2, #0]
 80043d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043da:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043dc:	68d3      	ldr	r3, [r2, #12]
 80043de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80043e4:	f7fd fea2 	bl	800212c <HAL_GetTick>
 80043e8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80043f4:	d13e      	bne.n	8004474 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f6:	f7fd fe99 	bl	800212c <HAL_GetTick>
 80043fa:	1b00      	subs	r0, r0, r4
 80043fc:	280a      	cmp	r0, #10
 80043fe:	d9f4      	bls.n	80043ea <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8004400:	2003      	movs	r0, #3
 8004402:	e036      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd fe92 	bl	800212c <HAL_GetTick>
 8004408:	1b40      	subs	r0, r0, r5
 800440a:	280a      	cmp	r0, #10
 800440c:	d9c9      	bls.n	80043a2 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800440e:	2003      	movs	r0, #3
 8004410:	e02f      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004412:	f7fd fe8b 	bl	800212c <HAL_GetTick>
 8004416:	1b00      	subs	r0, r0, r4
 8004418:	280a      	cmp	r0, #10
 800441a:	d9ab      	bls.n	8004374 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 800441c:	2003      	movs	r0, #3
 800441e:	e028      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004420:	2b01      	cmp	r3, #1
 8004422:	d029      	beq.n	8004478 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004428:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800442a:	f003 0103 	and.w	r1, r3, #3
 800442e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004430:	4291      	cmp	r1, r2
 8004432:	d123      	bne.n	800447c <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004434:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800443a:	428a      	cmp	r2, r1
 800443c:	d120      	bne.n	8004480 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800443e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004442:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004444:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004448:	d11c      	bne.n	8004484 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800444a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800444e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004450:	4293      	cmp	r3, r2
 8004452:	d119      	bne.n	8004488 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8004454:	2000      	movs	r0, #0
 8004456:	e00c      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8004458:	2001      	movs	r0, #1
}
 800445a:	4770      	bx	lr
        return HAL_ERROR;
 800445c:	2001      	movs	r0, #1
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8004460:	2001      	movs	r0, #1
 8004462:	e006      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004464:	2001      	movs	r0, #1
 8004466:	e004      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004468:	2001      	movs	r0, #1
 800446a:	e002      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800446c:	2001      	movs	r0, #1
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8004470:	2000      	movs	r0, #0
}
 8004472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004474:	2000      	movs	r0, #0
 8004476:	e7fc      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004478:	2001      	movs	r0, #1
 800447a:	e7fa      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800447c:	2001      	movs	r0, #1
 800447e:	e7f8      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
 8004480:	2001      	movs	r0, #1
 8004482:	e7f6      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
 8004484:	2001      	movs	r0, #1
 8004486:	e7f4      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
 8004488:	2001      	movs	r0, #1
 800448a:	e7f2      	b.n	8004472 <HAL_RCC_OscConfig+0x642>
 800448c:	eefefffc 	.word	0xeefefffc
 8004490:	11c1808c 	.word	0x11c1808c

08004494 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004494:	2800      	cmp	r0, #0
 8004496:	f000 8127 	beq.w	80046e8 <HAL_RCC_ClockConfig+0x254>
{
 800449a:	b570      	push	{r4, r5, r6, lr}
 800449c:	460c      	mov	r4, r1
 800449e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a0:	4b93      	ldr	r3, [pc, #588]	@ (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	428b      	cmp	r3, r1
 80044aa:	d32d      	bcc.n	8004508 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	f013 0f02 	tst.w	r3, #2
 80044b2:	d13f      	bne.n	8004534 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	f013 0f20 	tst.w	r3, #32
 80044ba:	d153      	bne.n	8004564 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80044c2:	d16a      	bne.n	800459a <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	f013 0f04 	tst.w	r3, #4
 80044ca:	f040 8083 	bne.w	80045d4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	f013 0f08 	tst.w	r3, #8
 80044d4:	f040 8097 	bne.w	8004606 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	f013 0f01 	tst.w	r3, #1
 80044de:	f000 80de 	beq.w	800469e <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e2:	686b      	ldr	r3, [r5, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f000 80a8 	beq.w	800463a <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	f000 80ad 	beq.w	800464a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 80b2 	bne.w	800465a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80044f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	f012 0f02 	tst.w	r2, #2
 8004500:	f040 80b1 	bne.w	8004666 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004504:	2001      	movs	r0, #1
 8004506:	e0ee      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004508:	4a79      	ldr	r2, [pc, #484]	@ (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	f023 0307 	bic.w	r3, r3, #7
 8004510:	430b      	orrs	r3, r1
 8004512:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004514:	f7fd fe0a 	bl	800212c <HAL_GetTick>
 8004518:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b75      	ldr	r3, [pc, #468]	@ (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	42a3      	cmp	r3, r4
 8004524:	d0c2      	beq.n	80044ac <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004526:	f7fd fe01 	bl	800212c <HAL_GetTick>
 800452a:	1b80      	subs	r0, r0, r6
 800452c:	2802      	cmp	r0, #2
 800452e:	d9f4      	bls.n	800451a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004530:	2003      	movs	r0, #3
 8004532:	e0d8      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800453a:	688a      	ldr	r2, [r1, #8]
 800453c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004544:	f7fd fdf2 	bl	800212c <HAL_GetTick>
 8004548:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004554:	d1ae      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004556:	f7fd fde9 	bl	800212c <HAL_GetTick>
 800455a:	1b80      	subs	r0, r0, r6
 800455c:	2802      	cmp	r0, #2
 800455e:	d9f4      	bls.n	800454a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004560:	2003      	movs	r0, #3
 8004562:	e0c0      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004564:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004566:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800456a:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 800456e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8004578:	f7fd fdd8 	bl	800212c <HAL_GetTick>
 800457c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800457e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004582:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004586:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800458a:	d197      	bne.n	80044bc <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800458c:	f7fd fdce 	bl	800212c <HAL_GetTick>
 8004590:	1b80      	subs	r0, r0, r6
 8004592:	2802      	cmp	r0, #2
 8004594:	d9f3      	bls.n	800457e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004596:	2003      	movs	r0, #3
 8004598:	e0a5      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800459a:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800459c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045a0:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 80045a4:	f023 030f 	bic.w	r3, r3, #15
 80045a8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80045ac:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 80045b0:	f7fd fdbc 	bl	800212c <HAL_GetTick>
 80045b4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045be:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80045c2:	f47f af7f 	bne.w	80044c4 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045c6:	f7fd fdb1 	bl	800212c <HAL_GetTick>
 80045ca:	1b80      	subs	r0, r0, r6
 80045cc:	2802      	cmp	r0, #2
 80045ce:	d9f2      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80045d0:	2003      	movs	r0, #3
 80045d2:	e088      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80045d4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80045d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045da:	688a      	ldr	r2, [r1, #8]
 80045dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045e0:	4313      	orrs	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80045e4:	f7fd fda2 	bl	800212c <HAL_GetTick>
 80045e8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80045ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80045f4:	f47f af6b 	bne.w	80044ce <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045f8:	f7fd fd98 	bl	800212c <HAL_GetTick>
 80045fc:	1b80      	subs	r0, r0, r6
 80045fe:	2802      	cmp	r0, #2
 8004600:	d9f3      	bls.n	80045ea <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004602:	2003      	movs	r0, #3
 8004604:	e06f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004606:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004608:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800460c:	6893      	ldr	r3, [r2, #8]
 800460e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004612:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004616:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004618:	f7fd fd88 	bl	800212c <HAL_GetTick>
 800461c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800461e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8004628:	f47f af56 	bne.w	80044d8 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800462c:	f7fd fd7e 	bl	800212c <HAL_GetTick>
 8004630:	1b80      	subs	r0, r0, r6
 8004632:	2802      	cmp	r0, #2
 8004634:	d9f3      	bls.n	800461e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004636:	2003      	movs	r0, #3
 8004638:	e055      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800463a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8004644:	d10f      	bne.n	8004666 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004646:	2001      	movs	r0, #1
 8004648:	e04d      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800464a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004656:	2001      	movs	r0, #1
 8004658:	e045      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800465a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8004664:	d042      	beq.n	80046ec <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800466a:	688a      	ldr	r2, [r1, #8]
 800466c:	f022 0203 	bic.w	r2, r2, #3
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004674:	f7fd fd5a 	bl	800212c <HAL_GetTick>
 8004678:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800467a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004684:	686a      	ldr	r2, [r5, #4]
 8004686:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800468a:	d008      	beq.n	800469e <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468c:	f7fd fd4e 	bl	800212c <HAL_GetTick>
 8004690:	1b80      	subs	r0, r0, r6
 8004692:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004696:	4298      	cmp	r0, r3
 8004698:	d9ef      	bls.n	800467a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800469a:	2003      	movs	r0, #3
 800469c:	e023      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800469e:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	42a3      	cmp	r3, r4
 80046a8:	d915      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4a11      	ldr	r2, [pc, #68]	@ (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 80046ac:	6813      	ldr	r3, [r2, #0]
 80046ae:	f023 0307 	bic.w	r3, r3, #7
 80046b2:	4323      	orrs	r3, r4
 80046b4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80046b6:	f7fd fd39 	bl	800212c <HAL_GetTick>
 80046ba:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046bc:	4b0c      	ldr	r3, [pc, #48]	@ (80046f0 <HAL_RCC_ClockConfig+0x25c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	d006      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80046c8:	f7fd fd30 	bl	800212c <HAL_GetTick>
 80046cc:	1b40      	subs	r0, r0, r5
 80046ce:	2802      	cmp	r0, #2
 80046d0:	d9f4      	bls.n	80046bc <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80046d2:	2003      	movs	r0, #3
 80046d4:	e007      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046d6:	f7ff fb9b 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 80046da:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <HAL_RCC_ClockConfig+0x260>)
 80046dc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_RCC_ClockConfig+0x264>)
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	f7fd fd21 	bl	8002128 <HAL_InitTick>
}
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80046e8:	2001      	movs	r0, #1
}
 80046ea:	4770      	bx	lr
        return HAL_ERROR;
 80046ec:	2001      	movs	r0, #1
 80046ee:	e7fa      	b.n	80046e6 <HAL_RCC_ClockConfig+0x252>
 80046f0:	58004000 	.word	0x58004000
 80046f4:	20000004 	.word	0x20000004
 80046f8:	20000008 	.word	0x20000008

080046fc <HAL_RCC_GetPCLK1Freq>:
{
 80046fc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80046fe:	f7ff fb87 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800470c:	4a02      	ldr	r2, [pc, #8]	@ (8004718 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800470e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004712:	40d8      	lsrs	r0, r3
 8004714:	bd08      	pop	{r3, pc}
 8004716:	bf00      	nop
 8004718:	0800a98c 	.word	0x0800a98c

0800471c <HAL_RCC_GetPCLK2Freq>:
{
 800471c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800471e:	f7ff fb77 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800472c:	4a02      	ldr	r2, [pc, #8]	@ (8004738 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800472e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004732:	40d8      	lsrs	r0, r3
 8004734:	bd08      	pop	{r3, pc}
 8004736:	bf00      	nop
 8004738:	0800a98c 	.word	0x0800a98c

0800473c <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800473c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004740:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004744:	0902      	lsrs	r2, r0, #4
 8004746:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 800474a:	ea23 0302 	bic.w	r3, r3, r2
 800474e:	0100      	lsls	r0, r0, #4
 8004750:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 8004754:	4303      	orrs	r3, r0
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800475a:	4770      	bx	lr

0800475c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004760:	6803      	ldr	r3, [r0, #0]
 8004762:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004766:	f040 80aa 	bne.w	80048be <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800476a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	f013 0f01 	tst.w	r3, #1
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004774:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004776:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800477a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800477e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004782:	b292      	uxth	r2, r2
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	f013 0f02 	tst.w	r3, #2
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004792:	68a2      	ldr	r2, [r4, #8]
 8004794:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004798:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800479c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80047a0:	b292      	uxth	r2, r2
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	f013 0f20 	tst.w	r3, #32
 80047ae:	d009      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047b0:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80047b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80047ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80047ca:	d00c      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047cc:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80047ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80047d6:	0c02      	lsrs	r2, r0, #16
 80047d8:	0412      	lsls	r2, r2, #16
 80047da:	ea23 0302 	bic.w	r3, r3, r2
 80047de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80047ec:	d00c      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ee:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80047f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047f4:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80047f8:	0c02      	lsrs	r2, r0, #16
 80047fa:	0412      	lsls	r2, r2, #16
 80047fc:	ea23 0302 	bic.w	r3, r3, r2
 8004800:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800480e:	d00c      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004810:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004812:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004816:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800481a:	0c02      	lsrs	r2, r0, #16
 800481c:	0412      	lsls	r2, r2, #16
 800481e:	ea23 0302 	bic.w	r3, r3, r2
 8004822:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004830:	f040 809d 	bne.w	800496e <HAL_RCCEx_PeriphCLKConfig+0x212>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800483a:	f040 809c 	bne.w	8004976 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004844:	f040 809b 	bne.w	800497e <HAL_RCCEx_PeriphCLKConfig+0x222>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	f013 0f10 	tst.w	r3, #16
 800484e:	d00e      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004850:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004852:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004856:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800485a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004864:	68e3      	ldr	r3, [r4, #12]
 8004866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800486a:	f000 808c 	beq.w	8004986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004874:	d00f      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004876:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004878:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800487c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004880:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800488a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800488c:	b91b      	cbnz	r3, 8004896 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800488e:	68cb      	ldr	r3, [r1, #12]
 8004890:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004894:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800489c:	d00d      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800489e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80048a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80048a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80048b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80048b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048b8:	d06a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80048ba:	4628      	mov	r0, r5
 80048bc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80048be:	f7ff f91d 	bl	8003afc <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80048c2:	f7fd fc33 	bl	800212c <HAL_GetTick>
 80048c6:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80048c8:	4b34      	ldr	r3, [pc, #208]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80048d0:	d106      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d2:	f7fd fc2b 	bl	800212c <HAL_GetTick>
 80048d6:	1b40      	subs	r0, r0, r5
 80048d8:	2802      	cmp	r0, #2
 80048da:	d9f5      	bls.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 80048dc:	2503      	movs	r5, #3
 80048de:	e000      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80048e0:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80048e2:	2d00      	cmp	r5, #0
 80048e4:	f47f af42 	bne.w	800476c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80048f4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d024      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004902:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004906:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800490a:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800490e:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004912:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8004916:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800491a:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800491e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004922:	f012 0f02 	tst.w	r2, #2
 8004926:	d10f      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      if (ret == HAL_OK)
 8004928:	2d00      	cmp	r5, #0
 800492a:	f47f af1f 	bne.w	800476c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800492e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004930:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004934:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004938:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004942:	e713      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004944:	2200      	movs	r2, #0
 8004946:	e7ec      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        tickstart = HAL_GetTick();
 8004948:	f7fd fbf0 	bl	800212c <HAL_GetTick>
 800494c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800494e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004956:	f013 0f02 	tst.w	r3, #2
 800495a:	d1e5      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f7fd fbe6 	bl	800212c <HAL_GetTick>
 8004960:	1b80      	subs	r0, r0, r6
 8004962:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004966:	4298      	cmp	r0, r3
 8004968:	d9f1      	bls.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            ret = HAL_TIMEOUT;
 800496a:	2503      	movs	r5, #3
 800496c:	e7dc      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800496e:	6960      	ldr	r0, [r4, #20]
 8004970:	f7ff fee4 	bl	800473c <LL_RCC_SetI2CClockSource>
 8004974:	e75e      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004976:	69a0      	ldr	r0, [r4, #24]
 8004978:	f7ff fee0 	bl	800473c <LL_RCC_SetI2CClockSource>
 800497c:	e75f      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800497e:	69e0      	ldr	r0, [r4, #28]
 8004980:	f7ff fedc 	bl	800473c <LL_RCC_SetI2CClockSource>
 8004984:	e760      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004986:	68cb      	ldr	r3, [r1, #12]
 8004988:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800498c:	60cb      	str	r3, [r1, #12]
 800498e:	e76e      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004990:	68cb      	ldr	r3, [r1, #12]
 8004992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004996:	60cb      	str	r3, [r1, #12]
 8004998:	e78f      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800499a:	bf00      	nop
 800499c:	58000400 	.word	0x58000400

080049a0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80049a0:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049a2:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 80049a6:	2a01      	cmp	r2, #1
 80049a8:	d035      	beq.n	8004a16 <HAL_RTC_DeactivateAlarm+0x76>
 80049aa:	2201      	movs	r2, #1
 80049ac:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049b0:	2202      	movs	r2, #2
 80049b2:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049b6:	4a19      	ldr	r2, [pc, #100]	@ (8004a1c <HAL_RTC_DeactivateAlarm+0x7c>)
 80049b8:	20ca      	movs	r0, #202	@ 0xca
 80049ba:	6250      	str	r0, [r2, #36]	@ 0x24
 80049bc:	2053      	movs	r0, #83	@ 0x53
 80049be:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80049c0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80049c4:	d018      	beq.n	80049f8 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80049c6:	4a15      	ldr	r2, [pc, #84]	@ (8004a1c <HAL_RTC_DeactivateAlarm+0x7c>)
 80049c8:	6991      	ldr	r1, [r2, #24]
 80049ca:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 80049ce:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80049d0:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 80049d2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80049d6:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80049d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80049da:	f021 0102 	bic.w	r1, r1, #2
 80049de:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80049e0:	2102      	movs	r1, #2
 80049e2:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e4:	4a0d      	ldr	r2, [pc, #52]	@ (8004a1c <HAL_RTC_DeactivateAlarm+0x7c>)
 80049e6:	21ff      	movs	r1, #255	@ 0xff
 80049e8:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049f0:	2000      	movs	r0, #0
 80049f2:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 80049f6:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80049f8:	6991      	ldr	r1, [r2, #24]
 80049fa:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 80049fe:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004a00:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004a02:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004a06:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004a08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a0a:	f021 0101 	bic.w	r1, r1, #1
 8004a0e:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004a10:	2101      	movs	r1, #1
 8004a12:	65d1      	str	r1, [r2, #92]	@ 0x5c
 8004a14:	e7e6      	b.n	80049e4 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8004a16:	2002      	movs	r0, #2
}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40002800 	.word	0x40002800

08004a20 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004a24:	4b0d      	ldr	r3, [pc, #52]	@ (8004a5c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004a26:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8004a28:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004a2a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004a2c:	f015 0f01 	tst.w	r5, #1
 8004a30:	d106      	bne.n	8004a40 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004a32:	f015 0f02 	tst.w	r5, #2
 8004a36:	d109      	bne.n	8004a4c <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004a40:	4b06      	ldr	r3, [pc, #24]	@ (8004a5c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004a46:	f7fd fd37 	bl	80024b8 <HAL_RTC_AlarmAEventCallback>
 8004a4a:	e7f2      	b.n	8004a32 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004a4e:	2202      	movs	r2, #2
 8004a50:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 f9ee 	bl	8004e34 <HAL_RTCEx_AlarmBEventCallback>
 8004a58:	e7ee      	b.n	8004a38 <HAL_RTC_AlarmIRQHandler+0x18>
 8004a5a:	bf00      	nop
 8004a5c:	40002800 	.word	0x40002800

08004a60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a60:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004a62:	4a0b      	ldr	r2, [pc, #44]	@ (8004a90 <HAL_RTC_WaitForSynchro+0x30>)
 8004a64:	68d3      	ldr	r3, [r2, #12]
 8004a66:	f023 0320 	bic.w	r3, r3, #32
 8004a6a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004a6c:	f7fd fb5e 	bl	800212c <HAL_GetTick>
 8004a70:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004a72:	4b07      	ldr	r3, [pc, #28]	@ (8004a90 <HAL_RTC_WaitForSynchro+0x30>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f013 0f20 	tst.w	r3, #32
 8004a7a:	d107      	bne.n	8004a8c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a7c:	f7fd fb56 	bl	800212c <HAL_GetTick>
 8004a80:	1b00      	subs	r0, r0, r4
 8004a82:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004a86:	d9f4      	bls.n	8004a72 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8004a88:	2003      	movs	r0, #3
 8004a8a:	e000      	b.n	8004a8e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004a8c:	2000      	movs	r0, #0
}
 8004a8e:	bd10      	pop	{r4, pc}
 8004a90:	40002800 	.word	0x40002800

08004a94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a94:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004a96:	4b11      	ldr	r3, [pc, #68]	@ (8004adc <RTC_EnterInitMode+0x48>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004a9e:	d002      	beq.n	8004aa6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	bd70      	pop	{r4, r5, r6, pc}
 8004aa6:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8004adc <RTC_EnterInitMode+0x48>)
 8004aaa:	68d3      	ldr	r3, [r2, #12]
 8004aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab0:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004ab2:	f7fd fb3b 	bl	800212c <HAL_GetTick>
 8004ab6:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004aba:	4b08      	ldr	r3, [pc, #32]	@ (8004adc <RTC_EnterInitMode+0x48>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004ac2:	d1ee      	bne.n	8004aa2 <RTC_EnterInitMode+0xe>
 8004ac4:	2c03      	cmp	r4, #3
 8004ac6:	d0ec      	beq.n	8004aa2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ac8:	f7fd fb30 	bl	800212c <HAL_GetTick>
 8004acc:	1b43      	subs	r3, r0, r5
 8004ace:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ad2:	d9f2      	bls.n	8004aba <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ad4:	2403      	movs	r4, #3
 8004ad6:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 8004ada:	e7ee      	b.n	8004aba <RTC_EnterInitMode+0x26>
 8004adc:	40002800 	.word	0x40002800

08004ae0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ae4:	4b10      	ldr	r3, [pc, #64]	@ (8004b28 <RTC_ExitInitMode+0x48>)
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004aec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f013 0f20 	tst.w	r3, #32
 8004af4:	d106      	bne.n	8004b04 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004af6:	f7ff ffb3 	bl	8004a60 <HAL_RTC_WaitForSynchro>
 8004afa:	b198      	cbz	r0, 8004b24 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004afc:	2003      	movs	r0, #3
 8004afe:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8004b02:	e00f      	b.n	8004b24 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b04:	4a08      	ldr	r2, [pc, #32]	@ (8004b28 <RTC_ExitInitMode+0x48>)
 8004b06:	6993      	ldr	r3, [r2, #24]
 8004b08:	f023 0320 	bic.w	r3, r3, #32
 8004b0c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b0e:	f7ff ffa7 	bl	8004a60 <HAL_RTC_WaitForSynchro>
 8004b12:	b110      	cbz	r0, 8004b1a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b14:	2003      	movs	r0, #3
 8004b16:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b1a:	4a03      	ldr	r2, [pc, #12]	@ (8004b28 <RTC_ExitInitMode+0x48>)
 8004b1c:	6993      	ldr	r3, [r2, #24]
 8004b1e:	f043 0320 	orr.w	r3, r3, #32
 8004b22:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	bf00      	nop
 8004b28:	40002800 	.word	0x40002800

08004b2c <HAL_RTC_Init>:
  if (hrtc != NULL)
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d055      	beq.n	8004bdc <HAL_RTC_Init+0xb0>
{
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b34:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8004b38:	b163      	cbz	r3, 8004b54 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004b40:	4b27      	ldr	r3, [pc, #156]	@ (8004be0 <HAL_RTC_Init+0xb4>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f013 0f10 	tst.w	r3, #16
 8004b48:	d009      	beq.n	8004b5e <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8004b4a:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8004b54:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 8004b58:	f7fd f9d4 	bl	8001f04 <HAL_RTC_MspInit>
 8004b5c:	e7ed      	b.n	8004b3a <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b5e:	4b20      	ldr	r3, [pc, #128]	@ (8004be0 <HAL_RTC_Init+0xb4>)
 8004b60:	22ca      	movs	r2, #202	@ 0xca
 8004b62:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b64:	2253      	movs	r2, #83	@ 0x53
 8004b66:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7ff ff93 	bl	8004a94 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8004b6e:	b118      	cbz	r0, 8004b78 <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b70:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <HAL_RTC_Init+0xb4>)
 8004b72:	22ff      	movs	r2, #255	@ 0xff
 8004b74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8004b76:	e7ec      	b.n	8004b52 <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004b78:	4b19      	ldr	r3, [pc, #100]	@ (8004be0 <HAL_RTC_Init+0xb4>)
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 8004b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b84:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004b86:	6999      	ldr	r1, [r3, #24]
 8004b88:	6862      	ldr	r2, [r4, #4]
 8004b8a:	6920      	ldr	r0, [r4, #16]
 8004b8c:	4302      	orrs	r2, r0
 8004b8e:	69a0      	ldr	r0, [r4, #24]
 8004b90:	4302      	orrs	r2, r0
 8004b92:	430a      	orrs	r2, r1
 8004b94:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004b96:	68e2      	ldr	r2, [r4, #12]
 8004b98:	68a1      	ldr	r1, [r4, #8]
 8004b9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004b9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8004ba6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004ba8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004baa:	4301      	orrs	r1, r0
 8004bac:	430a      	orrs	r2, r1
 8004bae:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7ff ff95 	bl	8004ae0 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8004bb6:	b118      	cbz	r0, 8004bc0 <HAL_RTC_Init+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bb8:	4b09      	ldr	r3, [pc, #36]	@ (8004be0 <HAL_RTC_Init+0xb4>)
 8004bba:	22ff      	movs	r2, #255	@ 0xff
 8004bbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8004bbe:	e7c8      	b.n	8004b52 <HAL_RTC_Init+0x26>
          MODIFY_REG(RTC->CR, \
 8004bc0:	4907      	ldr	r1, [pc, #28]	@ (8004be0 <HAL_RTC_Init+0xb4>)
 8004bc2:	698b      	ldr	r3, [r1, #24]
 8004bc4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8004bc8:	6a22      	ldr	r2, [r4, #32]
 8004bca:	69e5      	ldr	r5, [r4, #28]
 8004bcc:	432a      	orrs	r2, r5
 8004bce:	6965      	ldr	r5, [r4, #20]
 8004bd0:	432a      	orrs	r2, r5
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd6:	23ff      	movs	r3, #255	@ 0xff
 8004bd8:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 8004bda:	e7b7      	b.n	8004b4c <HAL_RTC_Init+0x20>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bdc:	2001      	movs	r0, #1
}
 8004bde:	4770      	bx	lr
 8004be0:	40002800 	.word	0x40002800

08004be4 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004be4:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8004be6:	e002      	b.n	8004bee <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8004be8:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8004bea:	380a      	subs	r0, #10
 8004bec:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8004bee:	2809      	cmp	r0, #9
 8004bf0:	d8fa      	bhi.n	8004be8 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	b2db      	uxtb	r3, r3
}
 8004bf6:	4318      	orrs	r0, r3
 8004bf8:	4770      	bx	lr
	...

08004bfc <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004bfc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	f000 80b0 	beq.w	8004d66 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8004c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c14:	2302      	movs	r3, #2
 8004c16:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8004c1a:	4b54      	ldr	r3, [pc, #336]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004c1c:	68de      	ldr	r6, [r3, #12]
 8004c1e:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8004c22:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8004c26:	d043      	beq.n	8004cb0 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8004c28:	bb12      	cbnz	r2, 8004c70 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004c30:	d101      	bne.n	8004c36 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004c36:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c3a:	7820      	ldrb	r0, [r4, #0]
 8004c3c:	f7ff ffd2 	bl	8004be4 <RTC_ByteToBcd2>
 8004c40:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c42:	7860      	ldrb	r0, [r4, #1]
 8004c44:	f7ff ffce 	bl	8004be4 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c48:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c4c:	78a0      	ldrb	r0, [r4, #2]
 8004c4e:	f7ff ffc9 	bl	8004be4 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c52:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c54:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c56:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c5a:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8004c5e:	f7ff ffc1 	bl	8004be4 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c62:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004c66:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c68:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c6a:	ea48 0000 	orr.w	r0, r8, r0
 8004c6e:	e020      	b.n	8004cb2 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004c70:	6948      	ldr	r0, [r1, #20]
 8004c72:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 8004c76:	d009      	beq.n	8004c8c <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004c78:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8004c7c:	d006      	beq.n	8004c8c <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004c86:	d101      	bne.n	8004c8c <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c8c:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c8e:	7863      	ldrb	r3, [r4, #1]
 8004c90:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c96:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c98:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c9a:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c9c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ca0:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ca4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ca8:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004caa:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004cac:	4318      	orrs	r0, r3
 8004cae:	e000      	b.n	8004cb2 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8004cb0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004cb4:	22ca      	movs	r2, #202	@ 0xca
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004cb8:	2253      	movs	r2, #83	@ 0x53
 8004cba:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004cbc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc2:	d02a      	beq.n	8004d1a <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004cc4:	4b29      	ldr	r3, [pc, #164]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004cc6:	699a      	ldr	r2, [r3, #24]
 8004cc8:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8004ccc:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004cce:	2202      	movs	r2, #2
 8004cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004cd2:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8004cd6:	d040      	beq.n	8004d5a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004cd8:	4b24      	ldr	r3, [pc, #144]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004cda:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004cdc:	69a2      	ldr	r2, [r4, #24]
 8004cde:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004ce0:	6862      	ldr	r2, [r4, #4]
 8004ce2:	4b22      	ldr	r3, [pc, #136]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004ce4:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004ce6:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8004ce8:	f042 0202 	orr.w	r2, r2, #2
 8004cec:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 8004cf4:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d70 <HAL_RTC_SetAlarm_IT+0x174>)
 8004cf8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8004cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d04:	4b19      	ldr	r3, [pc, #100]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004d06:	22ff      	movs	r2, #255	@ 0xff
 8004d08:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8004d10:	2000      	movs	r0, #0
 8004d12:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 8004d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004d1a:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8004d22:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004d24:	2201      	movs	r2, #1
 8004d26:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004d28:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8004d2c:	d00f      	beq.n	8004d4e <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004d30:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004d32:	69a2      	ldr	r2, [r4, #24]
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004d36:	6862      	ldr	r2, [r4, #4]
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004d3a:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004d3c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8004d4a:	619a      	str	r2, [r3, #24]
 8004d4c:	e7d3      	b.n	8004cf6 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004d4e:	69a3      	ldr	r3, [r4, #24]
 8004d50:	69e2      	ldr	r2, [r4, #28]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	4a05      	ldr	r2, [pc, #20]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004d56:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d58:	e7ed      	b.n	8004d36 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004d5a:	69a3      	ldr	r3, [r4, #24]
 8004d5c:	69e2      	ldr	r2, [r4, #28]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	4a02      	ldr	r2, [pc, #8]	@ (8004d6c <HAL_RTC_SetAlarm_IT+0x170>)
 8004d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d64:	e7bc      	b.n	8004ce0 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8004d66:	2002      	movs	r0, #2
}
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40002800 	.word	0x40002800
 8004d70:	58000800 	.word	0x58000800

08004d74 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d74:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d017      	beq.n	8004dac <HAL_RTCEx_EnableBypassShadow+0x38>
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d82:	2302      	movs	r3, #2
 8004d84:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d88:	4b09      	ldr	r3, [pc, #36]	@ (8004db0 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8004d8a:	22ca      	movs	r2, #202	@ 0xca
 8004d8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d8e:	2253      	movs	r2, #83	@ 0x53
 8004d90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	f042 0220 	orr.w	r2, r2, #32
 8004d98:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d9a:	22ff      	movs	r2, #255	@ 0xff
 8004d9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004d9e:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004da2:	2300      	movs	r3, #0
 8004da4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8004da8:	4618      	mov	r0, r3
 8004daa:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8004dac:	2002      	movs	r0, #2
}
 8004dae:	4770      	bx	lr
 8004db0:	40002800 	.word	0x40002800

08004db4 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004db4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d020      	beq.n	8004dfe <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8004dbc:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dca:	4b0e      	ldr	r3, [pc, #56]	@ (8004e04 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8004dcc:	22ca      	movs	r2, #202	@ 0xca
 8004dce:	625a      	str	r2, [r3, #36]	@ 0x24
 8004dd0:	2253      	movs	r2, #83	@ 0x53
 8004dd2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004dda:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8004ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8004e08 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8004dde:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8004de2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004de6:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dea:	22ff      	movs	r2, #255	@ 0xff
 8004dec:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004dee:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004df2:	2300      	movs	r3, #0
 8004df4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8004df8:	4618      	mov	r0, r3
}
 8004dfa:	bc10      	pop	{r4}
 8004dfc:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8004dfe:	2002      	movs	r0, #2
}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40002800 	.word	0x40002800
 8004e08:	58000800 	.word	0x58000800

08004e0c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004e10:	4b07      	ldr	r3, [pc, #28]	@ (8004e30 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004e18:	d103      	bne.n	8004e22 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8004e20:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8004e22:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8004e24:	2240      	movs	r2, #64	@ 0x40
 8004e26:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004e28:	f7fd fb4a 	bl	80024c0 <HAL_RTCEx_SSRUEventCallback>
 8004e2c:	e7f5      	b.n	8004e1a <HAL_RTCEx_SSRUIRQHandler+0xe>
 8004e2e:	bf00      	nop
 8004e30:	40002800 	.word	0x40002800

08004e34 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004e34:	4770      	bx	lr

08004e36 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8004e36:	0089      	lsls	r1, r1, #2
 8004e38:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8004e3c:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004e40:	600a      	str	r2, [r1, #0]
}
 8004e42:	4770      	bx	lr

08004e44 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8004e44:	0089      	lsls	r1, r1, #2
 8004e46:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8004e4a:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004e4e:	6808      	ldr	r0, [r1, #0]
}
 8004e50:	4770      	bx	lr
	...

08004e54 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004e54:	4b07      	ldr	r3, [pc, #28]	@ (8004e74 <SUBGHZSPI_Init+0x20>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e5c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004e5e:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 8004e62:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004e64:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004e68:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e70:	601a      	str	r2, [r3, #0]
}
 8004e72:	4770      	bx	lr
 8004e74:	58010000 	.word	0x58010000

08004e78 <HAL_SUBGHZ_Init>:
{
 8004e78:	b530      	push	{r4, r5, lr}
 8004e7a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d05d      	beq.n	8004f3c <HAL_SUBGHZ_Init+0xc4>
 8004e80:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8004e82:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004e84:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8004e88:	b10b      	cbz	r3, 8004e8e <HAL_SUBGHZ_Init+0x16>
 8004e8a:	2d03      	cmp	r5, #3
 8004e8c:	d10b      	bne.n	8004ea6 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8004e92:	4620      	mov	r0, r4
 8004e94:	f7fd f8d6 	bl	8002044 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004e98:	4a29      	ldr	r2, [pc, #164]	@ (8004f40 <HAL_SUBGHZ_Init+0xc8>)
 8004e9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004e9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ea2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004ea6:	b185      	cbz	r5, 8004eca <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004ea8:	4b26      	ldr	r3, [pc, #152]	@ (8004f44 <HAL_SUBGHZ_Init+0xcc>)
 8004eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004eae:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8004eb0:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004eb2:	6820      	ldr	r0, [r4, #0]
 8004eb4:	f7ff ffce 	bl	8004e54 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	71a3      	strb	r3, [r4, #6]
}
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	b003      	add	sp, #12
 8004ec8:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ed2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004ed6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004eda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004ede:	4b1a      	ldr	r3, [pc, #104]	@ (8004f48 <HAL_SUBGHZ_Init+0xd0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004ee6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004eea:	2264      	movs	r2, #100	@ 0x64
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	e014      	b.n	8004f1e <HAL_SUBGHZ_Init+0xa6>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004ef4:	2501      	movs	r5, #1
 8004ef6:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ef8:	4b12      	ldr	r3, [pc, #72]	@ (8004f44 <HAL_SUBGHZ_Init+0xcc>)
 8004efa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004efe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f0c:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004f0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f12:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	d1d3      	bne.n	8004ec0 <HAL_SUBGHZ_Init+0x48>
 8004f18:	e7cb      	b.n	8004eb2 <HAL_SUBGHZ_Init+0x3a>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0ec      	beq.n	8004ef8 <HAL_SUBGHZ_Init+0x80>
      if (count == 0U)
 8004f1e:	9b01      	ldr	r3, [sp, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0e7      	beq.n	8004ef4 <HAL_SUBGHZ_Init+0x7c>
      count--;
 8004f24:	9b01      	ldr	r3, [sp, #4]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f32:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 8004f36:	d0f0      	beq.n	8004f1a <HAL_SUBGHZ_Init+0xa2>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e7ee      	b.n	8004f1a <HAL_SUBGHZ_Init+0xa2>
    return status;
 8004f3c:	2501      	movs	r5, #1
 8004f3e:	e7c1      	b.n	8004ec4 <HAL_SUBGHZ_Init+0x4c>
 8004f40:	58000800 	.word	0x58000800
 8004f44:	58000400 	.word	0x58000400
 8004f48:	20000004 	.word	0x20000004

08004f4c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004f50:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <SUBGHZSPI_Transmit+0x70>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004f58:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004f5c:	2064      	movs	r0, #100	@ 0x64
 8004f5e:	fb00 f303 	mul.w	r3, r0, r3
 8004f62:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004f64:	9b01      	ldr	r3, [sp, #4]
 8004f66:	b14b      	cbz	r3, 8004f7c <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004f68:	9b01      	ldr	r3, [sp, #4]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004f6e:	4b14      	ldr	r3, [pc, #80]	@ (8004fc0 <SUBGHZSPI_Transmit+0x74>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f013 0f02 	tst.w	r3, #2
 8004f76:	d0f5      	beq.n	8004f64 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2000      	movs	r0, #0
 8004f7a:	e001      	b.n	8004f80 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8004f80:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc0 <SUBGHZSPI_Transmit+0x74>)
 8004f82:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004f84:	4b0d      	ldr	r3, [pc, #52]	@ (8004fbc <SUBGHZSPI_Transmit+0x70>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004f8c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004f90:	2164      	movs	r1, #100	@ 0x64
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004f98:	9b01      	ldr	r3, [sp, #4]
 8004f9a:	b143      	cbz	r3, 8004fae <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004f9c:	9b01      	ldr	r3, [sp, #4]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004fa2:	4b07      	ldr	r3, [pc, #28]	@ (8004fc0 <SUBGHZSPI_Transmit+0x74>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f013 0f01 	tst.w	r3, #1
 8004faa:	d0f5      	beq.n	8004f98 <SUBGHZSPI_Transmit+0x4c>
 8004fac:	e001      	b.n	8004fb2 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004fae:	2001      	movs	r0, #1
 8004fb0:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004fb2:	4b03      	ldr	r3, [pc, #12]	@ (8004fc0 <SUBGHZSPI_Transmit+0x74>)
 8004fb4:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8004fb6:	b002      	add	sp, #8
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000004 	.word	0x20000004
 8004fc0:	58010000 	.word	0x58010000

08004fc4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800503c <SUBGHZSPI_Receive+0x78>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004fd0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004fd4:	2064      	movs	r0, #100	@ 0x64
 8004fd6:	fb00 f303 	mul.w	r3, r0, r3
 8004fda:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004fdc:	9b01      	ldr	r3, [sp, #4]
 8004fde:	b14b      	cbz	r3, 8004ff4 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004fe0:	9b01      	ldr	r3, [sp, #4]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004fe6:	4b16      	ldr	r3, [pc, #88]	@ (8005040 <SUBGHZSPI_Receive+0x7c>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f013 0f02 	tst.w	r3, #2
 8004fee:	d0f5      	beq.n	8004fdc <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e001      	b.n	8004ff8 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8004ff8:	4b11      	ldr	r3, [pc, #68]	@ (8005040 <SUBGHZSPI_Receive+0x7c>)
 8004ffa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004ffe:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005002:	4b0e      	ldr	r3, [pc, #56]	@ (800503c <SUBGHZSPI_Receive+0x78>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800500a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800500e:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8005012:	fb0c f303 	mul.w	r3, ip, r3
 8005016:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005018:	9b01      	ldr	r3, [sp, #4]
 800501a:	b143      	cbz	r3, 800502e <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800501c:	9b01      	ldr	r3, [sp, #4]
 800501e:	3b01      	subs	r3, #1
 8005020:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005022:	4b07      	ldr	r3, [pc, #28]	@ (8005040 <SUBGHZSPI_Receive+0x7c>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f013 0f01 	tst.w	r3, #1
 800502a:	d0f5      	beq.n	8005018 <SUBGHZSPI_Receive+0x54>
 800502c:	e001      	b.n	8005032 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800502e:	2001      	movs	r0, #1
 8005030:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005032:	4b03      	ldr	r3, [pc, #12]	@ (8005040 <SUBGHZSPI_Receive+0x7c>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005038:	b002      	add	sp, #8
 800503a:	4770      	bx	lr
 800503c:	20000004 	.word	0x20000004
 8005040:	58010000 	.word	0x58010000

08005044 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005044:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005046:	4b13      	ldr	r3, [pc, #76]	@ (8005094 <SUBGHZ_WaitOnBusy+0x50>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800504e:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005052:	2264      	movs	r2, #100	@ 0x64
 8005054:	fb02 f303 	mul.w	r3, r2, r3
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	e006      	b.n	800506a <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800505c:	2302      	movs	r3, #2
 800505e:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005060:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005062:	b002      	add	sp, #8
 8005064:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005066:	4213      	tst	r3, r2
 8005068:	d012      	beq.n	8005090 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800506a:	4b0b      	ldr	r3, [pc, #44]	@ (8005098 <SUBGHZ_WaitOnBusy+0x54>)
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f013 0304 	ands.w	r3, r3, #4
 8005072:	d000      	beq.n	8005076 <SUBGHZ_WaitOnBusy+0x32>
 8005074:	2301      	movs	r3, #1
    if (count == 0U)
 8005076:	9a01      	ldr	r2, [sp, #4]
 8005078:	2a00      	cmp	r2, #0
 800507a:	d0ef      	beq.n	800505c <SUBGHZ_WaitOnBusy+0x18>
    count--;
 800507c:	9a01      	ldr	r2, [sp, #4]
 800507e:	3a01      	subs	r2, #1
 8005080:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005082:	4a05      	ldr	r2, [pc, #20]	@ (8005098 <SUBGHZ_WaitOnBusy+0x54>)
 8005084:	6952      	ldr	r2, [r2, #20]
 8005086:	f012 0202 	ands.w	r2, r2, #2
 800508a:	d0ec      	beq.n	8005066 <SUBGHZ_WaitOnBusy+0x22>
 800508c:	2201      	movs	r2, #1
 800508e:	e7ea      	b.n	8005066 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8005090:	2000      	movs	r0, #0
 8005092:	e7e6      	b.n	8005062 <SUBGHZ_WaitOnBusy+0x1e>
 8005094:	20000004 	.word	0x20000004
 8005098:	58000400 	.word	0x58000400

0800509c <SUBGHZ_CheckDeviceReady>:
{
 800509c:	b500      	push	{lr}
 800509e:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80050a0:	7903      	ldrb	r3, [r0, #4]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d004      	beq.n	80050b0 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80050a6:	f7ff ffcd 	bl	8005044 <SUBGHZ_WaitOnBusy>
}
 80050aa:	b003      	add	sp, #12
 80050ac:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80050b0:	4b0d      	ldr	r3, [pc, #52]	@ (80050e8 <SUBGHZ_CheckDeviceReady+0x4c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80050b8:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80050bc:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80050be:	4a0b      	ldr	r2, [pc, #44]	@ (80050ec <SUBGHZ_CheckDeviceReady+0x50>)
 80050c0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80050c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 80050cc:	9b01      	ldr	r3, [sp, #4]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80050d2:	9b01      	ldr	r3, [sp, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f9      	bne.n	80050cc <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80050d8:	4a04      	ldr	r2, [pc, #16]	@ (80050ec <SUBGHZ_CheckDeviceReady+0x50>)
 80050da:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80050de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80050e6:	e7de      	b.n	80050a6 <SUBGHZ_CheckDeviceReady+0xa>
 80050e8:	20000004 	.word	0x20000004
 80050ec:	58000400 	.word	0x58000400

080050f0 <HAL_SUBGHZ_WriteRegisters>:
{
 80050f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80050f6:	7980      	ldrb	r0, [r0, #6]
 80050f8:	fa5f f880 	uxtb.w	r8, r0
 80050fc:	f1b8 0f01 	cmp.w	r8, #1
 8005100:	d13e      	bne.n	8005180 <HAL_SUBGHZ_WriteRegisters+0x90>
 8005102:	460c      	mov	r4, r1
 8005104:	4617      	mov	r7, r2
 8005106:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005108:	796b      	ldrb	r3, [r5, #5]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d03b      	beq.n	8005186 <HAL_SUBGHZ_WriteRegisters+0x96>
 800510e:	2301      	movs	r3, #1
 8005110:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005112:	2302      	movs	r3, #2
 8005114:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005116:	4628      	mov	r0, r5
 8005118:	f7ff ffc0 	bl	800509c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800511c:	4a1b      	ldr	r2, [pc, #108]	@ (800518c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800511e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005122:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005126:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800512a:	210d      	movs	r1, #13
 800512c:	4628      	mov	r0, r5
 800512e:	f7ff ff0d 	bl	8004f4c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005132:	0a21      	lsrs	r1, r4, #8
 8005134:	4628      	mov	r0, r5
 8005136:	f7ff ff09 	bl	8004f4c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800513a:	b2e1      	uxtb	r1, r4
 800513c:	4628      	mov	r0, r5
 800513e:	f7ff ff05 	bl	8004f4c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005142:	2400      	movs	r4, #0
 8005144:	e005      	b.n	8005152 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005146:	5d39      	ldrb	r1, [r7, r4]
 8005148:	4628      	mov	r0, r5
 800514a:	f7ff feff 	bl	8004f4c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800514e:	3401      	adds	r4, #1
 8005150:	b2a4      	uxth	r4, r4
 8005152:	42b4      	cmp	r4, r6
 8005154:	d3f7      	bcc.n	8005146 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005156:	4a0d      	ldr	r2, [pc, #52]	@ (800518c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005158:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800515c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005164:	4628      	mov	r0, r5
 8005166:	f7ff ff6d 	bl	8005044 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800516a:	68ab      	ldr	r3, [r5, #8]
 800516c:	b90b      	cbnz	r3, 8005172 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800516e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005172:	2301      	movs	r3, #1
 8005174:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005176:	2300      	movs	r3, #0
 8005178:	716b      	strb	r3, [r5, #5]
}
 800517a:	4640      	mov	r0, r8
 800517c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005180:	f04f 0802 	mov.w	r8, #2
 8005184:	e7f9      	b.n	800517a <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005186:	f04f 0802 	mov.w	r8, #2
 800518a:	e7f6      	b.n	800517a <HAL_SUBGHZ_WriteRegisters+0x8a>
 800518c:	58000400 	.word	0x58000400

08005190 <HAL_SUBGHZ_ReadRegisters>:
{
 8005190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005194:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005196:	7980      	ldrb	r0, [r0, #6]
 8005198:	fa5f f880 	uxtb.w	r8, r0
 800519c:	f1b8 0f01 	cmp.w	r8, #1
 80051a0:	d141      	bne.n	8005226 <HAL_SUBGHZ_ReadRegisters+0x96>
 80051a2:	460c      	mov	r4, r1
 80051a4:	4615      	mov	r5, r2
 80051a6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80051a8:	7973      	ldrb	r3, [r6, #5]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d03e      	beq.n	800522c <HAL_SUBGHZ_ReadRegisters+0x9c>
 80051ae:	2301      	movs	r3, #1
 80051b0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7ff ff72 	bl	800509c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80051b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005234 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80051ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80051be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80051c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80051c6:	211d      	movs	r1, #29
 80051c8:	4630      	mov	r0, r6
 80051ca:	f7ff febf 	bl	8004f4c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80051ce:	0a21      	lsrs	r1, r4, #8
 80051d0:	4630      	mov	r0, r6
 80051d2:	f7ff febb 	bl	8004f4c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80051d6:	b2e1      	uxtb	r1, r4
 80051d8:	4630      	mov	r0, r6
 80051da:	f7ff feb7 	bl	8004f4c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80051de:	2100      	movs	r1, #0
 80051e0:	4630      	mov	r0, r6
 80051e2:	f7ff feb3 	bl	8004f4c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80051e6:	2400      	movs	r4, #0
 80051e8:	e006      	b.n	80051f8 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80051ea:	4629      	mov	r1, r5
 80051ec:	4630      	mov	r0, r6
 80051ee:	f7ff fee9 	bl	8004fc4 <SUBGHZSPI_Receive>
      pData++;
 80051f2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80051f4:	3401      	adds	r4, #1
 80051f6:	b2a4      	uxth	r4, r4
 80051f8:	42bc      	cmp	r4, r7
 80051fa:	d3f6      	bcc.n	80051ea <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80051fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005234 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80051fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800520a:	4630      	mov	r0, r6
 800520c:	f7ff ff1a 	bl	8005044 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005210:	68b3      	ldr	r3, [r6, #8]
 8005212:	b90b      	cbnz	r3, 8005218 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005214:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005218:	2301      	movs	r3, #1
 800521a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800521c:	2300      	movs	r3, #0
 800521e:	7173      	strb	r3, [r6, #5]
}
 8005220:	4640      	mov	r0, r8
 8005222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005226:	f04f 0802 	mov.w	r8, #2
 800522a:	e7f9      	b.n	8005220 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 800522c:	f04f 0802 	mov.w	r8, #2
 8005230:	e7f6      	b.n	8005220 <HAL_SUBGHZ_ReadRegisters+0x90>
 8005232:	bf00      	nop
 8005234:	58000400 	.word	0x58000400

08005238 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800523c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800523e:	7980      	ldrb	r0, [r0, #6]
 8005240:	fa5f f980 	uxtb.w	r9, r0
 8005244:	f1b9 0f01 	cmp.w	r9, #1
 8005248:	d143      	bne.n	80052d2 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800524a:	4688      	mov	r8, r1
 800524c:	4617      	mov	r7, r2
 800524e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005250:	796b      	ldrb	r3, [r5, #5]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d040      	beq.n	80052d8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005256:	2301      	movs	r3, #1
 8005258:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800525a:	4628      	mov	r0, r5
 800525c:	f7ff ff1e 	bl	800509c <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005260:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8005264:	d005      	beq.n	8005272 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005266:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 800526a:	d002      	beq.n	8005272 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800526c:	2300      	movs	r3, #0
 800526e:	712b      	strb	r3, [r5, #4]
 8005270:	e001      	b.n	8005276 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005272:	2301      	movs	r3, #1
 8005274:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005276:	4a1a      	ldr	r2, [pc, #104]	@ (80052e0 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005278:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800527c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005284:	4641      	mov	r1, r8
 8005286:	4628      	mov	r0, r5
 8005288:	f7ff fe60 	bl	8004f4c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800528c:	2400      	movs	r4, #0
 800528e:	e005      	b.n	800529c <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005290:	5d39      	ldrb	r1, [r7, r4]
 8005292:	4628      	mov	r0, r5
 8005294:	f7ff fe5a 	bl	8004f4c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005298:	3401      	adds	r4, #1
 800529a:	b2a4      	uxth	r4, r4
 800529c:	42b4      	cmp	r4, r6
 800529e:	d3f7      	bcc.n	8005290 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80052a0:	4a0f      	ldr	r2, [pc, #60]	@ (80052e0 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80052a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80052a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 80052ae:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 80052b2:	d10a      	bne.n	80052ca <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80052b4:	68ab      	ldr	r3, [r5, #8]
 80052b6:	b90b      	cbnz	r3, 80052bc <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80052b8:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80052bc:	2301      	movs	r3, #1
 80052be:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80052c0:	2300      	movs	r3, #0
 80052c2:	716b      	strb	r3, [r5, #5]
}
 80052c4:	4648      	mov	r0, r9
 80052c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80052ca:	4628      	mov	r0, r5
 80052cc:	f7ff feba 	bl	8005044 <SUBGHZ_WaitOnBusy>
 80052d0:	e7f0      	b.n	80052b4 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 80052d2:	f04f 0902 	mov.w	r9, #2
 80052d6:	e7f5      	b.n	80052c4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80052d8:	f04f 0902 	mov.w	r9, #2
 80052dc:	e7f2      	b.n	80052c4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80052de:	bf00      	nop
 80052e0:	58000400 	.word	0x58000400

080052e4 <HAL_SUBGHZ_ExecGetCmd>:
{
 80052e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80052ea:	7980      	ldrb	r0, [r0, #6]
 80052ec:	fa5f f880 	uxtb.w	r8, r0
 80052f0:	f1b8 0f01 	cmp.w	r8, #1
 80052f4:	d139      	bne.n	800536a <HAL_SUBGHZ_ExecGetCmd+0x86>
 80052f6:	460c      	mov	r4, r1
 80052f8:	4615      	mov	r5, r2
 80052fa:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80052fc:	7973      	ldrb	r3, [r6, #5]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d036      	beq.n	8005370 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8005302:	2301      	movs	r3, #1
 8005304:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005306:	4630      	mov	r0, r6
 8005308:	f7ff fec8 	bl	800509c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800530c:	4a1a      	ldr	r2, [pc, #104]	@ (8005378 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800530e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005312:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005316:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800531a:	4621      	mov	r1, r4
 800531c:	4630      	mov	r0, r6
 800531e:	f7ff fe15 	bl	8004f4c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005322:	2100      	movs	r1, #0
 8005324:	4630      	mov	r0, r6
 8005326:	f7ff fe11 	bl	8004f4c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800532a:	2400      	movs	r4, #0
 800532c:	e006      	b.n	800533c <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800532e:	4629      	mov	r1, r5
 8005330:	4630      	mov	r0, r6
 8005332:	f7ff fe47 	bl	8004fc4 <SUBGHZSPI_Receive>
      pData++;
 8005336:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005338:	3401      	adds	r4, #1
 800533a:	b2a4      	uxth	r4, r4
 800533c:	42bc      	cmp	r4, r7
 800533e:	d3f6      	bcc.n	800532e <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005340:	4a0d      	ldr	r2, [pc, #52]	@ (8005378 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005342:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800534a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800534e:	4630      	mov	r0, r6
 8005350:	f7ff fe78 	bl	8005044 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005354:	68b3      	ldr	r3, [r6, #8]
 8005356:	b90b      	cbnz	r3, 800535c <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005358:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800535c:	2301      	movs	r3, #1
 800535e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005360:	2300      	movs	r3, #0
 8005362:	7173      	strb	r3, [r6, #5]
}
 8005364:	4640      	mov	r0, r8
 8005366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800536a:	f04f 0802 	mov.w	r8, #2
 800536e:	e7f9      	b.n	8005364 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005370:	f04f 0802 	mov.w	r8, #2
 8005374:	e7f6      	b.n	8005364 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005376:	bf00      	nop
 8005378:	58000400 	.word	0x58000400

0800537c <HAL_SUBGHZ_IRQHandler>:
{
 800537c:	b530      	push	{r4, r5, lr}
 800537e:	b083      	sub	sp, #12
 8005380:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8005382:	2300      	movs	r3, #0
 8005384:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005388:	2302      	movs	r3, #2
 800538a:	aa01      	add	r2, sp, #4
 800538c:	2112      	movs	r1, #18
 800538e:	f7ff ffa9 	bl	80052e4 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005392:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005396:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800539a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800539e:	b224      	sxth	r4, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80053a0:	2302      	movs	r3, #2
 80053a2:	aa01      	add	r2, sp, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4628      	mov	r0, r5
 80053a8:	f7ff ff46 	bl	8005238 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80053ac:	f014 0f01 	tst.w	r4, #1
 80053b0:	d123      	bne.n	80053fa <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80053b2:	f014 0f02 	tst.w	r4, #2
 80053b6:	d124      	bne.n	8005402 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80053b8:	f014 0f04 	tst.w	r4, #4
 80053bc:	d125      	bne.n	800540a <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80053be:	f014 0f08 	tst.w	r4, #8
 80053c2:	d126      	bne.n	8005412 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80053c4:	f014 0f10 	tst.w	r4, #16
 80053c8:	d127      	bne.n	800541a <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80053ca:	f014 0f20 	tst.w	r4, #32
 80053ce:	d128      	bne.n	8005422 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80053d0:	f014 0f40 	tst.w	r4, #64	@ 0x40
 80053d4:	d129      	bne.n	800542a <HAL_SUBGHZ_IRQHandler+0xae>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80053d6:	f014 0f80 	tst.w	r4, #128	@ 0x80
 80053da:	d006      	beq.n	80053ea <HAL_SUBGHZ_IRQHandler+0x6e>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80053dc:	f414 7f80 	tst.w	r4, #256	@ 0x100
 80053e0:	d027      	beq.n	8005432 <HAL_SUBGHZ_IRQHandler+0xb6>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80053e2:	2101      	movs	r1, #1
 80053e4:	4628      	mov	r0, r5
 80053e6:	f003 fc41 	bl	8008c6c <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80053ea:	f414 7f00 	tst.w	r4, #512	@ 0x200
 80053ee:	d125      	bne.n	800543c <HAL_SUBGHZ_IRQHandler+0xc0>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80053f0:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 80053f4:	d126      	bne.n	8005444 <HAL_SUBGHZ_IRQHandler+0xc8>
}
 80053f6:	b003      	add	sp, #12
 80053f8:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80053fa:	4628      	mov	r0, r5
 80053fc:	f003 fc1e 	bl	8008c3c <HAL_SUBGHZ_TxCpltCallback>
 8005400:	e7d7      	b.n	80053b2 <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005402:	4628      	mov	r0, r5
 8005404:	f003 fc22 	bl	8008c4c <HAL_SUBGHZ_RxCpltCallback>
 8005408:	e7d6      	b.n	80053b8 <HAL_SUBGHZ_IRQHandler+0x3c>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800540a:	4628      	mov	r0, r5
 800540c:	f003 fc52 	bl	8008cb4 <HAL_SUBGHZ_PreambleDetectedCallback>
 8005410:	e7d5      	b.n	80053be <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005412:	4628      	mov	r0, r5
 8005414:	f003 fc56 	bl	8008cc4 <HAL_SUBGHZ_SyncWordValidCallback>
 8005418:	e7d4      	b.n	80053c4 <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800541a:	4628      	mov	r0, r5
 800541c:	f003 fc5a 	bl	8008cd4 <HAL_SUBGHZ_HeaderValidCallback>
 8005420:	e7d3      	b.n	80053ca <HAL_SUBGHZ_IRQHandler+0x4e>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005422:	4628      	mov	r0, r5
 8005424:	f003 fc3e 	bl	8008ca4 <HAL_SUBGHZ_HeaderErrorCallback>
 8005428:	e7d2      	b.n	80053d0 <HAL_SUBGHZ_IRQHandler+0x54>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800542a:	4628      	mov	r0, r5
 800542c:	f003 fc16 	bl	8008c5c <HAL_SUBGHZ_CRCErrorCallback>
 8005430:	e7d1      	b.n	80053d6 <HAL_SUBGHZ_IRQHandler+0x5a>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005432:	2100      	movs	r1, #0
 8005434:	4628      	mov	r0, r5
 8005436:	f003 fc19 	bl	8008c6c <HAL_SUBGHZ_CADStatusCallback>
 800543a:	e7d6      	b.n	80053ea <HAL_SUBGHZ_IRQHandler+0x6e>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800543c:	4628      	mov	r0, r5
 800543e:	f003 fc27 	bl	8008c90 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005442:	e7d5      	b.n	80053f0 <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005444:	4628      	mov	r0, r5
 8005446:	f003 fc4d 	bl	8008ce4 <HAL_SUBGHZ_LrFhssHopCallback>
}
 800544a:	e7d4      	b.n	80053f6 <HAL_SUBGHZ_IRQHandler+0x7a>

0800544c <HAL_SUBGHZ_WriteBuffer>:
{
 800544c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005450:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005452:	7980      	ldrb	r0, [r0, #6]
 8005454:	fa5f f880 	uxtb.w	r8, r0
 8005458:	f1b8 0f01 	cmp.w	r8, #1
 800545c:	d138      	bne.n	80054d0 <HAL_SUBGHZ_WriteBuffer+0x84>
 800545e:	460c      	mov	r4, r1
 8005460:	4617      	mov	r7, r2
 8005462:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005464:	796b      	ldrb	r3, [r5, #5]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d035      	beq.n	80054d6 <HAL_SUBGHZ_WriteBuffer+0x8a>
 800546a:	2301      	movs	r3, #1
 800546c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800546e:	4628      	mov	r0, r5
 8005470:	f7ff fe14 	bl	800509c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005474:	4a19      	ldr	r2, [pc, #100]	@ (80054dc <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005476:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800547a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800547e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005482:	210e      	movs	r1, #14
 8005484:	4628      	mov	r0, r5
 8005486:	f7ff fd61 	bl	8004f4c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800548a:	4621      	mov	r1, r4
 800548c:	4628      	mov	r0, r5
 800548e:	f7ff fd5d 	bl	8004f4c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005492:	2400      	movs	r4, #0
 8005494:	e005      	b.n	80054a2 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005496:	5d39      	ldrb	r1, [r7, r4]
 8005498:	4628      	mov	r0, r5
 800549a:	f7ff fd57 	bl	8004f4c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800549e:	3401      	adds	r4, #1
 80054a0:	b2a4      	uxth	r4, r4
 80054a2:	42b4      	cmp	r4, r6
 80054a4:	d3f7      	bcc.n	8005496 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80054a6:	4a0d      	ldr	r2, [pc, #52]	@ (80054dc <HAL_SUBGHZ_WriteBuffer+0x90>)
 80054a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80054ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80054b4:	4628      	mov	r0, r5
 80054b6:	f7ff fdc5 	bl	8005044 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80054ba:	68ab      	ldr	r3, [r5, #8]
 80054bc:	b90b      	cbnz	r3, 80054c2 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80054be:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80054c2:	2301      	movs	r3, #1
 80054c4:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80054c6:	2300      	movs	r3, #0
 80054c8:	716b      	strb	r3, [r5, #5]
}
 80054ca:	4640      	mov	r0, r8
 80054cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80054d0:	f04f 0802 	mov.w	r8, #2
 80054d4:	e7f9      	b.n	80054ca <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80054d6:	f04f 0802 	mov.w	r8, #2
 80054da:	e7f6      	b.n	80054ca <HAL_SUBGHZ_WriteBuffer+0x7e>
 80054dc:	58000400 	.word	0x58000400

080054e0 <HAL_SUBGHZ_ReadBuffer>:
{
 80054e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80054e6:	7980      	ldrb	r0, [r0, #6]
 80054e8:	fa5f f880 	uxtb.w	r8, r0
 80054ec:	f1b8 0f01 	cmp.w	r8, #1
 80054f0:	d13d      	bne.n	800556e <HAL_SUBGHZ_ReadBuffer+0x8e>
 80054f2:	460c      	mov	r4, r1
 80054f4:	4615      	mov	r5, r2
 80054f6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80054f8:	7973      	ldrb	r3, [r6, #5]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d03a      	beq.n	8005574 <HAL_SUBGHZ_ReadBuffer+0x94>
 80054fe:	2301      	movs	r3, #1
 8005500:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005502:	4630      	mov	r0, r6
 8005504:	f7ff fdca 	bl	800509c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005508:	4a1c      	ldr	r2, [pc, #112]	@ (800557c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800550a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800550e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005516:	211e      	movs	r1, #30
 8005518:	4630      	mov	r0, r6
 800551a:	f7ff fd17 	bl	8004f4c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800551e:	4621      	mov	r1, r4
 8005520:	4630      	mov	r0, r6
 8005522:	f7ff fd13 	bl	8004f4c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005526:	2100      	movs	r1, #0
 8005528:	4630      	mov	r0, r6
 800552a:	f7ff fd0f 	bl	8004f4c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800552e:	2400      	movs	r4, #0
 8005530:	e006      	b.n	8005540 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005532:	4629      	mov	r1, r5
 8005534:	4630      	mov	r0, r6
 8005536:	f7ff fd45 	bl	8004fc4 <SUBGHZSPI_Receive>
      pData++;
 800553a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800553c:	3401      	adds	r4, #1
 800553e:	b2a4      	uxth	r4, r4
 8005540:	42bc      	cmp	r4, r7
 8005542:	d3f6      	bcc.n	8005532 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005544:	4a0d      	ldr	r2, [pc, #52]	@ (800557c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005546:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800554a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800554e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005552:	4630      	mov	r0, r6
 8005554:	f7ff fd76 	bl	8005044 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005558:	68b3      	ldr	r3, [r6, #8]
 800555a:	b90b      	cbnz	r3, 8005560 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 800555c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005560:	2301      	movs	r3, #1
 8005562:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005564:	2300      	movs	r3, #0
 8005566:	7173      	strb	r3, [r6, #5]
}
 8005568:	4640      	mov	r0, r8
 800556a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800556e:	f04f 0802 	mov.w	r8, #2
 8005572:	e7f9      	b.n	8005568 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005574:	f04f 0802 	mov.w	r8, #2
 8005578:	e7f6      	b.n	8005568 <HAL_SUBGHZ_ReadBuffer+0x88>
 800557a:	bf00      	nop
 800557c:	58000400 	.word	0x58000400

08005580 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005580:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	e852 3f00 	ldrex	r3, [r2]
 8005586:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	e842 3100 	strex	r1, r3, [r2]
 800558e:	2900      	cmp	r1, #0
 8005590:	d1f6      	bne.n	8005580 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005592:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	f102 0308 	add.w	r3, r2, #8
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	3208      	adds	r2, #8
 80055a2:	e842 3100 	strex	r1, r3, [r2]
 80055a6:	2900      	cmp	r1, #0
 80055a8:	d1f3      	bne.n	8005592 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055aa:	2320      	movs	r3, #32
 80055ac:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 80055b0:	4770      	bx	lr

080055b2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	e852 3f00 	ldrex	r3, [r2]
 80055b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	e842 3100 	strex	r1, r3, [r2]
 80055c0:	2900      	cmp	r1, #0
 80055c2:	d1f6      	bne.n	80055b2 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055c4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	f102 0308 	add.w	r3, r2, #8
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	3208      	adds	r2, #8
 80055d8:	e842 3100 	strex	r1, r3, [r2]
 80055dc:	2900      	cmp	r1, #0
 80055de:	d1f1      	bne.n	80055c4 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d006      	beq.n	80055f4 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055e6:	2320      	movs	r3, #32
 80055e8:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ec:	2300      	movs	r3, #0
 80055ee:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055f0:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80055f2:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	e852 3f00 	ldrex	r3, [r2]
 80055fa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	e842 3100 	strex	r1, r3, [r2]
 8005602:	2900      	cmp	r1, #0
 8005604:	d1f6      	bne.n	80055f4 <UART_EndRxTransfer+0x42>
 8005606:	e7ee      	b.n	80055e6 <UART_EndRxTransfer+0x34>

08005608 <HAL_UART_Transmit_DMA>:
{
 8005608:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800560a:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800560e:	2a20      	cmp	r2, #32
 8005610:	d13d      	bne.n	800568e <HAL_UART_Transmit_DMA+0x86>
{
 8005612:	b510      	push	{r4, lr}
 8005614:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005616:	2900      	cmp	r1, #0
 8005618:	d03b      	beq.n	8005692 <HAL_UART_Transmit_DMA+0x8a>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d03b      	beq.n	8005696 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 800561e:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005620:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005624:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	2200      	movs	r2, #0
 800562a:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562e:	2221      	movs	r2, #33	@ 0x21
 8005630:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8005634:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8005636:	b1ca      	cbz	r2, 800566c <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005638:	4918      	ldr	r1, [pc, #96]	@ (800569c <HAL_UART_Transmit_DMA+0x94>)
 800563a:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800563c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800563e:	4918      	ldr	r1, [pc, #96]	@ (80056a0 <HAL_UART_Transmit_DMA+0x98>)
 8005640:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005642:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8005644:	4917      	ldr	r1, [pc, #92]	@ (80056a4 <HAL_UART_Transmit_DMA+0x9c>)
 8005646:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005648:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800564a:	2100      	movs	r1, #0
 800564c:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800564e:	6802      	ldr	r2, [r0, #0]
 8005650:	3228      	adds	r2, #40	@ 0x28
 8005652:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005654:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8005656:	f7fd ffab 	bl	80035b0 <HAL_DMA_Start_IT>
 800565a:	b138      	cbz	r0, 800566c <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800565c:	2310      	movs	r3, #16
 800565e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8005662:	2320      	movs	r3, #32
 8005664:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8005668:	2001      	movs	r0, #1
 800566a:	e00f      	b.n	800568c <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	2240      	movs	r2, #64	@ 0x40
 8005670:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005672:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	f102 0308 	add.w	r3, r2, #8
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	3208      	adds	r2, #8
 8005682:	e842 3100 	strex	r1, r3, [r2]
 8005686:	2900      	cmp	r1, #0
 8005688:	d1f3      	bne.n	8005672 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 800568a:	2000      	movs	r0, #0
}
 800568c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800568e:	2002      	movs	r0, #2
}
 8005690:	4770      	bx	lr
      return HAL_ERROR;
 8005692:	2001      	movs	r0, #1
 8005694:	e7fa      	b.n	800568c <HAL_UART_Transmit_DMA+0x84>
 8005696:	2001      	movs	r0, #1
 8005698:	e7f8      	b.n	800568c <HAL_UART_Transmit_DMA+0x84>
 800569a:	bf00      	nop
 800569c:	080056a9 	.word	0x080056a9
 80056a0:	08005717 	.word	0x08005717
 80056a4:	08005723 	.word	0x08005723

080056a8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056a8:	b508      	push	{r3, lr}
 80056aa:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056ac:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f013 0f20 	tst.w	r3, #32
 80056b6:	d118      	bne.n	80056ea <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	f102 0308 	add.w	r3, r2, #8
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	3208      	adds	r2, #8
 80056ce:	e842 3100 	strex	r1, r3, [r2]
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d1f3      	bne.n	80056be <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	e852 3f00 	ldrex	r3, [r2]
 80056dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	e842 3100 	strex	r1, r3, [r2]
 80056e4:	2900      	cmp	r1, #0
 80056e6:	d1f6      	bne.n	80056d6 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056e8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80056ea:	f7fd f823 	bl	8002734 <HAL_UART_TxCpltCallback>
}
 80056ee:	e7fb      	b.n	80056e8 <UART_DMATransmitCplt+0x40>

080056f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056f0:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	e852 3f00 	ldrex	r3, [r2]
 80056f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	e842 3100 	strex	r1, r3, [r2]
 8005700:	2900      	cmp	r1, #0
 8005702:	d1f6      	bne.n	80056f2 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005704:	2320      	movs	r3, #32
 8005706:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800570e:	f7fd f811 	bl	8002734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005712:	bd08      	pop	{r3, pc}

08005714 <HAL_UART_TxHalfCpltCallback>:
}
 8005714:	4770      	bx	lr

08005716 <UART_DMATxHalfCplt>:
{
 8005716:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005718:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800571a:	f7ff fffb 	bl	8005714 <HAL_UART_TxHalfCpltCallback>
}
 800571e:	bd08      	pop	{r3, pc}

08005720 <HAL_UART_ErrorCallback>:
}
 8005720:	4770      	bx	lr

08005722 <UART_DMAError>:
{
 8005722:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005724:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005726:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800572a:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005736:	d001      	beq.n	800573c <UART_DMAError+0x1a>
 8005738:	2a21      	cmp	r2, #33	@ 0x21
 800573a:	d010      	beq.n	800575e <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005744:	d001      	beq.n	800574a <UART_DMAError+0x28>
 8005746:	2d22      	cmp	r5, #34	@ 0x22
 8005748:	d010      	beq.n	800576c <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800574a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800574e:	f043 0310 	orr.w	r3, r3, #16
 8005752:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 8005756:	4620      	mov	r0, r4
 8005758:	f7ff ffe2 	bl	8005720 <HAL_UART_ErrorCallback>
}
 800575c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff ff0b 	bl	8005580 <UART_EndTxTransfer>
 800576a:	e7e7      	b.n	800573c <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005772:	4620      	mov	r0, r4
 8005774:	f7ff ff1d 	bl	80055b2 <UART_EndRxTransfer>
 8005778:	e7e7      	b.n	800574a <UART_DMAError+0x28>

0800577a <UART_DMAAbortOnError>:
{
 800577a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800577c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005784:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8005788:	f7ff ffca 	bl	8005720 <HAL_UART_ErrorCallback>
}
 800578c:	bd08      	pop	{r3, pc}

0800578e <HAL_UARTEx_RxEventCallback>:
}
 800578e:	4770      	bx	lr

08005790 <HAL_UART_IRQHandler>:
{
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005794:	6802      	ldr	r2, [r0, #0]
 8005796:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005798:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800579a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800579c:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 80057a0:	ea13 0f0c 	tst.w	r3, ip
 80057a4:	d10d      	bne.n	80057c2 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057a6:	f013 0f20 	tst.w	r3, #32
 80057aa:	d010      	beq.n	80057ce <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057ac:	f010 0f20 	tst.w	r0, #32
 80057b0:	d102      	bne.n	80057b8 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057b2:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 80057b6:	d00a      	beq.n	80057ce <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 80057b8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80057ba:	b393      	cbz	r3, 8005822 <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 80057bc:	4620      	mov	r0, r4
 80057be:	4798      	blx	r3
      return;
 80057c0:	e02f      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057c2:	4db4      	ldr	r5, [pc, #720]	@ (8005a94 <HAL_UART_IRQHandler+0x304>)
 80057c4:	400d      	ands	r5, r1
 80057c6:	d12d      	bne.n	8005824 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80057c8:	4eb3      	ldr	r6, [pc, #716]	@ (8005a98 <HAL_UART_IRQHandler+0x308>)
 80057ca:	4230      	tst	r0, r6
 80057cc:	d12a      	bne.n	8005824 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ce:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80057d0:	2d01      	cmp	r5, #1
 80057d2:	f000 80c0 	beq.w	8005956 <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057d6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80057da:	d003      	beq.n	80057e4 <HAL_UART_IRQHandler+0x54>
 80057dc:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 80057e0:	f040 815e 	bne.w	8005aa0 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80057e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057e8:	d007      	beq.n	80057fa <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80057ea:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80057ee:	f040 815e 	bne.w	8005aae <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80057f2:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 80057f6:	f040 815a 	bne.w	8005aae <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057fa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80057fe:	d003      	beq.n	8005808 <HAL_UART_IRQHandler+0x78>
 8005800:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8005804:	f040 815a 	bne.w	8005abc <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005808:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800580c:	d003      	beq.n	8005816 <HAL_UART_IRQHandler+0x86>
 800580e:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8005812:	f040 8157 	bne.w	8005ac4 <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005816:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800581a:	d002      	beq.n	8005822 <HAL_UART_IRQHandler+0x92>
 800581c:	2800      	cmp	r0, #0
 800581e:	f2c0 8155 	blt.w	8005acc <HAL_UART_IRQHandler+0x33c>
}
 8005822:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005824:	f013 0f01 	tst.w	r3, #1
 8005828:	d009      	beq.n	800583e <HAL_UART_IRQHandler+0xae>
 800582a:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800582e:	d006      	beq.n	800583e <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005830:	2601      	movs	r6, #1
 8005832:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005834:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005838:	4332      	orrs	r2, r6
 800583a:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800583e:	f013 0f02 	tst.w	r3, #2
 8005842:	d00b      	beq.n	800585c <HAL_UART_IRQHandler+0xcc>
 8005844:	f011 0f01 	tst.w	r1, #1
 8005848:	d008      	beq.n	800585c <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	2602      	movs	r6, #2
 800584e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005850:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005854:	f042 0204 	orr.w	r2, r2, #4
 8005858:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800585c:	f013 0f04 	tst.w	r3, #4
 8005860:	d00b      	beq.n	800587a <HAL_UART_IRQHandler+0xea>
 8005862:	f011 0f01 	tst.w	r1, #1
 8005866:	d008      	beq.n	800587a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005868:	6822      	ldr	r2, [r4, #0]
 800586a:	2604      	movs	r6, #4
 800586c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800586e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005872:	f042 0202 	orr.w	r2, r2, #2
 8005876:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800587a:	f013 0f08 	tst.w	r3, #8
 800587e:	d00b      	beq.n	8005898 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005880:	f010 0f20 	tst.w	r0, #32
 8005884:	d100      	bne.n	8005888 <HAL_UART_IRQHandler+0xf8>
 8005886:	b13d      	cbz	r5, 8005898 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	2508      	movs	r5, #8
 800588c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800588e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005892:	432a      	orrs	r2, r5
 8005894:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005898:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800589c:	d00c      	beq.n	80058b8 <HAL_UART_IRQHandler+0x128>
 800589e:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 80058a2:	d009      	beq.n	80058b8 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80058aa:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80058b0:	f042 0220 	orr.w	r2, r2, #32
 80058b4:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058b8:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80058bc:	2a00      	cmp	r2, #0
 80058be:	d0b0      	beq.n	8005822 <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058c0:	f013 0f20 	tst.w	r3, #32
 80058c4:	d009      	beq.n	80058da <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058c6:	f010 0f20 	tst.w	r0, #32
 80058ca:	d102      	bne.n	80058d2 <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058cc:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 80058d0:	d003      	beq.n	80058da <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 80058d2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80058d4:	b10b      	cbz	r3, 80058da <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 80058d6:	4620      	mov	r0, r4
 80058d8:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80058da:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80058e6:	d102      	bne.n	80058ee <HAL_UART_IRQHandler+0x15e>
 80058e8:	f012 0f28 	tst.w	r2, #40	@ 0x28
 80058ec:	d02c      	beq.n	8005948 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 80058ee:	4620      	mov	r0, r4
 80058f0:	f7ff fe5f 	bl	80055b2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80058fc:	d020      	beq.n	8005940 <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	f102 0308 	add.w	r3, r2, #8
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	3208      	adds	r2, #8
 800590e:	e842 3100 	strex	r1, r3, [r2]
 8005912:	2900      	cmp	r1, #0
 8005914:	d1f3      	bne.n	80058fe <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 8005916:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800591a:	b16b      	cbz	r3, 8005938 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800591c:	4a5f      	ldr	r2, [pc, #380]	@ (8005a9c <HAL_UART_IRQHandler+0x30c>)
 800591e:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005920:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005924:	f7fd feca 	bl	80036bc <HAL_DMA_Abort_IT>
 8005928:	2800      	cmp	r0, #0
 800592a:	f43f af7a 	beq.w	8005822 <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800592e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005932:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005934:	4798      	blx	r3
 8005936:	e774      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 8005938:	4620      	mov	r0, r4
 800593a:	f7ff fef1 	bl	8005720 <HAL_UART_ErrorCallback>
 800593e:	e770      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 8005940:	4620      	mov	r0, r4
 8005942:	f7ff feed 	bl	8005720 <HAL_UART_ErrorCallback>
 8005946:	e76c      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 8005948:	4620      	mov	r0, r4
 800594a:	f7ff fee9 	bl	8005720 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594e:	2300      	movs	r3, #0
 8005950:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 8005954:	e765      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005956:	f013 0f10 	tst.w	r3, #16
 800595a:	f43f af3c 	beq.w	80057d6 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800595e:	f010 0f10 	tst.w	r0, #16
 8005962:	f43f af38 	beq.w	80057d6 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005966:	2310      	movs	r3, #16
 8005968:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005972:	d053      	beq.n	8005a1c <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005974:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8005978:	6813      	ldr	r3, [r2, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800597e:	2b00      	cmp	r3, #0
 8005980:	f43f af4f 	beq.w	8005822 <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005984:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005988:	4299      	cmp	r1, r3
 800598a:	f67f af4a 	bls.w	8005822 <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800598e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005992:	6813      	ldr	r3, [r2, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f013 0f20 	tst.w	r3, #32
 800599a:	d132      	bne.n	8005a02 <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800599c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	e852 3f00 	ldrex	r3, [r2]
 80059a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	e842 3100 	strex	r1, r3, [r2]
 80059aa:	2900      	cmp	r1, #0
 80059ac:	d1f6      	bne.n	800599c <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	f102 0308 	add.w	r3, r2, #8
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	3208      	adds	r2, #8
 80059be:	e842 3100 	strex	r1, r3, [r2]
 80059c2:	2900      	cmp	r1, #0
 80059c4:	d1f3      	bne.n	80059ae <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	f102 0308 	add.w	r3, r2, #8
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	3208      	adds	r2, #8
 80059d6:	e842 3100 	strex	r1, r3, [r2]
 80059da:	2900      	cmp	r1, #0
 80059dc:	d1f3      	bne.n	80059c6 <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 80059de:	2320      	movs	r3, #32
 80059e0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e4:	2300      	movs	r3, #0
 80059e6:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	e852 3f00 	ldrex	r3, [r2]
 80059ee:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	e842 3100 	strex	r1, r3, [r2]
 80059f6:	2900      	cmp	r1, #0
 80059f8:	d1f6      	bne.n	80059e8 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059fa:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80059fe:	f7fd fe23 	bl	8003648 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a02:	2302      	movs	r3, #2
 8005a04:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a06:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005a0a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	1ac9      	subs	r1, r1, r3
 8005a12:	b289      	uxth	r1, r1
 8005a14:	4620      	mov	r0, r4
 8005a16:	f7ff feba 	bl	800578e <HAL_UARTEx_RxEventCallback>
      return;
 8005a1a:	e702      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a1c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005a20:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	1ac9      	subs	r1, r1, r3
 8005a28:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005a2a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f43f aef6 	beq.w	8005822 <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 8005a36:	2900      	cmp	r1, #0
 8005a38:	f43f aef3 	beq.w	8005822 <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a3c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	e852 3f00 	ldrex	r3, [r2]
 8005a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	e842 3000 	strex	r0, r3, [r2]
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d1f6      	bne.n	8005a3c <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a4e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	f102 0308 	add.w	r3, r2, #8
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	3208      	adds	r2, #8
 8005a62:	e842 3000 	strex	r0, r3, [r2]
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d1f1      	bne.n	8005a4e <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	2320      	movs	r3, #32
 8005a6c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a70:	2300      	movs	r3, #0
 8005a72:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8005a74:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a76:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	e852 3f00 	ldrex	r3, [r2]
 8005a7c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	e842 3000 	strex	r0, r3, [r2]
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d1f6      	bne.n	8005a76 <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f7ff fe7e 	bl	800578e <HAL_UARTEx_RxEventCallback>
      return;
 8005a92:	e6c6      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
 8005a94:	10000001 	.word	0x10000001
 8005a98:	04000120 	.word	0x04000120
 8005a9c:	0800577b 	.word	0x0800577b
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005aa0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005aa4:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 fe60 	bl	800676c <HAL_UARTEx_WakeupCallback>
    return;
 8005aac:	e6b9      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 8005aae:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f43f aeb6 	beq.w	8005822 <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4798      	blx	r3
    return;
 8005aba:	e6b2      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 8005abc:	4620      	mov	r0, r4
 8005abe:	f7ff fe17 	bl	80056f0 <UART_EndTransmit_IT>
    return;
 8005ac2:	e6ae      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 fe53 	bl	8006770 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005aca:	e6aa      	b.n	8005822 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 fe4e 	bl	800676e <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005ad2:	e6a6      	b.n	8005822 <HAL_UART_IRQHandler+0x92>

08005ad4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ad4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8005ad6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ada:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8005ade:	2a22      	cmp	r2, #34	@ 0x22
 8005ae0:	d005      	beq.n	8005aee <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ae2:	6802      	ldr	r2, [r0, #0]
 8005ae4:	6993      	ldr	r3, [r2, #24]
 8005ae6:	f043 0308 	orr.w	r3, r3, #8
 8005aea:	6193      	str	r3, [r2, #24]
  }
}
 8005aec:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005aee:	6802      	ldr	r2, [r0, #0]
 8005af0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8005af6:	400b      	ands	r3, r1
 8005af8:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005afa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005afc:	3301      	adds	r3, #1
 8005afe:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005b00:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8005b0e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e9      	bne.n	8005aec <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b18:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	e852 3f00 	ldrex	r3, [r2]
 8005b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	e842 3100 	strex	r1, r3, [r2]
 8005b26:	2900      	cmp	r1, #0
 8005b28:	d1f6      	bne.n	8005b18 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	f102 0308 	add.w	r3, r2, #8
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	3208      	adds	r2, #8
 8005b3a:	e842 3100 	strex	r1, r3, [r2]
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	d1f3      	bne.n	8005b2a <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8005b42:	2320      	movs	r3, #32
 8005b44:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b4c:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b4e:	6803      	ldr	r3, [r0, #0]
 8005b50:	4a16      	ldr	r2, [pc, #88]	@ (8005bac <UART_RxISR_8BIT+0xd8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00c      	beq.n	8005b70 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8005b5c:	d008      	beq.n	8005b70 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	e852 3f00 	ldrex	r3, [r2]
 8005b64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	e842 3100 	strex	r1, r3, [r2]
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d1f6      	bne.n	8005b5e <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b70:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d116      	bne.n	8005ba4 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	2300      	movs	r3, #0
 8005b78:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	e852 3f00 	ldrex	r3, [r2]
 8005b80:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	e842 3100 	strex	r1, r3, [r2]
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	d1f6      	bne.n	8005b7a <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b8c:	6803      	ldr	r3, [r0, #0]
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	f012 0f10 	tst.w	r2, #16
 8005b94:	d001      	beq.n	8005b9a <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b96:	2210      	movs	r2, #16
 8005b98:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b9a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8005b9e:	f7ff fdf6 	bl	800578e <HAL_UARTEx_RxEventCallback>
 8005ba2:	e7a3      	b.n	8005aec <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005ba4:	f7fc fdd6 	bl	8002754 <HAL_UART_RxCpltCallback>
 8005ba8:	e7a0      	b.n	8005aec <UART_RxISR_8BIT+0x18>
 8005baa:	bf00      	nop
 8005bac:	40008000 	.word	0x40008000

08005bb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005bb0:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bb2:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bb6:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8005bba:	2b22      	cmp	r3, #34	@ 0x22
 8005bbc:	d005      	beq.n	8005bca <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bbe:	6802      	ldr	r2, [r0, #0]
 8005bc0:	6993      	ldr	r3, [r2, #24]
 8005bc2:	f043 0308 	orr.w	r3, r3, #8
 8005bc6:	6193      	str	r3, [r2, #24]
  }
}
 8005bc8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bca:	6803      	ldr	r3, [r0, #0]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bce:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8005bd4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005bd6:	3302      	adds	r3, #2
 8005bd8:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005bda:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8005be8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1ea      	bne.n	8005bc8 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bf2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	e852 3f00 	ldrex	r3, [r2]
 8005bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	e842 3100 	strex	r1, r3, [r2]
 8005c00:	2900      	cmp	r1, #0
 8005c02:	d1f6      	bne.n	8005bf2 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c04:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	f102 0308 	add.w	r3, r2, #8
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	3208      	adds	r2, #8
 8005c14:	e842 3100 	strex	r1, r3, [r2]
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	d1f3      	bne.n	8005c04 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c26:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c28:	6803      	ldr	r3, [r0, #0]
 8005c2a:	4a16      	ldr	r2, [pc, #88]	@ (8005c84 <UART_RxISR_16BIT+0xd4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00c      	beq.n	8005c4a <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8005c36:	d008      	beq.n	8005c4a <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c38:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	e852 3f00 	ldrex	r3, [r2]
 8005c3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	e842 3100 	strex	r1, r3, [r2]
 8005c46:	2900      	cmp	r1, #0
 8005c48:	d1f6      	bne.n	8005c38 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c4a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d116      	bne.n	8005c7e <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c50:	2300      	movs	r3, #0
 8005c52:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c54:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	e852 3f00 	ldrex	r3, [r2]
 8005c5a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	e842 3100 	strex	r1, r3, [r2]
 8005c62:	2900      	cmp	r1, #0
 8005c64:	d1f6      	bne.n	8005c54 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c66:	6803      	ldr	r3, [r0, #0]
 8005c68:	69da      	ldr	r2, [r3, #28]
 8005c6a:	f012 0f10 	tst.w	r2, #16
 8005c6e:	d001      	beq.n	8005c74 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c70:	2210      	movs	r2, #16
 8005c72:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c74:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8005c78:	f7ff fd89 	bl	800578e <HAL_UARTEx_RxEventCallback>
 8005c7c:	e7a4      	b.n	8005bc8 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005c7e:	f7fc fd69 	bl	8002754 <HAL_UART_RxCpltCallback>
 8005c82:	e7a1      	b.n	8005bc8 <UART_RxISR_16BIT+0x18>
 8005c84:	40008000 	.word	0x40008000

08005c88 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8005c8c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005c90:	6803      	ldr	r3, [r0, #0]
 8005c92:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005c94:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005c98:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c9c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8005ca0:	2a22      	cmp	r2, #34	@ 0x22
 8005ca2:	d005      	beq.n	8005cb0 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	f042 0208 	orr.w	r2, r2, #8
 8005caa:	619a      	str	r2, [r3, #24]
  }
}
 8005cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cb0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005cb2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cb6:	e008      	b.n	8005cca <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cb8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d14c      	bne.n	8005d5a <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8005cc0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d04e      	beq.n	8005d68 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cca:	2f00      	cmp	r7, #0
 8005ccc:	f000 809a 	beq.w	8005e04 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8005cd0:	f015 0f20 	tst.w	r5, #32
 8005cd4:	f000 8096 	beq.w	8005e04 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005cdc:	b2f3      	uxtb	r3, r6
 8005cde:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005ce0:	400b      	ands	r3, r1
 8005ce2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8005ce4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8005cea:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005cfc:	f015 0f07 	tst.w	r5, #7
 8005d00:	d0de      	beq.n	8005cc0 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d02:	f015 0f01 	tst.w	r5, #1
 8005d06:	d009      	beq.n	8005d1c <UART_RxISR_8BIT_FIFOEN+0x94>
 8005d08:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8005d0c:	d006      	beq.n	8005d1c <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d0e:	2201      	movs	r2, #1
 8005d10:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d12:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d1c:	f015 0f02 	tst.w	r5, #2
 8005d20:	d00b      	beq.n	8005d3a <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005d22:	f018 0f01 	tst.w	r8, #1
 8005d26:	d008      	beq.n	8005d3a <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d2e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005d32:	f043 0304 	orr.w	r3, r3, #4
 8005d36:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d3a:	f015 0f04 	tst.w	r5, #4
 8005d3e:	d0bb      	beq.n	8005cb8 <UART_RxISR_8BIT_FIFOEN+0x30>
 8005d40:	f018 0f01 	tst.w	r8, #1
 8005d44:	d0b8      	beq.n	8005cb8 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d4c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8005d58:	e7ae      	b.n	8005cb8 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f7ff fce0 	bl	8005720 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8005d66:	e7ab      	b.n	8005cc0 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d68:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	e852 3f00 	ldrex	r3, [r2]
 8005d6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	e842 3100 	strex	r1, r3, [r2]
 8005d76:	2900      	cmp	r1, #0
 8005d78:	d1f6      	bne.n	8005d68 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d7a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	f102 0308 	add.w	r3, r2, #8
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d88:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	3208      	adds	r2, #8
 8005d8e:	e842 3100 	strex	r1, r3, [r2]
 8005d92:	2900      	cmp	r1, #0
 8005d94:	d1f1      	bne.n	8005d7a <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8005d96:	2320      	movs	r3, #32
 8005d98:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005da0:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	4a29      	ldr	r2, [pc, #164]	@ (8005e4c <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8005db0:	d106      	bne.n	8005dc0 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d00d      	beq.n	8005dd4 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8005db8:	4620      	mov	r0, r4
 8005dba:	f7fc fccb 	bl	8002754 <HAL_UART_RxCpltCallback>
 8005dbe:	e784      	b.n	8005cca <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005dc0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	e852 3f00 	ldrex	r3, [r2]
 8005dc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	e842 3100 	strex	r1, r3, [r2]
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	d1f6      	bne.n	8005dc0 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005dd2:	e7ee      	b.n	8005db2 <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	e852 3f00 	ldrex	r3, [r2]
 8005dde:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	e842 3100 	strex	r1, r3, [r2]
 8005de6:	2900      	cmp	r1, #0
 8005de8:	d1f6      	bne.n	8005dd8 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	69da      	ldr	r2, [r3, #28]
 8005dee:	f012 0f10 	tst.w	r2, #16
 8005df2:	d001      	beq.n	8005df8 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005df4:	2210      	movs	r2, #16
 8005df6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005df8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7ff fcc6 	bl	800578e <HAL_UARTEx_RxEventCallback>
 8005e02:	e762      	b.n	8005cca <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8005e04:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005e08:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f43f af4e 	beq.w	8005cac <UART_RxISR_8BIT_FIFOEN+0x24>
 8005e10:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8005e14:	429a      	cmp	r2, r3
 8005e16:	f67f af49 	bls.w	8005cac <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	f102 0308 	add.w	r3, r2, #8
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	3208      	adds	r2, #8
 8005e2a:	e842 3100 	strex	r1, r3, [r2]
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	d1f3      	bne.n	8005e1a <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8005e32:	4b07      	ldr	r3, [pc, #28]	@ (8005e50 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8005e34:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e36:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	e852 3f00 	ldrex	r3, [r2]
 8005e3c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	e842 3100 	strex	r1, r3, [r2]
 8005e44:	2900      	cmp	r1, #0
 8005e46:	d1f6      	bne.n	8005e36 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8005e48:	e730      	b.n	8005cac <UART_RxISR_8BIT_FIFOEN+0x24>
 8005e4a:	bf00      	nop
 8005e4c:	40008000 	.word	0x40008000
 8005e50:	08005ad5 	.word	0x08005ad5

08005e54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005e58:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e5c:	6803      	ldr	r3, [r0, #0]
 8005e5e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e60:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e64:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e68:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8005e6c:	2a22      	cmp	r2, #34	@ 0x22
 8005e6e:	d005      	beq.n	8005e7c <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	f042 0208 	orr.w	r2, r2, #8
 8005e76:	619a      	str	r2, [r3, #24]
  }
}
 8005e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005e7e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e82:	e008      	b.n	8005e96 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e84:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d14b      	bne.n	8005f24 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8005e8c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d04d      	beq.n	8005f32 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e96:	2f00      	cmp	r7, #0
 8005e98:	f000 8099 	beq.w	8005fce <UART_RxISR_16BIT_FIFOEN+0x17a>
 8005e9c:	f015 0f20 	tst.w	r5, #32
 8005ea0:	f000 8095 	beq.w	8005fce <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ea8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8005eaa:	4033      	ands	r3, r6
 8005eac:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8005eae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8005eb4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ec6:	f015 0f07 	tst.w	r5, #7
 8005eca:	d0df      	beq.n	8005e8c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ecc:	f015 0f01 	tst.w	r5, #1
 8005ed0:	d009      	beq.n	8005ee6 <UART_RxISR_16BIT_FIFOEN+0x92>
 8005ed2:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8005ed6:	d006      	beq.n	8005ee6 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ed8:	2201      	movs	r2, #1
 8005eda:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005edc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ee6:	f015 0f02 	tst.w	r5, #2
 8005eea:	d00b      	beq.n	8005f04 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8005eec:	f018 0f01 	tst.w	r8, #1
 8005ef0:	d008      	beq.n	8005f04 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ef8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005efc:	f043 0304 	orr.w	r3, r3, #4
 8005f00:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f04:	f015 0f04 	tst.w	r5, #4
 8005f08:	d0bc      	beq.n	8005e84 <UART_RxISR_16BIT_FIFOEN+0x30>
 8005f0a:	f018 0f01 	tst.w	r8, #1
 8005f0e:	d0b9      	beq.n	8005e84 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	2204      	movs	r2, #4
 8005f14:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f16:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005f1a:	f043 0302 	orr.w	r3, r3, #2
 8005f1e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8005f22:	e7af      	b.n	8005e84 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8005f24:	4620      	mov	r0, r4
 8005f26:	f7ff fbfb 	bl	8005720 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8005f30:	e7ac      	b.n	8005e8c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	e852 3f00 	ldrex	r3, [r2]
 8005f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	e842 3100 	strex	r1, r3, [r2]
 8005f40:	2900      	cmp	r1, #0
 8005f42:	d1f6      	bne.n	8005f32 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f44:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	f102 0308 	add.w	r3, r2, #8
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f52:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	3208      	adds	r2, #8
 8005f58:	e842 3100 	strex	r1, r3, [r2]
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	d1f1      	bne.n	8005f44 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8005f60:	2320      	movs	r3, #32
 8005f62:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f6a:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	4a29      	ldr	r2, [pc, #164]	@ (8006014 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8005f7a:	d106      	bne.n	8005f8a <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d00d      	beq.n	8005f9e <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8005f82:	4620      	mov	r0, r4
 8005f84:	f7fc fbe6 	bl	8002754 <HAL_UART_RxCpltCallback>
 8005f88:	e785      	b.n	8005e96 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	e852 3f00 	ldrex	r3, [r2]
 8005f90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	e842 3100 	strex	r1, r3, [r2]
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d1f6      	bne.n	8005f8a <UART_RxISR_16BIT_FIFOEN+0x136>
 8005f9c:	e7ee      	b.n	8005f7c <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	e852 3f00 	ldrex	r3, [r2]
 8005fa8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	e842 3100 	strex	r1, r3, [r2]
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	d1f6      	bne.n	8005fa2 <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	f012 0f10 	tst.w	r2, #16
 8005fbc:	d001      	beq.n	8005fc2 <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fc2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f7ff fbe1 	bl	800578e <HAL_UARTEx_RxEventCallback>
 8005fcc:	e763      	b.n	8005e96 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8005fce:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005fd2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f43f af4f 	beq.w	8005e78 <UART_RxISR_16BIT_FIFOEN+0x24>
 8005fda:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	f67f af4a 	bls.w	8005e78 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fe4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	f102 0308 	add.w	r3, r2, #8
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	3208      	adds	r2, #8
 8005ff4:	e842 3100 	strex	r1, r3, [r2]
 8005ff8:	2900      	cmp	r1, #0
 8005ffa:	d1f3      	bne.n	8005fe4 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8005ffc:	4b06      	ldr	r3, [pc, #24]	@ (8006018 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8005ffe:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006000:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	e852 3f00 	ldrex	r3, [r2]
 8006006:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	e842 3100 	strex	r1, r3, [r2]
 800600e:	2900      	cmp	r1, #0
 8006010:	d1f6      	bne.n	8006000 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8006012:	e731      	b.n	8005e78 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006014:	40008000 	.word	0x40008000
 8006018:	08005bb1 	.word	0x08005bb1

0800601c <UART_SetConfig>:
{
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006020:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006022:	6883      	ldr	r3, [r0, #8]
 8006024:	6902      	ldr	r2, [r0, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	6942      	ldr	r2, [r0, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	69c2      	ldr	r2, [r0, #28]
 800602e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006030:	6808      	ldr	r0, [r1, #0]
 8006032:	4a9d      	ldr	r2, [pc, #628]	@ (80062a8 <UART_SetConfig+0x28c>)
 8006034:	4002      	ands	r2, r0
 8006036:	431a      	orrs	r2, r3
 8006038:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800603a:	6822      	ldr	r2, [r4, #0]
 800603c:	6853      	ldr	r3, [r2, #4]
 800603e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006042:	68e1      	ldr	r1, [r4, #12]
 8006044:	430b      	orrs	r3, r1
 8006046:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006048:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800604a:	6822      	ldr	r2, [r4, #0]
 800604c:	4b97      	ldr	r3, [pc, #604]	@ (80062ac <UART_SetConfig+0x290>)
 800604e:	429a      	cmp	r2, r3
 8006050:	d001      	beq.n	8006056 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8006052:	6a23      	ldr	r3, [r4, #32]
 8006054:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006056:	6893      	ldr	r3, [r2, #8]
 8006058:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800605c:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006060:	430b      	orrs	r3, r1
 8006062:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006064:	6822      	ldr	r2, [r4, #0]
 8006066:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006068:	f023 030f 	bic.w	r3, r3, #15
 800606c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800606e:	430b      	orrs	r3, r1
 8006070:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	4a8e      	ldr	r2, [pc, #568]	@ (80062b0 <UART_SetConfig+0x294>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d01c      	beq.n	80060b4 <UART_SetConfig+0x98>
 800607a:	4a8e      	ldr	r2, [pc, #568]	@ (80062b4 <UART_SetConfig+0x298>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d031      	beq.n	80060e4 <UART_SetConfig+0xc8>
 8006080:	4a8a      	ldr	r2, [pc, #552]	@ (80062ac <UART_SetConfig+0x290>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d04b      	beq.n	800611e <UART_SetConfig+0x102>
 8006086:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006088:	4988      	ldr	r1, [pc, #544]	@ (80062ac <UART_SetConfig+0x290>)
 800608a:	428b      	cmp	r3, r1
 800608c:	d068      	beq.n	8006160 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608e:	69e0      	ldr	r0, [r4, #28]
 8006090:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006094:	f000 80a5 	beq.w	80061e2 <UART_SetConfig+0x1c6>
    switch (clocksource)
 8006098:	2a08      	cmp	r2, #8
 800609a:	f200 811f 	bhi.w	80062dc <UART_SetConfig+0x2c0>
 800609e:	e8df f012 	tbh	[pc, r2, lsl #1]
 80060a2:	00d3      	.short	0x00d3
 80060a4:	00d100f5 	.word	0x00d100f5
 80060a8:	00f8011d 	.word	0x00f8011d
 80060ac:	011d011d 	.word	0x011d011d
 80060b0:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80060b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060b8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80060bc:	f002 0203 	and.w	r2, r2, #3
 80060c0:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c4:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 80060c8:	2a03      	cmp	r2, #3
 80060ca:	d809      	bhi.n	80060e0 <UART_SetConfig+0xc4>
 80060cc:	e8df f002 	tbb	[pc, r2]
 80060d0:	063c0402 	.word	0x063c0402
 80060d4:	2201      	movs	r2, #1
 80060d6:	e7d7      	b.n	8006088 <UART_SetConfig+0x6c>
 80060d8:	2204      	movs	r2, #4
 80060da:	e7d5      	b.n	8006088 <UART_SetConfig+0x6c>
 80060dc:	2208      	movs	r2, #8
 80060de:	e7d3      	b.n	8006088 <UART_SetConfig+0x6c>
 80060e0:	2210      	movs	r2, #16
 80060e2:	e7d1      	b.n	8006088 <UART_SetConfig+0x6c>
 80060e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060e8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80060ec:	f002 020c 	and.w	r2, r2, #12
 80060f0:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 80060f4:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 80060f8:	2a0c      	cmp	r2, #12
 80060fa:	d80e      	bhi.n	800611a <UART_SetConfig+0xfe>
 80060fc:	e8df f002 	tbb	[pc, r2]
 8006100:	0d0d0d07 	.word	0x0d0d0d07
 8006104:	0d0d0d09 	.word	0x0d0d0d09
 8006108:	0d0d0d26 	.word	0x0d0d0d26
 800610c:	0b          	.byte	0x0b
 800610d:	00          	.byte	0x00
 800610e:	2200      	movs	r2, #0
 8006110:	e7ba      	b.n	8006088 <UART_SetConfig+0x6c>
 8006112:	2204      	movs	r2, #4
 8006114:	e7b8      	b.n	8006088 <UART_SetConfig+0x6c>
 8006116:	2208      	movs	r2, #8
 8006118:	e7b6      	b.n	8006088 <UART_SetConfig+0x6c>
 800611a:	2210      	movs	r2, #16
 800611c:	e7b4      	b.n	8006088 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800611e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006122:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006126:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 800612a:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800612e:	d00f      	beq.n	8006150 <UART_SetConfig+0x134>
 8006130:	d805      	bhi.n	800613e <UART_SetConfig+0x122>
 8006132:	b17a      	cbz	r2, 8006154 <UART_SetConfig+0x138>
 8006134:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006138:	d10e      	bne.n	8006158 <UART_SetConfig+0x13c>
 800613a:	2204      	movs	r2, #4
 800613c:	e7a4      	b.n	8006088 <UART_SetConfig+0x6c>
 800613e:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8006142:	d10b      	bne.n	800615c <UART_SetConfig+0x140>
 8006144:	2208      	movs	r2, #8
 8006146:	e79f      	b.n	8006088 <UART_SetConfig+0x6c>
 8006148:	2202      	movs	r2, #2
 800614a:	e79d      	b.n	8006088 <UART_SetConfig+0x6c>
 800614c:	2202      	movs	r2, #2
 800614e:	e79b      	b.n	8006088 <UART_SetConfig+0x6c>
 8006150:	2202      	movs	r2, #2
 8006152:	e799      	b.n	8006088 <UART_SetConfig+0x6c>
 8006154:	2200      	movs	r2, #0
 8006156:	e797      	b.n	8006088 <UART_SetConfig+0x6c>
 8006158:	2210      	movs	r2, #16
 800615a:	e795      	b.n	8006088 <UART_SetConfig+0x6c>
 800615c:	2210      	movs	r2, #16
 800615e:	e793      	b.n	8006088 <UART_SetConfig+0x6c>
    switch (clocksource)
 8006160:	2a08      	cmp	r2, #8
 8006162:	f200 809c 	bhi.w	800629e <UART_SetConfig+0x282>
 8006166:	e8df f002 	tbb	[pc, r2]
 800616a:	9a08      	.short	0x9a08
 800616c:	9a379a3a 	.word	0x9a379a3a
 8006170:	9a9a      	.short	0x9a9a
 8006172:	05          	.byte	0x05
 8006173:	00          	.byte	0x00
 8006174:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006178:	e004      	b.n	8006184 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800617a:	f7fe fabf 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800617e:	2800      	cmp	r0, #0
 8006180:	f000 808f 	beq.w	80062a2 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006184:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006186:	4b4c      	ldr	r3, [pc, #304]	@ (80062b8 <UART_SetConfig+0x29c>)
 8006188:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800618c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006190:	6865      	ldr	r5, [r4, #4]
 8006192:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006196:	4299      	cmp	r1, r3
 8006198:	f200 8094 	bhi.w	80062c4 <UART_SetConfig+0x2a8>
 800619c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80061a0:	f200 8092 	bhi.w	80062c8 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061a4:	2600      	movs	r6, #0
 80061a6:	4633      	mov	r3, r6
 80061a8:	4631      	mov	r1, r6
 80061aa:	f7fa f841 	bl	8000230 <__aeabi_uldivmod>
 80061ae:	0209      	lsls	r1, r1, #8
 80061b0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80061b4:	0200      	lsls	r0, r0, #8
 80061b6:	086b      	lsrs	r3, r5, #1
 80061b8:	18c0      	adds	r0, r0, r3
 80061ba:	462a      	mov	r2, r5
 80061bc:	4633      	mov	r3, r6
 80061be:	f141 0100 	adc.w	r1, r1, #0
 80061c2:	f7fa f835 	bl	8000230 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061c6:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80061ca:	4b3c      	ldr	r3, [pc, #240]	@ (80062bc <UART_SetConfig+0x2a0>)
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d87d      	bhi.n	80062cc <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	60d8      	str	r0, [r3, #12]
 80061d4:	4630      	mov	r0, r6
 80061d6:	e050      	b.n	800627a <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 80061d8:	f7fd fd92 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
        break;
 80061dc:	e7cf      	b.n	800617e <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 80061de:	4838      	ldr	r0, [pc, #224]	@ (80062c0 <UART_SetConfig+0x2a4>)
 80061e0:	e7d0      	b.n	8006184 <UART_SetConfig+0x168>
    switch (clocksource)
 80061e2:	2a08      	cmp	r2, #8
 80061e4:	d874      	bhi.n	80062d0 <UART_SetConfig+0x2b4>
 80061e6:	e8df f002 	tbb	[pc, r2]
 80061ea:	2707      	.short	0x2707
 80061ec:	732a7305 	.word	0x732a7305
 80061f0:	7373      	.short	0x7373
 80061f2:	0b          	.byte	0x0b
 80061f3:	00          	.byte	0x00
 80061f4:	4832      	ldr	r0, [pc, #200]	@ (80062c0 <UART_SetConfig+0x2a4>)
 80061f6:	e003      	b.n	8006200 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f8:	f7fe fa80 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d069      	beq.n	80062d4 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006200:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006202:	4b2d      	ldr	r3, [pc, #180]	@ (80062b8 <UART_SetConfig+0x29c>)
 8006204:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006208:	fbb0 f0f3 	udiv	r0, r0, r3
 800620c:	6862      	ldr	r2, [r4, #4]
 800620e:	0853      	lsrs	r3, r2, #1
 8006210:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006214:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006218:	f1a3 0110 	sub.w	r1, r3, #16
 800621c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8006220:	4291      	cmp	r1, r2
 8006222:	d859      	bhi.n	80062d8 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006224:	b29a      	uxth	r2, r3
 8006226:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800622a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800622e:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8006230:	6822      	ldr	r2, [r4, #0]
 8006232:	60d3      	str	r3, [r2, #12]
 8006234:	2000      	movs	r0, #0
 8006236:	e020      	b.n	800627a <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006238:	f7fe fa70 	bl	800471c <HAL_RCC_GetPCLK2Freq>
        break;
 800623c:	e7de      	b.n	80061fc <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800623e:	f7fd fd5f 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
        break;
 8006242:	e7db      	b.n	80061fc <UART_SetConfig+0x1e0>
    switch (clocksource)
 8006244:	481e      	ldr	r0, [pc, #120]	@ (80062c0 <UART_SetConfig+0x2a4>)
 8006246:	e003      	b.n	8006250 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006248:	f7fe fa58 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800624c:	2800      	cmp	r0, #0
 800624e:	d047      	beq.n	80062e0 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006250:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006252:	4b19      	ldr	r3, [pc, #100]	@ (80062b8 <UART_SetConfig+0x29c>)
 8006254:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006258:	fbb0 f0f3 	udiv	r0, r0, r3
 800625c:	6863      	ldr	r3, [r4, #4]
 800625e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006262:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006266:	f1a0 0210 	sub.w	r2, r0, #16
 800626a:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800626e:	429a      	cmp	r2, r3
 8006270:	d838      	bhi.n	80062e4 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	b280      	uxth	r0, r0
 8006276:	60d8      	str	r0, [r3, #12]
 8006278:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800627a:	2301      	movs	r3, #1
 800627c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006280:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8006288:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800628a:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800628c:	f7fe fa46 	bl	800471c <HAL_RCC_GetPCLK2Freq>
        break;
 8006290:	e7dc      	b.n	800624c <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8006292:	f7fd fd35 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
        break;
 8006296:	e7d9      	b.n	800624c <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8006298:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800629c:	e7d8      	b.n	8006250 <UART_SetConfig+0x234>
    switch (clocksource)
 800629e:	2001      	movs	r0, #1
 80062a0:	e7eb      	b.n	800627a <UART_SetConfig+0x25e>
 80062a2:	2000      	movs	r0, #0
 80062a4:	e7e9      	b.n	800627a <UART_SetConfig+0x25e>
 80062a6:	bf00      	nop
 80062a8:	cfff69f3 	.word	0xcfff69f3
 80062ac:	40008000 	.word	0x40008000
 80062b0:	40013800 	.word	0x40013800
 80062b4:	40004400 	.word	0x40004400
 80062b8:	0800a9ec 	.word	0x0800a9ec
 80062bc:	000ffcff 	.word	0x000ffcff
 80062c0:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 80062c4:	2001      	movs	r0, #1
 80062c6:	e7d8      	b.n	800627a <UART_SetConfig+0x25e>
 80062c8:	2001      	movs	r0, #1
 80062ca:	e7d6      	b.n	800627a <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 80062cc:	2001      	movs	r0, #1
 80062ce:	e7d4      	b.n	800627a <UART_SetConfig+0x25e>
    switch (clocksource)
 80062d0:	2001      	movs	r0, #1
 80062d2:	e7d2      	b.n	800627a <UART_SetConfig+0x25e>
 80062d4:	2000      	movs	r0, #0
 80062d6:	e7d0      	b.n	800627a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80062d8:	2001      	movs	r0, #1
 80062da:	e7ce      	b.n	800627a <UART_SetConfig+0x25e>
    switch (clocksource)
 80062dc:	2001      	movs	r0, #1
 80062de:	e7cc      	b.n	800627a <UART_SetConfig+0x25e>
 80062e0:	2000      	movs	r0, #0
 80062e2:	e7ca      	b.n	800627a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80062e4:	2001      	movs	r0, #1
 80062e6:	e7c8      	b.n	800627a <UART_SetConfig+0x25e>

080062e8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062e8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80062ea:	f013 0f01 	tst.w	r3, #1
 80062ee:	d006      	beq.n	80062fe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062f0:	6802      	ldr	r2, [r0, #0]
 80062f2:	6853      	ldr	r3, [r2, #4]
 80062f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80062f8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80062fa:	430b      	orrs	r3, r1
 80062fc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062fe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006300:	f013 0f02 	tst.w	r3, #2
 8006304:	d006      	beq.n	8006314 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006306:	6802      	ldr	r2, [r0, #0]
 8006308:	6853      	ldr	r3, [r2, #4]
 800630a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8006310:	430b      	orrs	r3, r1
 8006312:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006314:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006316:	f013 0f04 	tst.w	r3, #4
 800631a:	d006      	beq.n	800632a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800631c:	6802      	ldr	r2, [r0, #0]
 800631e:	6853      	ldr	r3, [r2, #4]
 8006320:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006324:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8006326:	430b      	orrs	r3, r1
 8006328:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800632a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800632c:	f013 0f08 	tst.w	r3, #8
 8006330:	d006      	beq.n	8006340 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006332:	6802      	ldr	r2, [r0, #0]
 8006334:	6853      	ldr	r3, [r2, #4]
 8006336:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800633a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800633c:	430b      	orrs	r3, r1
 800633e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006340:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006342:	f013 0f10 	tst.w	r3, #16
 8006346:	d006      	beq.n	8006356 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006348:	6802      	ldr	r2, [r0, #0]
 800634a:	6893      	ldr	r3, [r2, #8]
 800634c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006350:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8006352:	430b      	orrs	r3, r1
 8006354:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006356:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006358:	f013 0f20 	tst.w	r3, #32
 800635c:	d006      	beq.n	800636c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800635e:	6802      	ldr	r2, [r0, #0]
 8006360:	6893      	ldr	r3, [r2, #8]
 8006362:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006366:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006368:	430b      	orrs	r3, r1
 800636a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800636c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800636e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006372:	d00a      	beq.n	800638a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006374:	6802      	ldr	r2, [r0, #0]
 8006376:	6853      	ldr	r3, [r2, #4]
 8006378:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800637c:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800637e:	430b      	orrs	r3, r1
 8006380:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006382:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006384:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006388:	d00b      	beq.n	80063a2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800638a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800638c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006390:	d006      	beq.n	80063a0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006392:	6802      	ldr	r2, [r0, #0]
 8006394:	6853      	ldr	r3, [r2, #4]
 8006396:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800639a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800639c:	430b      	orrs	r3, r1
 800639e:	6053      	str	r3, [r2, #4]
}
 80063a0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063a2:	6802      	ldr	r2, [r0, #0]
 80063a4:	6853      	ldr	r3, [r2, #4]
 80063a6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80063aa:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6053      	str	r3, [r2, #4]
 80063b0:	e7eb      	b.n	800638a <UART_AdvFeatureConfig+0xa2>

080063b2 <UART_WaitOnFlagUntilTimeout>:
{
 80063b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b6:	4605      	mov	r5, r0
 80063b8:	460f      	mov	r7, r1
 80063ba:	4616      	mov	r6, r2
 80063bc:	4699      	mov	r9, r3
 80063be:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c2:	682b      	ldr	r3, [r5, #0]
 80063c4:	69dc      	ldr	r4, [r3, #28]
 80063c6:	ea37 0404 	bics.w	r4, r7, r4
 80063ca:	bf0c      	ite	eq
 80063cc:	2401      	moveq	r4, #1
 80063ce:	2400      	movne	r4, #0
 80063d0:	42b4      	cmp	r4, r6
 80063d2:	d157      	bne.n	8006484 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 80063d4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80063d8:	d0f3      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063da:	f7fb fea7 	bl	800212c <HAL_GetTick>
 80063de:	eba0 0009 	sub.w	r0, r0, r9
 80063e2:	4540      	cmp	r0, r8
 80063e4:	d82f      	bhi.n	8006446 <UART_WaitOnFlagUntilTimeout+0x94>
 80063e6:	f1b8 0f00 	cmp.w	r8, #0
 80063ea:	d02c      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	f012 0f04 	tst.w	r2, #4
 80063f4:	d0e5      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80063fc:	d0e1      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006402:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006404:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	e852 3f00 	ldrex	r3, [r2]
 800640a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	e842 3100 	strex	r1, r3, [r2]
 8006412:	2900      	cmp	r1, #0
 8006414:	d1f6      	bne.n	8006404 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006416:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	f102 0308 	add.w	r3, r2, #8
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	3208      	adds	r2, #8
 8006426:	e842 3100 	strex	r1, r3, [r2]
 800642a:	2900      	cmp	r1, #0
 800642c:	d1f3      	bne.n	8006416 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800642e:	2320      	movs	r3, #32
 8006430:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006434:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006438:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800643c:	2300      	movs	r3, #0
 800643e:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006442:	2003      	movs	r0, #3
 8006444:	e01f      	b.n	8006486 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006446:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	e852 3f00 	ldrex	r3, [r2]
 800644c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	e842 3100 	strex	r1, r3, [r2]
 8006454:	2900      	cmp	r1, #0
 8006456:	d1f6      	bne.n	8006446 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	f102 0308 	add.w	r3, r2, #8
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	3208      	adds	r2, #8
 8006468:	e842 3100 	strex	r1, r3, [r2]
 800646c:	2900      	cmp	r1, #0
 800646e:	d1f3      	bne.n	8006458 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8006470:	2320      	movs	r3, #32
 8006472:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006476:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800647a:	2300      	movs	r3, #0
 800647c:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 8006480:	2003      	movs	r0, #3
 8006482:	e000      	b.n	8006486 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8006484:	2000      	movs	r0, #0
}
 8006486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800648a <UART_CheckIdleState>:
{
 800648a:	b530      	push	{r4, r5, lr}
 800648c:	b083      	sub	sp, #12
 800648e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	2300      	movs	r3, #0
 8006492:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8006496:	f7fb fe49 	bl	800212c <HAL_GetTick>
 800649a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800649c:	6822      	ldr	r2, [r4, #0]
 800649e:	6812      	ldr	r2, [r2, #0]
 80064a0:	f012 0f08 	tst.w	r2, #8
 80064a4:	d110      	bne.n	80064c8 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f013 0f04 	tst.w	r3, #4
 80064ae:	d119      	bne.n	80064e4 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80064b0:	2320      	movs	r3, #32
 80064b2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064b6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ba:	2000      	movs	r0, #0
 80064bc:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064be:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80064c0:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80064c4:	b003      	add	sp, #12
 80064c6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	4603      	mov	r3, r0
 80064d0:	2200      	movs	r2, #0
 80064d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064d6:	4620      	mov	r0, r4
 80064d8:	f7ff ff6b 	bl	80063b2 <UART_WaitOnFlagUntilTimeout>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d0e2      	beq.n	80064a6 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80064e0:	2003      	movs	r0, #3
 80064e2:	e7ef      	b.n	80064c4 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	462b      	mov	r3, r5
 80064ec:	2200      	movs	r2, #0
 80064ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80064f2:	4620      	mov	r0, r4
 80064f4:	f7ff ff5d 	bl	80063b2 <UART_WaitOnFlagUntilTimeout>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d0d9      	beq.n	80064b0 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80064fc:	2003      	movs	r0, #3
 80064fe:	e7e1      	b.n	80064c4 <UART_CheckIdleState+0x3a>

08006500 <HAL_UART_Init>:
  if (huart == NULL)
 8006500:	b378      	cbz	r0, 8006562 <HAL_UART_Init+0x62>
{
 8006502:	b510      	push	{r4, lr}
 8006504:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006506:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800650a:	b30b      	cbz	r3, 8006550 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800650c:	2324      	movs	r3, #36	@ 0x24
 800650e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	6813      	ldr	r3, [r2, #0]
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff fd7d 	bl	800601c <UART_SetConfig>
 8006522:	2801      	cmp	r0, #1
 8006524:	d013      	beq.n	800654e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006526:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006528:	b9bb      	cbnz	r3, 800655a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	6853      	ldr	r3, [r2, #4]
 800652e:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8006532:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006534:	6822      	ldr	r2, [r4, #0]
 8006536:	6893      	ldr	r3, [r2, #8]
 8006538:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800653c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800653e:	6822      	ldr	r2, [r4, #0]
 8006540:	6813      	ldr	r3, [r2, #0]
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006548:	4620      	mov	r0, r4
 800654a:	f7ff ff9e 	bl	800648a <UART_CheckIdleState>
}
 800654e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006550:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8006554:	f7fb fff2 	bl	800253c <HAL_UART_MspInit>
 8006558:	e7d8      	b.n	800650c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800655a:	4620      	mov	r0, r4
 800655c:	f7ff fec4 	bl	80062e8 <UART_AdvFeatureConfig>
 8006560:	e7e3      	b.n	800652a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006562:	2001      	movs	r0, #1
}
 8006564:	4770      	bx	lr
	...

08006568 <UART_Start_Receive_IT>:
{
 8006568:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800656a:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800656c:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006570:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006574:	2300      	movs	r3, #0
 8006576:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8006578:	6883      	ldr	r3, [r0, #8]
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657e:	d006      	beq.n	800658e <UART_Start_Receive_IT+0x26>
 8006580:	b9a3      	cbnz	r3, 80065ac <UART_Start_Receive_IT+0x44>
 8006582:	6903      	ldr	r3, [r0, #16]
 8006584:	b973      	cbnz	r3, 80065a4 <UART_Start_Receive_IT+0x3c>
 8006586:	23ff      	movs	r3, #255	@ 0xff
 8006588:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800658c:	e014      	b.n	80065b8 <UART_Start_Receive_IT+0x50>
 800658e:	6903      	ldr	r3, [r0, #16]
 8006590:	b923      	cbnz	r3, 800659c <UART_Start_Receive_IT+0x34>
 8006592:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8006596:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800659a:	e00d      	b.n	80065b8 <UART_Start_Receive_IT+0x50>
 800659c:	23ff      	movs	r3, #255	@ 0xff
 800659e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80065a2:	e009      	b.n	80065b8 <UART_Start_Receive_IT+0x50>
 80065a4:	237f      	movs	r3, #127	@ 0x7f
 80065a6:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80065aa:	e005      	b.n	80065b8 <UART_Start_Receive_IT+0x50>
 80065ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065b0:	d02d      	beq.n	800660e <UART_Start_Receive_IT+0xa6>
 80065b2:	2300      	movs	r3, #0
 80065b4:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065be:	2322      	movs	r3, #34	@ 0x22
 80065c0:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c4:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	f101 0308 	add.w	r3, r1, #8
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	3108      	adds	r1, #8
 80065d4:	e841 3400 	strex	r4, r3, [r1]
 80065d8:	2c00      	cmp	r4, #0
 80065da:	d1f3      	bne.n	80065c4 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80065dc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80065de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e2:	d01e      	beq.n	8006622 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e4:	6883      	ldr	r3, [r0, #8]
 80065e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ea:	d042      	beq.n	8006672 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 80065ec:	4b29      	ldr	r3, [pc, #164]	@ (8006694 <UART_Start_Receive_IT+0x12c>)
 80065ee:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80065f0:	6903      	ldr	r3, [r0, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d043      	beq.n	800667e <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80065f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	e852 3f00 	ldrex	r3, [r2]
 80065fc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	e842 3100 	strex	r1, r3, [r2]
 8006604:	2900      	cmp	r1, #0
 8006606:	d1f6      	bne.n	80065f6 <UART_Start_Receive_IT+0x8e>
}
 8006608:	2000      	movs	r0, #0
 800660a:	bc10      	pop	{r4}
 800660c:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800660e:	6903      	ldr	r3, [r0, #16]
 8006610:	b91b      	cbnz	r3, 800661a <UART_Start_Receive_IT+0xb2>
 8006612:	237f      	movs	r3, #127	@ 0x7f
 8006614:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006618:	e7ce      	b.n	80065b8 <UART_Start_Receive_IT+0x50>
 800661a:	233f      	movs	r3, #63	@ 0x3f
 800661c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006620:	e7ca      	b.n	80065b8 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006622:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8006626:	4293      	cmp	r3, r2
 8006628:	d8dc      	bhi.n	80065e4 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662a:	6883      	ldr	r3, [r0, #8]
 800662c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006630:	d019      	beq.n	8006666 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006632:	4b19      	ldr	r3, [pc, #100]	@ (8006698 <UART_Start_Receive_IT+0x130>)
 8006634:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006636:	6903      	ldr	r3, [r0, #16]
 8006638:	b143      	cbz	r3, 800664c <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800663a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	e852 3f00 	ldrex	r3, [r2]
 8006640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	e842 3100 	strex	r1, r3, [r2]
 8006648:	2900      	cmp	r1, #0
 800664a:	d1f6      	bne.n	800663a <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800664c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	f102 0308 	add.w	r3, r2, #8
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	3208      	adds	r2, #8
 800665c:	e842 3100 	strex	r1, r3, [r2]
 8006660:	2900      	cmp	r1, #0
 8006662:	d1f3      	bne.n	800664c <UART_Start_Receive_IT+0xe4>
 8006664:	e7d0      	b.n	8006608 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006666:	6903      	ldr	r3, [r0, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e2      	bne.n	8006632 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800666c:	4b0b      	ldr	r3, [pc, #44]	@ (800669c <UART_Start_Receive_IT+0x134>)
 800666e:	6743      	str	r3, [r0, #116]	@ 0x74
 8006670:	e7e1      	b.n	8006636 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006672:	6903      	ldr	r3, [r0, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1b9      	bne.n	80065ec <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006678:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <UART_Start_Receive_IT+0x138>)
 800667a:	6743      	str	r3, [r0, #116]	@ 0x74
 800667c:	e7b8      	b.n	80065f0 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800667e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	e852 3f00 	ldrex	r3, [r2]
 8006684:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	e842 3100 	strex	r1, r3, [r2]
 800668c:	2900      	cmp	r1, #0
 800668e:	d1f6      	bne.n	800667e <UART_Start_Receive_IT+0x116>
 8006690:	e7ba      	b.n	8006608 <UART_Start_Receive_IT+0xa0>
 8006692:	bf00      	nop
 8006694:	08005ad5 	.word	0x08005ad5
 8006698:	08005c89 	.word	0x08005c89
 800669c:	08005e55 	.word	0x08005e55
 80066a0:	08005bb1 	.word	0x08005bb1

080066a4 <HAL_UART_Receive_IT>:
{
 80066a4:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80066a6:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d117      	bne.n	80066de <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80066ae:	b1c1      	cbz	r1, 80066e2 <HAL_UART_Receive_IT+0x3e>
 80066b0:	b1ca      	cbz	r2, 80066e6 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b2:	2300      	movs	r3, #0
 80066b4:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066b6:	6803      	ldr	r3, [r0, #0]
 80066b8:	4c0c      	ldr	r4, [pc, #48]	@ (80066ec <HAL_UART_Receive_IT+0x48>)
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	d00c      	beq.n	80066d8 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80066c4:	d008      	beq.n	80066d8 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066c6:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	e854 3f00 	ldrex	r3, [r4]
 80066cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	e844 3500 	strex	r5, r3, [r4]
 80066d4:	2d00      	cmp	r5, #0
 80066d6:	d1f6      	bne.n	80066c6 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80066d8:	f7ff ff46 	bl	8006568 <UART_Start_Receive_IT>
 80066dc:	e000      	b.n	80066e0 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 80066de:	2002      	movs	r0, #2
}
 80066e0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80066e2:	2001      	movs	r0, #1
 80066e4:	e7fc      	b.n	80066e0 <HAL_UART_Receive_IT+0x3c>
 80066e6:	2001      	movs	r0, #1
 80066e8:	e7fa      	b.n	80066e0 <HAL_UART_Receive_IT+0x3c>
 80066ea:	bf00      	nop
 80066ec:	40008000 	.word	0x40008000

080066f0 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80066f0:	b082      	sub	sp, #8
 80066f2:	ab02      	add	r3, sp, #8
 80066f4:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80066f8:	6802      	ldr	r2, [r0, #0]
 80066fa:	6853      	ldr	r3, [r2, #4]
 80066fc:	f023 0310 	bic.w	r3, r3, #16
 8006700:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006704:	430b      	orrs	r3, r1
 8006706:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006708:	6802      	ldr	r2, [r0, #0]
 800670a:	6853      	ldr	r3, [r2, #4]
 800670c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006710:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006714:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006718:	6053      	str	r3, [r2, #4]
}
 800671a:	b002      	add	sp, #8
 800671c:	4770      	bx	lr
	...

08006720 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006720:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8006722:	b92b      	cbnz	r3, 8006730 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006724:	2301      	movs	r3, #1
 8006726:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800672a:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800672e:	4770      	bx	lr
{
 8006730:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006732:	6803      	ldr	r3, [r0, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800673a:	6899      	ldr	r1, [r3, #8]
 800673c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800673e:	4d09      	ldr	r5, [pc, #36]	@ (8006764 <UARTEx_SetNbDataToProcess+0x44>)
 8006740:	5c6b      	ldrb	r3, [r5, r1]
 8006742:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006744:	4c08      	ldr	r4, [pc, #32]	@ (8006768 <UARTEx_SetNbDataToProcess+0x48>)
 8006746:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006748:	fb93 f3f1 	sdiv	r3, r3, r1
 800674c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006750:	5cab      	ldrb	r3, [r5, r2]
 8006752:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006754:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006756:	fb93 f3f2 	sdiv	r3, r3, r2
 800675a:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800675e:	bc30      	pop	{r4, r5}
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	0800aa0c 	.word	0x0800aa0c
 8006768:	0800aa04 	.word	0x0800aa04

0800676c <HAL_UARTEx_WakeupCallback>:
}
 800676c:	4770      	bx	lr

0800676e <HAL_UARTEx_RxFifoFullCallback>:
}
 800676e:	4770      	bx	lr

08006770 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006770:	4770      	bx	lr

08006772 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8006772:	b510      	push	{r4, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	ab04      	add	r3, sp, #16
 8006778:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 800677c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006780:	2b01      	cmp	r3, #1
 8006782:	d035      	beq.n	80067f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8006784:	4604      	mov	r4, r0
 8006786:	2301      	movs	r3, #1
 8006788:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800678c:	2324      	movs	r3, #36	@ 0x24
 800678e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006792:	6802      	ldr	r2, [r0, #0]
 8006794:	6813      	ldr	r3, [r2, #0]
 8006796:	f023 0301 	bic.w	r3, r3, #1
 800679a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800679c:	6801      	ldr	r1, [r0, #0]
 800679e:	688b      	ldr	r3, [r1, #8]
 80067a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80067a4:	9a02      	ldr	r2, [sp, #8]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80067aa:	b1aa      	cbz	r2, 80067d8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80067b6:	f7fb fcb9 	bl	800212c <HAL_GetTick>
 80067ba:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067bc:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 80067c0:	9200      	str	r2, [sp, #0]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff fdf2 	bl	80063b2 <UART_WaitOnFlagUntilTimeout>
 80067ce:	b948      	cbnz	r0, 80067e4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80067d0:	2320      	movs	r3, #32
 80067d2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 80067d6:	e006      	b.n	80067e6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80067d8:	ab04      	add	r3, sp, #16
 80067da:	e913 0006 	ldmdb	r3, {r1, r2}
 80067de:	f7ff ff87 	bl	80066f0 <UARTEx_Wakeup_AddressConfig>
 80067e2:	e7e3      	b.n	80067ac <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80067e4:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80067e6:	2300      	movs	r3, #0
 80067e8:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80067ec:	b004      	add	sp, #16
 80067ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80067f0:	2002      	movs	r0, #2
 80067f2:	e7fb      	b.n	80067ec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080067f4 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80067f4:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d010      	beq.n	800681e <HAL_UARTEx_EnableStopMode+0x2a>
 80067fc:	2301      	movs	r3, #1
 80067fe:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006802:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	e852 3f00 	ldrex	r3, [r2]
 8006808:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	e842 3100 	strex	r1, r3, [r2]
 8006810:	2900      	cmp	r1, #0
 8006812:	d1f6      	bne.n	8006802 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006814:	2300      	movs	r3, #0
 8006816:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 800681a:	4618      	mov	r0, r3
 800681c:	4770      	bx	lr
  __HAL_LOCK(huart);
 800681e:	2002      	movs	r0, #2
}
 8006820:	4770      	bx	lr

08006822 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006822:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006826:	2b01      	cmp	r3, #1
 8006828:	d01d      	beq.n	8006866 <HAL_UARTEx_EnableFifoMode+0x44>
{
 800682a:	b510      	push	{r4, lr}
 800682c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800682e:	2301      	movs	r3, #1
 8006830:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006834:	2324      	movs	r3, #36	@ 0x24
 8006836:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800683a:	6802      	ldr	r2, [r0, #0]
 800683c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800683e:	6811      	ldr	r1, [r2, #0]
 8006840:	f021 0101 	bic.w	r1, r1, #1
 8006844:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006846:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800684a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800684e:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006850:	6802      	ldr	r2, [r0, #0]
 8006852:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006854:	f7ff ff64 	bl	8006720 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006858:	2320      	movs	r3, #32
 800685a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800685e:	2000      	movs	r0, #0
 8006860:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8006864:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006866:	2002      	movs	r0, #2
}
 8006868:	4770      	bx	lr

0800686a <HAL_UARTEx_SetTxFifoThreshold>:
{
 800686a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800686c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006870:	2b01      	cmp	r3, #1
 8006872:	d01d      	beq.n	80068b0 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006874:	4604      	mov	r4, r0
 8006876:	2301      	movs	r3, #1
 8006878:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800687c:	2324      	movs	r3, #36	@ 0x24
 800687e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006882:	6803      	ldr	r3, [r0, #0]
 8006884:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	f022 0201 	bic.w	r2, r2, #1
 800688c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800688e:	6802      	ldr	r2, [r0, #0]
 8006890:	6893      	ldr	r3, [r2, #8]
 8006892:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8006896:	4319      	orrs	r1, r3
 8006898:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800689a:	f7ff ff41 	bl	8006720 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80068a2:	2320      	movs	r3, #32
 80068a4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80068a8:	2000      	movs	r0, #0
 80068aa:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80068b0:	2002      	movs	r0, #2
 80068b2:	e7fc      	b.n	80068ae <HAL_UARTEx_SetTxFifoThreshold+0x44>

080068b4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80068b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80068b6:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d01d      	beq.n	80068fa <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80068be:	4604      	mov	r4, r0
 80068c0:	2301      	movs	r3, #1
 80068c2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80068c6:	2324      	movs	r3, #36	@ 0x24
 80068c8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068cc:	6803      	ldr	r3, [r0, #0]
 80068ce:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	f022 0201 	bic.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068d8:	6802      	ldr	r2, [r0, #0]
 80068da:	6893      	ldr	r3, [r2, #8]
 80068dc:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80068e0:	4319      	orrs	r1, r3
 80068e2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80068e4:	f7ff ff1c 	bl	8006720 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80068ec:	2320      	movs	r3, #32
 80068ee:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80068f2:	2000      	movs	r0, #0
 80068f4:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80068f8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80068fa:	2002      	movs	r0, #2
 80068fc:	e7fc      	b.n	80068f8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006900 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8006900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006904:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8006906:	2400      	movs	r4, #0
 8006908:	9401      	str	r4, [sp, #4]
 800690a:	9402      	str	r4, [sp, #8]
 800690c:	9403      	str	r4, [sp, #12]
 800690e:	9404      	str	r4, [sp, #16]
 8006910:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006916:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006918:	f042 0204 	orr.w	r2, r2, #4
 800691c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800691e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8006926:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8006928:	2710      	movs	r7, #16
 800692a:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800692c:	2301      	movs	r3, #1
 800692e:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006930:	2303      	movs	r3, #3
 8006932:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8006934:	4d12      	ldr	r5, [pc, #72]	@ (8006980 <BSP_RADIO_Init+0x80>)
 8006936:	a901      	add	r1, sp, #4
 8006938:	4628      	mov	r0, r5
 800693a:	f7fc ff81 	bl	8003840 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800693e:	f04f 0820 	mov.w	r8, #32
 8006942:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8006946:	a901      	add	r1, sp, #4
 8006948:	4628      	mov	r0, r5
 800694a:	f7fc ff79 	bl	8003840 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800694e:	2608      	movs	r6, #8
 8006950:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8006952:	a901      	add	r1, sp, #4
 8006954:	4628      	mov	r0, r5
 8006956:	f7fc ff73 	bl	8003840 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800695a:	4622      	mov	r2, r4
 800695c:	4641      	mov	r1, r8
 800695e:	4628      	mov	r0, r5
 8006960:	f7fd f8be 	bl	8003ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8006964:	4622      	mov	r2, r4
 8006966:	4639      	mov	r1, r7
 8006968:	4628      	mov	r0, r5
 800696a:	f7fd f8b9 	bl	8003ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 800696e:	4622      	mov	r2, r4
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	f7fd f8b4 	bl	8003ae0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8006978:	4620      	mov	r0, r4
 800697a:	b006      	add	sp, #24
 800697c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006980:	48000800 	.word	0x48000800

08006984 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8006984:	b510      	push	{r4, lr}
  switch (Config)
 8006986:	2803      	cmp	r0, #3
 8006988:	d813      	bhi.n	80069b2 <BSP_RADIO_ConfigRFSwitch+0x2e>
 800698a:	e8df f000 	tbb	[pc, r0]
 800698e:	1402      	.short	0x1402
 8006990:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8006992:	4c22      	ldr	r4, [pc, #136]	@ (8006a1c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8006994:	2200      	movs	r2, #0
 8006996:	2108      	movs	r1, #8
 8006998:	4620      	mov	r0, r4
 800699a:	f7fd f8a1 	bl	8003ae0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800699e:	2200      	movs	r2, #0
 80069a0:	2110      	movs	r1, #16
 80069a2:	4620      	mov	r0, r4
 80069a4:	f7fd f89c 	bl	8003ae0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80069a8:	2200      	movs	r2, #0
 80069aa:	2120      	movs	r1, #32
 80069ac:	4620      	mov	r0, r4
 80069ae:	f7fd f897 	bl	8003ae0 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 80069b2:	2000      	movs	r0, #0
 80069b4:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80069b6:	4c19      	ldr	r4, [pc, #100]	@ (8006a1c <BSP_RADIO_ConfigRFSwitch+0x98>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	2108      	movs	r1, #8
 80069bc:	4620      	mov	r0, r4
 80069be:	f7fd f88f 	bl	8003ae0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80069c2:	2201      	movs	r2, #1
 80069c4:	2110      	movs	r1, #16
 80069c6:	4620      	mov	r0, r4
 80069c8:	f7fd f88a 	bl	8003ae0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80069cc:	2200      	movs	r2, #0
 80069ce:	2120      	movs	r1, #32
 80069d0:	4620      	mov	r0, r4
 80069d2:	f7fd f885 	bl	8003ae0 <HAL_GPIO_WritePin>
      break;
 80069d6:	e7ec      	b.n	80069b2 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80069d8:	4c10      	ldr	r4, [pc, #64]	@ (8006a1c <BSP_RADIO_ConfigRFSwitch+0x98>)
 80069da:	2201      	movs	r2, #1
 80069dc:	2108      	movs	r1, #8
 80069de:	4620      	mov	r0, r4
 80069e0:	f7fd f87e 	bl	8003ae0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80069e4:	2201      	movs	r2, #1
 80069e6:	2110      	movs	r1, #16
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7fd f879 	bl	8003ae0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80069ee:	2201      	movs	r2, #1
 80069f0:	2120      	movs	r1, #32
 80069f2:	4620      	mov	r0, r4
 80069f4:	f7fd f874 	bl	8003ae0 <HAL_GPIO_WritePin>
      break;
 80069f8:	e7db      	b.n	80069b2 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80069fa:	4c08      	ldr	r4, [pc, #32]	@ (8006a1c <BSP_RADIO_ConfigRFSwitch+0x98>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	2108      	movs	r1, #8
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7fd f86d 	bl	8003ae0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8006a06:	2200      	movs	r2, #0
 8006a08:	2110      	movs	r1, #16
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f7fd f868 	bl	8003ae0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8006a10:	2201      	movs	r2, #1
 8006a12:	2120      	movs	r1, #32
 8006a14:	4620      	mov	r0, r4
 8006a16:	f7fd f863 	bl	8003ae0 <HAL_GPIO_WritePin>
      break;
 8006a1a:	e7ca      	b.n	80069b2 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8006a1c:	48000800 	.word	0x48000800

08006a20 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8006a20:	2000      	movs	r0, #0
 8006a22:	4770      	bx	lr

08006a24 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8006a24:	2001      	movs	r0, #1
 8006a26:	4770      	bx	lr

08006a28 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8006a28:	2001      	movs	r0, #1
 8006a2a:	4770      	bx	lr

08006a2c <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8006a2c:	b908      	cbnz	r0, 8006a32 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8006a2e:	200f      	movs	r0, #15
 8006a30:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8006a32:	2016      	movs	r0, #22
  }

  return ret;
}
 8006a34:	4770      	bx	lr

08006a36 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8006a36:	2001      	movs	r0, #1
 8006a38:	4770      	bx	lr
	...

08006a3c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8006a3c:	280a      	cmp	r0, #10
 8006a3e:	d807      	bhi.n	8006a50 <RadioGetLoRaBandwidthInHz+0x14>
 8006a40:	e8df f000 	tbb	[pc, r0]
 8006a44:	17110b20 	.word	0x17110b20
 8006a48:	061e1c1a 	.word	0x061e1c1a
 8006a4c:	0e08      	.short	0x0e08
 8006a4e:	14          	.byte	0x14
 8006a4f:	00          	.byte	0x00
 8006a50:	2000      	movs	r0, #0
 8006a52:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8006a54:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 8006a58:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8006a5a:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 8006a5e:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8006a60:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 8006a64:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8006a66:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 8006a6a:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8006a6c:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 8006a70:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8006a72:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 8006a76:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8006a78:	4804      	ldr	r0, [pc, #16]	@ (8006a8c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8006a7a:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8006a7c:	4804      	ldr	r0, [pc, #16]	@ (8006a90 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8006a7e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8006a80:	4804      	ldr	r0, [pc, #16]	@ (8006a94 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8006a82:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8006a84:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	0001e848 	.word	0x0001e848
 8006a90:	0003d090 	.word	0x0003d090
 8006a94:	0007a120 	.word	0x0007a120

08006a98 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006a98:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8006a9c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006a9e:	b953      	cbnz	r3, 8006ab6 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8006aa0:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8006aa2:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006aa4:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8006aa6:	b141      	cbz	r1, 8006aba <RadioGetGfskTimeOnAirNumerator+0x22>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	f89d 0000 	ldrb.w	r0, [sp]
 8006aae:	4418      	add	r0, r3
}
 8006ab0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8006ab4:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e7f3      	b.n	8006aa2 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8006aba:	2300      	movs	r3, #0
 8006abc:	e7f5      	b.n	8006aaa <RadioGetGfskTimeOnAirNumerator+0x12>

08006abe <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006abe:	b570      	push	{r4, r5, r6, lr}
 8006ac0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8006ac4:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8006ac8:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006aca:	f1a1 0c05 	sub.w	ip, r1, #5
 8006ace:	f1bc 0f01 	cmp.w	ip, #1
 8006ad2:	d931      	bls.n	8006b38 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006ad4:	b918      	cbnz	r0, 8006ade <RadioGetLoRaTimeOnAirNumerator+0x20>
 8006ad6:	f1a1 060b 	sub.w	r6, r1, #11
 8006ada:	2e01      	cmp	r6, #1
 8006adc:	d934      	bls.n	8006b48 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8006ade:	2801      	cmp	r0, #1
 8006ae0:	d02e      	beq.n	8006b40 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8006ae2:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006ae4:	f89d c014 	ldrb.w	ip, [sp, #20]
 8006ae8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8006aec:	b385      	cbz	r5, 8006b50 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8006aee:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006af0:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8006af2:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8006af4:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8006af8:	b364      	cbz	r4, 8006b54 <RadioGetLoRaTimeOnAirNumerator+0x96>
 8006afa:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8006afe:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8006b00:	2906      	cmp	r1, #6
 8006b02:	d904      	bls.n	8006b0e <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8006b04:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8006b08:	b10e      	cbz	r6, 8006b0e <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8006b0a:	1e88      	subs	r0, r1, #2
 8006b0c:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8006b0e:	f1bc 0f00 	cmp.w	ip, #0
 8006b12:	db22      	blt.n	8006b5a <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006b14:	4484      	add	ip, r0
 8006b16:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b1a:	fb9c fcf0 	sdiv	ip, ip, r0
 8006b1e:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8006b22:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8006b26:	2906      	cmp	r1, #6
 8006b28:	d801      	bhi.n	8006b2e <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8006b2a:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006b2e:	0080      	lsls	r0, r0, #2
 8006b30:	3001      	adds	r0, #1
 8006b32:	3902      	subs	r1, #2
}
 8006b34:	4088      	lsls	r0, r1
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8006b38:	2b0b      	cmp	r3, #11
 8006b3a:	d8cb      	bhi.n	8006ad4 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8006b3c:	230c      	movs	r3, #12
 8006b3e:	e7c9      	b.n	8006ad4 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006b40:	290c      	cmp	r1, #12
 8006b42:	d003      	beq.n	8006b4c <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8006b44:	2600      	movs	r6, #0
 8006b46:	e7cd      	b.n	8006ae4 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8006b48:	2601      	movs	r6, #1
 8006b4a:	e7cb      	b.n	8006ae4 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8006b4c:	2601      	movs	r6, #1
 8006b4e:	e7c9      	b.n	8006ae4 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8006b50:	2000      	movs	r0, #0
 8006b52:	e7cd      	b.n	8006af0 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8006b54:	f04f 0e14 	mov.w	lr, #20
 8006b58:	e7d1      	b.n	8006afe <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 8006b5a:	f04f 0c00 	mov.w	ip, #0
 8006b5e:	e7d9      	b.n	8006b14 <RadioGetLoRaTimeOnAirNumerator+0x56>

08006b60 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8006b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b62:	b085      	sub	sp, #20
 8006b64:	460e      	mov	r6, r1
 8006b66:	4615      	mov	r5, r2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8006b6e:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8006b72:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8006b76:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8006b7a:	b148      	cbz	r0, 8006b90 <RadioTimeOnAir+0x30>
 8006b7c:	2801      	cmp	r0, #1
 8006b7e:	d012      	beq.n	8006ba6 <RadioTimeOnAir+0x46>
 8006b80:	2501      	movs	r5, #1
 8006b82:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8006b84:	442c      	add	r4, r5
 8006b86:	1e60      	subs	r0, r4, #1
}
 8006b88:	fbb0 f0f5 	udiv	r0, r0, r5
 8006b8c:	b005      	add	sp, #20
 8006b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8006b90:	f8cd c004 	str.w	ip, [sp, #4]
 8006b94:	9700      	str	r7, [sp, #0]
 8006b96:	4628      	mov	r0, r5
 8006b98:	f7ff ff7e 	bl	8006a98 <RadioGetGfskTimeOnAirNumerator>
 8006b9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ba0:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8006ba4:	e7ee      	b.n	8006b84 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8006ba6:	f8cd c008 	str.w	ip, [sp, #8]
 8006baa:	9701      	str	r7, [sp, #4]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	460a      	mov	r2, r1
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f7ff ff82 	bl	8006abe <RadioGetLoRaTimeOnAirNumerator>
 8006bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006bbe:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8006bc2:	4b03      	ldr	r3, [pc, #12]	@ (8006bd0 <RadioTimeOnAir+0x70>)
 8006bc4:	5d98      	ldrb	r0, [r3, r6]
 8006bc6:	f7ff ff39 	bl	8006a3c <RadioGetLoRaBandwidthInHz>
 8006bca:	4605      	mov	r5, r0
        break;
 8006bcc:	e7da      	b.n	8006b84 <RadioTimeOnAir+0x24>
 8006bce:	bf00      	nop
 8006bd0:	0800aa80 	.word	0x0800aa80

08006bd4 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8006bd4:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8006bd6:	4b05      	ldr	r3, [pc, #20]	@ (8006bec <RadioOnTxTimeoutProcess+0x18>)
 8006bd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006bdc:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006bde:	4b04      	ldr	r3, [pc, #16]	@ (8006bf0 <RadioOnTxTimeoutProcess+0x1c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	b113      	cbz	r3, 8006bea <RadioOnTxTimeoutProcess+0x16>
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b103      	cbz	r3, 8006bea <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8006be8:	4798      	blx	r3
    }
}
 8006bea:	bd08      	pop	{r3, pc}
 8006bec:	48000400 	.word	0x48000400
 8006bf0:	200003c8 	.word	0x200003c8

08006bf4 <RadioOnTxTimeoutIrq>:
{
 8006bf4:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8006bf6:	f7ff ffed 	bl	8006bd4 <RadioOnTxTimeoutProcess>
}
 8006bfa:	bd08      	pop	{r3, pc}

08006bfc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8006bfc:	b508      	push	{r3, lr}
 8006bfe:	4b05      	ldr	r3, [pc, #20]	@ (8006c14 <RadioOnRxTimeoutProcess+0x18>)
 8006c00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006c04:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006c06:	4b04      	ldr	r3, [pc, #16]	@ (8006c18 <RadioOnRxTimeoutProcess+0x1c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	b113      	cbz	r3, 8006c12 <RadioOnRxTimeoutProcess+0x16>
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	b103      	cbz	r3, 8006c12 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8006c10:	4798      	blx	r3
    }
}
 8006c12:	bd08      	pop	{r3, pc}
 8006c14:	48000400 	.word	0x48000400
 8006c18:	200003c8 	.word	0x200003c8

08006c1c <RadioOnRxTimeoutIrq>:
{
 8006c1c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8006c1e:	f7ff ffed 	bl	8006bfc <RadioOnRxTimeoutProcess>
}
 8006c22:	bd08      	pop	{r3, pc}

08006c24 <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8006c24:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 8006c26:	2300      	movs	r3, #0
 8006c28:	e005      	b.n	8006c36 <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8006c2a:	5ccc      	ldrb	r4, [r1, r3]
 8006c2c:	43e4      	mvns	r4, r4
 8006c2e:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 8006c30:	2400      	movs	r4, #0
 8006c32:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 8006c34:	3301      	adds	r3, #1
 8006c36:	429a      	cmp	r2, r3
 8006c38:	dcf7      	bgt.n	8006c2a <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8006c3a:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 8006c3c:	461c      	mov	r4, r3
 8006c3e:	e012      	b.n	8006c66 <payload_integration+0x42>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 8006c40:	f103 0c07 	add.w	ip, r3, #7
 8006c44:	e023      	b.n	8006c8e <payload_integration+0x6a>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8006c46:	b2ed      	uxtb	r5, r5
 8006c48:	5d4d      	ldrb	r5, [r1, r5]
 8006c4a:	fa45 f50e 	asr.w	r5, r5, lr
 8006c4e:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 8006c52:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8006c54:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 8006c58:	5d46      	ldrb	r6, [r0, r5]
 8006c5a:	fa04 fc0c 	lsl.w	ip, r4, ip
 8006c5e:	ea46 0c0c 	orr.w	ip, r6, ip
 8006c62:	f800 c005 	strb.w	ip, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 8006c66:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006c6a:	da26      	bge.n	8006cba <payload_integration+0x96>
        index_bit = 7 - ( i % 8 );
 8006c6c:	425d      	negs	r5, r3
 8006c6e:	f003 0c07 	and.w	ip, r3, #7
 8006c72:	f005 0507 	and.w	r5, r5, #7
 8006c76:	bf58      	it	pl
 8006c78:	f1c5 0c00 	rsbpl	ip, r5, #0
 8006c7c:	fa5f fe8c 	uxtb.w	lr, ip
 8006c80:	f1ce 0e07 	rsb	lr, lr, #7
 8006c84:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 8006c88:	469c      	mov	ip, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dbd8      	blt.n	8006c40 <payload_integration+0x1c>
 8006c8e:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8006c92:	3301      	adds	r3, #1
 8006c94:	425e      	negs	r6, r3
 8006c96:	f003 0c07 	and.w	ip, r3, #7
 8006c9a:	f006 0607 	and.w	r6, r6, #7
 8006c9e:	bf58      	it	pl
 8006ca0:	f1c6 0c00 	rsbpl	ip, r6, #0
 8006ca4:	fa5f fc8c 	uxtb.w	ip, ip
 8006ca8:	f1cc 0c07 	rsb	ip, ip, #7
 8006cac:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 8006cb0:	461e      	mov	r6, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dac7      	bge.n	8006c46 <payload_integration+0x22>
 8006cb6:	1dde      	adds	r6, r3, #7
 8006cb8:	e7c5      	b.n	8006c46 <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8006cba:	01a3      	lsls	r3, r4, #6
 8006cbc:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 8006cc0:	b25b      	sxtb	r3, r3
 8006cc2:	b91c      	cbnz	r4, 8006ccc <payload_integration+0xa8>
 8006cc4:	2120      	movs	r1, #32
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	5483      	strb	r3, [r0, r2]
}
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8006ccc:	2100      	movs	r1, #0
 8006cce:	e7fa      	b.n	8006cc6 <payload_integration+0xa2>

08006cd0 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	4770      	bx	lr

08006cd4 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	4770      	bx	lr

08006cd8 <RadioSetMaxPayloadLength>:
{
 8006cd8:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8006cda:	2801      	cmp	r0, #1
 8006cdc:	d004      	beq.n	8006ce8 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8006cde:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <RadioSetMaxPayloadLength+0x30>)
 8006ce0:	7d5b      	ldrb	r3, [r3, #21]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d008      	beq.n	8006cf8 <RadioSetMaxPayloadLength+0x20>
}
 8006ce6:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006ce8:	4b08      	ldr	r3, [pc, #32]	@ (8006d0c <RadioSetMaxPayloadLength+0x34>)
 8006cea:	7019      	strb	r1, [r3, #0]
 8006cec:	4806      	ldr	r0, [pc, #24]	@ (8006d08 <RadioSetMaxPayloadLength+0x30>)
 8006cee:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006cf0:	300e      	adds	r0, #14
 8006cf2:	f001 fe3d 	bl	8008970 <SUBGRF_SetPacketParams>
 8006cf6:	e7f6      	b.n	8006ce6 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006cf8:	4b04      	ldr	r3, [pc, #16]	@ (8006d0c <RadioSetMaxPayloadLength+0x34>)
 8006cfa:	7019      	strb	r1, [r3, #0]
 8006cfc:	4802      	ldr	r0, [pc, #8]	@ (8006d08 <RadioSetMaxPayloadLength+0x30>)
 8006cfe:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006d00:	300e      	adds	r0, #14
 8006d02:	f001 fe35 	bl	8008970 <SUBGRF_SetPacketParams>
}
 8006d06:	e7ee      	b.n	8006ce6 <RadioSetMaxPayloadLength+0xe>
 8006d08:	2000036c 	.word	0x2000036c
 8006d0c:	2000000c 	.word	0x2000000c

08006d10 <RadioRead>:
{
 8006d10:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8006d12:	f001 f9cb 	bl	80080ac <SUBGRF_ReadRegister>
}
 8006d16:	bd08      	pop	{r3, pc}

08006d18 <RadioWrite>:
{
 8006d18:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8006d1a:	f001 f9b7 	bl	800808c <SUBGRF_WriteRegister>
}
 8006d1e:	bd08      	pop	{r3, pc}

08006d20 <RadioTxCw>:
{
 8006d20:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8006d22:	f001 ff71 	bl	8008c08 <SUBGRF_SetRfTxPower>
 8006d26:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006d28:	210e      	movs	r1, #14
 8006d2a:	f640 101f 	movw	r0, #2335	@ 0x91f
 8006d2e:	f001 f9ad 	bl	800808c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8006d32:	2101      	movs	r1, #1
 8006d34:	4620      	mov	r0, r4
 8006d36:	f001 ff53 	bl	8008be0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8006d3a:	f001 fb77 	bl	800842c <SUBGRF_SetTxContinuousWave>
}
 8006d3e:	bd10      	pop	{r4, pc}

08006d40 <RadioTxPrbs>:
{
 8006d40:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006d42:	2101      	movs	r1, #1
 8006d44:	4b07      	ldr	r3, [pc, #28]	@ (8006d64 <RadioTxPrbs+0x24>)
 8006d46:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 8006d4a:	f001 ff49 	bl	8008be0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8006d4e:	212d      	movs	r1, #45	@ 0x2d
 8006d50:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8006d54:	f7ff ffe0 	bl	8006d18 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8006d58:	f001 fb6f 	bl	800843a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8006d5c:	4802      	ldr	r0, [pc, #8]	@ (8006d68 <RadioTxPrbs+0x28>)
 8006d5e:	f001 faa5 	bl	80082ac <SUBGRF_SetTx>
}
 8006d62:	bd08      	pop	{r3, pc}
 8006d64:	2000036c 	.word	0x2000036c
 8006d68:	000fffff 	.word	0x000fffff

08006d6c <RadioSetRxDutyCycle>:
{
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	4604      	mov	r4, r0
 8006d70:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8006d72:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8006d76:	4e09      	ldr	r6, [pc, #36]	@ (8006d9c <RadioSetRxDutyCycle+0x30>)
 8006d78:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006d82:	4608      	mov	r0, r1
 8006d84:	f001 fc25 	bl	80085d2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8006d88:	2100      	movs	r1, #0
 8006d8a:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 8006d8e:	f001 ff27 	bl	8008be0 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8006d92:	4629      	mov	r1, r5
 8006d94:	4620      	mov	r0, r4
 8006d96:	f001 fb19 	bl	80083cc <SUBGRF_SetRxDutyCycle>
}
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	2000036c 	.word	0x2000036c

08006da0 <RadioRxBoosted>:
{
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8006da4:	f002 f80e 	bl	8008dc4 <RFW_Is_Init>
 8006da8:	2801      	cmp	r0, #1
 8006daa:	d019      	beq.n	8006de0 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006dac:	2300      	movs	r3, #0
 8006dae:	461a      	mov	r2, r3
 8006db0:	f240 2162 	movw	r1, #610	@ 0x262
 8006db4:	4608      	mov	r0, r1
 8006db6:	f001 fc0c 	bl	80085d2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8006dba:	b9a4      	cbnz	r4, 8006de6 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006dbc:	4c11      	ldr	r4, [pc, #68]	@ (8006e04 <RadioRxBoosted+0x64>)
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006dc2:	4b11      	ldr	r3, [pc, #68]	@ (8006e08 <RadioRxBoosted+0x68>)
 8006dc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006dc8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8006dca:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8006dce:	f001 ff07 	bl	8008be0 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8006dd2:	7863      	ldrb	r3, [r4, #1]
 8006dd4:	b183      	cbz	r3, 8006df8 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8006dd6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8006dda:	f001 fad9 	bl	8008390 <SUBGRF_SetRxBoosted>
}
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8006de0:	f001 fff8 	bl	8008dd4 <RFW_ReceiveInit>
 8006de4:	e7e9      	b.n	8006dba <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006de6:	4d09      	ldr	r5, [pc, #36]	@ (8006e0c <RadioRxBoosted+0x6c>)
 8006de8:	4621      	mov	r1, r4
 8006dea:	4628      	mov	r0, r5
 8006dec:	f002 fc02 	bl	80095f4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006df0:	4628      	mov	r0, r5
 8006df2:	f002 fbb9 	bl	8009568 <UTIL_TIMER_Start>
 8006df6:	e7e1      	b.n	8006dbc <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8006df8:	4b02      	ldr	r3, [pc, #8]	@ (8006e04 <RadioRxBoosted+0x64>)
 8006dfa:	6898      	ldr	r0, [r3, #8]
 8006dfc:	0180      	lsls	r0, r0, #6
 8006dfe:	f001 fac7 	bl	8008390 <SUBGRF_SetRxBoosted>
}
 8006e02:	e7ec      	b.n	8006dde <RadioRxBoosted+0x3e>
 8006e04:	2000036c 	.word	0x2000036c
 8006e08:	48000400 	.word	0x48000400
 8006e0c:	2000033c 	.word	0x2000033c

08006e10 <RadioStandby>:
{
 8006e10:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8006e12:	2000      	movs	r0, #0
 8006e14:	f001 fa30 	bl	8008278 <SUBGRF_SetStandby>
}
 8006e18:	bd08      	pop	{r3, pc}

08006e1a <RadioGetStatus>:
{
 8006e1a:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8006e1c:	f001 f92a 	bl	8008074 <SUBGRF_GetOperatingMode>
 8006e20:	2805      	cmp	r0, #5
 8006e22:	d007      	beq.n	8006e34 <RadioGetStatus+0x1a>
 8006e24:	2807      	cmp	r0, #7
 8006e26:	d007      	beq.n	8006e38 <RadioGetStatus+0x1e>
 8006e28:	2804      	cmp	r0, #4
 8006e2a:	d001      	beq.n	8006e30 <RadioGetStatus+0x16>
            return RF_IDLE;
 8006e2c:	2000      	movs	r0, #0
}
 8006e2e:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8006e30:	2002      	movs	r0, #2
 8006e32:	e7fc      	b.n	8006e2e <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8006e34:	2001      	movs	r0, #1
 8006e36:	e7fa      	b.n	8006e2e <RadioGetStatus+0x14>
            return RF_CAD;
 8006e38:	2003      	movs	r0, #3
 8006e3a:	e7f8      	b.n	8006e2e <RadioGetStatus+0x14>

08006e3c <RadioIrqProcess>:
{
 8006e3c:	b530      	push	{r4, r5, lr}
 8006e3e:	b083      	sub	sp, #12
    uint8_t size = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8006e46:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8006e48:	4ba5      	ldr	r3, [pc, #660]	@ (80070e0 <RadioIrqProcess+0x2a4>)
 8006e4a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d829      	bhi.n	8006ea6 <RadioIrqProcess+0x6a>
 8006e52:	b21a      	sxth	r2, r3
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	f000 8140 	beq.w	80070da <RadioIrqProcess+0x29e>
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	2b1f      	cmp	r3, #31
 8006e5e:	f200 813c 	bhi.w	80070da <RadioIrqProcess+0x29e>
 8006e62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006e66:	0063      	.short	0x0063
 8006e68:	013a007f 	.word	0x013a007f
 8006e6c:	013a00f7 	.word	0x013a00f7
 8006e70:	013a013a 	.word	0x013a013a
 8006e74:	013a0127 	.word	0x013a0127
 8006e78:	013a013a 	.word	0x013a013a
 8006e7c:	013a013a 	.word	0x013a013a
 8006e80:	013a013a 	.word	0x013a013a
 8006e84:	013a0134 	.word	0x013a0134
 8006e88:	013a013a 	.word	0x013a013a
 8006e8c:	013a013a 	.word	0x013a013a
 8006e90:	013a013a 	.word	0x013a013a
 8006e94:	013a013a 	.word	0x013a013a
 8006e98:	013a013a 	.word	0x013a013a
 8006e9c:	013a013a 	.word	0x013a013a
 8006ea0:	013a013a 	.word	0x013a013a
 8006ea4:	0155      	.short	0x0155
 8006ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eaa:	f000 80b3 	beq.w	8007014 <RadioIrqProcess+0x1d8>
 8006eae:	d928      	bls.n	8006f02 <RadioIrqProcess+0xc6>
 8006eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eb4:	f040 8111 	bne.w	80070da <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8006eb8:	4b8a      	ldr	r3, [pc, #552]	@ (80070e4 <RadioIrqProcess+0x2a8>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	2002      	movs	r0, #2
 8006ec0:	f002 f866 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8006ec4:	f001 f8d6 	bl	8008074 <SUBGRF_GetOperatingMode>
 8006ec8:	2804      	cmp	r0, #4
 8006eca:	f000 80b0 	beq.w	800702e <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8006ece:	f001 f8d1 	bl	8008074 <SUBGRF_GetOperatingMode>
 8006ed2:	2805      	cmp	r0, #5
 8006ed4:	f040 8101 	bne.w	80070da <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8006ed8:	4b83      	ldr	r3, [pc, #524]	@ (80070e8 <RadioIrqProcess+0x2ac>)
 8006eda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006ede:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &RxTimeoutTimer );
 8006ee0:	4882      	ldr	r0, [pc, #520]	@ (80070ec <RadioIrqProcess+0x2b0>)
 8006ee2:	f002 fae7 	bl	80094b4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f001 f9c6 	bl	8008278 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006eec:	4b80      	ldr	r3, [pc, #512]	@ (80070f0 <RadioIrqProcess+0x2b4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80f2 	beq.w	80070da <RadioIrqProcess+0x29e>
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80ee 	beq.w	80070da <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8006efe:	4798      	blx	r3
 8006f00:	e0eb      	b.n	80070da <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8006f02:	2b40      	cmp	r3, #64	@ 0x40
 8006f04:	f000 811d 	beq.w	8007142 <RadioIrqProcess+0x306>
 8006f08:	2b80      	cmp	r3, #128	@ 0x80
 8006f0a:	f040 80e6 	bne.w	80070da <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8006f0e:	2000      	movs	r0, #0
 8006f10:	f001 f9b2 	bl	8008278 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006f14:	4b76      	ldr	r3, [pc, #472]	@ (80070f0 <RadioIrqProcess+0x2b4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80de 	beq.w	80070da <RadioIrqProcess+0x29e>
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80da 	beq.w	80070da <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8006f26:	2000      	movs	r0, #0
 8006f28:	4798      	blx	r3
 8006f2a:	e0d6      	b.n	80070da <RadioIrqProcess+0x29e>
 8006f2c:	4b6e      	ldr	r3, [pc, #440]	@ (80070e8 <RadioIrqProcess+0x2ac>)
 8006f2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006f32:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &TxTimeoutTimer );
 8006f34:	486f      	ldr	r0, [pc, #444]	@ (80070f4 <RadioIrqProcess+0x2b8>)
 8006f36:	f002 fabd 	bl	80094b4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f001 f99c 	bl	8008278 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8006f40:	f001 ff42 	bl	8008dc8 <RFW_Is_LongPacketModeEnabled>
 8006f44:	2801      	cmp	r0, #1
 8006f46:	d00a      	beq.n	8006f5e <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006f48:	4b69      	ldr	r3, [pc, #420]	@ (80070f0 <RadioIrqProcess+0x2b4>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80c4 	beq.w	80070da <RadioIrqProcess+0x29e>
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80c0 	beq.w	80070da <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8006f5a:	4798      	blx	r3
 8006f5c:	e0bd      	b.n	80070da <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8006f5e:	f001 ff3c 	bl	8008dda <RFW_DeInit_TxLongPacket>
 8006f62:	e7f1      	b.n	8006f48 <RadioIrqProcess+0x10c>
 8006f64:	4b60      	ldr	r3, [pc, #384]	@ (80070e8 <RadioIrqProcess+0x2ac>)
 8006f66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006f6a:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &RxTimeoutTimer );
 8006f6c:	485f      	ldr	r0, [pc, #380]	@ (80070ec <RadioIrqProcess+0x2b0>)
 8006f6e:	f002 faa1 	bl	80094b4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8006f72:	4b5b      	ldr	r3, [pc, #364]	@ (80070e0 <RadioIrqProcess+0x2a4>)
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	b303      	cbz	r3, 8006fba <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8006f78:	22ff      	movs	r2, #255	@ 0xff
 8006f7a:	f10d 0107 	add.w	r1, sp, #7
 8006f7e:	485e      	ldr	r0, [pc, #376]	@ (80070f8 <RadioIrqProcess+0x2bc>)
 8006f80:	f001 fdd8 	bl	8008b34 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8006f84:	485d      	ldr	r0, [pc, #372]	@ (80070fc <RadioIrqProcess+0x2c0>)
 8006f86:	f001 fdef 	bl	8008b68 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006f8a:	4b59      	ldr	r3, [pc, #356]	@ (80070f0 <RadioIrqProcess+0x2b4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 80a3 	beq.w	80070da <RadioIrqProcess+0x29e>
 8006f94:	689c      	ldr	r4, [r3, #8]
 8006f96:	2c00      	cmp	r4, #0
 8006f98:	f000 809f 	beq.w	80070da <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8006f9c:	4b50      	ldr	r3, [pc, #320]	@ (80070e0 <RadioIrqProcess+0x2a4>)
 8006f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d11d      	bne.n	8006fe2 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8006fa6:	4a4e      	ldr	r2, [pc, #312]	@ (80070e0 <RadioIrqProcess+0x2a4>)
 8006fa8:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 8006fac:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 8006fb0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006fb4:	4850      	ldr	r0, [pc, #320]	@ (80070f8 <RadioIrqProcess+0x2bc>)
 8006fb6:	47a0      	blx	r4
                break;
 8006fb8:	e08f      	b.n	80070da <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8006fba:	2000      	movs	r0, #0
 8006fbc:	f001 f95c 	bl	8008278 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f640 1002 	movw	r0, #2306	@ 0x902
 8006fc6:	f001 f861 	bl	800808c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8006fca:	f640 1044 	movw	r0, #2372	@ 0x944
 8006fce:	f001 f86d 	bl	80080ac <SUBGRF_ReadRegister>
 8006fd2:	f040 0102 	orr.w	r1, r0, #2
 8006fd6:	b2c9      	uxtb	r1, r1
 8006fd8:	f640 1044 	movw	r0, #2372	@ 0x944
 8006fdc:	f001 f856 	bl	800808c <SUBGRF_WriteRegister>
 8006fe0:	e7ca      	b.n	8006f78 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8006fe2:	4c3f      	ldr	r4, [pc, #252]	@ (80070e0 <RadioIrqProcess+0x2a4>)
 8006fe4:	4669      	mov	r1, sp
 8006fe6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006fe8:	f001 fe9e 	bl	8008d28 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8006fec:	4b40      	ldr	r3, [pc, #256]	@ (80070f0 <RadioIrqProcess+0x2b4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689d      	ldr	r5, [r3, #8]
 8006ff2:	9b00      	ldr	r3, [sp, #0]
 8006ff4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006ff8:	4a41      	ldr	r2, [pc, #260]	@ (8007100 <RadioIrqProcess+0x2c4>)
 8006ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8006ffe:	17db      	asrs	r3, r3, #31
 8007000:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8007004:	b25b      	sxtb	r3, r3
 8007006:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 800700a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800700e:	483a      	ldr	r0, [pc, #232]	@ (80070f8 <RadioIrqProcess+0x2bc>)
 8007010:	47a8      	blx	r5
                break;
 8007012:	e062      	b.n	80070da <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8007014:	2000      	movs	r0, #0
 8007016:	f001 f92f 	bl	8008278 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800701a:	4b35      	ldr	r3, [pc, #212]	@ (80070f0 <RadioIrqProcess+0x2b4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d05b      	beq.n	80070da <RadioIrqProcess+0x29e>
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d058      	beq.n	80070da <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8007028:	2001      	movs	r0, #1
 800702a:	4798      	blx	r3
 800702c:	e055      	b.n	80070da <RadioIrqProcess+0x29e>
 800702e:	4b2e      	ldr	r3, [pc, #184]	@ (80070e8 <RadioIrqProcess+0x2ac>)
 8007030:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007034:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &TxTimeoutTimer );
 8007036:	482f      	ldr	r0, [pc, #188]	@ (80070f4 <RadioIrqProcess+0x2b8>)
 8007038:	f002 fa3c 	bl	80094b4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800703c:	2000      	movs	r0, #0
 800703e:	f001 f91b 	bl	8008278 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007042:	4b2b      	ldr	r3, [pc, #172]	@ (80070f0 <RadioIrqProcess+0x2b4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d047      	beq.n	80070da <RadioIrqProcess+0x29e>
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d044      	beq.n	80070da <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8007050:	4798      	blx	r3
 8007052:	e042      	b.n	80070da <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8007054:	4b2b      	ldr	r3, [pc, #172]	@ (8007104 <RadioIrqProcess+0x2c8>)
 8007056:	2201      	movs	r2, #1
 8007058:	2100      	movs	r1, #0
 800705a:	2002      	movs	r0, #2
 800705c:	f001 ff98 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8007060:	4b1f      	ldr	r3, [pc, #124]	@ (80070e0 <RadioIrqProcess+0x2a4>)
 8007062:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8007064:	b3c9      	cbz	r1, 80070da <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8007066:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800706a:	f640 1003 	movw	r0, #2307	@ 0x903
 800706e:	f7ff fe53 	bl	8006d18 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8007072:	4c1b      	ldr	r4, [pc, #108]	@ (80070e0 <RadioIrqProcess+0x2a4>)
 8007074:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8007078:	f640 1004 	movw	r0, #2308	@ 0x904
 800707c:	f7ff fe4c 	bl	8006d18 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8007080:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 8007084:	f640 1005 	movw	r0, #2309	@ 0x905
 8007088:	f7ff fe46 	bl	8006d18 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800708c:	f640 1002 	movw	r0, #2306	@ 0x902
 8007090:	f7ff fe3e 	bl	8006d10 <RadioRead>
 8007094:	f040 0101 	orr.w	r1, r0, #1
 8007098:	b2c9      	uxtb	r1, r1
 800709a:	f640 1002 	movw	r0, #2306	@ 0x902
 800709e:	f7ff fe3b 	bl	8006d18 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80070a2:	2200      	movs	r2, #0
 80070a4:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80070a6:	4613      	mov	r3, r2
 80070a8:	f240 2162 	movw	r1, #610	@ 0x262
 80070ac:	4608      	mov	r0, r1
 80070ae:	f001 fa90 	bl	80085d2 <SUBGRF_SetDioIrqParams>
 80070b2:	e012      	b.n	80070da <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80070b4:	4b14      	ldr	r3, [pc, #80]	@ (8007108 <RadioIrqProcess+0x2cc>)
 80070b6:	2201      	movs	r2, #1
 80070b8:	2100      	movs	r1, #0
 80070ba:	2002      	movs	r0, #2
 80070bc:	f001 ff68 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80070c0:	f001 fe80 	bl	8008dc4 <RFW_Is_Init>
 80070c4:	2801      	cmp	r0, #1
 80070c6:	d108      	bne.n	80070da <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 80070c8:	f001 fe88 	bl	8008ddc <RFW_ReceivePayload>
 80070cc:	e005      	b.n	80070da <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80070ce:	4b0f      	ldr	r3, [pc, #60]	@ (800710c <RadioIrqProcess+0x2d0>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	2100      	movs	r1, #0
 80070d4:	2002      	movs	r0, #2
 80070d6:	f001 ff5b 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
}
 80070da:	b003      	add	sp, #12
 80070dc:	bd30      	pop	{r4, r5, pc}
 80070de:	bf00      	nop
 80070e0:	2000036c 	.word	0x2000036c
 80070e4:	0800aa14 	.word	0x0800aa14
 80070e8:	48000400 	.word	0x48000400
 80070ec:	2000033c 	.word	0x2000033c
 80070f0:	200003c8 	.word	0x200003c8
 80070f4:	20000354 	.word	0x20000354
 80070f8:	200003cc 	.word	0x200003cc
 80070fc:	20000390 	.word	0x20000390
 8007100:	10624dd3 	.word	0x10624dd3
 8007104:	0800aa28 	.word	0x0800aa28
 8007108:	0800aa34 	.word	0x0800aa34
 800710c:	0800aa40 	.word	0x0800aa40
        TimerStop( &RxTimeoutTimer );
 8007110:	4817      	ldr	r0, [pc, #92]	@ (8007170 <RadioIrqProcess+0x334>)
 8007112:	f002 f9cf 	bl	80094b4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007116:	4b17      	ldr	r3, [pc, #92]	@ (8007174 <RadioIrqProcess+0x338>)
 8007118:	785b      	ldrb	r3, [r3, #1]
 800711a:	b173      	cbz	r3, 800713a <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800711c:	4b16      	ldr	r3, [pc, #88]	@ (8007178 <RadioIrqProcess+0x33c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0da      	beq.n	80070da <RadioIrqProcess+0x29e>
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0d7      	beq.n	80070da <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800712a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800712c:	4b13      	ldr	r3, [pc, #76]	@ (800717c <RadioIrqProcess+0x340>)
 800712e:	2201      	movs	r2, #1
 8007130:	2100      	movs	r1, #0
 8007132:	2002      	movs	r0, #2
 8007134:	f001 ff2c 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
 8007138:	e7cf      	b.n	80070da <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800713a:	2000      	movs	r0, #0
 800713c:	f001 f89c 	bl	8008278 <SUBGRF_SetStandby>
 8007140:	e7ec      	b.n	800711c <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8007142:	4b0f      	ldr	r3, [pc, #60]	@ (8007180 <RadioIrqProcess+0x344>)
 8007144:	2201      	movs	r2, #1
 8007146:	2100      	movs	r1, #0
 8007148:	2002      	movs	r0, #2
 800714a:	f001 ff21 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800714e:	4b09      	ldr	r3, [pc, #36]	@ (8007174 <RadioIrqProcess+0x338>)
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	b143      	cbz	r3, 8007166 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8007154:	4b08      	ldr	r3, [pc, #32]	@ (8007178 <RadioIrqProcess+0x33c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0be      	beq.n	80070da <RadioIrqProcess+0x29e>
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0bb      	beq.n	80070da <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8007162:	4798      	blx	r3
}
 8007164:	e7b9      	b.n	80070da <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8007166:	2000      	movs	r0, #0
 8007168:	f001 f886 	bl	8008278 <SUBGRF_SetStandby>
 800716c:	e7f2      	b.n	8007154 <RadioIrqProcess+0x318>
 800716e:	bf00      	nop
 8007170:	2000033c 	.word	0x2000033c
 8007174:	2000036c 	.word	0x2000036c
 8007178:	200003c8 	.word	0x200003c8
 800717c:	0800aa4c 	.word	0x0800aa4c
 8007180:	0800aa58 	.word	0x0800aa58

08007184 <RadioOnDioIrq>:
{
 8007184:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8007186:	4b03      	ldr	r3, [pc, #12]	@ (8007194 <RadioOnDioIrq+0x10>)
 8007188:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 800718c:	f7ff fe56 	bl	8006e3c <RadioIrqProcess>
}
 8007190:	bd08      	pop	{r3, pc}
 8007192:	bf00      	nop
 8007194:	2000036c 	.word	0x2000036c

08007198 <RadioGetWakeupTime>:
{
 8007198:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800719a:	f001 fd4c 	bl	8008c36 <SUBGRF_GetRadioWakeUpTime>
}
 800719e:	3003      	adds	r0, #3
 80071a0:	bd08      	pop	{r3, pc}

080071a2 <RadioReadRegisters>:
{
 80071a2:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 80071a4:	f001 f800 	bl	80081a8 <SUBGRF_ReadRegisters>
}
 80071a8:	bd08      	pop	{r3, pc}

080071aa <RadioWriteRegisters>:
{
 80071aa:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80071ac:	f000 ffba 	bl	8008124 <SUBGRF_WriteRegisters>
}
 80071b0:	bd08      	pop	{r3, pc}

080071b2 <RadioRssi>:
{
 80071b2:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80071b4:	f001 fc8e 	bl	8008ad4 <SUBGRF_GetRssiInst>
}
 80071b8:	bd08      	pop	{r3, pc}
	...

080071bc <RadioSetTxContinuousWave>:
{
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80071c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80071c4:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 80071c8:	f001 fa76 	bl	80086b8 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80071cc:	4628      	mov	r0, r5
 80071ce:	f001 fd1b 	bl	8008c08 <SUBGRF_SetRfTxPower>
 80071d2:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80071d4:	210e      	movs	r1, #14
 80071d6:	f640 101f 	movw	r0, #2335	@ 0x91f
 80071da:	f000 ff57 	bl	800808c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80071de:	2101      	movs	r1, #1
 80071e0:	4628      	mov	r0, r5
 80071e2:	f001 fcfd 	bl	8008be0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80071e6:	f001 f921 	bl	800842c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80071ea:	4d04      	ldr	r5, [pc, #16]	@ (80071fc <RadioSetTxContinuousWave+0x40>)
 80071ec:	4621      	mov	r1, r4
 80071ee:	4628      	mov	r0, r5
 80071f0:	f002 fa00 	bl	80095f4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80071f4:	4628      	mov	r0, r5
 80071f6:	f002 f9b7 	bl	8009568 <UTIL_TIMER_Start>
}
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	20000354 	.word	0x20000354

08007200 <RadioSetChannel>:
{
 8007200:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8007202:	f001 fa59 	bl	80086b8 <SUBGRF_SetRfFrequency>
}
 8007206:	bd08      	pop	{r3, pc}

08007208 <RadioStartCad>:
{
 8007208:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800720a:	2100      	movs	r1, #0
 800720c:	4b07      	ldr	r3, [pc, #28]	@ (800722c <RadioStartCad+0x24>)
 800720e:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 8007212:	f001 fce5 	bl	8008be0 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8007216:	2300      	movs	r3, #0
 8007218:	461a      	mov	r2, r3
 800721a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800721e:	4608      	mov	r0, r1
 8007220:	f001 f9d7 	bl	80085d2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8007224:	f001 f8f6 	bl	8008414 <SUBGRF_SetCad>
}
 8007228:	bd08      	pop	{r3, pc}
 800722a:	bf00      	nop
 800722c:	2000036c 	.word	0x2000036c

08007230 <RadioRx>:
{
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8007234:	f001 fdc6 	bl	8008dc4 <RFW_Is_Init>
 8007238:	2801      	cmp	r0, #1
 800723a:	d019      	beq.n	8007270 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800723c:	2300      	movs	r3, #0
 800723e:	461a      	mov	r2, r3
 8007240:	f240 2162 	movw	r1, #610	@ 0x262
 8007244:	4608      	mov	r0, r1
 8007246:	f001 f9c4 	bl	80085d2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800724a:	b9a4      	cbnz	r4, 8007276 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800724c:	4c11      	ldr	r4, [pc, #68]	@ (8007294 <RadioRx+0x64>)
 800724e:	2100      	movs	r1, #0
 8007250:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007252:	4b11      	ldr	r3, [pc, #68]	@ (8007298 <RadioRx+0x68>)
 8007254:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007258:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800725a:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800725e:	f001 fcbf 	bl	8008be0 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8007262:	7863      	ldrb	r3, [r4, #1]
 8007264:	b183      	cbz	r3, 8007288 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007266:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800726a:	f001 f841 	bl	80082f0 <SUBGRF_SetRx>
}
 800726e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8007270:	f001 fdb0 	bl	8008dd4 <RFW_ReceiveInit>
 8007274:	e7e9      	b.n	800724a <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007276:	4d09      	ldr	r5, [pc, #36]	@ (800729c <RadioRx+0x6c>)
 8007278:	4621      	mov	r1, r4
 800727a:	4628      	mov	r0, r5
 800727c:	f002 f9ba 	bl	80095f4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007280:	4628      	mov	r0, r5
 8007282:	f002 f971 	bl	8009568 <UTIL_TIMER_Start>
 8007286:	e7e1      	b.n	800724c <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007288:	4b02      	ldr	r3, [pc, #8]	@ (8007294 <RadioRx+0x64>)
 800728a:	6898      	ldr	r0, [r3, #8]
 800728c:	0180      	lsls	r0, r0, #6
 800728e:	f001 f82f 	bl	80082f0 <SUBGRF_SetRx>
}
 8007292:	e7ec      	b.n	800726e <RadioRx+0x3e>
 8007294:	2000036c 	.word	0x2000036c
 8007298:	48000400 	.word	0x48000400
 800729c:	2000033c 	.word	0x2000033c

080072a0 <RadioSleep>:
{
 80072a0:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 80072a2:	f04f 0004 	mov.w	r0, #4
 80072a6:	f000 ffc7 	bl	8008238 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 80072aa:	2002      	movs	r0, #2
 80072ac:	f7fa ff4a 	bl	8002144 <HAL_Delay>
}
 80072b0:	bd08      	pop	{r3, pc}
	...

080072b4 <RadioSend>:
{
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	4605      	mov	r5, r0
 80072ba:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80072bc:	2300      	movs	r3, #0
 80072be:	461a      	mov	r2, r3
 80072c0:	f240 2101 	movw	r1, #513	@ 0x201
 80072c4:	4608      	mov	r0, r1
 80072c6:	f001 f984 	bl	80085d2 <SUBGRF_SetDioIrqParams>
 80072ca:	4b5e      	ldr	r3, [pc, #376]	@ (8007444 <RadioSend+0x190>)
 80072cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80072d0:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80072d2:	4e5d      	ldr	r6, [pc, #372]	@ (8007448 <RadioSend+0x194>)
 80072d4:	2101      	movs	r1, #1
 80072d6:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 80072da:	f001 fc81 	bl	8008be0 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80072de:	7833      	ldrb	r3, [r6, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d103      	bne.n	80072ec <RadioSend+0x38>
 80072e4:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 80072e8:	2b06      	cmp	r3, #6
 80072ea:	d013      	beq.n	8007314 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80072ec:	f640 0089 	movw	r0, #2185	@ 0x889
 80072f0:	f000 fedc 	bl	80080ac <SUBGRF_ReadRegister>
 80072f4:	f040 0104 	orr.w	r1, r0, #4
 80072f8:	b2c9      	uxtb	r1, r1
 80072fa:	f640 0089 	movw	r0, #2185	@ 0x889
 80072fe:	f000 fec5 	bl	800808c <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8007302:	4b51      	ldr	r3, [pc, #324]	@ (8007448 <RadioSend+0x194>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b04      	cmp	r3, #4
 8007308:	d819      	bhi.n	800733e <RadioSend+0x8a>
 800730a:	e8df f003 	tbb	[pc, r3]
 800730e:	0e24      	.short	0x0e24
 8007310:	5024      	.short	0x5024
 8007312:	5d          	.byte	0x5d
 8007313:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007314:	f640 0089 	movw	r0, #2185	@ 0x889
 8007318:	f000 fec8 	bl	80080ac <SUBGRF_ReadRegister>
 800731c:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8007320:	f640 0089 	movw	r0, #2185	@ 0x889
 8007324:	f000 feb2 	bl	800808c <SUBGRF_WriteRegister>
 8007328:	e7eb      	b.n	8007302 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800732a:	4847      	ldr	r0, [pc, #284]	@ (8007448 <RadioSend+0x194>)
 800732c:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800732e:	300e      	adds	r0, #14
 8007330:	f001 fb1e 	bl	8008970 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007334:	2200      	movs	r2, #0
 8007336:	4621      	mov	r1, r4
 8007338:	4628      	mov	r0, r5
 800733a:	f000 ffd1 	bl	80082e0 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800733e:	4c43      	ldr	r4, [pc, #268]	@ (800744c <RadioSend+0x198>)
 8007340:	4b41      	ldr	r3, [pc, #260]	@ (8007448 <RadioSend+0x194>)
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	4620      	mov	r0, r4
 8007346:	f002 f955 	bl	80095f4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800734a:	4620      	mov	r0, r4
 800734c:	f002 f90c 	bl	8009568 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8007350:	2000      	movs	r0, #0
}
 8007352:	b002      	add	sp, #8
 8007354:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8007356:	f001 fd35 	bl	8008dc4 <RFW_Is_Init>
 800735a:	2801      	cmp	r0, #1
 800735c:	d00a      	beq.n	8007374 <RadioSend+0xc0>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800735e:	483a      	ldr	r0, [pc, #232]	@ (8007448 <RadioSend+0x194>)
 8007360:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007362:	300e      	adds	r0, #14
 8007364:	f001 fb04 	bl	8008970 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8007368:	2200      	movs	r2, #0
 800736a:	4621      	mov	r1, r4
 800736c:	4628      	mov	r0, r5
 800736e:	f000 ffb7 	bl	80082e0 <SUBGRF_SendPayload>
 8007372:	e7e4      	b.n	800733e <RadioSend+0x8a>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007374:	f10d 0207 	add.w	r2, sp, #7
 8007378:	4621      	mov	r1, r4
 800737a:	4628      	mov	r0, r5
 800737c:	f001 fd27 	bl	8008dce <RFW_TransmitInit>
 8007380:	b968      	cbnz	r0, 800739e <RadioSend+0xea>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007382:	4831      	ldr	r0, [pc, #196]	@ (8007448 <RadioSend+0x194>)
 8007384:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007388:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800738a:	300e      	adds	r0, #14
 800738c:	f001 faf0 	bl	8008970 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8007390:	2200      	movs	r2, #0
 8007392:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8007396:	4628      	mov	r0, r5
 8007398:	f000 ffa2 	bl	80082e0 <SUBGRF_SendPayload>
 800739c:	e7cf      	b.n	800733e <RadioSend+0x8a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800739e:	4b2c      	ldr	r3, [pc, #176]	@ (8007450 <RadioSend+0x19c>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	2100      	movs	r1, #0
 80073a4:	2002      	movs	r0, #2
 80073a6:	f001 fdf3 	bl	8008f90 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80073aa:	2003      	movs	r0, #3
 80073ac:	e7d1      	b.n	8007352 <RadioSend+0x9e>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80073ae:	4826      	ldr	r0, [pc, #152]	@ (8007448 <RadioSend+0x194>)
 80073b0:	2302      	movs	r3, #2
 80073b2:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80073b4:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80073b6:	300e      	adds	r0, #14
 80073b8:	f001 fada 	bl	8008970 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80073bc:	2200      	movs	r2, #0
 80073be:	4621      	mov	r1, r4
 80073c0:	4628      	mov	r0, r5
 80073c2:	f000 ff8d 	bl	80082e0 <SUBGRF_SendPayload>
            break;
 80073c6:	e7ba      	b.n	800733e <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 80073c8:	4622      	mov	r2, r4
 80073ca:	4629      	mov	r1, r5
 80073cc:	4821      	ldr	r0, [pc, #132]	@ (8007454 <RadioSend+0x1a0>)
 80073ce:	f7ff fc29 	bl	8006c24 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80073d2:	4e1d      	ldr	r6, [pc, #116]	@ (8007448 <RadioSend+0x194>)
 80073d4:	2302      	movs	r3, #2
 80073d6:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80073d8:	1c65      	adds	r5, r4, #1
 80073da:	b2ed      	uxtb	r5, r5
 80073dc:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80073de:	f106 000e 	add.w	r0, r6, #14
 80073e2:	f001 fac5 	bl	8008970 <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80073e6:	2100      	movs	r1, #0
 80073e8:	20f1      	movs	r0, #241	@ 0xf1
 80073ea:	f7ff fc95 	bl	8006d18 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80073ee:	2100      	movs	r1, #0
 80073f0:	20f0      	movs	r0, #240	@ 0xf0
 80073f2:	f7ff fc91 	bl	8006d18 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80073f6:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 80073f8:	2b64      	cmp	r3, #100	@ 0x64
 80073fa:	d019      	beq.n	8007430 <RadioSend+0x17c>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80073fc:	21e1      	movs	r1, #225	@ 0xe1
 80073fe:	20f3      	movs	r0, #243	@ 0xf3
 8007400:	f7ff fc8a 	bl	8006d18 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007404:	2104      	movs	r1, #4
 8007406:	20f2      	movs	r0, #242	@ 0xf2
 8007408:	f7ff fc86 	bl	8006d18 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800740c:	00e1      	lsls	r1, r4, #3
 800740e:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007410:	0a09      	lsrs	r1, r1, #8
 8007412:	20f4      	movs	r0, #244	@ 0xf4
 8007414:	f7ff fc80 	bl	8006d18 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007418:	f004 01fe 	and.w	r1, r4, #254	@ 0xfe
 800741c:	20f5      	movs	r0, #245	@ 0xf5
 800741e:	f7ff fc7b 	bl	8006d18 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007422:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8007426:	4629      	mov	r1, r5
 8007428:	480a      	ldr	r0, [pc, #40]	@ (8007454 <RadioSend+0x1a0>)
 800742a:	f000 ff59 	bl	80082e0 <SUBGRF_SendPayload>
            break;
 800742e:	e786      	b.n	800733e <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007430:	2170      	movs	r1, #112	@ 0x70
 8007432:	20f3      	movs	r0, #243	@ 0xf3
 8007434:	f7ff fc70 	bl	8006d18 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007438:	211d      	movs	r1, #29
 800743a:	20f2      	movs	r0, #242	@ 0xf2
 800743c:	f7ff fc6c 	bl	8006d18 <RadioWrite>
 8007440:	e7e4      	b.n	800740c <RadioSend+0x158>
 8007442:	bf00      	nop
 8007444:	48000400 	.word	0x48000400
 8007448:	2000036c 	.word	0x2000036c
 800744c:	20000354 	.word	0x20000354
 8007450:	0800aa68 	.word	0x0800aa68
 8007454:	200003cc 	.word	0x200003cc

08007458 <RadioRandom>:
{
 8007458:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800745a:	2300      	movs	r3, #0
 800745c:	461a      	mov	r2, r3
 800745e:	4619      	mov	r1, r3
 8007460:	4618      	mov	r0, r3
 8007462:	f001 f8b6 	bl	80085d2 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8007466:	f000 ff5d 	bl	8008324 <SUBGRF_GetRandom>
}
 800746a:	bd08      	pop	{r3, pc}

0800746c <RadioSetModem>:
{
 800746c:	b510      	push	{r4, lr}
 800746e:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8007470:	4b1c      	ldr	r3, [pc, #112]	@ (80074e4 <RadioSetModem+0x78>)
 8007472:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8007474:	f001 fcb3 	bl	8008dde <RFW_SetRadioModem>
    switch( modem )
 8007478:	2c05      	cmp	r4, #5
 800747a:	d804      	bhi.n	8007486 <RadioSetModem+0x1a>
 800747c:	e8df f004 	tbb	[pc, r4]
 8007480:	1d03110a 	.word	0x1d03110a
 8007484:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007486:	2003      	movs	r0, #3
 8007488:	f001 f942 	bl	8008710 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800748c:	4b15      	ldr	r3, [pc, #84]	@ (80074e4 <RadioSetModem+0x78>)
 800748e:	2200      	movs	r2, #0
 8007490:	735a      	strb	r2, [r3, #13]
}
 8007492:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007494:	2000      	movs	r0, #0
 8007496:	f001 f93b 	bl	8008710 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800749a:	4b12      	ldr	r3, [pc, #72]	@ (80074e4 <RadioSetModem+0x78>)
 800749c:	2200      	movs	r2, #0
 800749e:	735a      	strb	r2, [r3, #13]
        break;
 80074a0:	e7f7      	b.n	8007492 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80074a2:	2001      	movs	r0, #1
 80074a4:	f001 f934 	bl	8008710 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80074a8:	4b0e      	ldr	r3, [pc, #56]	@ (80074e4 <RadioSetModem+0x78>)
 80074aa:	7b5a      	ldrb	r2, [r3, #13]
 80074ac:	7b18      	ldrb	r0, [r3, #12]
 80074ae:	4282      	cmp	r2, r0
 80074b0:	d0ef      	beq.n	8007492 <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80074b2:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80074b4:	f000 fae0 	bl	8007a78 <RadioSetPublicNetwork>
 80074b8:	e7eb      	b.n	8007492 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80074ba:	2002      	movs	r0, #2
 80074bc:	f001 f928 	bl	8008710 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80074c0:	4b08      	ldr	r3, [pc, #32]	@ (80074e4 <RadioSetModem+0x78>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	735a      	strb	r2, [r3, #13]
        break;
 80074c6:	e7e4      	b.n	8007492 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80074c8:	2002      	movs	r0, #2
 80074ca:	f001 f921 	bl	8008710 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80074ce:	4b05      	ldr	r3, [pc, #20]	@ (80074e4 <RadioSetModem+0x78>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	735a      	strb	r2, [r3, #13]
        break;
 80074d4:	e7dd      	b.n	8007492 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80074d6:	2000      	movs	r0, #0
 80074d8:	f001 f91a 	bl	8008710 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80074dc:	4b01      	ldr	r3, [pc, #4]	@ (80074e4 <RadioSetModem+0x78>)
 80074de:	2200      	movs	r2, #0
 80074e0:	735a      	strb	r2, [r3, #13]
}
 80074e2:	e7d6      	b.n	8007492 <RadioSetModem+0x26>
 80074e4:	2000036c 	.word	0x2000036c

080074e8 <RadioSetTxGenericConfig>:
{
 80074e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	4605      	mov	r5, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	4617      	mov	r7, r2
 80074f4:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 80074f6:	2100      	movs	r1, #0
 80074f8:	9104      	str	r1, [sp, #16]
 80074fa:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80074fc:	f001 fc61 	bl	8008dc2 <RFW_DeInit>
    switch( modem )
 8007500:	2d03      	cmp	r5, #3
 8007502:	f200 8154 	bhi.w	80077ae <RadioSetTxGenericConfig+0x2c6>
 8007506:	e8df f015 	tbh	[pc, r5, lsl #1]
 800750a:	0079      	.short	0x0079
 800750c:	013e00db 	.word	0x013e00db
 8007510:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 8007512:	7ca2      	ldrb	r2, [r4, #18]
 8007514:	2a08      	cmp	r2, #8
 8007516:	f200 8157 	bhi.w	80077c8 <RadioSetTxGenericConfig+0x2e0>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800751a:	68a1      	ldr	r1, [r4, #8]
 800751c:	a804      	add	r0, sp, #16
 800751e:	f001 fe4d 	bl	80091bc <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8152 	beq.w	80077ce <RadioSetTxGenericConfig+0x2e6>
        else if( config->msk.BitRate <= 10000 )
 800752a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800752e:	4293      	cmp	r3, r2
 8007530:	d823      	bhi.n	800757a <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8007532:	4bad      	ldr	r3, [pc, #692]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 8007534:	2203      	movs	r2, #3
 8007536:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8007538:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800753c:	6822      	ldr	r2, [r4, #0]
 800753e:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8007540:	7ce2      	ldrb	r2, [r4, #19]
 8007542:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            radio_modem = MODEM_MSK;
 8007546:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	00da      	lsls	r2, r3, #3
 800754c:	4ba6      	ldr	r3, [pc, #664]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 800754e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007550:	2204      	movs	r2, #4
 8007552:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8007554:	7ca2      	ldrb	r2, [r4, #18]
 8007556:	00d2      	lsls	r2, r2, #3
 8007558:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800755a:	2200      	movs	r2, #0
 800755c:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800755e:	7da3      	ldrb	r3, [r4, #22]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d018      	beq.n	8007596 <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007564:	7d23      	ldrb	r3, [r4, #20]
 8007566:	2b02      	cmp	r3, #2
 8007568:	d015      	beq.n	8007596 <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800756a:	7d62      	ldrb	r2, [r4, #21]
 800756c:	4b9e      	ldr	r3, [pc, #632]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 800756e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8007570:	7da2      	ldrb	r2, [r4, #22]
 8007572:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8007574:	7d22      	ldrb	r2, [r4, #20]
 8007576:	755a      	strb	r2, [r3, #21]
 8007578:	e026      	b.n	80075c8 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800757a:	4b9b      	ldr	r3, [pc, #620]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 800757c:	2500      	movs	r5, #0
 800757e:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007580:	f883 5038 	strb.w	r5, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8007584:	6822      	ldr	r2, [r4, #0]
 8007586:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8007588:	7ce2      	ldrb	r2, [r4, #19]
 800758a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800758e:	6822      	ldr	r2, [r4, #0]
 8007590:	0892      	lsrs	r2, r2, #2
 8007592:	641a      	str	r2, [r3, #64]	@ 0x40
 8007594:	e7d8      	b.n	8007548 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007596:	7d62      	ldrb	r2, [r4, #21]
 8007598:	f102 030f 	add.w	r3, r2, #15
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d901      	bls.n	80075a6 <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80075a2:	2a01      	cmp	r2, #1
 80075a4:	d127      	bne.n	80075f6 <RadioSetTxGenericConfig+0x10e>
            ConfigGeneric.TxConfig = config;
 80075a6:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80075ae:	4a8f      	ldr	r2, [pc, #572]	@ (80077ec <RadioSetTxGenericConfig+0x304>)
 80075b0:	4b8f      	ldr	r3, [pc, #572]	@ (80077f0 <RadioSetTxGenericConfig+0x308>)
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	a801      	add	r0, sp, #4
 80075b6:	f001 fc01 	bl	8008dbc <RFW_Init>
 80075ba:	b9e0      	cbnz	r0, 80075f6 <RadioSetTxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80075bc:	4b8a      	ldr	r3, [pc, #552]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 80075be:	2200      	movs	r2, #0
 80075c0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80075c2:	2101      	movs	r1, #1
 80075c4:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80075c6:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80075c8:	f7ff fc22 	bl	8006e10 <RadioStandby>
        RadioSetModem( radio_modem );
 80075cc:	4628      	mov	r0, r5
 80075ce:	f7ff ff4d 	bl	800746c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80075d2:	4d88      	ldr	r5, [pc, #544]	@ (80077f4 <RadioSetTxGenericConfig+0x30c>)
 80075d4:	4628      	mov	r0, r5
 80075d6:	f001 f943 	bl	8008860 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80075da:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 80075de:	f001 f9c7 	bl	8008970 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80075e2:	a804      	add	r0, sp, #16
 80075e4:	f000 fdae 	bl	8008144 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80075e8:	8a20      	ldrh	r0, [r4, #16]
 80075ea:	f000 fd82 	bl	80080f2 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80075ee:	89a0      	ldrh	r0, [r4, #12]
 80075f0:	f000 fdc5 	bl	800817e <SUBGRF_SetCrcPolynomial>
        break;
 80075f4:	e0db      	b.n	80077ae <RadioSetTxGenericConfig+0x2c6>
                return -1;
 80075f6:	f04f 30ff 	mov.w	r0, #4294967295
 80075fa:	e0e2      	b.n	80077c2 <RadioSetTxGenericConfig+0x2da>
        if( config->fsk.BitRate == 0 )
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 80e8 	beq.w	80077d4 <RadioSetTxGenericConfig+0x2ec>
        if( config->fsk.SyncWordLength > 8 )
 8007604:	7ca2      	ldrb	r2, [r4, #18]
 8007606:	2a08      	cmp	r2, #8
 8007608:	f200 80e7 	bhi.w	80077da <RadioSetTxGenericConfig+0x2f2>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800760c:	68a1      	ldr	r1, [r4, #8]
 800760e:	a804      	add	r0, sp, #16
 8007610:	f001 fdd4 	bl	80091bc <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007614:	4b74      	ldr	r3, [pc, #464]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800761c:	6821      	ldr	r1, [r4, #0]
 800761e:	63d9      	str	r1, [r3, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007620:	7ce1      	ldrb	r1, [r4, #19]
 8007622:	f883 1044 	strb.w	r1, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8007626:	69a1      	ldr	r1, [r4, #24]
 8007628:	6419      	str	r1, [r3, #64]	@ 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800762a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800762c:	6861      	ldr	r1, [r4, #4]
 800762e:	00c9      	lsls	r1, r1, #3
 8007630:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007632:	2104      	movs	r1, #4
 8007634:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007636:	7ca1      	ldrb	r1, [r4, #18]
 8007638:	00c9      	lsls	r1, r1, #3
 800763a:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800763c:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800763e:	7da3      	ldrb	r3, [r4, #22]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d00a      	beq.n	800765a <RadioSetTxGenericConfig+0x172>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007644:	7d23      	ldrb	r3, [r4, #20]
 8007646:	2b02      	cmp	r3, #2
 8007648:	d007      	beq.n	800765a <RadioSetTxGenericConfig+0x172>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800764a:	7d62      	ldrb	r2, [r4, #21]
 800764c:	4b66      	ldr	r3, [pc, #408]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 800764e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007650:	7da2      	ldrb	r2, [r4, #22]
 8007652:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8007654:	7d22      	ldrb	r2, [r4, #20]
 8007656:	755a      	strb	r2, [r3, #21]
 8007658:	e018      	b.n	800768c <RadioSetTxGenericConfig+0x1a4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800765a:	7d62      	ldrb	r2, [r4, #21]
 800765c:	f102 030f 	add.w	r3, r2, #15
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b01      	cmp	r3, #1
 8007664:	d901      	bls.n	800766a <RadioSetTxGenericConfig+0x182>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007666:	2a01      	cmp	r2, #1
 8007668:	d127      	bne.n	80076ba <RadioSetTxGenericConfig+0x1d2>
            ConfigGeneric.rtx = CONFIG_TX;
 800766a:	2301      	movs	r3, #1
 800766c:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8007670:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007672:	4a5e      	ldr	r2, [pc, #376]	@ (80077ec <RadioSetTxGenericConfig+0x304>)
 8007674:	4b5e      	ldr	r3, [pc, #376]	@ (80077f0 <RadioSetTxGenericConfig+0x308>)
 8007676:	6819      	ldr	r1, [r3, #0]
 8007678:	a801      	add	r0, sp, #4
 800767a:	f001 fb9f 	bl	8008dbc <RFW_Init>
 800767e:	b9e0      	cbnz	r0, 80076ba <RadioSetTxGenericConfig+0x1d2>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007680:	4b59      	ldr	r3, [pc, #356]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 8007682:	2200      	movs	r2, #0
 8007684:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007686:	2101      	movs	r1, #1
 8007688:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800768a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800768c:	f7ff fbc0 	bl	8006e10 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007690:	2000      	movs	r0, #0
 8007692:	f7ff feeb 	bl	800746c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007696:	4d57      	ldr	r5, [pc, #348]	@ (80077f4 <RadioSetTxGenericConfig+0x30c>)
 8007698:	4628      	mov	r0, r5
 800769a:	f001 f8e1 	bl	8008860 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800769e:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 80076a2:	f001 f965 	bl	8008970 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80076a6:	a804      	add	r0, sp, #16
 80076a8:	f000 fd4c 	bl	8008144 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80076ac:	8a20      	ldrh	r0, [r4, #16]
 80076ae:	f000 fd20 	bl	80080f2 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80076b2:	89a0      	ldrh	r0, [r4, #12]
 80076b4:	f000 fd63 	bl	800817e <SUBGRF_SetCrcPolynomial>
        break;
 80076b8:	e079      	b.n	80077ae <RadioSetTxGenericConfig+0x2c6>
                return -1;
 80076ba:	f04f 30ff 	mov.w	r0, #4294967295
 80076be:	e080      	b.n	80077c2 <RadioSetTxGenericConfig+0x2da>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80076c0:	4b49      	ldr	r3, [pc, #292]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80076c8:	7822      	ldrb	r2, [r4, #0]
 80076ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80076ce:	7862      	ldrb	r2, [r4, #1]
 80076d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80076d4:	78a2      	ldrb	r2, [r4, #2]
 80076d6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80076da:	78e3      	ldrb	r3, [r4, #3]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d033      	beq.n	8007748 <RadioSetTxGenericConfig+0x260>
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d036      	beq.n	8007752 <RadioSetTxGenericConfig+0x26a>
 80076e4:	b35b      	cbz	r3, 800773e <RadioSetTxGenericConfig+0x256>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80076e6:	4d40      	ldr	r5, [pc, #256]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 80076e8:	f04f 0801 	mov.w	r8, #1
 80076ec:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80076f0:	88a3      	ldrh	r3, [r4, #4]
 80076f2:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80076f4:	79a3      	ldrb	r3, [r4, #6]
 80076f6:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80076f8:	79e3      	ldrb	r3, [r4, #7]
 80076fa:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80076fe:	7a23      	ldrb	r3, [r4, #8]
 8007700:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 8007704:	f7ff fb84 	bl	8006e10 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8007708:	4640      	mov	r0, r8
 800770a:	f7ff feaf 	bl	800746c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800770e:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8007712:	f001 f8a5 	bl	8008860 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007716:	f105 000e 	add.w	r0, r5, #14
 800771a:	f001 f929 	bl	8008970 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800771e:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 8007722:	2b06      	cmp	r3, #6
 8007724:	d024      	beq.n	8007770 <RadioSetTxGenericConfig+0x288>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007726:	f640 0089 	movw	r0, #2185	@ 0x889
 800772a:	f000 fcbf 	bl	80080ac <SUBGRF_ReadRegister>
 800772e:	f040 0104 	orr.w	r1, r0, #4
 8007732:	b2c9      	uxtb	r1, r1
 8007734:	f640 0089 	movw	r0, #2185	@ 0x889
 8007738:	f000 fca8 	bl	800808c <SUBGRF_WriteRegister>
 800773c:	e037      	b.n	80077ae <RadioSetTxGenericConfig+0x2c6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800773e:	4b2a      	ldr	r3, [pc, #168]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007746:	e7ce      	b.n	80076e6 <RadioSetTxGenericConfig+0x1fe>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007748:	4b27      	ldr	r3, [pc, #156]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007750:	e7c9      	b.n	80076e6 <RadioSetTxGenericConfig+0x1fe>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007752:	7823      	ldrb	r3, [r4, #0]
 8007754:	3b0b      	subs	r3, #11
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b01      	cmp	r3, #1
 800775a:	d904      	bls.n	8007766 <RadioSetTxGenericConfig+0x27e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800775c:	4b22      	ldr	r3, [pc, #136]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007764:	e7bf      	b.n	80076e6 <RadioSetTxGenericConfig+0x1fe>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007766:	4b20      	ldr	r3, [pc, #128]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800776e:	e7ba      	b.n	80076e6 <RadioSetTxGenericConfig+0x1fe>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007770:	f640 0089 	movw	r0, #2185	@ 0x889
 8007774:	f000 fc9a 	bl	80080ac <SUBGRF_ReadRegister>
 8007778:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800777c:	f640 0089 	movw	r0, #2185	@ 0x889
 8007780:	f000 fc84 	bl	800808c <SUBGRF_WriteRegister>
 8007784:	e013      	b.n	80077ae <RadioSetTxGenericConfig+0x2c6>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	3b01      	subs	r3, #1
 800778a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800778e:	d227      	bcs.n	80077e0 <RadioSetTxGenericConfig+0x2f8>
        RadioSetModem( MODEM_BPSK );
 8007790:	2003      	movs	r0, #3
 8007792:	f7ff fe6b 	bl	800746c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007796:	4814      	ldr	r0, [pc, #80]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 8007798:	2302      	movs	r3, #2
 800779a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	6483      	str	r3, [r0, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80077a2:	2316      	movs	r3, #22
 80077a4:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80077a8:	3038      	adds	r0, #56	@ 0x38
 80077aa:	f001 f859 	bl	8008860 <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80077ae:	4638      	mov	r0, r7
 80077b0:	f001 fa2a 	bl	8008c08 <SUBGRF_SetRfTxPower>
 80077b4:	4c0c      	ldr	r4, [pc, #48]	@ (80077e8 <RadioSetTxGenericConfig+0x300>)
 80077b6:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80077ba:	f001 fb07 	bl	8008dcc <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80077be:	6066      	str	r6, [r4, #4]
    return 0;
 80077c0:	2000      	movs	r0, #0
}
 80077c2:	b006      	add	sp, #24
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	e7f9      	b.n	80077c2 <RadioSetTxGenericConfig+0x2da>
            return -1;
 80077ce:	f04f 30ff 	mov.w	r0, #4294967295
 80077d2:	e7f6      	b.n	80077c2 <RadioSetTxGenericConfig+0x2da>
            return -1;
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	e7f3      	b.n	80077c2 <RadioSetTxGenericConfig+0x2da>
            return -1;
 80077da:	f04f 30ff 	mov.w	r0, #4294967295
 80077de:	e7f0      	b.n	80077c2 <RadioSetTxGenericConfig+0x2da>
            return -1;
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295
 80077e4:	e7ed      	b.n	80077c2 <RadioSetTxGenericConfig+0x2da>
 80077e6:	bf00      	nop
 80077e8:	2000036c 	.word	0x2000036c
 80077ec:	20000354 	.word	0x20000354
 80077f0:	200003c8 	.word	0x200003c8
 80077f4:	200003a4 	.word	0x200003a4

080077f8 <RadioSetRxGenericConfig>:
{
 80077f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	4606      	mov	r6, r0
 8007800:	460c      	mov	r4, r1
 8007802:	4615      	mov	r5, r2
 8007804:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 8007806:	2300      	movs	r3, #0
 8007808:	9304      	str	r3, [sp, #16]
 800780a:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800780c:	f001 fad9 	bl	8008dc2 <RFW_DeInit>
    if( rxContinuous != 0 )
 8007810:	b105      	cbz	r5, 8007814 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 8007812:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8007814:	3d00      	subs	r5, #0
 8007816:	bf18      	it	ne
 8007818:	2501      	movne	r5, #1
 800781a:	4b93      	ldr	r3, [pc, #588]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 800781c:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800781e:	b136      	cbz	r6, 800782e <RadioSetRxGenericConfig+0x36>
 8007820:	2e01      	cmp	r6, #1
 8007822:	f000 808f 	beq.w	8007944 <RadioSetRxGenericConfig+0x14c>
 8007826:	2000      	movs	r0, #0
}
 8007828:	b006      	add	sp, #24
 800782a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800782e:	68a3      	ldr	r3, [r4, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 810d 	beq.w	8007a50 <RadioSetRxGenericConfig+0x258>
 8007836:	68e3      	ldr	r3, [r4, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 810c 	beq.w	8007a56 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 800783e:	7fa2      	ldrb	r2, [r4, #30]
 8007840:	2a08      	cmp	r2, #8
 8007842:	f200 810b 	bhi.w	8007a5c <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8007846:	6921      	ldr	r1, [r4, #16]
 8007848:	a804      	add	r0, sp, #16
 800784a:	f001 fcb7 	bl	80091bc <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800784e:	6820      	ldr	r0, [r4, #0]
 8007850:	3800      	subs	r0, #0
 8007852:	bf18      	it	ne
 8007854:	2001      	movne	r0, #1
 8007856:	f000 fdf7 	bl	8008448 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800785a:	4d83      	ldr	r5, [pc, #524]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 800785c:	2600      	movs	r6, #0
 800785e:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007862:	68a3      	ldr	r3, [r4, #8]
 8007864:	63eb      	str	r3, [r5, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007866:	f894 3020 	ldrb.w	r3, [r4, #32]
 800786a:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800786e:	6860      	ldr	r0, [r4, #4]
 8007870:	f001 fa42 	bl	8008cf8 <SUBGRF_GetFskBandwidthRegValue>
 8007874:	f885 0045 	strb.w	r0, [r5, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007878:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800787a:	68e3      	ldr	r3, [r4, #12]
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8007880:	7fe3      	ldrb	r3, [r4, #31]
 8007882:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007884:	7fa3      	ldrb	r3, [r4, #30]
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800788a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800788e:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8007890:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8007894:	b973      	cbnz	r3, 80078b4 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8007896:	6961      	ldr	r1, [r4, #20]
 8007898:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800789a:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800789e:	2a02      	cmp	r2, #2
 80078a0:	d012      	beq.n	80078c8 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d010      	beq.n	80078c8 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80078a6:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 80078aa:	496f      	ldr	r1, [pc, #444]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 80078ac:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80078ae:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80078b0:	754b      	strb	r3, [r1, #21]
 80078b2:	e023      	b.n	80078fc <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d003      	beq.n	80078c0 <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80078b8:	4a6b      	ldr	r2, [pc, #428]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 80078ba:	21ff      	movs	r1, #255	@ 0xff
 80078bc:	7591      	strb	r1, [r2, #22]
 80078be:	e7ec      	b.n	800789a <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80078c0:	4a69      	ldr	r2, [pc, #420]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 80078c2:	21ff      	movs	r1, #255	@ 0xff
 80078c4:	7591      	strb	r1, [r2, #22]
 80078c6:	e7e8      	b.n	800789a <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80078c8:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 80078cc:	f102 030f 	add.w	r3, r2, #15
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d901      	bls.n	80078da <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80078d6:	2a01      	cmp	r2, #1
 80078d8:	d131      	bne.n	800793e <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 80078da:	2300      	movs	r3, #0
 80078dc:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 80078e0:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80078e2:	4a62      	ldr	r2, [pc, #392]	@ (8007a6c <RadioSetRxGenericConfig+0x274>)
 80078e4:	4b62      	ldr	r3, [pc, #392]	@ (8007a70 <RadioSetRxGenericConfig+0x278>)
 80078e6:	6819      	ldr	r1, [r3, #0]
 80078e8:	a801      	add	r0, sp, #4
 80078ea:	f001 fa67 	bl	8008dbc <RFW_Init>
 80078ee:	bb30      	cbnz	r0, 800793e <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80078f0:	4b5d      	ldr	r3, [pc, #372]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80078f6:	2101      	movs	r1, #1
 80078f8:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80078fa:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80078fc:	f7ff fa88 	bl	8006e10 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007900:	2000      	movs	r0, #0
 8007902:	f7ff fdb3 	bl	800746c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007906:	4d5b      	ldr	r5, [pc, #364]	@ (8007a74 <RadioSetRxGenericConfig+0x27c>)
 8007908:	4628      	mov	r0, r5
 800790a:	f000 ffa9 	bl	8008860 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800790e:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 8007912:	f001 f82d 	bl	8008970 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007916:	a804      	add	r0, sp, #16
 8007918:	f000 fc14 	bl	8008144 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800791c:	8ba0      	ldrh	r0, [r4, #28]
 800791e:	f000 fbe8 	bl	80080f2 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8007922:	8b20      	ldrh	r0, [r4, #24]
 8007924:	f000 fc2b 	bl	800817e <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8007928:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800792c:	fb07 f303 	mul.w	r3, r7, r3
 8007930:	68a2      	ldr	r2, [r4, #8]
 8007932:	fbb3 f3f2 	udiv	r3, r3, r2
 8007936:	f845 3c30 	str.w	r3, [r5, #-48]
    return status;
 800793a:	2000      	movs	r0, #0
        break;
 800793c:	e774      	b.n	8007828 <RadioSetRxGenericConfig+0x30>
                return -1;
 800793e:	f04f 30ff 	mov.w	r0, #4294967295
 8007942:	e771      	b.n	8007828 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 8007944:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 808b 	beq.w	8007a62 <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800794c:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8007950:	2b01      	cmp	r3, #1
 8007952:	d055      	beq.n	8007a00 <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 8007954:	f04f 08ff 	mov.w	r8, #255	@ 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007958:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800795a:	3800      	subs	r0, #0
 800795c:	bf18      	it	ne
 800795e:	2001      	movne	r0, #1
 8007960:	f000 fd72 	bl	8008448 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007964:	b2f8      	uxtb	r0, r7
 8007966:	f000 fd7c 	bl	8008462 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800796a:	4b3f      	ldr	r3, [pc, #252]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007972:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8007976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800797a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800797e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007982:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 8007986:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800798a:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800798e:	2b01      	cmp	r3, #1
 8007990:	d03e      	beq.n	8007a10 <RadioSetRxGenericConfig+0x218>
 8007992:	2b02      	cmp	r3, #2
 8007994:	d041      	beq.n	8007a1a <RadioSetRxGenericConfig+0x222>
 8007996:	b3b3      	cbz	r3, 8007a06 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007998:	4d33      	ldr	r5, [pc, #204]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 800799a:	2601      	movs	r6, #1
 800799c:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800799e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80079a0:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80079a2:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 80079a6:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80079a8:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80079ac:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 80079b0:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80079b4:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80079b8:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 80079bc:	f7ff fa28 	bl	8006e10 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80079c0:	4630      	mov	r0, r6
 80079c2:	f7ff fd53 	bl	800746c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80079c6:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 80079ca:	f000 ff49 	bl	8008860 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80079ce:	f105 000e 	add.w	r0, r5, #14
 80079d2:	f000 ffcd 	bl	8008970 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80079d6:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80079da:	42b3      	cmp	r3, r6
 80079dc:	d02d      	beq.n	8007a3a <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80079de:	f240 7036 	movw	r0, #1846	@ 0x736
 80079e2:	f000 fb63 	bl	80080ac <SUBGRF_ReadRegister>
 80079e6:	f040 0104 	orr.w	r1, r0, #4
 80079ea:	b2c9      	uxtb	r1, r1
 80079ec:	f240 7036 	movw	r0, #1846	@ 0x736
 80079f0:	f000 fb4c 	bl	800808c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80079f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 80079f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079fa:	609a      	str	r2, [r3, #8]
    return status;
 80079fc:	2000      	movs	r0, #0
        break;
 80079fe:	e713      	b.n	8007828 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8007a00:	f894 8014 	ldrb.w	r8, [r4, #20]
 8007a04:	e7a8      	b.n	8007958 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007a06:	4b18      	ldr	r3, [pc, #96]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007a0e:	e7c3      	b.n	8007998 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007a10:	4b15      	ldr	r3, [pc, #84]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007a18:	e7be      	b.n	8007998 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007a1a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8007a1e:	3b0b      	subs	r3, #11
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d904      	bls.n	8007a30 <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007a26:	4b10      	ldr	r3, [pc, #64]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007a2e:	e7b3      	b.n	8007998 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007a30:	4b0d      	ldr	r3, [pc, #52]	@ (8007a68 <RadioSetRxGenericConfig+0x270>)
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007a38:	e7ae      	b.n	8007998 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8007a3a:	f240 7036 	movw	r0, #1846	@ 0x736
 8007a3e:	f000 fb35 	bl	80080ac <SUBGRF_ReadRegister>
 8007a42:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8007a46:	f240 7036 	movw	r0, #1846	@ 0x736
 8007a4a:	f000 fb1f 	bl	800808c <SUBGRF_WriteRegister>
 8007a4e:	e7d1      	b.n	80079f4 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 8007a50:	f04f 30ff 	mov.w	r0, #4294967295
 8007a54:	e6e8      	b.n	8007828 <RadioSetRxGenericConfig+0x30>
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5a:	e6e5      	b.n	8007828 <RadioSetRxGenericConfig+0x30>
            return -1;
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	e6e2      	b.n	8007828 <RadioSetRxGenericConfig+0x30>
            return -1;
 8007a62:	f04f 30ff 	mov.w	r0, #4294967295
 8007a66:	e6df      	b.n	8007828 <RadioSetRxGenericConfig+0x30>
 8007a68:	2000036c 	.word	0x2000036c
 8007a6c:	2000033c 	.word	0x2000033c
 8007a70:	200003c8 	.word	0x200003c8
 8007a74:	200003a4 	.word	0x200003a4

08007a78 <RadioSetPublicNetwork>:
{
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8007a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab8 <RadioSetPublicNetwork+0x40>)
 8007a7e:	7318      	strb	r0, [r3, #12]
 8007a80:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8007a82:	2001      	movs	r0, #1
 8007a84:	f7ff fcf2 	bl	800746c <RadioSetModem>
    if( enable == true )
 8007a88:	b154      	cbz	r4, 8007aa0 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8007a8a:	2134      	movs	r1, #52	@ 0x34
 8007a8c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8007a90:	f000 fafc 	bl	800808c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8007a94:	2144      	movs	r1, #68	@ 0x44
 8007a96:	f240 7041 	movw	r0, #1857	@ 0x741
 8007a9a:	f000 faf7 	bl	800808c <SUBGRF_WriteRegister>
}
 8007a9e:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8007aa0:	2114      	movs	r1, #20
 8007aa2:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8007aa6:	f000 faf1 	bl	800808c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8007aaa:	2124      	movs	r1, #36	@ 0x24
 8007aac:	f240 7041 	movw	r0, #1857	@ 0x741
 8007ab0:	f000 faec 	bl	800808c <SUBGRF_WriteRegister>
}
 8007ab4:	e7f3      	b.n	8007a9e <RadioSetPublicNetwork+0x26>
 8007ab6:	bf00      	nop
 8007ab8:	2000036c 	.word	0x2000036c

08007abc <RadioSetTxConfig>:
{
 8007abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	460d      	mov	r5, r1
 8007ac6:	4691      	mov	r9, r2
 8007ac8:	461f      	mov	r7, r3
 8007aca:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 8007ace:	f89d 803c 	ldrb.w	r8, [sp, #60]	@ 0x3c
 8007ad2:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 8007ad6:	f001 f974 	bl	8008dc2 <RFW_DeInit>
    switch( modem )
 8007ada:	2c01      	cmp	r4, #1
 8007adc:	d05d      	beq.n	8007b9a <RadioSetTxConfig+0xde>
 8007ade:	2c04      	cmp	r4, #4
 8007ae0:	f000 80aa 	beq.w	8007c38 <RadioSetTxConfig+0x17c>
 8007ae4:	b19c      	cbz	r4, 8007b0e <RadioSetTxConfig+0x52>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f001 f88e 	bl	8008c08 <SUBGRF_SetRfTxPower>
 8007aec:	4c5a      	ldr	r4, [pc, #360]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007aee:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007af2:	210e      	movs	r1, #14
 8007af4:	f640 101f 	movw	r0, #2335	@ 0x91f
 8007af8:	f000 fac8 	bl	800808c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007afc:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8007b00:	f001 f964 	bl	8008dcc <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007b04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b06:	6063      	str	r3, [r4, #4]
}
 8007b08:	b003      	add	sp, #12
 8007b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007b0e:	4c52      	ldr	r4, [pc, #328]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007b10:	f04f 0b00 	mov.w	fp, #0
 8007b14:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007b18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b1a:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007b1c:	230b      	movs	r3, #11
 8007b1e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007b22:	4638      	mov	r0, r7
 8007b24:	f001 f8e8 	bl	8008cf8 <SUBGRF_GetFskBandwidthRegValue>
 8007b28:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007b2c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007b30:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007b34:	00f6      	lsls	r6, r6, #3
 8007b36:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007b38:	2304      	movs	r3, #4
 8007b3a:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007b3c:	2318      	movs	r3, #24
 8007b3e:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007b40:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007b44:	f088 0801 	eor.w	r8, r8, #1
 8007b48:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8007b4c:	f1ba 0f00 	cmp.w	sl, #0
 8007b50:	d01f      	beq.n	8007b92 <RadioSetTxConfig+0xd6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007b52:	22f2      	movs	r2, #242	@ 0xf2
 8007b54:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007b56:	4c40      	ldr	r4, [pc, #256]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007b58:	2301      	movs	r3, #1
 8007b5a:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8007b5c:	f7ff f958 	bl	8006e10 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007b60:	2000      	movs	r0, #0
 8007b62:	f7ff fc83 	bl	800746c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b66:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8007b6a:	f000 fe79 	bl	8008860 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b6e:	f104 000e 	add.w	r0, r4, #14
 8007b72:	f000 fefd 	bl	8008970 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007b76:	4a39      	ldr	r2, [pc, #228]	@ (8007c5c <RadioSetTxConfig+0x1a0>)
 8007b78:	466b      	mov	r3, sp
 8007b7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fade 	bl	8008144 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007b88:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007b8c:	f000 fab1 	bl	80080f2 <SUBGRF_SetWhiteningSeed>
            break;
 8007b90:	e7a9      	b.n	8007ae6 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007b92:	4b31      	ldr	r3, [pc, #196]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	75da      	strb	r2, [r3, #23]
 8007b98:	e7dd      	b.n	8007b56 <RadioSetTxConfig+0x9a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007ba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007baa:	492d      	ldr	r1, [pc, #180]	@ (8007c60 <RadioSetTxConfig+0x1a4>)
 8007bac:	5dc9      	ldrb	r1, [r1, r7]
 8007bae:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007bb2:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 8007bb6:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007bba:	b91f      	cbnz	r7, 8007bc4 <RadioSetTxConfig+0x108>
 8007bbc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007bbe:	3a0b      	subs	r2, #11
 8007bc0:	2a01      	cmp	r2, #1
 8007bc2:	d92b      	bls.n	8007c1c <RadioSetTxConfig+0x160>
 8007bc4:	2f01      	cmp	r7, #1
 8007bc6:	d026      	beq.n	8007c16 <RadioSetTxConfig+0x15a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007bc8:	4a23      	ldr	r2, [pc, #140]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007bca:	2100      	movs	r1, #0
 8007bcc:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007bd0:	4a21      	ldr	r2, [pc, #132]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007bd6:	3b05      	subs	r3, #5
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	428b      	cmp	r3, r1
 8007bdc:	d923      	bls.n	8007c26 <RadioSetTxConfig+0x16a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007bde:	4b1e      	ldr	r3, [pc, #120]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007be0:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007be2:	4c1d      	ldr	r4, [pc, #116]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007be4:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007be8:	4b1e      	ldr	r3, [pc, #120]	@ (8007c64 <RadioSetTxConfig+0x1a8>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007bee:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007bf2:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8007bf6:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 8007bfa:	f7ff f909 	bl	8006e10 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f7ff fc34 	bl	800746c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c04:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8007c08:	f000 fe2a 	bl	8008860 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007c0c:	f104 000e 	add.w	r0, r4, #14
 8007c10:	f000 feae 	bl	8008970 <SUBGRF_SetPacketParams>
            break;
 8007c14:	e767      	b.n	8007ae6 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007c16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c18:	2a0c      	cmp	r2, #12
 8007c1a:	d1d5      	bne.n	8007bc8 <RadioSetTxConfig+0x10c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007c1e:	2101      	movs	r1, #1
 8007c20:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 8007c24:	e7d4      	b.n	8007bd0 <RadioSetTxConfig+0x114>
                if( preambleLen < 12 )
 8007c26:	2e0b      	cmp	r6, #11
 8007c28:	d803      	bhi.n	8007c32 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	220c      	movs	r2, #12
 8007c2e:	839a      	strh	r2, [r3, #28]
 8007c30:	e7d7      	b.n	8007be2 <RadioSetTxConfig+0x126>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007c32:	4b09      	ldr	r3, [pc, #36]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007c34:	839e      	strh	r6, [r3, #28]
 8007c36:	e7d4      	b.n	8007be2 <RadioSetTxConfig+0x126>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007c38:	2004      	movs	r0, #4
 8007c3a:	f7ff fc17 	bl	800746c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007c3e:	4806      	ldr	r0, [pc, #24]	@ (8007c58 <RadioSetTxConfig+0x19c>)
 8007c40:	2302      	movs	r3, #2
 8007c42:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007c46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c48:	6483      	str	r3, [r0, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007c4a:	2316      	movs	r3, #22
 8007c4c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c50:	3038      	adds	r0, #56	@ 0x38
 8007c52:	f000 fe05 	bl	8008860 <SUBGRF_SetModulationParams>
            break;
 8007c56:	e746      	b.n	8007ae6 <RadioSetTxConfig+0x2a>
 8007c58:	2000036c 	.word	0x2000036c
 8007c5c:	0800a064 	.word	0x0800a064
 8007c60:	0800aa80 	.word	0x0800aa80
 8007c64:	2000000c 	.word	0x2000000c

08007c68 <RadioSetRxConfig>:
{
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	b087      	sub	sp, #28
 8007c6e:	4604      	mov	r4, r0
 8007c70:	460e      	mov	r6, r1
 8007c72:	4615      	mov	r5, r2
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	f8bd 9044 	ldrh.w	r9, [sp, #68]	@ 0x44
 8007c7a:	f8bd a048 	ldrh.w	sl, [sp, #72]	@ 0x48
 8007c7e:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 8007c82:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
 8007c86:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
    SubgRf.RxContinuous = rxContinuous;
 8007c8a:	4bb0      	ldr	r3, [pc, #704]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007c8c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8007c90:	f001 f897 	bl	8008dc2 <RFW_DeInit>
    if( rxContinuous == true )
 8007c94:	f1b8 0f00 	cmp.w	r8, #0
 8007c98:	d001      	beq.n	8007c9e <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8007c9a:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8007c9e:	b16f      	cbz	r7, 8007cbc <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8007ca0:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8007ca4:	4baa      	ldr	r3, [pc, #680]	@ (8007f50 <RadioSetRxConfig+0x2e8>)
 8007ca6:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8007ca8:	2c01      	cmp	r4, #1
 8007caa:	f000 80d2 	beq.w	8007e52 <RadioSetRxConfig+0x1ea>
 8007cae:	2c05      	cmp	r4, #5
 8007cb0:	d008      	beq.n	8007cc4 <RadioSetRxConfig+0x5c>
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	d07c      	beq.n	8007db0 <RadioSetRxConfig+0x148>
}
 8007cb6:	b007      	add	sp, #28
 8007cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8007cbc:	4ba4      	ldr	r3, [pc, #656]	@ (8007f50 <RadioSetRxConfig+0x2e8>)
 8007cbe:	22ff      	movs	r2, #255	@ 0xff
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	e7f1      	b.n	8007ca8 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	f000 fbbf 	bl	8008448 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007cca:	4ca0      	ldr	r4, [pc, #640]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007ccc:	2700      	movs	r7, #0
 8007cce:	f884 7038 	strb.w	r7, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007cd2:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007cd4:	2309      	movs	r3, #9
 8007cd6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007cda:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8007cde:	6423      	str	r3, [r4, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f001 f809 	bl	8008cf8 <SUBGRF_GetFskBandwidthRegValue>
 8007ce6:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007cea:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007cec:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8007cf0:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007cf4:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007cf6:	2310      	movs	r3, #16
 8007cf8:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007cfa:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007cfc:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007cfe:	4b94      	ldr	r3, [pc, #592]	@ (8007f50 <RadioSetRxConfig+0x2e8>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007d08:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007d0a:	2005      	movs	r0, #5
 8007d0c:	f7ff fbae 	bl	800746c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007d10:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8007d14:	f000 fda4 	bl	8008860 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d18:	f104 000e 	add.w	r0, r4, #14
 8007d1c:	f000 fe28 	bl	8008970 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007d20:	ab02      	add	r3, sp, #8
 8007d22:	4a8c      	ldr	r2, [pc, #560]	@ (8007f54 <RadioSetRxConfig+0x2ec>)
 8007d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d28:	e883 0003 	stmia.w	r3, {r0, r1}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fa09 	bl	8008144 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007d32:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007d36:	f000 f9dc 	bl	80080f2 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007d3a:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8007d3e:	f7fe ffe7 	bl	8006d10 <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007d42:	f000 01ef 	and.w	r1, r0, #239	@ 0xef
 8007d46:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8007d4a:	f7fe ffe5 	bl	8006d18 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007d4e:	2104      	movs	r1, #4
 8007d50:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8007d54:	f7fe ffe0 	bl	8006d18 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8007d58:	f640 009b 	movw	r0, #2203	@ 0x89b
 8007d5c:	f7fe ffd8 	bl	8006d10 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007d60:	f000 01e3 	and.w	r1, r0, #227	@ 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007d64:	f041 0108 	orr.w	r1, r1, #8
 8007d68:	f640 009b 	movw	r0, #2203	@ 0x89b
 8007d6c:	f7fe ffd4 	bl	8006d18 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007d70:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8007d74:	f7fe ffcc 	bl	8006d10 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007d78:	f000 01e7 	and.w	r1, r0, #231	@ 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007d7c:	f041 0118 	orr.w	r1, r1, #24
 8007d80:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8007d84:	f7fe ffc8 	bl	8006d18 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8007d88:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8007d8c:	f7fe ffc0 	bl	8006d10 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007d90:	f000 018f 	and.w	r1, r0, #143	@ 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007d94:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 8007d98:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8007d9c:	f7fe ffbc 	bl	8006d18 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007da0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8007da4:	fb03 f30a 	mul.w	r3, r3, sl
 8007da8:	fbb3 f3f5 	udiv	r3, r3, r5
 8007dac:	60a3      	str	r3, [r4, #8]
            break;
 8007dae:	e782      	b.n	8007cb6 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007db0:	2000      	movs	r0, #0
 8007db2:	f000 fb49 	bl	8008448 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007db6:	4c65      	ldr	r4, [pc, #404]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007db8:	f04f 0800 	mov.w	r8, #0
 8007dbc:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007dc0:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007dc2:	230b      	movs	r3, #11
 8007dc4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 ff95 	bl	8008cf8 <SUBGRF_GetFskBandwidthRegValue>
 8007dce:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007dd2:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007dd6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8007dda:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007dde:	2304      	movs	r3, #4
 8007de0:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8007de2:	2318      	movs	r3, #24
 8007de4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007de6:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007dea:	f087 0701 	eor.w	r7, r7, #1
 8007dee:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007df0:	4b57      	ldr	r3, [pc, #348]	@ (8007f50 <RadioSetRxConfig+0x2e8>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8007df6:	f1bb 0f00 	cmp.w	fp, #0
 8007dfa:	d026      	beq.n	8007e4a <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007dfc:	22f2      	movs	r2, #242	@ 0xf2
 8007dfe:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007e00:	4c52      	ldr	r4, [pc, #328]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007e02:	2301      	movs	r3, #1
 8007e04:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8007e06:	f7ff f803 	bl	8006e10 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	f7ff fb2e 	bl	800746c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007e10:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8007e14:	f000 fd24 	bl	8008860 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007e18:	f104 000e 	add.w	r0, r4, #14
 8007e1c:	f000 fda8 	bl	8008970 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007e20:	4a4d      	ldr	r2, [pc, #308]	@ (8007f58 <RadioSetRxConfig+0x2f0>)
 8007e22:	ab04      	add	r3, sp, #16
 8007e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e28:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 f989 	bl	8008144 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007e32:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007e36:	f000 f95c 	bl	80080f2 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007e3a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8007e3e:	fb03 f30a 	mul.w	r3, r3, sl
 8007e42:	fbb3 f3f5 	udiv	r3, r3, r5
 8007e46:	60a3      	str	r3, [r4, #8]
            break;
 8007e48:	e735      	b.n	8007cb6 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007e4a:	4b40      	ldr	r3, [pc, #256]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	75da      	strb	r2, [r3, #23]
 8007e50:	e7d6      	b.n	8007e00 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007e52:	2000      	movs	r0, #0
 8007e54:	f000 faf8 	bl	8008448 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007e58:	4a3c      	ldr	r2, [pc, #240]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8007e60:	b2eb      	uxtb	r3, r5
 8007e62:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007e66:	493d      	ldr	r1, [pc, #244]	@ (8007f5c <RadioSetRxConfig+0x2f4>)
 8007e68:	5d89      	ldrb	r1, [r1, r6]
 8007e6a:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007e6e:	9901      	ldr	r1, [sp, #4]
 8007e70:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007e74:	b91e      	cbnz	r6, 8007e7e <RadioSetRxConfig+0x216>
 8007e76:	f1a5 020b 	sub.w	r2, r5, #11
 8007e7a:	2a01      	cmp	r2, #1
 8007e7c:	d94b      	bls.n	8007f16 <RadioSetRxConfig+0x2ae>
 8007e7e:	2e01      	cmp	r6, #1
 8007e80:	d047      	beq.n	8007f12 <RadioSetRxConfig+0x2aa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007e82:	4a32      	ldr	r2, [pc, #200]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007e84:	2100      	movs	r1, #0
 8007e86:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007e8a:	4a30      	ldr	r2, [pc, #192]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007e90:	3b05      	subs	r3, #5
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	428b      	cmp	r3, r1
 8007e96:	d943      	bls.n	8007f20 <RadioSetRxConfig+0x2b8>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007e98:	4b2c      	ldr	r3, [pc, #176]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007e9a:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007e9e:	4c2b      	ldr	r4, [pc, #172]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007ea0:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8007f50 <RadioSetRxConfig+0x2e8>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007ea8:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007eac:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 8007eb0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 8007eb4:	f7fe ffac 	bl	8006e10 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007eb8:	2001      	movs	r0, #1
 8007eba:	f7ff fad7 	bl	800746c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007ebe:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8007ec2:	f000 fccd 	bl	8008860 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ec6:	f104 000e 	add.w	r0, r4, #14
 8007eca:	f000 fd51 	bl	8008970 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007ece:	fa5f f08a 	uxtb.w	r0, sl
 8007ed2:	f000 fac6 	bl	8008462 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8007ed6:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8007eda:	f000 f8e7 	bl	80080ac <SUBGRF_ReadRegister>
 8007ede:	f000 0101 	and.w	r1, r0, #1
 8007ee2:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8007ee6:	f000 f8d1 	bl	800808c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007eea:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d021      	beq.n	8007f36 <RadioSetRxConfig+0x2ce>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007ef2:	f240 7036 	movw	r0, #1846	@ 0x736
 8007ef6:	f000 f8d9 	bl	80080ac <SUBGRF_ReadRegister>
 8007efa:	f040 0104 	orr.w	r1, r0, #4
 8007efe:	b2c9      	uxtb	r1, r1
 8007f00:	f240 7036 	movw	r0, #1846	@ 0x736
 8007f04:	f000 f8c2 	bl	800808c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007f08:	4b10      	ldr	r3, [pc, #64]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f0e:	609a      	str	r2, [r3, #8]
}
 8007f10:	e6d1      	b.n	8007cb6 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007f12:	2d0c      	cmp	r5, #12
 8007f14:	d1b5      	bne.n	8007e82 <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007f16:	4a0d      	ldr	r2, [pc, #52]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007f18:	2101      	movs	r1, #1
 8007f1a:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 8007f1e:	e7b4      	b.n	8007e8a <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 8007f20:	f1b9 0f0b 	cmp.w	r9, #11
 8007f24:	d803      	bhi.n	8007f2e <RadioSetRxConfig+0x2c6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007f26:	4613      	mov	r3, r2
 8007f28:	220c      	movs	r2, #12
 8007f2a:	839a      	strh	r2, [r3, #28]
 8007f2c:	e7b7      	b.n	8007e9e <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007f2e:	4b07      	ldr	r3, [pc, #28]	@ (8007f4c <RadioSetRxConfig+0x2e4>)
 8007f30:	f8a3 901c 	strh.w	r9, [r3, #28]
 8007f34:	e7b3      	b.n	8007e9e <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8007f36:	f240 7036 	movw	r0, #1846	@ 0x736
 8007f3a:	f000 f8b7 	bl	80080ac <SUBGRF_ReadRegister>
 8007f3e:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8007f42:	f240 7036 	movw	r0, #1846	@ 0x736
 8007f46:	f000 f8a1 	bl	800808c <SUBGRF_WriteRegister>
 8007f4a:	e7dd      	b.n	8007f08 <RadioSetRxConfig+0x2a0>
 8007f4c:	2000036c 	.word	0x2000036c
 8007f50:	2000000c 	.word	0x2000000c
 8007f54:	0800a06c 	.word	0x0800a06c
 8007f58:	0800a064 	.word	0x0800a064
 8007f5c:	0800aa80 	.word	0x0800aa80

08007f60 <RadioIsChannelFree>:
{
 8007f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f62:	b08b      	sub	sp, #44	@ 0x2c
 8007f64:	4604      	mov	r4, r0
 8007f66:	460f      	mov	r7, r1
 8007f68:	4616      	mov	r6, r2
 8007f6a:	461d      	mov	r5, r3
    RadioStandby( );
 8007f6c:	f7fe ff50 	bl	8006e10 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8007f70:	2000      	movs	r0, #0
 8007f72:	f7ff fa7b 	bl	800746c <RadioSetModem>
    RadioSetChannel( freq );
 8007f76:	4620      	mov	r0, r4
 8007f78:	f7ff f942 	bl	8007200 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f80:	2400      	movs	r4, #0
 8007f82:	9408      	str	r4, [sp, #32]
 8007f84:	9407      	str	r4, [sp, #28]
 8007f86:	9406      	str	r4, [sp, #24]
 8007f88:	9405      	str	r4, [sp, #20]
 8007f8a:	9404      	str	r4, [sp, #16]
 8007f8c:	9403      	str	r4, [sp, #12]
 8007f8e:	9402      	str	r4, [sp, #8]
 8007f90:	2303      	movs	r3, #3
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	9700      	str	r7, [sp, #0]
 8007f96:	4623      	mov	r3, r4
 8007f98:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f7ff fe62 	bl	8007c68 <RadioSetRxConfig>
    RadioRx( 0 );
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f7ff f943 	bl	8007230 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007faa:	f7ff f8f5 	bl	8007198 <RadioGetWakeupTime>
 8007fae:	f7fa f8c9 	bl	8002144 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8007fb2:	f001 fa3f 	bl	8009434 <UTIL_TIMER_GetCurrentTime>
 8007fb6:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f001 fa45 	bl	8009448 <UTIL_TIMER_GetElapsedTime>
 8007fbe:	42a8      	cmp	r0, r5
 8007fc0:	d206      	bcs.n	8007fd0 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	f7ff f8f5 	bl	80071b2 <RadioRssi>
        if( rssi > rssiThresh )
 8007fc8:	42b0      	cmp	r0, r6
 8007fca:	ddf5      	ble.n	8007fb8 <RadioIsChannelFree+0x58>
            status = false;
 8007fcc:	2400      	movs	r4, #0
 8007fce:	e000      	b.n	8007fd2 <RadioIsChannelFree+0x72>
    bool status = true;
 8007fd0:	2401      	movs	r4, #1
    RadioStandby( );
 8007fd2:	f7fe ff1d 	bl	8006e10 <RadioStandby>
}
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	b00b      	add	sp, #44	@ 0x2c
 8007fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fdc <RadioInit>:
{
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	b082      	sub	sp, #8
    RadioEvents = events;
 8007fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8008058 <RadioInit+0x7c>)
 8007fe2:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8007fe4:	4d1d      	ldr	r5, [pc, #116]	@ (800805c <RadioInit+0x80>)
 8007fe6:	2400      	movs	r4, #0
 8007fe8:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8007fea:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8007fec:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007fee:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8007ff0:	481b      	ldr	r0, [pc, #108]	@ (8008060 <RadioInit+0x84>)
 8007ff2:	f000 fb27 	bl	8008644 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8007ff6:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007ff8:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8007ffa:	f000 fa53 	bl	80084a4 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007ffe:	4621      	mov	r1, r4
 8008000:	4620      	mov	r0, r4
 8008002:	f000 fd49 	bl	8008a98 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8008006:	2204      	movs	r2, #4
 8008008:	4621      	mov	r1, r4
 800800a:	2001      	movs	r0, #1
 800800c:	f000 fb9a 	bl	8008744 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008010:	4623      	mov	r3, r4
 8008012:	4622      	mov	r2, r4
 8008014:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008018:	4608      	mov	r0, r1
 800801a:	f000 fada 	bl	80085d2 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800801e:	f7ff f93f 	bl	80072a0 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8008022:	4e10      	ldr	r6, [pc, #64]	@ (8008064 <RadioInit+0x88>)
 8008024:	9400      	str	r4, [sp, #0]
 8008026:	4b10      	ldr	r3, [pc, #64]	@ (8008068 <RadioInit+0x8c>)
 8008028:	4622      	mov	r2, r4
 800802a:	f04f 31ff 	mov.w	r1, #4294967295
 800802e:	4630      	mov	r0, r6
 8008030:	f001 f9dc 	bl	80093ec <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008034:	4d0d      	ldr	r5, [pc, #52]	@ (800806c <RadioInit+0x90>)
 8008036:	9400      	str	r4, [sp, #0]
 8008038:	4b0d      	ldr	r3, [pc, #52]	@ (8008070 <RadioInit+0x94>)
 800803a:	4622      	mov	r2, r4
 800803c:	f04f 31ff 	mov.w	r1, #4294967295
 8008040:	4628      	mov	r0, r5
 8008042:	f001 f9d3 	bl	80093ec <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8008046:	4630      	mov	r0, r6
 8008048:	f001 fa34 	bl	80094b4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800804c:	4628      	mov	r0, r5
 800804e:	f001 fa31 	bl	80094b4 <UTIL_TIMER_Stop>
}
 8008052:	b002      	add	sp, #8
 8008054:	bd70      	pop	{r4, r5, r6, pc}
 8008056:	bf00      	nop
 8008058:	200003c8 	.word	0x200003c8
 800805c:	2000036c 	.word	0x2000036c
 8008060:	08007185 	.word	0x08007185
 8008064:	20000354 	.word	0x20000354
 8008068:	08006bf5 	.word	0x08006bf5
 800806c:	2000033c 	.word	0x2000033c
 8008070:	08006c1d 	.word	0x08006c1d

08008074 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8008074:	4b01      	ldr	r3, [pc, #4]	@ (800807c <SUBGRF_GetOperatingMode+0x8>)
 8008076:	7818      	ldrb	r0, [r3, #0]
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	200004da 	.word	0x200004da

08008080 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8008080:	4b01      	ldr	r3, [pc, #4]	@ (8008088 <SUBGRF_GetPacketType+0x8>)
 8008082:	7818      	ldrb	r0, [r3, #0]
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	200004d9 	.word	0x200004d9

0800808c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800808c:	b500      	push	{lr}
 800808e:	b083      	sub	sp, #12
 8008090:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8008094:	2301      	movs	r3, #1
 8008096:	f10d 0207 	add.w	r2, sp, #7
 800809a:	4601      	mov	r1, r0
 800809c:	4802      	ldr	r0, [pc, #8]	@ (80080a8 <SUBGRF_WriteRegister+0x1c>)
 800809e:	f7fd f827 	bl	80050f0 <HAL_SUBGHZ_WriteRegisters>
}
 80080a2:	b003      	add	sp, #12
 80080a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80080a8:	20000220 	.word	0x20000220

080080ac <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80080ac:	b500      	push	{lr}
 80080ae:	b083      	sub	sp, #12
 80080b0:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80080b2:	2301      	movs	r3, #1
 80080b4:	f10d 0207 	add.w	r2, sp, #7
 80080b8:	4803      	ldr	r0, [pc, #12]	@ (80080c8 <SUBGRF_ReadRegister+0x1c>)
 80080ba:	f7fd f869 	bl	8005190 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 80080be:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80080c2:	b003      	add	sp, #12
 80080c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80080c8:	20000220 	.word	0x20000220

080080cc <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80080cc:	b510      	push	{r4, lr}
 80080ce:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80080d0:	f7fa fb95 	bl	80027fe <RBI_IsDCDC>
 80080d4:	2801      	cmp	r0, #1
 80080d6:	d000      	beq.n	80080da <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80080d8:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80080da:	f640 1023 	movw	r0, #2339	@ 0x923
 80080de:	f7ff ffe5 	bl	80080ac <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80080e2:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80080e6:	4321      	orrs	r1, r4
 80080e8:	f640 1023 	movw	r0, #2339	@ 0x923
 80080ec:	f7ff ffce 	bl	800808c <SUBGRF_WriteRegister>
}
 80080f0:	e7f2      	b.n	80080d8 <Radio_SMPS_Set+0xc>

080080f2 <SUBGRF_SetWhiteningSeed>:
{
 80080f2:	b510      	push	{r4, lr}
 80080f4:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80080f6:	f7ff ffc3 	bl	8008080 <SUBGRF_GetPacketType>
 80080fa:	b100      	cbz	r0, 80080fe <SUBGRF_SetWhiteningSeed+0xc>
}
 80080fc:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80080fe:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8008102:	f7ff ffd3 	bl	80080ac <SUBGRF_ReadRegister>
 8008106:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800810a:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800810e:	4301      	orrs	r1, r0
 8008110:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8008114:	f7ff ffba 	bl	800808c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8008118:	b2e1      	uxtb	r1, r4
 800811a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800811e:	f7ff ffb5 	bl	800808c <SUBGRF_WriteRegister>
}
 8008122:	e7eb      	b.n	80080fc <SUBGRF_SetWhiteningSeed+0xa>

08008124 <SUBGRF_WriteRegisters>:
{
 8008124:	b510      	push	{r4, lr}
 8008126:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008128:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800812c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800812e:	460a      	mov	r2, r1
 8008130:	4601      	mov	r1, r0
 8008132:	4803      	ldr	r0, [pc, #12]	@ (8008140 <SUBGRF_WriteRegisters+0x1c>)
 8008134:	f7fc ffdc 	bl	80050f0 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008138:	f384 8810 	msr	PRIMASK, r4
}
 800813c:	bd10      	pop	{r4, pc}
 800813e:	bf00      	nop
 8008140:	20000220 	.word	0x20000220

08008144 <SUBGRF_SetSyncWord>:
{
 8008144:	b508      	push	{r3, lr}
 8008146:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8008148:	2208      	movs	r2, #8
 800814a:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800814e:	f7ff ffe9 	bl	8008124 <SUBGRF_WriteRegisters>
}
 8008152:	2000      	movs	r0, #0
 8008154:	bd08      	pop	{r3, pc}

08008156 <SUBGRF_SetCrcSeed>:
{
 8008156:	b500      	push	{lr}
 8008158:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800815a:	0a03      	lsrs	r3, r0, #8
 800815c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8008160:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8008164:	f7ff ff8c 	bl	8008080 <SUBGRF_GetPacketType>
 8008168:	b110      	cbz	r0, 8008170 <SUBGRF_SetCrcSeed+0x1a>
}
 800816a:	b003      	add	sp, #12
 800816c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8008170:	2202      	movs	r2, #2
 8008172:	a901      	add	r1, sp, #4
 8008174:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8008178:	f7ff ffd4 	bl	8008124 <SUBGRF_WriteRegisters>
}
 800817c:	e7f5      	b.n	800816a <SUBGRF_SetCrcSeed+0x14>

0800817e <SUBGRF_SetCrcPolynomial>:
{
 800817e:	b500      	push	{lr}
 8008180:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8008182:	0a03      	lsrs	r3, r0, #8
 8008184:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8008188:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800818c:	f7ff ff78 	bl	8008080 <SUBGRF_GetPacketType>
 8008190:	b110      	cbz	r0, 8008198 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8008192:	b003      	add	sp, #12
 8008194:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8008198:	2202      	movs	r2, #2
 800819a:	a901      	add	r1, sp, #4
 800819c:	f240 60be 	movw	r0, #1726	@ 0x6be
 80081a0:	f7ff ffc0 	bl	8008124 <SUBGRF_WriteRegisters>
}
 80081a4:	e7f5      	b.n	8008192 <SUBGRF_SetCrcPolynomial+0x14>
	...

080081a8 <SUBGRF_ReadRegisters>:
{
 80081a8:	b510      	push	{r4, lr}
 80081aa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80081b0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80081b2:	460a      	mov	r2, r1
 80081b4:	4601      	mov	r1, r0
 80081b6:	4803      	ldr	r0, [pc, #12]	@ (80081c4 <SUBGRF_ReadRegisters+0x1c>)
 80081b8:	f7fc ffea 	bl	8005190 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081bc:	f384 8810 	msr	PRIMASK, r4
}
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	bf00      	nop
 80081c4:	20000220 	.word	0x20000220

080081c8 <SUBGRF_WriteBuffer>:
{
 80081c8:	b510      	push	{r4, lr}
 80081ca:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081cc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80081d0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80081d2:	460a      	mov	r2, r1
 80081d4:	4601      	mov	r1, r0
 80081d6:	4803      	ldr	r0, [pc, #12]	@ (80081e4 <SUBGRF_WriteBuffer+0x1c>)
 80081d8:	f7fd f938 	bl	800544c <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081dc:	f384 8810 	msr	PRIMASK, r4
}
 80081e0:	bd10      	pop	{r4, pc}
 80081e2:	bf00      	nop
 80081e4:	20000220 	.word	0x20000220

080081e8 <SUBGRF_SetPayload>:
{
 80081e8:	b508      	push	{r3, lr}
 80081ea:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80081ec:	4601      	mov	r1, r0
 80081ee:	2000      	movs	r0, #0
 80081f0:	f7ff ffea 	bl	80081c8 <SUBGRF_WriteBuffer>
}
 80081f4:	bd08      	pop	{r3, pc}
	...

080081f8 <SUBGRF_ReadBuffer>:
{
 80081f8:	b510      	push	{r4, lr}
 80081fa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081fc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008200:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8008202:	460a      	mov	r2, r1
 8008204:	4601      	mov	r1, r0
 8008206:	4803      	ldr	r0, [pc, #12]	@ (8008214 <SUBGRF_ReadBuffer+0x1c>)
 8008208:	f7fd f96a 	bl	80054e0 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800820c:	f384 8810 	msr	PRIMASK, r4
}
 8008210:	bd10      	pop	{r4, pc}
 8008212:	bf00      	nop
 8008214:	20000220 	.word	0x20000220

08008218 <SUBGRF_WriteCommand>:
{
 8008218:	b510      	push	{r4, lr}
 800821a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800821c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008220:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8008222:	460a      	mov	r2, r1
 8008224:	4601      	mov	r1, r0
 8008226:	4803      	ldr	r0, [pc, #12]	@ (8008234 <SUBGRF_WriteCommand+0x1c>)
 8008228:	f7fd f806 	bl	8005238 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800822c:	f384 8810 	msr	PRIMASK, r4
}
 8008230:	bd10      	pop	{r4, pc}
 8008232:	bf00      	nop
 8008234:	20000220 	.word	0x20000220

08008238 <SUBGRF_SetSleep>:
{
 8008238:	b510      	push	{r4, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800823e:	2000      	movs	r0, #0
 8008240:	f7fa fad1 	bl	80027e6 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008244:	2002      	movs	r0, #2
 8008246:	f7ff ff41 	bl	80080cc <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800824a:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800824e:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008252:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008254:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008258:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800825a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800825e:	2201      	movs	r2, #1
 8008260:	f10d 0107 	add.w	r1, sp, #7
 8008264:	2084      	movs	r0, #132	@ 0x84
 8008266:	f7ff ffd7 	bl	8008218 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800826a:	4b02      	ldr	r3, [pc, #8]	@ (8008274 <SUBGRF_SetSleep+0x3c>)
 800826c:	2200      	movs	r2, #0
 800826e:	701a      	strb	r2, [r3, #0]
}
 8008270:	b002      	add	sp, #8
 8008272:	bd10      	pop	{r4, pc}
 8008274:	200004da 	.word	0x200004da

08008278 <SUBGRF_SetStandby>:
{
 8008278:	b500      	push	{lr}
 800827a:	b083      	sub	sp, #12
 800827c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008280:	2201      	movs	r2, #1
 8008282:	f10d 0107 	add.w	r1, sp, #7
 8008286:	2080      	movs	r0, #128	@ 0x80
 8008288:	f7ff ffc6 	bl	8008218 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800828c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008290:	b92b      	cbnz	r3, 800829e <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8008292:	4b05      	ldr	r3, [pc, #20]	@ (80082a8 <SUBGRF_SetStandby+0x30>)
 8008294:	2201      	movs	r2, #1
 8008296:	701a      	strb	r2, [r3, #0]
}
 8008298:	b003      	add	sp, #12
 800829a:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800829e:	4b02      	ldr	r3, [pc, #8]	@ (80082a8 <SUBGRF_SetStandby+0x30>)
 80082a0:	2202      	movs	r2, #2
 80082a2:	701a      	strb	r2, [r3, #0]
}
 80082a4:	e7f8      	b.n	8008298 <SUBGRF_SetStandby+0x20>
 80082a6:	bf00      	nop
 80082a8:	200004da 	.word	0x200004da

080082ac <SUBGRF_SetTx>:
{
 80082ac:	b500      	push	{lr}
 80082ae:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80082b0:	4b0a      	ldr	r3, [pc, #40]	@ (80082dc <SUBGRF_SetTx+0x30>)
 80082b2:	2204      	movs	r2, #4
 80082b4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80082b6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80082ba:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80082be:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80082c2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80082c6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80082ca:	2203      	movs	r2, #3
 80082cc:	a901      	add	r1, sp, #4
 80082ce:	2083      	movs	r0, #131	@ 0x83
 80082d0:	f7ff ffa2 	bl	8008218 <SUBGRF_WriteCommand>
}
 80082d4:	b003      	add	sp, #12
 80082d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80082da:	bf00      	nop
 80082dc:	200004da 	.word	0x200004da

080082e0 <SUBGRF_SendPayload>:
{
 80082e0:	b510      	push	{r4, lr}
 80082e2:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80082e4:	f7ff ff80 	bl	80081e8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80082e8:	4620      	mov	r0, r4
 80082ea:	f7ff ffdf 	bl	80082ac <SUBGRF_SetTx>
}
 80082ee:	bd10      	pop	{r4, pc}

080082f0 <SUBGRF_SetRx>:
{
 80082f0:	b500      	push	{lr}
 80082f2:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 80082f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008320 <SUBGRF_SetRx+0x30>)
 80082f6:	2205      	movs	r2, #5
 80082f8:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80082fa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80082fe:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008302:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008306:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800830a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800830e:	2203      	movs	r2, #3
 8008310:	a901      	add	r1, sp, #4
 8008312:	2082      	movs	r0, #130	@ 0x82
 8008314:	f7ff ff80 	bl	8008218 <SUBGRF_WriteCommand>
}
 8008318:	b003      	add	sp, #12
 800831a:	f85d fb04 	ldr.w	pc, [sp], #4
 800831e:	bf00      	nop
 8008320:	200004da 	.word	0x200004da

08008324 <SUBGRF_GetRandom>:
{
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	b082      	sub	sp, #8
    uint32_t number = 0;
 8008328:	2600      	movs	r6, #0
 800832a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800832c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8008330:	f7ff febc 	bl	80080ac <SUBGRF_ReadRegister>
 8008334:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8008336:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 800833a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800833e:	f7ff fea5 	bl	800808c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8008342:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8008346:	f7ff feb1 	bl	80080ac <SUBGRF_ReadRegister>
 800834a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800834c:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8008350:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8008354:	f7ff fe9a 	bl	800808c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008358:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800835c:	f7ff ffc8 	bl	80082f0 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8008360:	2204      	movs	r2, #4
 8008362:	eb0d 0102 	add.w	r1, sp, r2
 8008366:	f640 0019 	movw	r0, #2073	@ 0x819
 800836a:	f7ff ff1d 	bl	80081a8 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 800836e:	4630      	mov	r0, r6
 8008370:	f7ff ff82 	bl	8008278 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008374:	4629      	mov	r1, r5
 8008376:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800837a:	f7ff fe87 	bl	800808c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800837e:	4621      	mov	r1, r4
 8008380:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8008384:	f7ff fe82 	bl	800808c <SUBGRF_WriteRegister>
}
 8008388:	9801      	ldr	r0, [sp, #4]
 800838a:	b002      	add	sp, #8
 800838c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008390 <SUBGRF_SetRxBoosted>:
{
 8008390:	b510      	push	{r4, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8008396:	4b0c      	ldr	r3, [pc, #48]	@ (80083c8 <SUBGRF_SetRxBoosted+0x38>)
 8008398:	2205      	movs	r2, #5
 800839a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800839c:	2197      	movs	r1, #151	@ 0x97
 800839e:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 80083a2:	f7ff fe73 	bl	800808c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80083a6:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80083aa:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80083ae:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80083b2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80083b6:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80083ba:	2203      	movs	r2, #3
 80083bc:	a901      	add	r1, sp, #4
 80083be:	2082      	movs	r0, #130	@ 0x82
 80083c0:	f7ff ff2a 	bl	8008218 <SUBGRF_WriteCommand>
}
 80083c4:	b002      	add	sp, #8
 80083c6:	bd10      	pop	{r4, pc}
 80083c8:	200004da 	.word	0x200004da

080083cc <SUBGRF_SetRxDutyCycle>:
{
 80083cc:	b500      	push	{lr}
 80083ce:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80083d0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80083d4:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80083d8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80083dc:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80083e0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80083e4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80083e8:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80083ec:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80083f0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80083f4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80083f8:	2206      	movs	r2, #6
 80083fa:	4669      	mov	r1, sp
 80083fc:	2094      	movs	r0, #148	@ 0x94
 80083fe:	f7ff ff0b 	bl	8008218 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8008402:	4b03      	ldr	r3, [pc, #12]	@ (8008410 <SUBGRF_SetRxDutyCycle+0x44>)
 8008404:	2206      	movs	r2, #6
 8008406:	701a      	strb	r2, [r3, #0]
}
 8008408:	b003      	add	sp, #12
 800840a:	f85d fb04 	ldr.w	pc, [sp], #4
 800840e:	bf00      	nop
 8008410:	200004da 	.word	0x200004da

08008414 <SUBGRF_SetCad>:
{
 8008414:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8008416:	2200      	movs	r2, #0
 8008418:	4611      	mov	r1, r2
 800841a:	20c5      	movs	r0, #197	@ 0xc5
 800841c:	f7ff fefc 	bl	8008218 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8008420:	4b01      	ldr	r3, [pc, #4]	@ (8008428 <SUBGRF_SetCad+0x14>)
 8008422:	2207      	movs	r2, #7
 8008424:	701a      	strb	r2, [r3, #0]
}
 8008426:	bd08      	pop	{r3, pc}
 8008428:	200004da 	.word	0x200004da

0800842c <SUBGRF_SetTxContinuousWave>:
{
 800842c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800842e:	2200      	movs	r2, #0
 8008430:	4611      	mov	r1, r2
 8008432:	20d1      	movs	r0, #209	@ 0xd1
 8008434:	f7ff fef0 	bl	8008218 <SUBGRF_WriteCommand>
}
 8008438:	bd08      	pop	{r3, pc}

0800843a <SUBGRF_SetTxInfinitePreamble>:
{
 800843a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800843c:	2200      	movs	r2, #0
 800843e:	4611      	mov	r1, r2
 8008440:	20d2      	movs	r0, #210	@ 0xd2
 8008442:	f7ff fee9 	bl	8008218 <SUBGRF_WriteCommand>
}
 8008446:	bd08      	pop	{r3, pc}

08008448 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8008448:	b500      	push	{lr}
 800844a:	b083      	sub	sp, #12
 800844c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8008450:	2201      	movs	r2, #1
 8008452:	f10d 0107 	add.w	r1, sp, #7
 8008456:	209f      	movs	r0, #159	@ 0x9f
 8008458:	f7ff fede 	bl	8008218 <SUBGRF_WriteCommand>
}
 800845c:	b003      	add	sp, #12
 800845e:	f85d fb04 	ldr.w	pc, [sp], #4

08008462 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8008462:	b500      	push	{lr}
 8008464:	b083      	sub	sp, #12
 8008466:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800846a:	2201      	movs	r2, #1
 800846c:	f10d 0107 	add.w	r1, sp, #7
 8008470:	20a0      	movs	r0, #160	@ 0xa0
 8008472:	f7ff fed1 	bl	8008218 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8008476:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800847a:	2b3f      	cmp	r3, #63	@ 0x3f
 800847c:	d90f      	bls.n	800849e <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800847e:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8008480:	2200      	movs	r2, #0
        while( mant > 31 )
 8008482:	e002      	b.n	800848a <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8008484:	089b      	lsrs	r3, r3, #2
            exp++;
 8008486:	3201      	adds	r2, #1
 8008488:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 800848a:	2b1f      	cmp	r3, #31
 800848c:	d8fa      	bhi.n	8008484 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800848e:	00d9      	lsls	r1, r3, #3
 8008490:	b2c9      	uxtb	r1, r1
 8008492:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8008494:	b2c9      	uxtb	r1, r1
 8008496:	f240 7006 	movw	r0, #1798	@ 0x706
 800849a:	f7ff fdf7 	bl	800808c <SUBGRF_WriteRegister>
}
 800849e:	b003      	add	sp, #12
 80084a0:	f85d fb04 	ldr.w	pc, [sp], #4

080084a4 <SUBGRF_SetRegulatorMode>:
{
 80084a4:	b500      	push	{lr}
 80084a6:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80084a8:	f7fa f9a9 	bl	80027fe <RBI_IsDCDC>
 80084ac:	2801      	cmp	r0, #1
 80084ae:	d00b      	beq.n	80084c8 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 80084b0:	2300      	movs	r3, #0
 80084b2:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80084b6:	2201      	movs	r2, #1
 80084b8:	f10d 0107 	add.w	r1, sp, #7
 80084bc:	2096      	movs	r0, #150	@ 0x96
 80084be:	f7ff feab 	bl	8008218 <SUBGRF_WriteCommand>
}
 80084c2:	b003      	add	sp, #12
 80084c4:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 80084c8:	2301      	movs	r3, #1
 80084ca:	f88d 3007 	strb.w	r3, [sp, #7]
 80084ce:	e7f2      	b.n	80084b6 <SUBGRF_SetRegulatorMode+0x12>

080084d0 <SUBGRF_Calibrate>:
{
 80084d0:	b500      	push	{lr}
 80084d2:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80084d4:	f000 0340 	and.w	r3, r0, #64	@ 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80084d8:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80084dc:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80084de:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80084e2:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80084e4:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80084e8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80084ea:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80084ee:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80084f0:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80084f4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80084f6:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80084fa:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80084fc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8008500:	2201      	movs	r2, #1
 8008502:	f10d 0107 	add.w	r1, sp, #7
 8008506:	2089      	movs	r0, #137	@ 0x89
 8008508:	f7ff fe86 	bl	8008218 <SUBGRF_WriteCommand>
}
 800850c:	b003      	add	sp, #12
 800850e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008514 <SUBGRF_CalibrateImage>:
{
 8008514:	b500      	push	{lr}
 8008516:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8008518:	4b1f      	ldr	r3, [pc, #124]	@ (8008598 <SUBGRF_CalibrateImage+0x84>)
 800851a:	4298      	cmp	r0, r3
 800851c:	d90d      	bls.n	800853a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800851e:	23e1      	movs	r3, #225	@ 0xe1
 8008520:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8008524:	23e9      	movs	r3, #233	@ 0xe9
 8008526:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800852a:	2202      	movs	r2, #2
 800852c:	a901      	add	r1, sp, #4
 800852e:	2098      	movs	r0, #152	@ 0x98
 8008530:	f7ff fe72 	bl	8008218 <SUBGRF_WriteCommand>
}
 8008534:	b003      	add	sp, #12
 8008536:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800853a:	4b18      	ldr	r3, [pc, #96]	@ (800859c <SUBGRF_CalibrateImage+0x88>)
 800853c:	4298      	cmp	r0, r3
 800853e:	d906      	bls.n	800854e <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8008540:	23d7      	movs	r3, #215	@ 0xd7
 8008542:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8008546:	23db      	movs	r3, #219	@ 0xdb
 8008548:	f88d 3005 	strb.w	r3, [sp, #5]
 800854c:	e7ed      	b.n	800852a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800854e:	4b14      	ldr	r3, [pc, #80]	@ (80085a0 <SUBGRF_CalibrateImage+0x8c>)
 8008550:	4298      	cmp	r0, r3
 8008552:	d906      	bls.n	8008562 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8008554:	23c1      	movs	r3, #193	@ 0xc1
 8008556:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800855a:	23c5      	movs	r3, #197	@ 0xc5
 800855c:	f88d 3005 	strb.w	r3, [sp, #5]
 8008560:	e7e3      	b.n	800852a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8008562:	4b10      	ldr	r3, [pc, #64]	@ (80085a4 <SUBGRF_CalibrateImage+0x90>)
 8008564:	4298      	cmp	r0, r3
 8008566:	d906      	bls.n	8008576 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8008568:	2375      	movs	r3, #117	@ 0x75
 800856a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800856e:	2381      	movs	r3, #129	@ 0x81
 8008570:	f88d 3005 	strb.w	r3, [sp, #5]
 8008574:	e7d9      	b.n	800852a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8008576:	4b0c      	ldr	r3, [pc, #48]	@ (80085a8 <SUBGRF_CalibrateImage+0x94>)
 8008578:	4298      	cmp	r0, r3
 800857a:	d906      	bls.n	800858a <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 800857c:	236b      	movs	r3, #107	@ 0x6b
 800857e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8008582:	236f      	movs	r3, #111	@ 0x6f
 8008584:	f88d 3005 	strb.w	r3, [sp, #5]
 8008588:	e7cf      	b.n	800852a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 800858a:	2329      	movs	r3, #41	@ 0x29
 800858c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8008590:	232b      	movs	r3, #43	@ 0x2b
 8008592:	f88d 3005 	strb.w	r3, [sp, #5]
 8008596:	e7c8      	b.n	800852a <SUBGRF_CalibrateImage+0x16>
 8008598:	35a4e900 	.word	0x35a4e900
 800859c:	32a9f880 	.word	0x32a9f880
 80085a0:	2de54480 	.word	0x2de54480
 80085a4:	1b6b0b00 	.word	0x1b6b0b00
 80085a8:	1954fc40 	.word	0x1954fc40

080085ac <SUBGRF_SetPaConfig>:
{
 80085ac:	b500      	push	{lr}
 80085ae:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 80085b0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 80085b4:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 80085b8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 80085bc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80085c0:	2204      	movs	r2, #4
 80085c2:	eb0d 0102 	add.w	r1, sp, r2
 80085c6:	2095      	movs	r0, #149	@ 0x95
 80085c8:	f7ff fe26 	bl	8008218 <SUBGRF_WriteCommand>
}
 80085cc:	b003      	add	sp, #12
 80085ce:	f85d fb04 	ldr.w	pc, [sp], #4

080085d2 <SUBGRF_SetDioIrqParams>:
{
 80085d2:	b500      	push	{lr}
 80085d4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80085d6:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80085da:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80085de:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80085e2:	0a08      	lsrs	r0, r1, #8
 80085e4:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80085e8:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80085ec:	0a11      	lsrs	r1, r2, #8
 80085ee:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80085f2:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80085f6:	0a1a      	lsrs	r2, r3, #8
 80085f8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80085fc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8008600:	2208      	movs	r2, #8
 8008602:	4669      	mov	r1, sp
 8008604:	4610      	mov	r0, r2
 8008606:	f7ff fe07 	bl	8008218 <SUBGRF_WriteCommand>
}
 800860a:	b003      	add	sp, #12
 800860c:	f85d fb04 	ldr.w	pc, [sp], #4

08008610 <SUBGRF_SetTcxoMode>:
{
 8008610:	b500      	push	{lr}
 8008612:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8008614:	f000 0007 	and.w	r0, r0, #7
 8008618:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800861c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8008620:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008624:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8008628:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800862c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8008630:	2204      	movs	r2, #4
 8008632:	eb0d 0102 	add.w	r1, sp, r2
 8008636:	2097      	movs	r0, #151	@ 0x97
 8008638:	f7ff fdee 	bl	8008218 <SUBGRF_WriteCommand>
}
 800863c:	b003      	add	sp, #12
 800863e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008644 <SUBGRF_Init>:
{
 8008644:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8008646:	b108      	cbz	r0, 800864c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8008648:	4a18      	ldr	r2, [pc, #96]	@ (80086ac <SUBGRF_Init+0x68>)
 800864a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800864c:	f7f9 fcec 	bl	8002028 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008650:	2002      	movs	r0, #2
 8008652:	f7ff fd3b 	bl	80080cc <Radio_SMPS_Set>
    ImageCalibrated = false;
 8008656:	2000      	movs	r0, #0
 8008658:	4b15      	ldr	r3, [pc, #84]	@ (80086b0 <SUBGRF_Init+0x6c>)
 800865a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800865c:	f7ff fe0c 	bl	8008278 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8008660:	f7fa f8c9 	bl	80027f6 <RBI_IsTCXO>
 8008664:	2801      	cmp	r0, #1
 8008666:	d014      	beq.n	8008692 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008668:	2120      	movs	r1, #32
 800866a:	f640 1011 	movw	r0, #2321	@ 0x911
 800866e:	f7ff fd0d 	bl	800808c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008672:	2120      	movs	r1, #32
 8008674:	f640 1012 	movw	r0, #2322	@ 0x912
 8008678:	f7ff fd08 	bl	800808c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800867c:	210e      	movs	r1, #14
 800867e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008682:	f7ff fd03 	bl	800808c <SUBGRF_WriteRegister>
    RBI_Init();
 8008686:	f7fa f8aa 	bl	80027de <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800868a:	4b0a      	ldr	r3, [pc, #40]	@ (80086b4 <SUBGRF_Init+0x70>)
 800868c:	2201      	movs	r2, #1
 800868e:	701a      	strb	r2, [r3, #0]
}
 8008690:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8008692:	21c0      	movs	r1, #192	@ 0xc0
 8008694:	f7ff ffbc 	bl	8008610 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8008698:	2100      	movs	r1, #0
 800869a:	f640 1011 	movw	r0, #2321	@ 0x911
 800869e:	f7ff fcf5 	bl	800808c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 80086a2:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 80086a6:	f7ff ff13 	bl	80084d0 <SUBGRF_Calibrate>
 80086aa:	e7e7      	b.n	800867c <SUBGRF_Init+0x38>
 80086ac:	200004cc 	.word	0x200004cc
 80086b0:	200004d0 	.word	0x200004d0
 80086b4:	200004da 	.word	0x200004da

080086b8 <SUBGRF_SetRfFrequency>:
{
 80086b8:	b510      	push	{r4, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80086be:	4b12      	ldr	r3, [pc, #72]	@ (8008708 <SUBGRF_SetRfFrequency+0x50>)
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	b1d3      	cbz	r3, 80086fa <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80086c4:	4a11      	ldr	r2, [pc, #68]	@ (800870c <SUBGRF_SetRfFrequency+0x54>)
 80086c6:	2300      	movs	r3, #0
 80086c8:	0660      	lsls	r0, r4, #25
 80086ca:	09e1      	lsrs	r1, r4, #7
 80086cc:	f7f7 fdb0 	bl	8000230 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80086d0:	0e03      	lsrs	r3, r0, #24
 80086d2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80086d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80086da:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80086de:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80086e2:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80086e6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80086ea:	2204      	movs	r2, #4
 80086ec:	eb0d 0102 	add.w	r1, sp, r2
 80086f0:	2086      	movs	r0, #134	@ 0x86
 80086f2:	f7ff fd91 	bl	8008218 <SUBGRF_WriteCommand>
}
 80086f6:	b002      	add	sp, #8
 80086f8:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80086fa:	f7ff ff0b 	bl	8008514 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80086fe:	4b02      	ldr	r3, [pc, #8]	@ (8008708 <SUBGRF_SetRfFrequency+0x50>)
 8008700:	2201      	movs	r2, #1
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	e7de      	b.n	80086c4 <SUBGRF_SetRfFrequency+0xc>
 8008706:	bf00      	nop
 8008708:	200004d0 	.word	0x200004d0
 800870c:	01e84800 	.word	0x01e84800

08008710 <SUBGRF_SetPacketType>:
{
 8008710:	b500      	push	{lr}
 8008712:	b083      	sub	sp, #12
 8008714:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8008718:	b2c3      	uxtb	r3, r0
 800871a:	4a09      	ldr	r2, [pc, #36]	@ (8008740 <SUBGRF_SetPacketType+0x30>)
 800871c:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800871e:	b143      	cbz	r3, 8008732 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8008720:	2201      	movs	r2, #1
 8008722:	f10d 0107 	add.w	r1, sp, #7
 8008726:	208a      	movs	r0, #138	@ 0x8a
 8008728:	f7ff fd76 	bl	8008218 <SUBGRF_WriteCommand>
}
 800872c:	b003      	add	sp, #12
 800872e:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8008732:	2100      	movs	r1, #0
 8008734:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008738:	f7ff fca8 	bl	800808c <SUBGRF_WriteRegister>
 800873c:	e7f0      	b.n	8008720 <SUBGRF_SetPacketType+0x10>
 800873e:	bf00      	nop
 8008740:	200004d9 	.word	0x200004d9

08008744 <SUBGRF_SetTxParams>:
{
 8008744:	b570      	push	{r4, r5, r6, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	460c      	mov	r4, r1
 800874a:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 800874c:	2801      	cmp	r0, #1
 800874e:	d035      	beq.n	80087bc <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8008750:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8008754:	f7ff fcaa 	bl	80080ac <SUBGRF_ReadRegister>
 8008758:	f040 011e 	orr.w	r1, r0, #30
 800875c:	b2c9      	uxtb	r1, r1
 800875e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8008762:	f7ff fc93 	bl	800808c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8008766:	2001      	movs	r0, #1
 8008768:	f7fa f84d 	bl	8002806 <RBI_GetRFOMaxPowerConfig>
 800876c:	4605      	mov	r5, r0
        if (power > max_power)
 800876e:	4284      	cmp	r4, r0
 8008770:	dd00      	ble.n	8008774 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8008772:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8008774:	2d14      	cmp	r5, #20
 8008776:	d054      	beq.n	8008822 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8008778:	2d11      	cmp	r5, #17
 800877a:	d05c      	beq.n	8008836 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 800877c:	2d0e      	cmp	r5, #14
 800877e:	d064      	beq.n	800884a <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8008780:	2301      	movs	r3, #1
 8008782:	2200      	movs	r2, #0
 8008784:	2107      	movs	r1, #7
 8008786:	2004      	movs	r0, #4
 8008788:	f7ff ff10 	bl	80085ac <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800878c:	1b64      	subs	r4, r4, r5
 800878e:	3416      	adds	r4, #22
 8008790:	b265      	sxtb	r5, r4
        if (power < -9)
 8008792:	f115 0f09 	cmn.w	r5, #9
 8008796:	da01      	bge.n	800879c <SUBGRF_SetTxParams+0x58>
            power = -9;
 8008798:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800879c:	2138      	movs	r1, #56	@ 0x38
 800879e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80087a2:	f7ff fc73 	bl	800808c <SUBGRF_WriteRegister>
    buf[0] = power;
 80087a6:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 80087aa:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80087ae:	2202      	movs	r2, #2
 80087b0:	a901      	add	r1, sp, #4
 80087b2:	208e      	movs	r0, #142	@ 0x8e
 80087b4:	f7ff fd30 	bl	8008218 <SUBGRF_WriteCommand>
}
 80087b8:	b002      	add	sp, #8
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80087bc:	2000      	movs	r0, #0
 80087be:	f7fa f822 	bl	8002806 <RBI_GetRFOMaxPowerConfig>
 80087c2:	4605      	mov	r5, r0
        if (power >  max_power)
 80087c4:	4284      	cmp	r4, r0
 80087c6:	dd00      	ble.n	80087ca <SUBGRF_SetTxParams+0x86>
          power = max_power;
 80087c8:	b244      	sxtb	r4, r0
        if (max_power == 14)
 80087ca:	2d0e      	cmp	r5, #14
 80087cc:	d015      	beq.n	80087fa <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 80087ce:	2d0a      	cmp	r5, #10
 80087d0:	d01d      	beq.n	800880e <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80087d2:	2301      	movs	r3, #1
 80087d4:	461a      	mov	r2, r3
 80087d6:	2100      	movs	r1, #0
 80087d8:	2007      	movs	r0, #7
 80087da:	f7ff fee7 	bl	80085ac <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80087de:	1b65      	subs	r5, r4, r5
 80087e0:	350e      	adds	r5, #14
 80087e2:	b26d      	sxtb	r5, r5
        if (power < -17)
 80087e4:	f115 0f11 	cmn.w	r5, #17
 80087e8:	da01      	bge.n	80087ee <SUBGRF_SetTxParams+0xaa>
            power = -17;
 80087ea:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80087ee:	2118      	movs	r1, #24
 80087f0:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80087f4:	f7ff fc4a 	bl	800808c <SUBGRF_WriteRegister>
 80087f8:	e7d5      	b.n	80087a6 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80087fa:	2301      	movs	r3, #1
 80087fc:	461a      	mov	r2, r3
 80087fe:	2100      	movs	r1, #0
 8008800:	2004      	movs	r0, #4
 8008802:	f7ff fed3 	bl	80085ac <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008806:	1b65      	subs	r5, r4, r5
 8008808:	350e      	adds	r5, #14
 800880a:	b26d      	sxtb	r5, r5
 800880c:	e7ea      	b.n	80087e4 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800880e:	2301      	movs	r3, #1
 8008810:	461a      	mov	r2, r3
 8008812:	2100      	movs	r1, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff fec9 	bl	80085ac <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800881a:	1b65      	subs	r5, r4, r5
 800881c:	350d      	adds	r5, #13
 800881e:	b26d      	sxtb	r5, r5
 8008820:	e7e0      	b.n	80087e4 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8008822:	2301      	movs	r3, #1
 8008824:	2200      	movs	r2, #0
 8008826:	2105      	movs	r1, #5
 8008828:	2003      	movs	r0, #3
 800882a:	f7ff febf 	bl	80085ac <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800882e:	1b65      	subs	r5, r4, r5
 8008830:	3516      	adds	r5, #22
 8008832:	b26d      	sxtb	r5, r5
 8008834:	e7ad      	b.n	8008792 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8008836:	2301      	movs	r3, #1
 8008838:	2200      	movs	r2, #0
 800883a:	2103      	movs	r1, #3
 800883c:	2002      	movs	r0, #2
 800883e:	f7ff feb5 	bl	80085ac <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008842:	1b65      	subs	r5, r4, r5
 8008844:	3516      	adds	r5, #22
 8008846:	b26d      	sxtb	r5, r5
 8008848:	e7a3      	b.n	8008792 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800884a:	2301      	movs	r3, #1
 800884c:	2200      	movs	r2, #0
 800884e:	2102      	movs	r1, #2
 8008850:	4608      	mov	r0, r1
 8008852:	f7ff feab 	bl	80085ac <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008856:	1b65      	subs	r5, r4, r5
 8008858:	350e      	adds	r5, #14
 800885a:	b26d      	sxtb	r5, r5
 800885c:	e799      	b.n	8008792 <SUBGRF_SetTxParams+0x4e>
	...

08008860 <SUBGRF_SetModulationParams>:
{
 8008860:	b510      	push	{r4, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008866:	4b3e      	ldr	r3, [pc, #248]	@ (8008960 <SUBGRF_SetModulationParams+0x100>)
 8008868:	e893 0003 	ldmia.w	r3, {r0, r1}
 800886c:	ab02      	add	r3, sp, #8
 800886e:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8008872:	7820      	ldrb	r0, [r4, #0]
 8008874:	4b3b      	ldr	r3, [pc, #236]	@ (8008964 <SUBGRF_SetModulationParams+0x104>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	4298      	cmp	r0, r3
 800887a:	d106      	bne.n	800888a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 800887c:	7823      	ldrb	r3, [r4, #0]
 800887e:	2b03      	cmp	r3, #3
 8008880:	d82c      	bhi.n	80088dc <SUBGRF_SetModulationParams+0x7c>
 8008882:	e8df f003 	tbb	[pc, r3]
 8008886:	4205      	.short	0x4205
 8008888:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800888a:	f7ff ff41 	bl	8008710 <SUBGRF_SetPacketType>
 800888e:	e7f5      	b.n	800887c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8008890:	6862      	ldr	r2, [r4, #4]
 8008892:	4b35      	ldr	r3, [pc, #212]	@ (8008968 <SUBGRF_SetModulationParams+0x108>)
 8008894:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008898:	0c1a      	lsrs	r2, r3, #16
 800889a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800889e:	0a1a      	lsrs	r2, r3, #8
 80088a0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80088a4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80088a8:	7b23      	ldrb	r3, [r4, #12]
 80088aa:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80088ae:	7b63      	ldrb	r3, [r4, #13]
 80088b0:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80088b4:	68a1      	ldr	r1, [r4, #8]
 80088b6:	4a2d      	ldr	r2, [pc, #180]	@ (800896c <SUBGRF_SetModulationParams+0x10c>)
 80088b8:	2300      	movs	r3, #0
 80088ba:	0648      	lsls	r0, r1, #25
 80088bc:	09c9      	lsrs	r1, r1, #7
 80088be:	f7f7 fcb7 	bl	8000230 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80088c2:	0c03      	lsrs	r3, r0, #16
 80088c4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80088c8:	0a03      	lsrs	r3, r0, #8
 80088ca:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80088ce:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80088d2:	2208      	movs	r2, #8
 80088d4:	4669      	mov	r1, sp
 80088d6:	208b      	movs	r0, #139	@ 0x8b
 80088d8:	f7ff fc9e 	bl	8008218 <SUBGRF_WriteCommand>
}
 80088dc:	b002      	add	sp, #8
 80088de:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80088e0:	6922      	ldr	r2, [r4, #16]
 80088e2:	4b21      	ldr	r3, [pc, #132]	@ (8008968 <SUBGRF_SetModulationParams+0x108>)
 80088e4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80088e8:	0c1a      	lsrs	r2, r3, #16
 80088ea:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80088ee:	0a1a      	lsrs	r2, r3, #8
 80088f0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80088f4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80088f8:	7d23      	ldrb	r3, [r4, #20]
 80088fa:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80088fe:	2204      	movs	r2, #4
 8008900:	4669      	mov	r1, sp
 8008902:	208b      	movs	r0, #139	@ 0x8b
 8008904:	f7ff fc88 	bl	8008218 <SUBGRF_WriteCommand>
        break;
 8008908:	e7e8      	b.n	80088dc <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800890a:	7e23      	ldrb	r3, [r4, #24]
 800890c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8008910:	7e63      	ldrb	r3, [r4, #25]
 8008912:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8008916:	7ea3      	ldrb	r3, [r4, #26]
 8008918:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800891c:	7ee3      	ldrb	r3, [r4, #27]
 800891e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008922:	2204      	movs	r2, #4
 8008924:	4669      	mov	r1, sp
 8008926:	208b      	movs	r0, #139	@ 0x8b
 8008928:	f7ff fc76 	bl	8008218 <SUBGRF_WriteCommand>
        break;
 800892c:	e7d6      	b.n	80088dc <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800892e:	6862      	ldr	r2, [r4, #4]
 8008930:	4b0d      	ldr	r3, [pc, #52]	@ (8008968 <SUBGRF_SetModulationParams+0x108>)
 8008932:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008936:	0c1a      	lsrs	r2, r3, #16
 8008938:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800893c:	0a1a      	lsrs	r2, r3, #8
 800893e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8008942:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8008946:	7b23      	ldrb	r3, [r4, #12]
 8008948:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800894c:	7b63      	ldrb	r3, [r4, #13]
 800894e:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008952:	2205      	movs	r2, #5
 8008954:	4669      	mov	r1, sp
 8008956:	208b      	movs	r0, #139	@ 0x8b
 8008958:	f7ff fc5e 	bl	8008218 <SUBGRF_WriteCommand>
}
 800895c:	e7be      	b.n	80088dc <SUBGRF_SetModulationParams+0x7c>
 800895e:	bf00      	nop
 8008960:	0800a074 	.word	0x0800a074
 8008964:	200004d9 	.word	0x200004d9
 8008968:	3d090000 	.word	0x3d090000
 800896c:	01e84800 	.word	0x01e84800

08008970 <SUBGRF_SetPacketParams>:
{
 8008970:	b510      	push	{r4, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008976:	ab01      	add	r3, sp, #4
 8008978:	4a33      	ldr	r2, [pc, #204]	@ (8008a48 <SUBGRF_SetPacketParams+0xd8>)
 800897a:	ca07      	ldmia	r2, {r0, r1, r2}
 800897c:	c303      	stmia	r3!, {r0, r1}
 800897e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8008980:	7820      	ldrb	r0, [r4, #0]
 8008982:	4b32      	ldr	r3, [pc, #200]	@ (8008a4c <SUBGRF_SetPacketParams+0xdc>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	4298      	cmp	r0, r3
 8008988:	d106      	bne.n	8008998 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 800898a:	7823      	ldrb	r3, [r4, #0]
 800898c:	2b03      	cmp	r3, #3
 800898e:	d82a      	bhi.n	80089e6 <SUBGRF_SetPacketParams+0x76>
 8008990:	e8df f003 	tbb	[pc, r3]
 8008994:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8008998:	f7ff feba 	bl	8008710 <SUBGRF_SetPacketType>
 800899c:	e7f5      	b.n	800898a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800899e:	7a63      	ldrb	r3, [r4, #9]
 80089a0:	2bf1      	cmp	r3, #241	@ 0xf1
 80089a2:	d022      	beq.n	80089ea <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80089a4:	2bf2      	cmp	r3, #242	@ 0xf2
 80089a6:	d02a      	beq.n	80089fe <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80089a8:	8862      	ldrh	r2, [r4, #2]
 80089aa:	0a11      	lsrs	r1, r2, #8
 80089ac:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80089b0:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80089b4:	7922      	ldrb	r2, [r4, #4]
 80089b6:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80089ba:	7962      	ldrb	r2, [r4, #5]
 80089bc:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80089c0:	79a2      	ldrb	r2, [r4, #6]
 80089c2:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80089c6:	79e2      	ldrb	r2, [r4, #7]
 80089c8:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80089cc:	7a22      	ldrb	r2, [r4, #8]
 80089ce:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 80089d2:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80089d6:	7aa3      	ldrb	r3, [r4, #10]
 80089d8:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80089dc:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80089de:	a901      	add	r1, sp, #4
 80089e0:	208c      	movs	r0, #140	@ 0x8c
 80089e2:	f7ff fc19 	bl	8008218 <SUBGRF_WriteCommand>
}
 80089e6:	b004      	add	sp, #16
 80089e8:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80089ea:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80089ee:	f7ff fbb2 	bl	8008156 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80089f2:	f248 0005 	movw	r0, #32773	@ 0x8005
 80089f6:	f7ff fbc2 	bl	800817e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80089fa:	2302      	movs	r3, #2
 80089fc:	e7d4      	b.n	80089a8 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80089fe:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8008a02:	f7ff fba8 	bl	8008156 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8008a06:	f241 0021 	movw	r0, #4129	@ 0x1021
 8008a0a:	f7ff fbb8 	bl	800817e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8008a0e:	2306      	movs	r3, #6
 8008a10:	e7ca      	b.n	80089a8 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8008a12:	7b23      	ldrb	r3, [r4, #12]
 8008a14:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8008a18:	2201      	movs	r2, #1
        break;
 8008a1a:	e7e0      	b.n	80089de <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8008a1c:	89e3      	ldrh	r3, [r4, #14]
 8008a1e:	0a1a      	lsrs	r2, r3, #8
 8008a20:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8008a24:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8008a28:	7c23      	ldrb	r3, [r4, #16]
 8008a2a:	4a09      	ldr	r2, [pc, #36]	@ (8008a50 <SUBGRF_SetPacketParams+0xe0>)
 8008a2c:	7013      	strb	r3, [r2, #0]
 8008a2e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8008a32:	7c63      	ldrb	r3, [r4, #17]
 8008a34:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8008a38:	7ca3      	ldrb	r3, [r4, #18]
 8008a3a:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8008a3e:	7ce3      	ldrb	r3, [r4, #19]
 8008a40:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8008a44:	2206      	movs	r2, #6
        break;
 8008a46:	e7ca      	b.n	80089de <SUBGRF_SetPacketParams+0x6e>
 8008a48:	0800a07c 	.word	0x0800a07c
 8008a4c:	200004d9 	.word	0x200004d9
 8008a50:	200004d8 	.word	0x200004d8

08008a54 <SUBGRF_SetCadParams>:
{
 8008a54:	b510      	push	{r4, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	9c04      	ldr	r4, [sp, #16]
    buf[0] = ( uint8_t )cadSymbolNum;
 8008a5a:	f88d 0000 	strb.w	r0, [sp]
    buf[1] = cadDetPeak;
 8008a5e:	f88d 1001 	strb.w	r1, [sp, #1]
    buf[2] = cadDetMin;
 8008a62:	f88d 2002 	strb.w	r2, [sp, #2]
    buf[3] = ( uint8_t )cadExitMode;
 8008a66:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( cadTimeout >> 16 ) & 0xFF );
 8008a6a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8008a6e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( ( cadTimeout >> 8 ) & 0xFF );
 8008a72:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008a76:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[6] = ( uint8_t )( cadTimeout & 0xFF );
 8008a7a:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
 8008a7e:	2207      	movs	r2, #7
 8008a80:	4669      	mov	r1, sp
 8008a82:	2088      	movs	r0, #136	@ 0x88
 8008a84:	f7ff fbc8 	bl	8008218 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8008a88:	4b02      	ldr	r3, [pc, #8]	@ (8008a94 <SUBGRF_SetCadParams+0x40>)
 8008a8a:	2207      	movs	r2, #7
 8008a8c:	701a      	strb	r2, [r3, #0]
}
 8008a8e:	b002      	add	sp, #8
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	bf00      	nop
 8008a94:	200004da 	.word	0x200004da

08008a98 <SUBGRF_SetBufferBaseAddress>:
{
 8008a98:	b500      	push	{lr}
 8008a9a:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8008a9c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8008aa0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	a901      	add	r1, sp, #4
 8008aa8:	208f      	movs	r0, #143	@ 0x8f
 8008aaa:	f7ff fbb5 	bl	8008218 <SUBGRF_WriteCommand>
}
 8008aae:	b003      	add	sp, #12
 8008ab0:	f85d fb04 	ldr.w	pc, [sp], #4

08008ab4 <SUBGRF_ReadCommand>:
{
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008abc:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8008abe:	460a      	mov	r2, r1
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	4803      	ldr	r0, [pc, #12]	@ (8008ad0 <SUBGRF_ReadCommand+0x1c>)
 8008ac4:	f7fc fc0e 	bl	80052e4 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac8:	f384 8810 	msr	PRIMASK, r4
}
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000220 	.word	0x20000220

08008ad4 <SUBGRF_GetRssiInst>:
{
 8008ad4:	b500      	push	{lr}
 8008ad6:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8008ad8:	2201      	movs	r2, #1
 8008ada:	a901      	add	r1, sp, #4
 8008adc:	2015      	movs	r0, #21
 8008ade:	f7ff ffe9 	bl	8008ab4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8008ae2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8008ae6:	4240      	negs	r0, r0
}
 8008ae8:	1040      	asrs	r0, r0, #1
 8008aea:	b003      	add	sp, #12
 8008aec:	f85d fb04 	ldr.w	pc, [sp], #4

08008af0 <SUBGRF_GetRxBufferStatus>:
{
 8008af0:	b530      	push	{r4, r5, lr}
 8008af2:	b083      	sub	sp, #12
 8008af4:	4605      	mov	r5, r0
 8008af6:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8008af8:	2202      	movs	r2, #2
 8008afa:	a901      	add	r1, sp, #4
 8008afc:	2013      	movs	r0, #19
 8008afe:	f7ff ffd9 	bl	8008ab4 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8008b02:	f7ff fabd 	bl	8008080 <SUBGRF_GetPacketType>
 8008b06:	2801      	cmp	r0, #1
 8008b08:	d007      	beq.n	8008b1a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8008b0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008b0e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8008b10:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008b14:	7023      	strb	r3, [r4, #0]
}
 8008b16:	b003      	add	sp, #12
 8008b18:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8008b1a:	4b05      	ldr	r3, [pc, #20]	@ (8008b30 <SUBGRF_GetRxBufferStatus+0x40>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d1f2      	bne.n	8008b0a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8008b24:	f240 7002 	movw	r0, #1794	@ 0x702
 8008b28:	f7ff fac0 	bl	80080ac <SUBGRF_ReadRegister>
 8008b2c:	7028      	strb	r0, [r5, #0]
 8008b2e:	e7ef      	b.n	8008b10 <SUBGRF_GetRxBufferStatus+0x20>
 8008b30:	200004d8 	.word	0x200004d8

08008b34 <SUBGRF_GetPayload>:
{
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	4606      	mov	r6, r0
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8008b44:	f10d 0107 	add.w	r1, sp, #7
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f7ff ffd1 	bl	8008af0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8008b4e:	7822      	ldrb	r2, [r4, #0]
 8008b50:	42aa      	cmp	r2, r5
 8008b52:	d902      	bls.n	8008b5a <SUBGRF_GetPayload+0x26>
        return 1;
 8008b54:	2001      	movs	r0, #1
}
 8008b56:	b002      	add	sp, #8
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008b60:	f7ff fb4a 	bl	80081f8 <SUBGRF_ReadBuffer>
    return 0;
 8008b64:	2000      	movs	r0, #0
 8008b66:	e7f6      	b.n	8008b56 <SUBGRF_GetPayload+0x22>

08008b68 <SUBGRF_GetPacketStatus>:
{
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8008b6e:	2203      	movs	r2, #3
 8008b70:	a901      	add	r1, sp, #4
 8008b72:	2014      	movs	r0, #20
 8008b74:	f7ff ff9e 	bl	8008ab4 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8008b78:	f7ff fa82 	bl	8008080 <SUBGRF_GetPacketType>
 8008b7c:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8008b7e:	b148      	cbz	r0, 8008b94 <SUBGRF_GetPacketStatus+0x2c>
 8008b80:	2801      	cmp	r0, #1
 8008b82:	d018      	beq.n	8008bb6 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8008b84:	2214      	movs	r2, #20
 8008b86:	2100      	movs	r1, #0
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 fb22 	bl	80091d2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8008b8e:	230f      	movs	r3, #15
 8008b90:	7023      	strb	r3, [r4, #0]
}
 8008b92:	e00e      	b.n	8008bb2 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8008b94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008b98:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8008b9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008b9e:	425b      	negs	r3, r3
 8008ba0:	105b      	asrs	r3, r3, #1
 8008ba2:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8008ba4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008ba8:	425b      	negs	r3, r3
 8008baa:	105b      	asrs	r3, r3, #1
 8008bac:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60a3      	str	r3, [r4, #8]
}
 8008bb2:	b002      	add	sp, #8
 8008bb4:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8008bb6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008bba:	425b      	negs	r3, r3
 8008bbc:	105b      	asrs	r3, r3, #1
 8008bbe:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8008bc0:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8008bc4:	3302      	adds	r3, #2
 8008bc6:	109b      	asrs	r3, r3, #2
 8008bc8:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8008bca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008bce:	425b      	negs	r3, r3
 8008bd0:	105b      	asrs	r3, r3, #1
 8008bd2:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8008bd4:	4b01      	ldr	r3, [pc, #4]	@ (8008bdc <SUBGRF_GetPacketStatus+0x74>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6123      	str	r3, [r4, #16]
            break;
 8008bda:	e7ea      	b.n	8008bb2 <SUBGRF_GetPacketStatus+0x4a>
 8008bdc:	200004d4 	.word	0x200004d4

08008be0 <SUBGRF_SetSwitch>:
{
 8008be0:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8008be2:	2901      	cmp	r1, #1
 8008be4:	d003      	beq.n	8008bee <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8008be6:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8008be8:	f7f9 fdfd 	bl	80027e6 <RBI_ConfigRFSwitch>
}
 8008bec:	bd10      	pop	{r4, pc}
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8008bf2:	2c01      	cmp	r4, #1
 8008bf4:	d003      	beq.n	8008bfe <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8008bf6:	2c02      	cmp	r4, #2
 8008bf8:	d1f6      	bne.n	8008be8 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8008bfa:	2003      	movs	r0, #3
 8008bfc:	e7f4      	b.n	8008be8 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8008bfe:	2004      	movs	r0, #4
 8008c00:	f7ff fa64 	bl	80080cc <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8008c04:	2002      	movs	r0, #2
 8008c06:	e7f6      	b.n	8008bf6 <SUBGRF_SetSwitch+0x16>

08008c08 <SUBGRF_SetRfTxPower>:
{
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8008c0c:	f7f9 fdef 	bl	80027ee <RBI_GetTxConfig>
    switch (TxConfig)
 8008c10:	b148      	cbz	r0, 8008c26 <SUBGRF_SetRfTxPower+0x1e>
 8008c12:	2802      	cmp	r0, #2
 8008c14:	d10d      	bne.n	8008c32 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8008c16:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8008c18:	2202      	movs	r2, #2
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f7ff fd91 	bl	8008744 <SUBGRF_SetTxParams>
}
 8008c22:	4628      	mov	r0, r5
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8008c26:	2c0f      	cmp	r4, #15
 8008c28:	dc01      	bgt.n	8008c2e <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8008c2a:	2501      	movs	r5, #1
 8008c2c:	e7f4      	b.n	8008c18 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8008c2e:	2502      	movs	r5, #2
 8008c30:	e7f2      	b.n	8008c18 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8008c32:	2501      	movs	r5, #1
 8008c34:	e7f0      	b.n	8008c18 <SUBGRF_SetRfTxPower+0x10>

08008c36 <SUBGRF_GetRadioWakeUpTime>:
}
 8008c36:	2003      	movs	r0, #3
 8008c38:	4770      	bx	lr
	...

08008c3c <HAL_SUBGHZ_TxCpltCallback>:
{
 8008c3c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8008c3e:	4b02      	ldr	r3, [pc, #8]	@ (8008c48 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2001      	movs	r0, #1
 8008c44:	4798      	blx	r3
}
 8008c46:	bd08      	pop	{r3, pc}
 8008c48:	200004cc 	.word	0x200004cc

08008c4c <HAL_SUBGHZ_RxCpltCallback>:
{
 8008c4c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8008c4e:	4b02      	ldr	r3, [pc, #8]	@ (8008c58 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2002      	movs	r0, #2
 8008c54:	4798      	blx	r3
}
 8008c56:	bd08      	pop	{r3, pc}
 8008c58:	200004cc 	.word	0x200004cc

08008c5c <HAL_SUBGHZ_CRCErrorCallback>:
{
 8008c5c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8008c5e:	4b02      	ldr	r3, [pc, #8]	@ (8008c68 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2040      	movs	r0, #64	@ 0x40
 8008c64:	4798      	blx	r3
}
 8008c66:	bd08      	pop	{r3, pc}
 8008c68:	200004cc 	.word	0x200004cc

08008c6c <HAL_SUBGHZ_CADStatusCallback>:
{
 8008c6c:	b508      	push	{r3, lr}
    switch (cadstatus)
 8008c6e:	b111      	cbz	r1, 8008c76 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8008c70:	2901      	cmp	r1, #1
 8008c72:	d005      	beq.n	8008c80 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8008c74:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8008c76:	4b05      	ldr	r3, [pc, #20]	@ (8008c8c <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2080      	movs	r0, #128	@ 0x80
 8008c7c:	4798      	blx	r3
            break;
 8008c7e:	e7f9      	b.n	8008c74 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8008c80:	4b02      	ldr	r3, [pc, #8]	@ (8008c8c <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008c88:	4798      	blx	r3
}
 8008c8a:	e7f3      	b.n	8008c74 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8008c8c:	200004cc 	.word	0x200004cc

08008c90 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8008c90:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8008c92:	4b03      	ldr	r3, [pc, #12]	@ (8008ca0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008c9a:	4798      	blx	r3
}
 8008c9c:	bd08      	pop	{r3, pc}
 8008c9e:	bf00      	nop
 8008ca0:	200004cc 	.word	0x200004cc

08008ca4 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8008ca4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8008ca6:	4b02      	ldr	r3, [pc, #8]	@ (8008cb0 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2020      	movs	r0, #32
 8008cac:	4798      	blx	r3
}
 8008cae:	bd08      	pop	{r3, pc}
 8008cb0:	200004cc 	.word	0x200004cc

08008cb4 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8008cb4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8008cb6:	4b02      	ldr	r3, [pc, #8]	@ (8008cc0 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2004      	movs	r0, #4
 8008cbc:	4798      	blx	r3
}
 8008cbe:	bd08      	pop	{r3, pc}
 8008cc0:	200004cc 	.word	0x200004cc

08008cc4 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8008cc4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8008cc6:	4b02      	ldr	r3, [pc, #8]	@ (8008cd0 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2008      	movs	r0, #8
 8008ccc:	4798      	blx	r3
}
 8008cce:	bd08      	pop	{r3, pc}
 8008cd0:	200004cc 	.word	0x200004cc

08008cd4 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8008cd4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8008cd6:	4b02      	ldr	r3, [pc, #8]	@ (8008ce0 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2010      	movs	r0, #16
 8008cdc:	4798      	blx	r3
}
 8008cde:	bd08      	pop	{r3, pc}
 8008ce0:	200004cc 	.word	0x200004cc

08008ce4 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8008ce4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8008ce6:	4b03      	ldr	r3, [pc, #12]	@ (8008cf4 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008cee:	4798      	blx	r3
}
 8008cf0:	bd08      	pop	{r3, pc}
 8008cf2:	bf00      	nop
 8008cf4:	200004cc 	.word	0x200004cc

08008cf8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	b180      	cbz	r0, 8008d1e <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	2b15      	cmp	r3, #21
 8008d00:	d80c      	bhi.n	8008d1c <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8008d02:	4a08      	ldr	r2, [pc, #32]	@ (8008d24 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8008d04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008d08:	428a      	cmp	r2, r1
 8008d0a:	d802      	bhi.n	8008d12 <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	e7f5      	b.n	8008cfe <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8008d12:	4a04      	ldr	r2, [pc, #16]	@ (8008d24 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8008d14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d18:	7918      	ldrb	r0, [r3, #4]
 8008d1a:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8008d1c:	e7fe      	b.n	8008d1c <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 8008d1e:	201f      	movs	r0, #31
}
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	0800ab10 	.word	0x0800ab10

08008d28 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8008d28:	b570      	push	{r4, r5, r6, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8008d30:	4b1d      	ldr	r3, [pc, #116]	@ (8008da8 <SUBGRF_GetCFO+0x80>)
 8008d32:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8008d34:	f640 0007 	movw	r0, #2055	@ 0x807
 8008d38:	f7ff f9b8 	bl	80080ac <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8008d3c:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8008d40:	3308      	adds	r3, #8
 8008d42:	446b      	add	r3, sp
 8008d44:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8008d48:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d52:	4a16      	ldr	r2, [pc, #88]	@ (8008dac <SUBGRF_GetCFO+0x84>)
 8008d54:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8008d58:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8008d5c:	2807      	cmp	r0, #7
 8008d5e:	d921      	bls.n	8008da4 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8008d60:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8008d62:	fb03 f000 	mul.w	r0, r3, r0
 8008d66:	2803      	cmp	r0, #3
 8008d68:	d800      	bhi.n	8008d6c <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8008d6a:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8008d6c:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8008d70:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8008d74:	f7ff f99a 	bl	80080ac <SUBGRF_ReadRegister>
 8008d78:	0206      	lsls	r6, r0, #8
 8008d7a:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8008d7e:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8008d82:	f7ff f993 	bl	80080ac <SUBGRF_ReadRegister>
 8008d86:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8008d88:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8008d8c:	d003      	beq.n	8008d96 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8008d8e:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8008d92:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8008d96:	096b      	lsrs	r3, r5, #5
 8008d98:	fb03 f000 	mul.w	r0, r3, r0
 8008d9c:	11c0      	asrs	r0, r0, #7
 8008d9e:	6020      	str	r0, [r4, #0]
}
 8008da0:	b002      	add	sp, #8
 8008da2:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8008da4:	2302      	movs	r3, #2
 8008da6:	e7dc      	b.n	8008d62 <SUBGRF_GetCFO+0x3a>
 8008da8:	0c0a0804 	.word	0x0c0a0804
 8008dac:	01e84800 	.word	0x01e84800

08008db0 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	4770      	bx	lr

08008db6 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8008db6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dba:	4770      	bx	lr

08008dbc <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8008dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc0:	4770      	bx	lr

08008dc2 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8008dc2:	4770      	bx	lr

08008dc4 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	4770      	bx	lr

08008dc8 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8008dc8:	2000      	movs	r0, #0
 8008dca:	4770      	bx	lr

08008dcc <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8008dcc:	4770      	bx	lr

08008dce <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8008dce:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd2:	4770      	bx	lr

08008dd4 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	4770      	bx	lr

08008dda <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8008dda:	4770      	bx	lr

08008ddc <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8008ddc:	4770      	bx	lr

08008dde <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8008dde:	4770      	bx	lr

08008de0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8008de0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008de6:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8008de8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e64 <TRACE_AllocateBufer+0x84>)
 8008dea:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8008dee:	8a1a      	ldrh	r2, [r3, #16]
 8008df0:	4596      	cmp	lr, r2
 8008df2:	d011      	beq.n	8008e18 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8008df4:	4596      	cmp	lr, r2
 8008df6:	d921      	bls.n	8008e3c <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8008df8:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 8008dfc:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8008dfe:	4283      	cmp	r3, r0
 8008e00:	d81f      	bhi.n	8008e42 <TRACE_AllocateBufer+0x62>
 8008e02:	4282      	cmp	r2, r0
 8008e04:	d91d      	bls.n	8008e42 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8008e06:	4b17      	ldr	r3, [pc, #92]	@ (8008e64 <TRACE_AllocateBufer+0x84>)
 8008e08:	2401      	movs	r4, #1
 8008e0a:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8008e0c:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8008e10:	2400      	movs	r4, #0
 8008e12:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8008e14:	4613      	mov	r3, r2
 8008e16:	e014      	b.n	8008e42 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8008e18:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 8008e1c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8008e1e:	4298      	cmp	r0, r3
 8008e20:	d30f      	bcc.n	8008e42 <TRACE_AllocateBufer+0x62>
 8008e22:	4282      	cmp	r2, r0
 8008e24:	d90d      	bls.n	8008e42 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8008e26:	4b0f      	ldr	r3, [pc, #60]	@ (8008e64 <TRACE_AllocateBufer+0x84>)
 8008e28:	2401      	movs	r4, #1
 8008e2a:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8008e2c:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8008e30:	f04f 0e00 	mov.w	lr, #0
 8008e34:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8008e38:	4613      	mov	r3, r2
 8008e3a:	e002      	b.n	8008e42 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8008e3c:	eba2 020e 	sub.w	r2, r2, lr
 8008e40:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8008e42:	4283      	cmp	r3, r0
 8008e44:	d90a      	bls.n	8008e5c <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8008e46:	4a07      	ldr	r2, [pc, #28]	@ (8008e64 <TRACE_AllocateBufer+0x84>)
 8008e48:	8a53      	ldrh	r3, [r2, #18]
 8008e4a:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8008e4c:	4403      	add	r3, r0
 8008e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e52:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8008e54:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e56:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8008e5a:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8008e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e60:	e7f9      	b.n	8008e56 <TRACE_AllocateBufer+0x76>
 8008e62:	bf00      	nop
 8008e64:	200007dc 	.word	0x200007dc

08008e68 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e68:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008e6c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8008e6e:	4a03      	ldr	r2, [pc, #12]	@ (8008e7c <TRACE_Lock+0x14>)
 8008e70:	8ad3      	ldrh	r3, [r2, #22]
 8008e72:	3301      	adds	r3, #1
 8008e74:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e76:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8008e7a:	4770      	bx	lr
 8008e7c:	200007dc 	.word	0x200007dc

08008e80 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e80:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008e84:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8008e86:	4a03      	ldr	r2, [pc, #12]	@ (8008e94 <TRACE_UnLock+0x14>)
 8008e88:	8ad3      	ldrh	r3, [r2, #22]
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e8e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8008e92:	4770      	bx	lr
 8008e94:	200007dc 	.word	0x200007dc

08008e98 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8008e98:	4b02      	ldr	r3, [pc, #8]	@ (8008ea4 <TRACE_IsLocked+0xc>)
 8008e9a:	8ad8      	ldrh	r0, [r3, #22]
}
 8008e9c:	3800      	subs	r0, #0
 8008e9e:	bf18      	it	ne
 8008ea0:	2001      	movne	r0, #1
 8008ea2:	4770      	bx	lr
 8008ea4:	200007dc 	.word	0x200007dc

08008ea8 <UTIL_ADV_TRACE_Init>:
{
 8008ea8:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8008eaa:	2218      	movs	r2, #24
 8008eac:	2100      	movs	r1, #0
 8008eae:	4807      	ldr	r0, [pc, #28]	@ (8008ecc <UTIL_ADV_TRACE_Init+0x24>)
 8008eb0:	f000 f98f 	bl	80091d2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8008eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eb8:	2100      	movs	r1, #0
 8008eba:	4805      	ldr	r0, [pc, #20]	@ (8008ed0 <UTIL_ADV_TRACE_Init+0x28>)
 8008ebc:	f000 f989 	bl	80091d2 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8008ec0:	4b04      	ldr	r3, [pc, #16]	@ (8008ed4 <UTIL_ADV_TRACE_Init+0x2c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4804      	ldr	r0, [pc, #16]	@ (8008ed8 <UTIL_ADV_TRACE_Init+0x30>)
 8008ec6:	4798      	blx	r3
}
 8008ec8:	bd08      	pop	{r3, pc}
 8008eca:	bf00      	nop
 8008ecc:	200007dc 	.word	0x200007dc
 8008ed0:	200005dc 	.word	0x200005dc
 8008ed4:	0800a93c 	.word	0x0800a93c
 8008ed8:	08009059 	.word	0x08009059

08008edc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8008edc:	4b01      	ldr	r3, [pc, #4]	@ (8008ee4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8008ede:	6058      	str	r0, [r3, #4]
}
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	200007dc 	.word	0x200007dc

08008ee8 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8008ee8:	4b01      	ldr	r3, [pc, #4]	@ (8008ef0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8008eea:	7218      	strb	r0, [r3, #8]
}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	200007dc 	.word	0x200007dc

08008ef4 <TRACE_Send>:
{
 8008ef4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8008efa:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8008efc:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8008efe:	f7ff ffcb 	bl	8008e98 <TRACE_IsLocked>
 8008f02:	b118      	cbz	r0, 8008f0c <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f04:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8008f08:	2000      	movs	r0, #0
}
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8008f0c:	f7ff ffac 	bl	8008e68 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8008f10:	4b1c      	ldr	r3, [pc, #112]	@ (8008f84 <TRACE_Send+0x90>)
 8008f12:	8a1a      	ldrh	r2, [r3, #16]
 8008f14:	8a5b      	ldrh	r3, [r3, #18]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d02e      	beq.n	8008f78 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8008f1a:	491a      	ldr	r1, [pc, #104]	@ (8008f84 <TRACE_Send+0x90>)
 8008f1c:	7889      	ldrb	r1, [r1, #2]
 8008f1e:	2901      	cmp	r1, #1
 8008f20:	d017      	beq.n	8008f52 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8008f22:	4a18      	ldr	r2, [pc, #96]	@ (8008f84 <TRACE_Send+0x90>)
 8008f24:	7892      	ldrb	r2, [r2, #2]
 8008f26:	b932      	cbnz	r2, 8008f36 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8008f28:	4a16      	ldr	r2, [pc, #88]	@ (8008f84 <TRACE_Send+0x90>)
 8008f2a:	8a12      	ldrh	r2, [r2, #16]
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d91e      	bls.n	8008f6e <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8008f30:	1a9b      	subs	r3, r3, r2
 8008f32:	4a14      	ldr	r2, [pc, #80]	@ (8008f84 <TRACE_Send+0x90>)
 8008f34:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8008f36:	4e13      	ldr	r6, [pc, #76]	@ (8008f84 <TRACE_Send+0x90>)
 8008f38:	8a35      	ldrh	r5, [r6, #16]
 8008f3a:	4b13      	ldr	r3, [pc, #76]	@ (8008f88 <TRACE_Send+0x94>)
 8008f3c:	441d      	add	r5, r3
 8008f3e:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8008f42:	f7f9 f8e5 	bl	8002110 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8008f46:	4b11      	ldr	r3, [pc, #68]	@ (8008f8c <TRACE_Send+0x98>)
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	8ab1      	ldrh	r1, [r6, #20]
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	4798      	blx	r3
 8008f50:	e7db      	b.n	8008f0a <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8008f52:	480c      	ldr	r0, [pc, #48]	@ (8008f84 <TRACE_Send+0x90>)
 8008f54:	8801      	ldrh	r1, [r0, #0]
 8008f56:	1a8a      	subs	r2, r1, r2
 8008f58:	b292      	uxth	r2, r2
 8008f5a:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8008f5c:	2102      	movs	r1, #2
 8008f5e:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8008f60:	2100      	movs	r1, #0
 8008f62:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8008f64:	2a00      	cmp	r2, #0
 8008f66:	d1dc      	bne.n	8008f22 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8008f68:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8008f6a:	8201      	strh	r1, [r0, #16]
 8008f6c:	e7d9      	b.n	8008f22 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8008f6e:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 8008f72:	4b04      	ldr	r3, [pc, #16]	@ (8008f84 <TRACE_Send+0x90>)
 8008f74:	829a      	strh	r2, [r3, #20]
 8008f76:	e7de      	b.n	8008f36 <TRACE_Send+0x42>
      TRACE_UnLock();
 8008f78:	f7ff ff82 	bl	8008e80 <TRACE_UnLock>
 8008f7c:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8008f80:	2000      	movs	r0, #0
}
 8008f82:	e7c2      	b.n	8008f0a <TRACE_Send+0x16>
 8008f84:	200007dc 	.word	0x200007dc
 8008f88:	200005dc 	.word	0x200005dc
 8008f8c:	0800a93c 	.word	0x0800a93c

08008f90 <UTIL_ADV_TRACE_COND_FSend>:
{
 8008f90:	b408      	push	{r3}
 8008f92:	b530      	push	{r4, r5, lr}
 8008f94:	b086      	sub	sp, #24
 8008f96:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8008f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800904c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8008fa0:	7a1b      	ldrb	r3, [r3, #8]
 8008fa2:	4283      	cmp	r3, r0
 8008fa4:	d34c      	bcc.n	8009040 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8008fa6:	4b29      	ldr	r3, [pc, #164]	@ (800904c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	4399      	bics	r1, r3
 8008fac:	d14b      	bne.n	8009046 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8008fae:	4b27      	ldr	r3, [pc, #156]	@ (800904c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	b123      	cbz	r3, 8008fbe <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8008fb4:	b11a      	cbz	r2, 8008fbe <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8008fb6:	f10d 0102 	add.w	r1, sp, #2
 8008fba:	a801      	add	r0, sp, #4
 8008fbc:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8008fbe:	ab0a      	add	r3, sp, #40	@ 0x28
 8008fc0:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008fc8:	4821      	ldr	r0, [pc, #132]	@ (8009050 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8008fca:	f000 fb9f 	bl	800970c <vsniprintf>
 8008fce:	b285      	uxth	r5, r0
  TRACE_Lock();
 8008fd0:	f7ff ff4a 	bl	8008e68 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8008fd4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008fd8:	18e8      	adds	r0, r5, r3
 8008fda:	4669      	mov	r1, sp
 8008fdc:	b280      	uxth	r0, r0
 8008fde:	f7ff feff 	bl	8008de0 <TRACE_AllocateBufer>
 8008fe2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008fe6:	d026      	beq.n	8009036 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e00d      	b.n	8009008 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8008fec:	f8bd 2000 	ldrh.w	r2, [sp]
 8008ff0:	f103 0118 	add.w	r1, r3, #24
 8008ff4:	4469      	add	r1, sp
 8008ff6:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8008ffa:	4916      	ldr	r1, [pc, #88]	@ (8009054 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8008ffc:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8008ffe:	3201      	adds	r2, #1
 8009000:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8009004:	3301      	adds	r3, #1
 8009006:	b29b      	uxth	r3, r3
 8009008:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800900c:	429a      	cmp	r2, r3
 800900e:	d8ed      	bhi.n	8008fec <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8009010:	f8bd 0000 	ldrh.w	r0, [sp]
 8009014:	9b05      	ldr	r3, [sp, #20]
 8009016:	4622      	mov	r2, r4
 8009018:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800901c:	4c0d      	ldr	r4, [pc, #52]	@ (8009054 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800901e:	4420      	add	r0, r4
 8009020:	f000 fb74 	bl	800970c <vsniprintf>
    TRACE_UnLock();
 8009024:	f7ff ff2c 	bl	8008e80 <TRACE_UnLock>
    return TRACE_Send();
 8009028:	f7ff ff64 	bl	8008ef4 <TRACE_Send>
}
 800902c:	b006      	add	sp, #24
 800902e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009032:	b001      	add	sp, #4
 8009034:	4770      	bx	lr
  TRACE_UnLock();
 8009036:	f7ff ff23 	bl	8008e80 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800903a:	f06f 0002 	mvn.w	r0, #2
 800903e:	e7f5      	b.n	800902c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8009040:	f06f 0004 	mvn.w	r0, #4
 8009044:	e7f2      	b.n	800902c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8009046:	f06f 0005 	mvn.w	r0, #5
 800904a:	e7ef      	b.n	800902c <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800904c:	200007dc 	.word	0x200007dc
 8009050:	200004dc 	.word	0x200004dc
 8009054:	200005dc 	.word	0x200005dc

08009058 <TRACE_TxCpltCallback>:
{
 8009058:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800905a:	f3ef 8310 	mrs	r3, PRIMASK
 800905e:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8009060:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8009062:	4b26      	ldr	r3, [pc, #152]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 8009064:	789b      	ldrb	r3, [r3, #2]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d016      	beq.n	8009098 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800906a:	4a24      	ldr	r2, [pc, #144]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 800906c:	8a13      	ldrh	r3, [r2, #16]
 800906e:	8a90      	ldrh	r0, [r2, #20]
 8009070:	4403      	add	r3, r0
 8009072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009076:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8009078:	4b20      	ldr	r3, [pc, #128]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 800907a:	8a1a      	ldrh	r2, [r3, #16]
 800907c:	8a5b      	ldrh	r3, [r3, #18]
 800907e:	429a      	cmp	r2, r3
 8009080:	d003      	beq.n	800908a <TRACE_TxCpltCallback+0x32>
 8009082:	481e      	ldr	r0, [pc, #120]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 8009084:	8ac0      	ldrh	r0, [r0, #22]
 8009086:	2801      	cmp	r0, #1
 8009088:	d00b      	beq.n	80090a2 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800908a:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800908e:	f7f9 f845 	bl	800211c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8009092:	f7ff fef5 	bl	8008e80 <TRACE_UnLock>
}
 8009096:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8009098:	4b18      	ldr	r3, [pc, #96]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 800909a:	2200      	movs	r2, #0
 800909c:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800909e:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80090a0:	e7ea      	b.n	8009078 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80090a2:	4816      	ldr	r0, [pc, #88]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 80090a4:	7880      	ldrb	r0, [r0, #2]
 80090a6:	2801      	cmp	r0, #1
 80090a8:	d014      	beq.n	80090d4 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80090aa:	4a14      	ldr	r2, [pc, #80]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 80090ac:	7892      	ldrb	r2, [r2, #2]
 80090ae:	b932      	cbnz	r2, 80090be <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80090b0:	4a12      	ldr	r2, [pc, #72]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 80090b2:	8a12      	ldrh	r2, [r2, #16]
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d91b      	bls.n	80090f0 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80090b8:	1a9b      	subs	r3, r3, r2
 80090ba:	4a10      	ldr	r2, [pc, #64]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 80090bc:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80090be:	4b0f      	ldr	r3, [pc, #60]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 80090c0:	8a18      	ldrh	r0, [r3, #16]
 80090c2:	4a0f      	ldr	r2, [pc, #60]	@ (8009100 <TRACE_TxCpltCallback+0xa8>)
 80090c4:	4410      	add	r0, r2
 80090c6:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80090ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009104 <TRACE_TxCpltCallback+0xac>)
 80090cc:	68d2      	ldr	r2, [r2, #12]
 80090ce:	8a99      	ldrh	r1, [r3, #20]
 80090d0:	4790      	blx	r2
 80090d2:	e7e0      	b.n	8009096 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80090d4:	4c09      	ldr	r4, [pc, #36]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 80090d6:	8820      	ldrh	r0, [r4, #0]
 80090d8:	1a82      	subs	r2, r0, r2
 80090da:	b292      	uxth	r2, r2
 80090dc:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80090de:	2002      	movs	r0, #2
 80090e0:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80090e2:	2000      	movs	r0, #0
 80090e4:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80090e6:	2a00      	cmp	r2, #0
 80090e8:	d1df      	bne.n	80090aa <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80090ea:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80090ec:	8220      	strh	r0, [r4, #16]
 80090ee:	e7dc      	b.n	80090aa <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80090f0:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 80090f4:	4b01      	ldr	r3, [pc, #4]	@ (80090fc <TRACE_TxCpltCallback+0xa4>)
 80090f6:	829a      	strh	r2, [r3, #20]
 80090f8:	e7e1      	b.n	80090be <TRACE_TxCpltCallback+0x66>
 80090fa:	bf00      	nop
 80090fc:	200007dc 	.word	0x200007dc
 8009100:	200005dc 	.word	0x200005dc
 8009104:	0800a93c 	.word	0x0800a93c

08009108 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009108:	2300      	movs	r3, #0
 800910a:	4a02      	ldr	r2, [pc, #8]	@ (8009114 <UTIL_LPM_Init+0xc>)
 800910c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800910e:	4a02      	ldr	r2, [pc, #8]	@ (8009118 <UTIL_LPM_Init+0x10>)
 8009110:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009112:	4770      	bx	lr
 8009114:	200007f8 	.word	0x200007f8
 8009118:	200007f4 	.word	0x200007f4

0800911c <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800911c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009120:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8009122:	b141      	cbz	r1, 8009136 <UTIL_LPM_SetStopMode+0x1a>
 8009124:	2901      	cmp	r1, #1
 8009126:	d103      	bne.n	8009130 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8009128:	4906      	ldr	r1, [pc, #24]	@ (8009144 <UTIL_LPM_SetStopMode+0x28>)
 800912a:	680a      	ldr	r2, [r1, #0]
 800912c:	4302      	orrs	r2, r0
 800912e:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009130:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009134:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8009136:	4903      	ldr	r1, [pc, #12]	@ (8009144 <UTIL_LPM_SetStopMode+0x28>)
 8009138:	680a      	ldr	r2, [r1, #0]
 800913a:	ea22 0200 	bic.w	r2, r2, r0
 800913e:	600a      	str	r2, [r1, #0]
      break;
 8009140:	e7f6      	b.n	8009130 <UTIL_LPM_SetStopMode+0x14>
 8009142:	bf00      	nop
 8009144:	200007f8 	.word	0x200007f8

08009148 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009148:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800914c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800914e:	b141      	cbz	r1, 8009162 <UTIL_LPM_SetOffMode+0x1a>
 8009150:	2901      	cmp	r1, #1
 8009152:	d103      	bne.n	800915c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009154:	4906      	ldr	r1, [pc, #24]	@ (8009170 <UTIL_LPM_SetOffMode+0x28>)
 8009156:	680a      	ldr	r2, [r1, #0]
 8009158:	4302      	orrs	r2, r0
 800915a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009160:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8009162:	4903      	ldr	r1, [pc, #12]	@ (8009170 <UTIL_LPM_SetOffMode+0x28>)
 8009164:	680a      	ldr	r2, [r1, #0]
 8009166:	ea22 0200 	bic.w	r2, r2, r0
 800916a:	600a      	str	r2, [r1, #0]
      break;
 800916c:	e7f6      	b.n	800915c <UTIL_LPM_SetOffMode+0x14>
 800916e:	bf00      	nop
 8009170:	200007f4 	.word	0x200007f4

08009174 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8009174:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009176:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800917a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800917c:	4b0c      	ldr	r3, [pc, #48]	@ (80091b0 <UTIL_LPM_EnterLowPower+0x3c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	b13b      	cbz	r3, 8009192 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009182:	4d0c      	ldr	r5, [pc, #48]	@ (80091b4 <UTIL_LPM_EnterLowPower+0x40>)
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8009188:	686b      	ldr	r3, [r5, #4]
 800918a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800918c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8009190:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8009192:	4b09      	ldr	r3, [pc, #36]	@ (80091b8 <UTIL_LPM_EnterLowPower+0x44>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	b12b      	cbz	r3, 80091a4 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8009198:	4d06      	ldr	r5, [pc, #24]	@ (80091b4 <UTIL_LPM_EnterLowPower+0x40>)
 800919a:	68ab      	ldr	r3, [r5, #8]
 800919c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800919e:	68eb      	ldr	r3, [r5, #12]
 80091a0:	4798      	blx	r3
 80091a2:	e7f3      	b.n	800918c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80091a4:	4d03      	ldr	r5, [pc, #12]	@ (80091b4 <UTIL_LPM_EnterLowPower+0x40>)
 80091a6:	692b      	ldr	r3, [r5, #16]
 80091a8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80091aa:	696b      	ldr	r3, [r5, #20]
 80091ac:	4798      	blx	r3
 80091ae:	e7ed      	b.n	800918c <UTIL_LPM_EnterLowPower+0x18>
 80091b0:	200007f8 	.word	0x200007f8
 80091b4:	0800a8d8 	.word	0x0800a8d8
 80091b8:	200007f4 	.word	0x200007f4

080091bc <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80091bc:	e004      	b.n	80091c8 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80091be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091c2:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80091c6:	461a      	mov	r2, r3
 80091c8:	1e53      	subs	r3, r2, #1
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	d1f6      	bne.n	80091be <UTIL_MEM_cpy_8+0x2>
    }
}
 80091d0:	4770      	bx	lr

080091d2 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80091d2:	e002      	b.n	80091da <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80091d4:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80091d8:	461a      	mov	r2, r3
 80091da:	1e53      	subs	r3, r2, #1
 80091dc:	b29b      	uxth	r3, r3
 80091de:	2a00      	cmp	r2, #0
 80091e0:	d1f8      	bne.n	80091d4 <UTIL_MEM_set_8+0x2>
  }
}
 80091e2:	4770      	bx	lr

080091e4 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80091e4:	4770      	bx	lr

080091e6 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80091e6:	4770      	bx	lr

080091e8 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80091e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80091ec:	d216      	bcs.n	800921c <SEQ_BitPosition+0x34>
 80091ee:	0400      	lsls	r0, r0, #16
 80091f0:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80091f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80091f6:	d202      	bcs.n	80091fe <SEQ_BitPosition+0x16>
 80091f8:	3308      	adds	r3, #8
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80091fe:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8009202:	d202      	bcs.n	800920a <SEQ_BitPosition+0x22>
 8009204:	3304      	adds	r3, #4
 8009206:	b2db      	uxtb	r3, r3
 8009208:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800920a:	0f00      	lsrs	r0, r0, #28
 800920c:	4a04      	ldr	r2, [pc, #16]	@ (8009220 <SEQ_BitPosition+0x38>)
 800920e:	5c10      	ldrb	r0, [r2, r0]
 8009210:	4418      	add	r0, r3
 8009212:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8009214:	f1c0 001f 	rsb	r0, r0, #31
}
 8009218:	b2c0      	uxtb	r0, r0
 800921a:	4770      	bx	lr
uint8_t n = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	e7e8      	b.n	80091f2 <SEQ_BitPosition+0xa>
 8009220:	0800abc0 	.word	0x0800abc0

08009224 <UTIL_SEQ_Run>:
{
 8009224:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8009226:	4b42      	ldr	r3, [pc, #264]	@ (8009330 <UTIL_SEQ_Run+0x10c>)
 8009228:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 800922a:	4020      	ands	r0, r4
 800922c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 800922e:	4b41      	ldr	r3, [pc, #260]	@ (8009334 <UTIL_SEQ_Run+0x110>)
 8009230:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8009232:	4b41      	ldr	r3, [pc, #260]	@ (8009338 <UTIL_SEQ_Run+0x114>)
 8009234:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8009236:	4941      	ldr	r1, [pc, #260]	@ (800933c <UTIL_SEQ_Run+0x118>)
 8009238:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 800923a:	4941      	ldr	r1, [pc, #260]	@ (8009340 <UTIL_SEQ_Run+0x11c>)
 800923c:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800923e:	e02f      	b.n	80092a0 <UTIL_SEQ_Run+0x7c>
      counter++;
 8009240:	3301      	adds	r3, #1
 8009242:	e034      	b.n	80092ae <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009244:	4d3f      	ldr	r5, [pc, #252]	@ (8009344 <UTIL_SEQ_Run+0x120>)
 8009246:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800924a:	6868      	ldr	r0, [r5, #4]
 800924c:	4010      	ands	r0, r2
 800924e:	f7ff ffcb 	bl	80091e8 <SEQ_BitPosition>
 8009252:	4e3d      	ldr	r6, [pc, #244]	@ (8009348 <UTIL_SEQ_Run+0x124>)
 8009254:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009256:	686a      	ldr	r2, [r5, #4]
 8009258:	2301      	movs	r3, #1
 800925a:	fa03 f000 	lsl.w	r0, r3, r0
 800925e:	ea22 0200 	bic.w	r2, r2, r0
 8009262:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009264:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009268:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800926a:	6832      	ldr	r2, [r6, #0]
 800926c:	fa03 f202 	lsl.w	r2, r3, r2
 8009270:	43d6      	mvns	r6, r2
 8009272:	4d30      	ldr	r5, [pc, #192]	@ (8009334 <UTIL_SEQ_Run+0x110>)
 8009274:	6828      	ldr	r0, [r5, #0]
 8009276:	ea20 0202 	bic.w	r2, r0, r2
 800927a:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800927c:	2b00      	cmp	r3, #0
 800927e:	d12d      	bne.n	80092dc <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009280:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8009284:	4b30      	ldr	r3, [pc, #192]	@ (8009348 <UTIL_SEQ_Run+0x124>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	4b30      	ldr	r3, [pc, #192]	@ (800934c <UTIL_SEQ_Run+0x128>)
 800928a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928e:	4798      	blx	r3
    local_taskset = TaskSet;
 8009290:	4b28      	ldr	r3, [pc, #160]	@ (8009334 <UTIL_SEQ_Run+0x110>)
 8009292:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 8009294:	4b28      	ldr	r3, [pc, #160]	@ (8009338 <UTIL_SEQ_Run+0x114>)
 8009296:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8009298:	4928      	ldr	r1, [pc, #160]	@ (800933c <UTIL_SEQ_Run+0x118>)
 800929a:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 800929c:	4928      	ldr	r1, [pc, #160]	@ (8009340 <UTIL_SEQ_Run+0x11c>)
 800929e:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80092a0:	4002      	ands	r2, r0
 80092a2:	4d23      	ldr	r5, [pc, #140]	@ (8009330 <UTIL_SEQ_Run+0x10c>)
 80092a4:	682d      	ldr	r5, [r5, #0]
 80092a6:	422a      	tst	r2, r5
 80092a8:	d020      	beq.n	80092ec <UTIL_SEQ_Run+0xc8>
 80092aa:	400b      	ands	r3, r1
 80092ac:	d11e      	bne.n	80092ec <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80092ae:	4a25      	ldr	r2, [pc, #148]	@ (8009344 <UTIL_SEQ_Run+0x120>)
 80092b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80092b4:	4002      	ands	r2, r0
 80092b6:	422a      	tst	r2, r5
 80092b8:	d0c2      	beq.n	8009240 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80092ba:	4922      	ldr	r1, [pc, #136]	@ (8009344 <UTIL_SEQ_Run+0x120>)
 80092bc:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80092c0:	4002      	ands	r2, r0
 80092c2:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80092c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092c8:	6849      	ldr	r1, [r1, #4]
 80092ca:	4211      	tst	r1, r2
 80092cc:	d1ba      	bne.n	8009244 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80092ce:	491d      	ldr	r1, [pc, #116]	@ (8009344 <UTIL_SEQ_Run+0x120>)
 80092d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295
 80092d8:	6048      	str	r0, [r1, #4]
 80092da:	e7b3      	b.n	8009244 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80092dc:	3b01      	subs	r3, #1
 80092de:	4819      	ldr	r0, [pc, #100]	@ (8009344 <UTIL_SEQ_Run+0x120>)
 80092e0:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 80092e4:	4032      	ands	r2, r6
 80092e6:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80092ea:	e7c7      	b.n	800927c <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80092ec:	4b16      	ldr	r3, [pc, #88]	@ (8009348 <UTIL_SEQ_Run+0x124>)
 80092ee:	f04f 32ff 	mov.w	r2, #4294967295
 80092f2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80092f4:	f7ff ff76 	bl	80091e4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092f8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80092fc:	b672      	cpsid	i
  local_taskset = TaskSet;
 80092fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009334 <UTIL_SEQ_Run+0x110>)
 8009300:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8009302:	4a0d      	ldr	r2, [pc, #52]	@ (8009338 <UTIL_SEQ_Run+0x114>)
 8009304:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8009306:	4a0d      	ldr	r2, [pc, #52]	@ (800933c <UTIL_SEQ_Run+0x118>)
 8009308:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800930a:	4013      	ands	r3, r2
 800930c:	4a08      	ldr	r2, [pc, #32]	@ (8009330 <UTIL_SEQ_Run+0x10c>)
 800930e:	6812      	ldr	r2, [r2, #0]
 8009310:	4213      	tst	r3, r2
 8009312:	d103      	bne.n	800931c <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8009314:	4b0a      	ldr	r3, [pc, #40]	@ (8009340 <UTIL_SEQ_Run+0x11c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	420b      	tst	r3, r1
 800931a:	d006      	beq.n	800932a <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800931c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8009320:	f7ff ff61 	bl	80091e6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8009324:	4b02      	ldr	r3, [pc, #8]	@ (8009330 <UTIL_SEQ_Run+0x10c>)
 8009326:	601c      	str	r4, [r3, #0]
}
 8009328:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 800932a:	f7f8 feed 	bl	8002108 <UTIL_SEQ_Idle>
 800932e:	e7f5      	b.n	800931c <UTIL_SEQ_Run+0xf8>
 8009330:	20000010 	.word	0x20000010
 8009334:	20000814 	.word	0x20000814
 8009338:	20000810 	.word	0x20000810
 800933c:	20000014 	.word	0x20000014
 8009340:	2000080c 	.word	0x2000080c
 8009344:	200007fc 	.word	0x200007fc
 8009348:	20000808 	.word	0x20000808
 800934c:	20000804 	.word	0x20000804

08009350 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8009350:	b082      	sub	sp, #8
 8009352:	b082      	sub	sp, #8
 8009354:	f10d 0c08 	add.w	ip, sp, #8
 8009358:	e90c 0006 	stmdb	ip, {r1, r2}
 800935c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800935e:	2200      	movs	r2, #0
 8009360:	6002      	str	r2, [r0, #0]
 8009362:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8009364:	440b      	add	r3, r1
 8009366:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8009368:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800936c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8009370:	440a      	add	r2, r1
 8009372:	b291      	uxth	r1, r2
 8009374:	b212      	sxth	r2, r2
 8009376:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8009378:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800937c:	db04      	blt.n	8009388 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 800937e:	3301      	adds	r3, #1
 8009380:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8009382:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8009386:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8009388:	b002      	add	sp, #8
 800938a:	b002      	add	sp, #8
 800938c:	4770      	bx	lr
	...

08009390 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8009390:	b530      	push	{r4, r5, lr}
 8009392:	b087      	sub	sp, #28
 8009394:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8009396:	2300      	movs	r3, #0
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800939e:	6003      	str	r3, [r0, #0]
 80093a0:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80093a2:	4d0b      	ldr	r5, [pc, #44]	@ (80093d0 <SysTimeGet+0x40>)
 80093a4:	692b      	ldr	r3, [r5, #16]
 80093a6:	a805      	add	r0, sp, #20
 80093a8:	4798      	blx	r3
 80093aa:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80093ac:	68eb      	ldr	r3, [r5, #12]
 80093ae:	4798      	blx	r3
 80093b0:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80093b4:	686b      	ldr	r3, [r5, #4]
 80093b6:	4798      	blx	r3
 80093b8:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80093ba:	9b05      	ldr	r3, [sp, #20]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	aa02      	add	r2, sp, #8
 80093c2:	ca06      	ldmia	r2, {r1, r2}
 80093c4:	4620      	mov	r0, r4
 80093c6:	f7ff ffc3 	bl	8009350 <SysTimeAdd>

  return sysTime;
}
 80093ca:	4620      	mov	r0, r4
 80093cc:	b007      	add	sp, #28
 80093ce:	bd30      	pop	{r4, r5, pc}
 80093d0:	0800a8fc 	.word	0x0800a8fc

080093d4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80093d4:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80093d6:	4b03      	ldr	r3, [pc, #12]	@ (80093e4 <UTIL_TIMER_Init+0x10>)
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80093dc:	4b02      	ldr	r3, [pc, #8]	@ (80093e8 <UTIL_TIMER_Init+0x14>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4798      	blx	r3
}
 80093e2:	bd08      	pop	{r3, pc}
 80093e4:	20000818 	.word	0x20000818
 80093e8:	0800a910 	.word	0x0800a910

080093ec <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80093ec:	b1a8      	cbz	r0, 800941a <UTIL_TIMER_Create+0x2e>
{
 80093ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f0:	4617      	mov	r7, r2
 80093f2:	461e      	mov	r6, r3
 80093f4:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80093f6:	b193      	cbz	r3, 800941e <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80093f8:	2500      	movs	r5, #0
 80093fa:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80093fc:	4b09      	ldr	r3, [pc, #36]	@ (8009424 <UTIL_TIMER_Create+0x38>)
 80093fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009400:	4608      	mov	r0, r1
 8009402:	4798      	blx	r3
 8009404:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8009406:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8009408:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800940a:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800940c:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800940e:	9b06      	ldr	r3, [sp, #24]
 8009410:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8009412:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8009414:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8009416:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8009418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800941a:	2001      	movs	r0, #1
}
 800941c:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 800941e:	2001      	movs	r0, #1
 8009420:	e7fa      	b.n	8009418 <UTIL_TIMER_Create+0x2c>
 8009422:	bf00      	nop
 8009424:	0800a910 	.word	0x0800a910

08009428 <UTIL_TIMER_IsRunning>:
  return ret;
}

uint32_t UTIL_TIMER_IsRunning( UTIL_TIMER_Object_t *TimerObject )
{
  if( TimerObject != NULL )
 8009428:	b108      	cbz	r0, 800942e <UTIL_TIMER_IsRunning+0x6>
  {
    return TimerObject->IsRunning;
 800942a:	7a40      	ldrb	r0, [r0, #9]
 800942c:	4770      	bx	lr
  }
  else
  {
    return 0;
 800942e:	2000      	movs	r0, #0
  }
}
 8009430:	4770      	bx	lr
	...

08009434 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8009434:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8009436:	4c03      	ldr	r4, [pc, #12]	@ (8009444 <UTIL_TIMER_GetCurrentTime+0x10>)
 8009438:	69e3      	ldr	r3, [r4, #28]
 800943a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800943c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800943e:	4798      	blx	r3
}
 8009440:	bd10      	pop	{r4, pc}
 8009442:	bf00      	nop
 8009444:	0800a910 	.word	0x0800a910

08009448 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800944c:	4d05      	ldr	r5, [pc, #20]	@ (8009464 <UTIL_TIMER_GetElapsedTime+0x1c>)
 800944e:	69eb      	ldr	r3, [r5, #28]
 8009450:	4798      	blx	r3
 8009452:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8009454:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8009456:	4630      	mov	r0, r6
 8009458:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800945a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800945c:	1a20      	subs	r0, r4, r0
 800945e:	4798      	blx	r3
}
 8009460:	bd70      	pop	{r4, r5, r6, pc}
 8009462:	bf00      	nop
 8009464:	0800a910 	.word	0x0800a910

08009468 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009468:	4b05      	ldr	r3, [pc, #20]	@ (8009480 <TimerExists+0x18>)
 800946a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800946c:	e000      	b.n	8009470 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 800946e:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8009470:	b11b      	cbz	r3, 800947a <TimerExists+0x12>
    if( cur == TimerObject )
 8009472:	4283      	cmp	r3, r0
 8009474:	d1fb      	bne.n	800946e <TimerExists+0x6>
      return true;
 8009476:	2001      	movs	r0, #1
  }
  return false;
}
 8009478:	4770      	bx	lr
  return false;
 800947a:	2000      	movs	r0, #0
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	20000818 	.word	0x20000818

08009484 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8009488:	4e09      	ldr	r6, [pc, #36]	@ (80094b0 <TimerSetTimeout+0x2c>)
 800948a:	6a33      	ldr	r3, [r6, #32]
 800948c:	4798      	blx	r3
 800948e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8009490:	2301      	movs	r3, #1
 8009492:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8009494:	6827      	ldr	r7, [r4, #0]
 8009496:	69b6      	ldr	r6, [r6, #24]
 8009498:	47b0      	blx	r6
 800949a:	4428      	add	r0, r5
 800949c:	4287      	cmp	r7, r0
 800949e:	d202      	bcs.n	80094a6 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80094a0:	47b0      	blx	r6
 80094a2:	4428      	add	r0, r5
 80094a4:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80094a6:	4b02      	ldr	r3, [pc, #8]	@ (80094b0 <TimerSetTimeout+0x2c>)
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	6820      	ldr	r0, [r4, #0]
 80094ac:	4798      	blx	r3
}
 80094ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b0:	0800a910 	.word	0x0800a910

080094b4 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80094b4:	b368      	cbz	r0, 8009512 <UTIL_TIMER_Stop+0x5e>
{
 80094b6:	b510      	push	{r4, lr}
 80094b8:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80094be:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80094c0:	4b15      	ldr	r3, [pc, #84]	@ (8009518 <UTIL_TIMER_Stop+0x64>)
 80094c2:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80094c4:	2301      	movs	r3, #1
 80094c6:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 80094c8:	b1e1      	cbz	r1, 8009504 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80094ce:	4288      	cmp	r0, r1
 80094d0:	d006      	beq.n	80094e0 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80094d2:	460b      	mov	r3, r1
        while( cur != NULL )
 80094d4:	b1b3      	cbz	r3, 8009504 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d011      	beq.n	80094fe <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80094da:	4619      	mov	r1, r3
            cur = cur->Next;
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	e7f9      	b.n	80094d4 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80094e0:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80094e2:	6948      	ldr	r0, [r1, #20]
 80094e4:	b120      	cbz	r0, 80094f0 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80094e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009518 <UTIL_TIMER_Stop+0x64>)
 80094e8:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80094ea:	f7ff ffcb 	bl	8009484 <TimerSetTimeout>
 80094ee:	e009      	b.n	8009504 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80094f0:	4b0a      	ldr	r3, [pc, #40]	@ (800951c <UTIL_TIMER_Stop+0x68>)
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	4798      	blx	r3
            TimerListHead = NULL;
 80094f6:	4b08      	ldr	r3, [pc, #32]	@ (8009518 <UTIL_TIMER_Stop+0x64>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	e002      	b.n	8009504 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	b123      	cbz	r3, 800950c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8009502:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009504:	f384 8810 	msr	PRIMASK, r4
}
 8009508:	2000      	movs	r0, #0
}
 800950a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 800950c:	2300      	movs	r3, #0
 800950e:	614b      	str	r3, [r1, #20]
 8009510:	e7f8      	b.n	8009504 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8009512:	2001      	movs	r0, #1
}
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	20000818 	.word	0x20000818
 800951c:	0800a910 	.word	0x0800a910

08009520 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009520:	4b09      	ldr	r3, [pc, #36]	@ (8009548 <TimerInsertTimer+0x28>)
 8009522:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8009524:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8009526:	e001      	b.n	800952c <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8009528:	461a      	mov	r2, r3
        next = next->Next;
 800952a:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 800952c:	6951      	ldr	r1, [r2, #20]
 800952e:	b139      	cbz	r1, 8009540 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8009530:	6819      	ldr	r1, [r3, #0]
 8009532:	f8d0 c000 	ldr.w	ip, [r0]
 8009536:	458c      	cmp	ip, r1
 8009538:	d8f6      	bhi.n	8009528 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 800953a:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800953c:	6143      	str	r3, [r0, #20]
        return;
 800953e:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8009540:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8009542:	2300      	movs	r3, #0
 8009544:	6143      	str	r3, [r0, #20]
}
 8009546:	4770      	bx	lr
 8009548:	20000818 	.word	0x20000818

0800954c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800954c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800954e:	4b05      	ldr	r3, [pc, #20]	@ (8009564 <TimerInsertNewHeadTimer+0x18>)
 8009550:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8009552:	b10b      	cbz	r3, 8009558 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8009554:	2200      	movs	r2, #0
 8009556:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8009558:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800955a:	4b02      	ldr	r3, [pc, #8]	@ (8009564 <TimerInsertNewHeadTimer+0x18>)
 800955c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800955e:	f7ff ff91 	bl	8009484 <TimerSetTimeout>
}
 8009562:	bd08      	pop	{r3, pc}
 8009564:	20000818 	.word	0x20000818

08009568 <UTIL_TIMER_Start>:
{
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800956a:	2800      	cmp	r0, #0
 800956c:	d036      	beq.n	80095dc <UTIL_TIMER_Start+0x74>
 800956e:	4604      	mov	r4, r0
 8009570:	f7ff ff7a 	bl	8009468 <TimerExists>
 8009574:	2800      	cmp	r0, #0
 8009576:	d134      	bne.n	80095e2 <UTIL_TIMER_Start+0x7a>
 8009578:	7a65      	ldrb	r5, [r4, #9]
 800957a:	2d00      	cmp	r5, #0
 800957c:	d133      	bne.n	80095e6 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800957e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009582:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8009584:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8009586:	4b19      	ldr	r3, [pc, #100]	@ (80095ec <UTIL_TIMER_Start+0x84>)
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	4798      	blx	r3
    if( ticks < minValue )
 800958c:	4287      	cmp	r7, r0
 800958e:	d300      	bcc.n	8009592 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8009590:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8009592:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8009598:	2201      	movs	r2, #1
 800959a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800959c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800959e:	4b14      	ldr	r3, [pc, #80]	@ (80095f0 <UTIL_TIMER_Start+0x88>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	b183      	cbz	r3, 80095c6 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80095a4:	4b11      	ldr	r3, [pc, #68]	@ (80095ec <UTIL_TIMER_Start+0x84>)
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	4418      	add	r0, r3
 80095ae:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80095b0:	4b0f      	ldr	r3, [pc, #60]	@ (80095f0 <UTIL_TIMER_Start+0x88>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4298      	cmp	r0, r3
 80095b8:	d20c      	bcs.n	80095d4 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 80095ba:	4620      	mov	r0, r4
 80095bc:	f7ff ffc6 	bl	800954c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c0:	f386 8810 	msr	PRIMASK, r6
}
 80095c4:	e00b      	b.n	80095de <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80095c6:	4b09      	ldr	r3, [pc, #36]	@ (80095ec <UTIL_TIMER_Start+0x84>)
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80095cc:	4620      	mov	r0, r4
 80095ce:	f7ff ffbd 	bl	800954c <TimerInsertNewHeadTimer>
 80095d2:	e7f5      	b.n	80095c0 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80095d4:	4620      	mov	r0, r4
 80095d6:	f7ff ffa3 	bl	8009520 <TimerInsertTimer>
 80095da:	e7f1      	b.n	80095c0 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80095dc:	2501      	movs	r5, #1
}
 80095de:	4628      	mov	r0, r5
 80095e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80095e2:	2501      	movs	r5, #1
 80095e4:	e7fb      	b.n	80095de <UTIL_TIMER_Start+0x76>
 80095e6:	2501      	movs	r5, #1
 80095e8:	e7f9      	b.n	80095de <UTIL_TIMER_Start+0x76>
 80095ea:	bf00      	nop
 80095ec:	0800a910 	.word	0x0800a910
 80095f0:	20000818 	.word	0x20000818

080095f4 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80095f4:	b198      	cbz	r0, 800961e <UTIL_TIMER_SetPeriod+0x2a>
{
 80095f6:	b510      	push	{r4, lr}
 80095f8:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80095fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009624 <UTIL_TIMER_SetPeriod+0x30>)
 80095fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fe:	4608      	mov	r0, r1
 8009600:	4798      	blx	r3
 8009602:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8009604:	4620      	mov	r0, r4
 8009606:	f7ff ff2f 	bl	8009468 <TimerExists>
 800960a:	b908      	cbnz	r0, 8009610 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800960c:	2000      	movs	r0, #0
}
 800960e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8009610:	4620      	mov	r0, r4
 8009612:	f7ff ff4f 	bl	80094b4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8009616:	4620      	mov	r0, r4
 8009618:	f7ff ffa6 	bl	8009568 <UTIL_TIMER_Start>
 800961c:	e7f7      	b.n	800960e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 800961e:	2001      	movs	r0, #1
}
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	0800a910 	.word	0x0800a910

08009628 <UTIL_TIMER_IRQ_Handler>:
{
 8009628:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800962a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800962e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8009630:	4c1e      	ldr	r4, [pc, #120]	@ (80096ac <UTIL_TIMER_IRQ_Handler+0x84>)
 8009632:	6963      	ldr	r3, [r4, #20]
 8009634:	4798      	blx	r3
 8009636:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8009638:	6923      	ldr	r3, [r4, #16]
 800963a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 800963c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 800963e:	4b1c      	ldr	r3, [pc, #112]	@ (80096b0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	b923      	cbnz	r3, 800964e <UTIL_TIMER_IRQ_Handler+0x26>
 8009644:	e018      	b.n	8009678 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8009646:	2200      	movs	r2, #0
 8009648:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800964a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800964c:	b1a3      	cbz	r3, 8009678 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	42a2      	cmp	r2, r4
 8009652:	d9f8      	bls.n	8009646 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8009654:	1a31      	subs	r1, r6, r0
 8009656:	440a      	add	r2, r1
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	e7f6      	b.n	800964a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 800965c:	4b14      	ldr	r3, [pc, #80]	@ (80096b0 <UTIL_TIMER_IRQ_Handler+0x88>)
 800965e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8009660:	6962      	ldr	r2, [r4, #20]
 8009662:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8009668:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 800966a:	68e3      	ldr	r3, [r4, #12]
 800966c:	6920      	ldr	r0, [r4, #16]
 800966e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8009670:	8963      	ldrh	r3, [r4, #10]
 8009672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009676:	d012      	beq.n	800969e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8009678:	4b0d      	ldr	r3, [pc, #52]	@ (80096b0 <UTIL_TIMER_IRQ_Handler+0x88>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	b13b      	cbz	r3, 800968e <UTIL_TIMER_IRQ_Handler+0x66>
 800967e:	681c      	ldr	r4, [r3, #0]
 8009680:	2c00      	cmp	r4, #0
 8009682:	d0eb      	beq.n	800965c <UTIL_TIMER_IRQ_Handler+0x34>
 8009684:	4b09      	ldr	r3, [pc, #36]	@ (80096ac <UTIL_TIMER_IRQ_Handler+0x84>)
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	4798      	blx	r3
 800968a:	4284      	cmp	r4, r0
 800968c:	d3e6      	bcc.n	800965c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800968e:	4b08      	ldr	r3, [pc, #32]	@ (80096b0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	b108      	cbz	r0, 8009698 <UTIL_TIMER_IRQ_Handler+0x70>
 8009694:	7a03      	ldrb	r3, [r0, #8]
 8009696:	b133      	cbz	r3, 80096a6 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009698:	f385 8810 	msr	PRIMASK, r5
}
 800969c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 800969e:	4620      	mov	r0, r4
 80096a0:	f7ff ff62 	bl	8009568 <UTIL_TIMER_Start>
 80096a4:	e7e8      	b.n	8009678 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80096a6:	f7ff feed 	bl	8009484 <TimerSetTimeout>
 80096aa:	e7f5      	b.n	8009698 <UTIL_TIMER_IRQ_Handler+0x70>
 80096ac:	0800a910 	.word	0x0800a910
 80096b0:	20000818 	.word	0x20000818

080096b4 <_vsniprintf_r>:
 80096b4:	b530      	push	{r4, r5, lr}
 80096b6:	4614      	mov	r4, r2
 80096b8:	2c00      	cmp	r4, #0
 80096ba:	b09b      	sub	sp, #108	@ 0x6c
 80096bc:	4605      	mov	r5, r0
 80096be:	461a      	mov	r2, r3
 80096c0:	da05      	bge.n	80096ce <_vsniprintf_r+0x1a>
 80096c2:	238b      	movs	r3, #139	@ 0x8b
 80096c4:	6003      	str	r3, [r0, #0]
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ca:	b01b      	add	sp, #108	@ 0x6c
 80096cc:	bd30      	pop	{r4, r5, pc}
 80096ce:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80096d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80096d6:	bf14      	ite	ne
 80096d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80096dc:	4623      	moveq	r3, r4
 80096de:	9302      	str	r3, [sp, #8]
 80096e0:	9305      	str	r3, [sp, #20]
 80096e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80096e6:	9100      	str	r1, [sp, #0]
 80096e8:	9104      	str	r1, [sp, #16]
 80096ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80096ee:	4669      	mov	r1, sp
 80096f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80096f2:	f000 f9af 	bl	8009a54 <_svfiprintf_r>
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	bfbc      	itt	lt
 80096fa:	238b      	movlt	r3, #139	@ 0x8b
 80096fc:	602b      	strlt	r3, [r5, #0]
 80096fe:	2c00      	cmp	r4, #0
 8009700:	d0e3      	beq.n	80096ca <_vsniprintf_r+0x16>
 8009702:	9b00      	ldr	r3, [sp, #0]
 8009704:	2200      	movs	r2, #0
 8009706:	701a      	strb	r2, [r3, #0]
 8009708:	e7df      	b.n	80096ca <_vsniprintf_r+0x16>
	...

0800970c <vsniprintf>:
 800970c:	b507      	push	{r0, r1, r2, lr}
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	4613      	mov	r3, r2
 8009712:	460a      	mov	r2, r1
 8009714:	4601      	mov	r1, r0
 8009716:	4803      	ldr	r0, [pc, #12]	@ (8009724 <vsniprintf+0x18>)
 8009718:	6800      	ldr	r0, [r0, #0]
 800971a:	f7ff ffcb 	bl	80096b4 <_vsniprintf_r>
 800971e:	b003      	add	sp, #12
 8009720:	f85d fb04 	ldr.w	pc, [sp], #4
 8009724:	20000018 	.word	0x20000018

08009728 <memset>:
 8009728:	4402      	add	r2, r0
 800972a:	4603      	mov	r3, r0
 800972c:	4293      	cmp	r3, r2
 800972e:	d100      	bne.n	8009732 <memset+0xa>
 8009730:	4770      	bx	lr
 8009732:	f803 1b01 	strb.w	r1, [r3], #1
 8009736:	e7f9      	b.n	800972c <memset+0x4>

08009738 <__errno>:
 8009738:	4b01      	ldr	r3, [pc, #4]	@ (8009740 <__errno+0x8>)
 800973a:	6818      	ldr	r0, [r3, #0]
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	20000018 	.word	0x20000018

08009744 <__libc_init_array>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	4d0d      	ldr	r5, [pc, #52]	@ (800977c <__libc_init_array+0x38>)
 8009748:	4c0d      	ldr	r4, [pc, #52]	@ (8009780 <__libc_init_array+0x3c>)
 800974a:	1b64      	subs	r4, r4, r5
 800974c:	10a4      	asrs	r4, r4, #2
 800974e:	2600      	movs	r6, #0
 8009750:	42a6      	cmp	r6, r4
 8009752:	d109      	bne.n	8009768 <__libc_init_array+0x24>
 8009754:	4d0b      	ldr	r5, [pc, #44]	@ (8009784 <__libc_init_array+0x40>)
 8009756:	4c0c      	ldr	r4, [pc, #48]	@ (8009788 <__libc_init_array+0x44>)
 8009758:	f000 fc66 	bl	800a028 <_init>
 800975c:	1b64      	subs	r4, r4, r5
 800975e:	10a4      	asrs	r4, r4, #2
 8009760:	2600      	movs	r6, #0
 8009762:	42a6      	cmp	r6, r4
 8009764:	d105      	bne.n	8009772 <__libc_init_array+0x2e>
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	f855 3b04 	ldr.w	r3, [r5], #4
 800976c:	4798      	blx	r3
 800976e:	3601      	adds	r6, #1
 8009770:	e7ee      	b.n	8009750 <__libc_init_array+0xc>
 8009772:	f855 3b04 	ldr.w	r3, [r5], #4
 8009776:	4798      	blx	r3
 8009778:	3601      	adds	r6, #1
 800977a:	e7f2      	b.n	8009762 <__libc_init_array+0x1e>
 800977c:	0800ac10 	.word	0x0800ac10
 8009780:	0800ac10 	.word	0x0800ac10
 8009784:	0800ac10 	.word	0x0800ac10
 8009788:	0800ac14 	.word	0x0800ac14

0800978c <__retarget_lock_acquire_recursive>:
 800978c:	4770      	bx	lr

0800978e <__retarget_lock_release_recursive>:
 800978e:	4770      	bx	lr

08009790 <memcpy>:
 8009790:	440a      	add	r2, r1
 8009792:	4291      	cmp	r1, r2
 8009794:	f100 33ff 	add.w	r3, r0, #4294967295
 8009798:	d100      	bne.n	800979c <memcpy+0xc>
 800979a:	4770      	bx	lr
 800979c:	b510      	push	{r4, lr}
 800979e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097a6:	4291      	cmp	r1, r2
 80097a8:	d1f9      	bne.n	800979e <memcpy+0xe>
 80097aa:	bd10      	pop	{r4, pc}

080097ac <_free_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4605      	mov	r5, r0
 80097b0:	2900      	cmp	r1, #0
 80097b2:	d041      	beq.n	8009838 <_free_r+0x8c>
 80097b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097b8:	1f0c      	subs	r4, r1, #4
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	bfb8      	it	lt
 80097be:	18e4      	addlt	r4, r4, r3
 80097c0:	f000 f8e0 	bl	8009984 <__malloc_lock>
 80097c4:	4a1d      	ldr	r2, [pc, #116]	@ (800983c <_free_r+0x90>)
 80097c6:	6813      	ldr	r3, [r2, #0]
 80097c8:	b933      	cbnz	r3, 80097d8 <_free_r+0x2c>
 80097ca:	6063      	str	r3, [r4, #4]
 80097cc:	6014      	str	r4, [r2, #0]
 80097ce:	4628      	mov	r0, r5
 80097d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d4:	f000 b8dc 	b.w	8009990 <__malloc_unlock>
 80097d8:	42a3      	cmp	r3, r4
 80097da:	d908      	bls.n	80097ee <_free_r+0x42>
 80097dc:	6820      	ldr	r0, [r4, #0]
 80097de:	1821      	adds	r1, r4, r0
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf01      	itttt	eq
 80097e4:	6819      	ldreq	r1, [r3, #0]
 80097e6:	685b      	ldreq	r3, [r3, #4]
 80097e8:	1809      	addeq	r1, r1, r0
 80097ea:	6021      	streq	r1, [r4, #0]
 80097ec:	e7ed      	b.n	80097ca <_free_r+0x1e>
 80097ee:	461a      	mov	r2, r3
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	b10b      	cbz	r3, 80097f8 <_free_r+0x4c>
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	d9fa      	bls.n	80097ee <_free_r+0x42>
 80097f8:	6811      	ldr	r1, [r2, #0]
 80097fa:	1850      	adds	r0, r2, r1
 80097fc:	42a0      	cmp	r0, r4
 80097fe:	d10b      	bne.n	8009818 <_free_r+0x6c>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	4401      	add	r1, r0
 8009804:	1850      	adds	r0, r2, r1
 8009806:	4283      	cmp	r3, r0
 8009808:	6011      	str	r1, [r2, #0]
 800980a:	d1e0      	bne.n	80097ce <_free_r+0x22>
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	6053      	str	r3, [r2, #4]
 8009812:	4408      	add	r0, r1
 8009814:	6010      	str	r0, [r2, #0]
 8009816:	e7da      	b.n	80097ce <_free_r+0x22>
 8009818:	d902      	bls.n	8009820 <_free_r+0x74>
 800981a:	230c      	movs	r3, #12
 800981c:	602b      	str	r3, [r5, #0]
 800981e:	e7d6      	b.n	80097ce <_free_r+0x22>
 8009820:	6820      	ldr	r0, [r4, #0]
 8009822:	1821      	adds	r1, r4, r0
 8009824:	428b      	cmp	r3, r1
 8009826:	bf04      	itt	eq
 8009828:	6819      	ldreq	r1, [r3, #0]
 800982a:	685b      	ldreq	r3, [r3, #4]
 800982c:	6063      	str	r3, [r4, #4]
 800982e:	bf04      	itt	eq
 8009830:	1809      	addeq	r1, r1, r0
 8009832:	6021      	streq	r1, [r4, #0]
 8009834:	6054      	str	r4, [r2, #4]
 8009836:	e7ca      	b.n	80097ce <_free_r+0x22>
 8009838:	bd38      	pop	{r3, r4, r5, pc}
 800983a:	bf00      	nop
 800983c:	20000960 	.word	0x20000960

08009840 <sbrk_aligned>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4e0f      	ldr	r6, [pc, #60]	@ (8009880 <sbrk_aligned+0x40>)
 8009844:	460c      	mov	r4, r1
 8009846:	6831      	ldr	r1, [r6, #0]
 8009848:	4605      	mov	r5, r0
 800984a:	b911      	cbnz	r1, 8009852 <sbrk_aligned+0x12>
 800984c:	f000 fba6 	bl	8009f9c <_sbrk_r>
 8009850:	6030      	str	r0, [r6, #0]
 8009852:	4621      	mov	r1, r4
 8009854:	4628      	mov	r0, r5
 8009856:	f000 fba1 	bl	8009f9c <_sbrk_r>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d103      	bne.n	8009866 <sbrk_aligned+0x26>
 800985e:	f04f 34ff 	mov.w	r4, #4294967295
 8009862:	4620      	mov	r0, r4
 8009864:	bd70      	pop	{r4, r5, r6, pc}
 8009866:	1cc4      	adds	r4, r0, #3
 8009868:	f024 0403 	bic.w	r4, r4, #3
 800986c:	42a0      	cmp	r0, r4
 800986e:	d0f8      	beq.n	8009862 <sbrk_aligned+0x22>
 8009870:	1a21      	subs	r1, r4, r0
 8009872:	4628      	mov	r0, r5
 8009874:	f000 fb92 	bl	8009f9c <_sbrk_r>
 8009878:	3001      	adds	r0, #1
 800987a:	d1f2      	bne.n	8009862 <sbrk_aligned+0x22>
 800987c:	e7ef      	b.n	800985e <sbrk_aligned+0x1e>
 800987e:	bf00      	nop
 8009880:	2000095c 	.word	0x2000095c

08009884 <_malloc_r>:
 8009884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009888:	1ccd      	adds	r5, r1, #3
 800988a:	f025 0503 	bic.w	r5, r5, #3
 800988e:	3508      	adds	r5, #8
 8009890:	2d0c      	cmp	r5, #12
 8009892:	bf38      	it	cc
 8009894:	250c      	movcc	r5, #12
 8009896:	2d00      	cmp	r5, #0
 8009898:	4606      	mov	r6, r0
 800989a:	db01      	blt.n	80098a0 <_malloc_r+0x1c>
 800989c:	42a9      	cmp	r1, r5
 800989e:	d904      	bls.n	80098aa <_malloc_r+0x26>
 80098a0:	230c      	movs	r3, #12
 80098a2:	6033      	str	r3, [r6, #0]
 80098a4:	2000      	movs	r0, #0
 80098a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009980 <_malloc_r+0xfc>
 80098ae:	f000 f869 	bl	8009984 <__malloc_lock>
 80098b2:	f8d8 3000 	ldr.w	r3, [r8]
 80098b6:	461c      	mov	r4, r3
 80098b8:	bb44      	cbnz	r4, 800990c <_malloc_r+0x88>
 80098ba:	4629      	mov	r1, r5
 80098bc:	4630      	mov	r0, r6
 80098be:	f7ff ffbf 	bl	8009840 <sbrk_aligned>
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	4604      	mov	r4, r0
 80098c6:	d158      	bne.n	800997a <_malloc_r+0xf6>
 80098c8:	f8d8 4000 	ldr.w	r4, [r8]
 80098cc:	4627      	mov	r7, r4
 80098ce:	2f00      	cmp	r7, #0
 80098d0:	d143      	bne.n	800995a <_malloc_r+0xd6>
 80098d2:	2c00      	cmp	r4, #0
 80098d4:	d04b      	beq.n	800996e <_malloc_r+0xea>
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	4639      	mov	r1, r7
 80098da:	4630      	mov	r0, r6
 80098dc:	eb04 0903 	add.w	r9, r4, r3
 80098e0:	f000 fb5c 	bl	8009f9c <_sbrk_r>
 80098e4:	4581      	cmp	r9, r0
 80098e6:	d142      	bne.n	800996e <_malloc_r+0xea>
 80098e8:	6821      	ldr	r1, [r4, #0]
 80098ea:	1a6d      	subs	r5, r5, r1
 80098ec:	4629      	mov	r1, r5
 80098ee:	4630      	mov	r0, r6
 80098f0:	f7ff ffa6 	bl	8009840 <sbrk_aligned>
 80098f4:	3001      	adds	r0, #1
 80098f6:	d03a      	beq.n	800996e <_malloc_r+0xea>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	442b      	add	r3, r5
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	bb62      	cbnz	r2, 8009960 <_malloc_r+0xdc>
 8009906:	f8c8 7000 	str.w	r7, [r8]
 800990a:	e00f      	b.n	800992c <_malloc_r+0xa8>
 800990c:	6822      	ldr	r2, [r4, #0]
 800990e:	1b52      	subs	r2, r2, r5
 8009910:	d420      	bmi.n	8009954 <_malloc_r+0xd0>
 8009912:	2a0b      	cmp	r2, #11
 8009914:	d917      	bls.n	8009946 <_malloc_r+0xc2>
 8009916:	1961      	adds	r1, r4, r5
 8009918:	42a3      	cmp	r3, r4
 800991a:	6025      	str	r5, [r4, #0]
 800991c:	bf18      	it	ne
 800991e:	6059      	strne	r1, [r3, #4]
 8009920:	6863      	ldr	r3, [r4, #4]
 8009922:	bf08      	it	eq
 8009924:	f8c8 1000 	streq.w	r1, [r8]
 8009928:	5162      	str	r2, [r4, r5]
 800992a:	604b      	str	r3, [r1, #4]
 800992c:	4630      	mov	r0, r6
 800992e:	f000 f82f 	bl	8009990 <__malloc_unlock>
 8009932:	f104 000b 	add.w	r0, r4, #11
 8009936:	1d23      	adds	r3, r4, #4
 8009938:	f020 0007 	bic.w	r0, r0, #7
 800993c:	1ac2      	subs	r2, r0, r3
 800993e:	bf1c      	itt	ne
 8009940:	1a1b      	subne	r3, r3, r0
 8009942:	50a3      	strne	r3, [r4, r2]
 8009944:	e7af      	b.n	80098a6 <_malloc_r+0x22>
 8009946:	6862      	ldr	r2, [r4, #4]
 8009948:	42a3      	cmp	r3, r4
 800994a:	bf0c      	ite	eq
 800994c:	f8c8 2000 	streq.w	r2, [r8]
 8009950:	605a      	strne	r2, [r3, #4]
 8009952:	e7eb      	b.n	800992c <_malloc_r+0xa8>
 8009954:	4623      	mov	r3, r4
 8009956:	6864      	ldr	r4, [r4, #4]
 8009958:	e7ae      	b.n	80098b8 <_malloc_r+0x34>
 800995a:	463c      	mov	r4, r7
 800995c:	687f      	ldr	r7, [r7, #4]
 800995e:	e7b6      	b.n	80098ce <_malloc_r+0x4a>
 8009960:	461a      	mov	r2, r3
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	42a3      	cmp	r3, r4
 8009966:	d1fb      	bne.n	8009960 <_malloc_r+0xdc>
 8009968:	2300      	movs	r3, #0
 800996a:	6053      	str	r3, [r2, #4]
 800996c:	e7de      	b.n	800992c <_malloc_r+0xa8>
 800996e:	230c      	movs	r3, #12
 8009970:	6033      	str	r3, [r6, #0]
 8009972:	4630      	mov	r0, r6
 8009974:	f000 f80c 	bl	8009990 <__malloc_unlock>
 8009978:	e794      	b.n	80098a4 <_malloc_r+0x20>
 800997a:	6005      	str	r5, [r0, #0]
 800997c:	e7d6      	b.n	800992c <_malloc_r+0xa8>
 800997e:	bf00      	nop
 8009980:	20000960 	.word	0x20000960

08009984 <__malloc_lock>:
 8009984:	4801      	ldr	r0, [pc, #4]	@ (800998c <__malloc_lock+0x8>)
 8009986:	f7ff bf01 	b.w	800978c <__retarget_lock_acquire_recursive>
 800998a:	bf00      	nop
 800998c:	20000958 	.word	0x20000958

08009990 <__malloc_unlock>:
 8009990:	4801      	ldr	r0, [pc, #4]	@ (8009998 <__malloc_unlock+0x8>)
 8009992:	f7ff befc 	b.w	800978e <__retarget_lock_release_recursive>
 8009996:	bf00      	nop
 8009998:	20000958 	.word	0x20000958

0800999c <__ssputs_r>:
 800999c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a0:	688e      	ldr	r6, [r1, #8]
 80099a2:	461f      	mov	r7, r3
 80099a4:	42be      	cmp	r6, r7
 80099a6:	680b      	ldr	r3, [r1, #0]
 80099a8:	4682      	mov	sl, r0
 80099aa:	460c      	mov	r4, r1
 80099ac:	4690      	mov	r8, r2
 80099ae:	d82d      	bhi.n	8009a0c <__ssputs_r+0x70>
 80099b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099b8:	d026      	beq.n	8009a08 <__ssputs_r+0x6c>
 80099ba:	6965      	ldr	r5, [r4, #20]
 80099bc:	6909      	ldr	r1, [r1, #16]
 80099be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099c2:	eba3 0901 	sub.w	r9, r3, r1
 80099c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099ca:	1c7b      	adds	r3, r7, #1
 80099cc:	444b      	add	r3, r9
 80099ce:	106d      	asrs	r5, r5, #1
 80099d0:	429d      	cmp	r5, r3
 80099d2:	bf38      	it	cc
 80099d4:	461d      	movcc	r5, r3
 80099d6:	0553      	lsls	r3, r2, #21
 80099d8:	d527      	bpl.n	8009a2a <__ssputs_r+0x8e>
 80099da:	4629      	mov	r1, r5
 80099dc:	f7ff ff52 	bl	8009884 <_malloc_r>
 80099e0:	4606      	mov	r6, r0
 80099e2:	b360      	cbz	r0, 8009a3e <__ssputs_r+0xa2>
 80099e4:	6921      	ldr	r1, [r4, #16]
 80099e6:	464a      	mov	r2, r9
 80099e8:	f7ff fed2 	bl	8009790 <memcpy>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099f6:	81a3      	strh	r3, [r4, #12]
 80099f8:	6126      	str	r6, [r4, #16]
 80099fa:	6165      	str	r5, [r4, #20]
 80099fc:	444e      	add	r6, r9
 80099fe:	eba5 0509 	sub.w	r5, r5, r9
 8009a02:	6026      	str	r6, [r4, #0]
 8009a04:	60a5      	str	r5, [r4, #8]
 8009a06:	463e      	mov	r6, r7
 8009a08:	42be      	cmp	r6, r7
 8009a0a:	d900      	bls.n	8009a0e <__ssputs_r+0x72>
 8009a0c:	463e      	mov	r6, r7
 8009a0e:	6820      	ldr	r0, [r4, #0]
 8009a10:	4632      	mov	r2, r6
 8009a12:	4641      	mov	r1, r8
 8009a14:	f000 faa8 	bl	8009f68 <memmove>
 8009a18:	68a3      	ldr	r3, [r4, #8]
 8009a1a:	1b9b      	subs	r3, r3, r6
 8009a1c:	60a3      	str	r3, [r4, #8]
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	4433      	add	r3, r6
 8009a22:	6023      	str	r3, [r4, #0]
 8009a24:	2000      	movs	r0, #0
 8009a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2a:	462a      	mov	r2, r5
 8009a2c:	f000 fac6 	bl	8009fbc <_realloc_r>
 8009a30:	4606      	mov	r6, r0
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d1e0      	bne.n	80099f8 <__ssputs_r+0x5c>
 8009a36:	6921      	ldr	r1, [r4, #16]
 8009a38:	4650      	mov	r0, sl
 8009a3a:	f7ff feb7 	bl	80097ac <_free_r>
 8009a3e:	230c      	movs	r3, #12
 8009a40:	f8ca 3000 	str.w	r3, [sl]
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a4a:	81a3      	strh	r3, [r4, #12]
 8009a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a50:	e7e9      	b.n	8009a26 <__ssputs_r+0x8a>
	...

08009a54 <_svfiprintf_r>:
 8009a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a58:	4698      	mov	r8, r3
 8009a5a:	898b      	ldrh	r3, [r1, #12]
 8009a5c:	061b      	lsls	r3, r3, #24
 8009a5e:	b09d      	sub	sp, #116	@ 0x74
 8009a60:	4607      	mov	r7, r0
 8009a62:	460d      	mov	r5, r1
 8009a64:	4614      	mov	r4, r2
 8009a66:	d510      	bpl.n	8009a8a <_svfiprintf_r+0x36>
 8009a68:	690b      	ldr	r3, [r1, #16]
 8009a6a:	b973      	cbnz	r3, 8009a8a <_svfiprintf_r+0x36>
 8009a6c:	2140      	movs	r1, #64	@ 0x40
 8009a6e:	f7ff ff09 	bl	8009884 <_malloc_r>
 8009a72:	6028      	str	r0, [r5, #0]
 8009a74:	6128      	str	r0, [r5, #16]
 8009a76:	b930      	cbnz	r0, 8009a86 <_svfiprintf_r+0x32>
 8009a78:	230c      	movs	r3, #12
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	b01d      	add	sp, #116	@ 0x74
 8009a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a86:	2340      	movs	r3, #64	@ 0x40
 8009a88:	616b      	str	r3, [r5, #20]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a8e:	2320      	movs	r3, #32
 8009a90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a98:	2330      	movs	r3, #48	@ 0x30
 8009a9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c38 <_svfiprintf_r+0x1e4>
 8009a9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009aa2:	f04f 0901 	mov.w	r9, #1
 8009aa6:	4623      	mov	r3, r4
 8009aa8:	469a      	mov	sl, r3
 8009aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aae:	b10a      	cbz	r2, 8009ab4 <_svfiprintf_r+0x60>
 8009ab0:	2a25      	cmp	r2, #37	@ 0x25
 8009ab2:	d1f9      	bne.n	8009aa8 <_svfiprintf_r+0x54>
 8009ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ab8:	d00b      	beq.n	8009ad2 <_svfiprintf_r+0x7e>
 8009aba:	465b      	mov	r3, fp
 8009abc:	4622      	mov	r2, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	f7ff ff6b 	bl	800999c <__ssputs_r>
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f000 80a7 	beq.w	8009c1a <_svfiprintf_r+0x1c6>
 8009acc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ace:	445a      	add	r2, fp
 8009ad0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f000 809f 	beq.w	8009c1a <_svfiprintf_r+0x1c6>
 8009adc:	2300      	movs	r3, #0
 8009ade:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae6:	f10a 0a01 	add.w	sl, sl, #1
 8009aea:	9304      	str	r3, [sp, #16]
 8009aec:	9307      	str	r3, [sp, #28]
 8009aee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009af2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009af4:	4654      	mov	r4, sl
 8009af6:	2205      	movs	r2, #5
 8009af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afc:	484e      	ldr	r0, [pc, #312]	@ (8009c38 <_svfiprintf_r+0x1e4>)
 8009afe:	f7f6 fb47 	bl	8000190 <memchr>
 8009b02:	9a04      	ldr	r2, [sp, #16]
 8009b04:	b9d8      	cbnz	r0, 8009b3e <_svfiprintf_r+0xea>
 8009b06:	06d0      	lsls	r0, r2, #27
 8009b08:	bf44      	itt	mi
 8009b0a:	2320      	movmi	r3, #32
 8009b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b10:	0711      	lsls	r1, r2, #28
 8009b12:	bf44      	itt	mi
 8009b14:	232b      	movmi	r3, #43	@ 0x2b
 8009b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b20:	d015      	beq.n	8009b4e <_svfiprintf_r+0xfa>
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	4654      	mov	r4, sl
 8009b26:	2000      	movs	r0, #0
 8009b28:	f04f 0c0a 	mov.w	ip, #10
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b32:	3b30      	subs	r3, #48	@ 0x30
 8009b34:	2b09      	cmp	r3, #9
 8009b36:	d94b      	bls.n	8009bd0 <_svfiprintf_r+0x17c>
 8009b38:	b1b0      	cbz	r0, 8009b68 <_svfiprintf_r+0x114>
 8009b3a:	9207      	str	r2, [sp, #28]
 8009b3c:	e014      	b.n	8009b68 <_svfiprintf_r+0x114>
 8009b3e:	eba0 0308 	sub.w	r3, r0, r8
 8009b42:	fa09 f303 	lsl.w	r3, r9, r3
 8009b46:	4313      	orrs	r3, r2
 8009b48:	9304      	str	r3, [sp, #16]
 8009b4a:	46a2      	mov	sl, r4
 8009b4c:	e7d2      	b.n	8009af4 <_svfiprintf_r+0xa0>
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	1d19      	adds	r1, r3, #4
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	9103      	str	r1, [sp, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	bfbb      	ittet	lt
 8009b5a:	425b      	neglt	r3, r3
 8009b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b60:	9307      	strge	r3, [sp, #28]
 8009b62:	9307      	strlt	r3, [sp, #28]
 8009b64:	bfb8      	it	lt
 8009b66:	9204      	strlt	r2, [sp, #16]
 8009b68:	7823      	ldrb	r3, [r4, #0]
 8009b6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b6c:	d10a      	bne.n	8009b84 <_svfiprintf_r+0x130>
 8009b6e:	7863      	ldrb	r3, [r4, #1]
 8009b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b72:	d132      	bne.n	8009bda <_svfiprintf_r+0x186>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	1d1a      	adds	r2, r3, #4
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	9203      	str	r2, [sp, #12]
 8009b7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b80:	3402      	adds	r4, #2
 8009b82:	9305      	str	r3, [sp, #20]
 8009b84:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009c3c <_svfiprintf_r+0x1e8>
 8009b88:	7821      	ldrb	r1, [r4, #0]
 8009b8a:	2203      	movs	r2, #3
 8009b8c:	4650      	mov	r0, sl
 8009b8e:	f7f6 faff 	bl	8000190 <memchr>
 8009b92:	b138      	cbz	r0, 8009ba4 <_svfiprintf_r+0x150>
 8009b94:	9b04      	ldr	r3, [sp, #16]
 8009b96:	eba0 000a 	sub.w	r0, r0, sl
 8009b9a:	2240      	movs	r2, #64	@ 0x40
 8009b9c:	4082      	lsls	r2, r0
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	3401      	adds	r4, #1
 8009ba2:	9304      	str	r3, [sp, #16]
 8009ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba8:	4825      	ldr	r0, [pc, #148]	@ (8009c40 <_svfiprintf_r+0x1ec>)
 8009baa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bae:	2206      	movs	r2, #6
 8009bb0:	f7f6 faee 	bl	8000190 <memchr>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d036      	beq.n	8009c26 <_svfiprintf_r+0x1d2>
 8009bb8:	4b22      	ldr	r3, [pc, #136]	@ (8009c44 <_svfiprintf_r+0x1f0>)
 8009bba:	bb1b      	cbnz	r3, 8009c04 <_svfiprintf_r+0x1b0>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	3307      	adds	r3, #7
 8009bc0:	f023 0307 	bic.w	r3, r3, #7
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bca:	4433      	add	r3, r6
 8009bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bce:	e76a      	b.n	8009aa6 <_svfiprintf_r+0x52>
 8009bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	e7a8      	b.n	8009b2c <_svfiprintf_r+0xd8>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	3401      	adds	r4, #1
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	4619      	mov	r1, r3
 8009be2:	f04f 0c0a 	mov.w	ip, #10
 8009be6:	4620      	mov	r0, r4
 8009be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bec:	3a30      	subs	r2, #48	@ 0x30
 8009bee:	2a09      	cmp	r2, #9
 8009bf0:	d903      	bls.n	8009bfa <_svfiprintf_r+0x1a6>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0c6      	beq.n	8009b84 <_svfiprintf_r+0x130>
 8009bf6:	9105      	str	r1, [sp, #20]
 8009bf8:	e7c4      	b.n	8009b84 <_svfiprintf_r+0x130>
 8009bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bfe:	4604      	mov	r4, r0
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7f0      	b.n	8009be6 <_svfiprintf_r+0x192>
 8009c04:	ab03      	add	r3, sp, #12
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	462a      	mov	r2, r5
 8009c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009c48 <_svfiprintf_r+0x1f4>)
 8009c0c:	a904      	add	r1, sp, #16
 8009c0e:	4638      	mov	r0, r7
 8009c10:	f3af 8000 	nop.w
 8009c14:	1c42      	adds	r2, r0, #1
 8009c16:	4606      	mov	r6, r0
 8009c18:	d1d6      	bne.n	8009bc8 <_svfiprintf_r+0x174>
 8009c1a:	89ab      	ldrh	r3, [r5, #12]
 8009c1c:	065b      	lsls	r3, r3, #25
 8009c1e:	f53f af2d 	bmi.w	8009a7c <_svfiprintf_r+0x28>
 8009c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c24:	e72c      	b.n	8009a80 <_svfiprintf_r+0x2c>
 8009c26:	ab03      	add	r3, sp, #12
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	4b06      	ldr	r3, [pc, #24]	@ (8009c48 <_svfiprintf_r+0x1f4>)
 8009c2e:	a904      	add	r1, sp, #16
 8009c30:	4638      	mov	r0, r7
 8009c32:	f000 f879 	bl	8009d28 <_printf_i>
 8009c36:	e7ed      	b.n	8009c14 <_svfiprintf_r+0x1c0>
 8009c38:	0800abd0 	.word	0x0800abd0
 8009c3c:	0800abd6 	.word	0x0800abd6
 8009c40:	0800abda 	.word	0x0800abda
 8009c44:	00000000 	.word	0x00000000
 8009c48:	0800999d 	.word	0x0800999d

08009c4c <_printf_common>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	4616      	mov	r6, r2
 8009c52:	4698      	mov	r8, r3
 8009c54:	688a      	ldr	r2, [r1, #8]
 8009c56:	690b      	ldr	r3, [r1, #16]
 8009c58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	bfb8      	it	lt
 8009c60:	4613      	movlt	r3, r2
 8009c62:	6033      	str	r3, [r6, #0]
 8009c64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c68:	4607      	mov	r7, r0
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	b10a      	cbz	r2, 8009c72 <_printf_common+0x26>
 8009c6e:	3301      	adds	r3, #1
 8009c70:	6033      	str	r3, [r6, #0]
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	0699      	lsls	r1, r3, #26
 8009c76:	bf42      	ittt	mi
 8009c78:	6833      	ldrmi	r3, [r6, #0]
 8009c7a:	3302      	addmi	r3, #2
 8009c7c:	6033      	strmi	r3, [r6, #0]
 8009c7e:	6825      	ldr	r5, [r4, #0]
 8009c80:	f015 0506 	ands.w	r5, r5, #6
 8009c84:	d106      	bne.n	8009c94 <_printf_common+0x48>
 8009c86:	f104 0a19 	add.w	sl, r4, #25
 8009c8a:	68e3      	ldr	r3, [r4, #12]
 8009c8c:	6832      	ldr	r2, [r6, #0]
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	42ab      	cmp	r3, r5
 8009c92:	dc26      	bgt.n	8009ce2 <_printf_common+0x96>
 8009c94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c98:	6822      	ldr	r2, [r4, #0]
 8009c9a:	3b00      	subs	r3, #0
 8009c9c:	bf18      	it	ne
 8009c9e:	2301      	movne	r3, #1
 8009ca0:	0692      	lsls	r2, r2, #26
 8009ca2:	d42b      	bmi.n	8009cfc <_printf_common+0xb0>
 8009ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ca8:	4641      	mov	r1, r8
 8009caa:	4638      	mov	r0, r7
 8009cac:	47c8      	blx	r9
 8009cae:	3001      	adds	r0, #1
 8009cb0:	d01e      	beq.n	8009cf0 <_printf_common+0xa4>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	6922      	ldr	r2, [r4, #16]
 8009cb6:	f003 0306 	and.w	r3, r3, #6
 8009cba:	2b04      	cmp	r3, #4
 8009cbc:	bf02      	ittt	eq
 8009cbe:	68e5      	ldreq	r5, [r4, #12]
 8009cc0:	6833      	ldreq	r3, [r6, #0]
 8009cc2:	1aed      	subeq	r5, r5, r3
 8009cc4:	68a3      	ldr	r3, [r4, #8]
 8009cc6:	bf0c      	ite	eq
 8009cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ccc:	2500      	movne	r5, #0
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	bfc4      	itt	gt
 8009cd2:	1a9b      	subgt	r3, r3, r2
 8009cd4:	18ed      	addgt	r5, r5, r3
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	341a      	adds	r4, #26
 8009cda:	42b5      	cmp	r5, r6
 8009cdc:	d11a      	bne.n	8009d14 <_printf_common+0xc8>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e008      	b.n	8009cf4 <_printf_common+0xa8>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	4638      	mov	r0, r7
 8009cea:	47c8      	blx	r9
 8009cec:	3001      	adds	r0, #1
 8009cee:	d103      	bne.n	8009cf8 <_printf_common+0xac>
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf8:	3501      	adds	r5, #1
 8009cfa:	e7c6      	b.n	8009c8a <_printf_common+0x3e>
 8009cfc:	18e1      	adds	r1, r4, r3
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	2030      	movs	r0, #48	@ 0x30
 8009d02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d06:	4422      	add	r2, r4
 8009d08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d10:	3302      	adds	r3, #2
 8009d12:	e7c7      	b.n	8009ca4 <_printf_common+0x58>
 8009d14:	2301      	movs	r3, #1
 8009d16:	4622      	mov	r2, r4
 8009d18:	4641      	mov	r1, r8
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	47c8      	blx	r9
 8009d1e:	3001      	adds	r0, #1
 8009d20:	d0e6      	beq.n	8009cf0 <_printf_common+0xa4>
 8009d22:	3601      	adds	r6, #1
 8009d24:	e7d9      	b.n	8009cda <_printf_common+0x8e>
	...

08009d28 <_printf_i>:
 8009d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	7e0f      	ldrb	r7, [r1, #24]
 8009d2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d30:	2f78      	cmp	r7, #120	@ 0x78
 8009d32:	4691      	mov	r9, r2
 8009d34:	4680      	mov	r8, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	469a      	mov	sl, r3
 8009d3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d3e:	d807      	bhi.n	8009d50 <_printf_i+0x28>
 8009d40:	2f62      	cmp	r7, #98	@ 0x62
 8009d42:	d80a      	bhi.n	8009d5a <_printf_i+0x32>
 8009d44:	2f00      	cmp	r7, #0
 8009d46:	f000 80d2 	beq.w	8009eee <_printf_i+0x1c6>
 8009d4a:	2f58      	cmp	r7, #88	@ 0x58
 8009d4c:	f000 80b9 	beq.w	8009ec2 <_printf_i+0x19a>
 8009d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d58:	e03a      	b.n	8009dd0 <_printf_i+0xa8>
 8009d5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d5e:	2b15      	cmp	r3, #21
 8009d60:	d8f6      	bhi.n	8009d50 <_printf_i+0x28>
 8009d62:	a101      	add	r1, pc, #4	@ (adr r1, 8009d68 <_printf_i+0x40>)
 8009d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d68:	08009dc1 	.word	0x08009dc1
 8009d6c:	08009dd5 	.word	0x08009dd5
 8009d70:	08009d51 	.word	0x08009d51
 8009d74:	08009d51 	.word	0x08009d51
 8009d78:	08009d51 	.word	0x08009d51
 8009d7c:	08009d51 	.word	0x08009d51
 8009d80:	08009dd5 	.word	0x08009dd5
 8009d84:	08009d51 	.word	0x08009d51
 8009d88:	08009d51 	.word	0x08009d51
 8009d8c:	08009d51 	.word	0x08009d51
 8009d90:	08009d51 	.word	0x08009d51
 8009d94:	08009ed5 	.word	0x08009ed5
 8009d98:	08009dff 	.word	0x08009dff
 8009d9c:	08009e8f 	.word	0x08009e8f
 8009da0:	08009d51 	.word	0x08009d51
 8009da4:	08009d51 	.word	0x08009d51
 8009da8:	08009ef7 	.word	0x08009ef7
 8009dac:	08009d51 	.word	0x08009d51
 8009db0:	08009dff 	.word	0x08009dff
 8009db4:	08009d51 	.word	0x08009d51
 8009db8:	08009d51 	.word	0x08009d51
 8009dbc:	08009e97 	.word	0x08009e97
 8009dc0:	6833      	ldr	r3, [r6, #0]
 8009dc2:	1d1a      	adds	r2, r3, #4
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6032      	str	r2, [r6, #0]
 8009dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e09d      	b.n	8009f10 <_printf_i+0x1e8>
 8009dd4:	6833      	ldr	r3, [r6, #0]
 8009dd6:	6820      	ldr	r0, [r4, #0]
 8009dd8:	1d19      	adds	r1, r3, #4
 8009dda:	6031      	str	r1, [r6, #0]
 8009ddc:	0606      	lsls	r6, r0, #24
 8009dde:	d501      	bpl.n	8009de4 <_printf_i+0xbc>
 8009de0:	681d      	ldr	r5, [r3, #0]
 8009de2:	e003      	b.n	8009dec <_printf_i+0xc4>
 8009de4:	0645      	lsls	r5, r0, #25
 8009de6:	d5fb      	bpl.n	8009de0 <_printf_i+0xb8>
 8009de8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dec:	2d00      	cmp	r5, #0
 8009dee:	da03      	bge.n	8009df8 <_printf_i+0xd0>
 8009df0:	232d      	movs	r3, #45	@ 0x2d
 8009df2:	426d      	negs	r5, r5
 8009df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009df8:	4859      	ldr	r0, [pc, #356]	@ (8009f60 <_printf_i+0x238>)
 8009dfa:	230a      	movs	r3, #10
 8009dfc:	e011      	b.n	8009e22 <_printf_i+0xfa>
 8009dfe:	6821      	ldr	r1, [r4, #0]
 8009e00:	6833      	ldr	r3, [r6, #0]
 8009e02:	0608      	lsls	r0, r1, #24
 8009e04:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e08:	d402      	bmi.n	8009e10 <_printf_i+0xe8>
 8009e0a:	0649      	lsls	r1, r1, #25
 8009e0c:	bf48      	it	mi
 8009e0e:	b2ad      	uxthmi	r5, r5
 8009e10:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e12:	4853      	ldr	r0, [pc, #332]	@ (8009f60 <_printf_i+0x238>)
 8009e14:	6033      	str	r3, [r6, #0]
 8009e16:	bf14      	ite	ne
 8009e18:	230a      	movne	r3, #10
 8009e1a:	2308      	moveq	r3, #8
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e22:	6866      	ldr	r6, [r4, #4]
 8009e24:	60a6      	str	r6, [r4, #8]
 8009e26:	2e00      	cmp	r6, #0
 8009e28:	bfa2      	ittt	ge
 8009e2a:	6821      	ldrge	r1, [r4, #0]
 8009e2c:	f021 0104 	bicge.w	r1, r1, #4
 8009e30:	6021      	strge	r1, [r4, #0]
 8009e32:	b90d      	cbnz	r5, 8009e38 <_printf_i+0x110>
 8009e34:	2e00      	cmp	r6, #0
 8009e36:	d04b      	beq.n	8009ed0 <_printf_i+0x1a8>
 8009e38:	4616      	mov	r6, r2
 8009e3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e3e:	fb03 5711 	mls	r7, r3, r1, r5
 8009e42:	5dc7      	ldrb	r7, [r0, r7]
 8009e44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e48:	462f      	mov	r7, r5
 8009e4a:	42bb      	cmp	r3, r7
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	d9f4      	bls.n	8009e3a <_printf_i+0x112>
 8009e50:	2b08      	cmp	r3, #8
 8009e52:	d10b      	bne.n	8009e6c <_printf_i+0x144>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	07df      	lsls	r7, r3, #31
 8009e58:	d508      	bpl.n	8009e6c <_printf_i+0x144>
 8009e5a:	6923      	ldr	r3, [r4, #16]
 8009e5c:	6861      	ldr	r1, [r4, #4]
 8009e5e:	4299      	cmp	r1, r3
 8009e60:	bfde      	ittt	le
 8009e62:	2330      	movle	r3, #48	@ 0x30
 8009e64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e6c:	1b92      	subs	r2, r2, r6
 8009e6e:	6122      	str	r2, [r4, #16]
 8009e70:	f8cd a000 	str.w	sl, [sp]
 8009e74:	464b      	mov	r3, r9
 8009e76:	aa03      	add	r2, sp, #12
 8009e78:	4621      	mov	r1, r4
 8009e7a:	4640      	mov	r0, r8
 8009e7c:	f7ff fee6 	bl	8009c4c <_printf_common>
 8009e80:	3001      	adds	r0, #1
 8009e82:	d14a      	bne.n	8009f1a <_printf_i+0x1f2>
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	b004      	add	sp, #16
 8009e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	f043 0320 	orr.w	r3, r3, #32
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	4833      	ldr	r0, [pc, #204]	@ (8009f64 <_printf_i+0x23c>)
 8009e98:	2778      	movs	r7, #120	@ 0x78
 8009e9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	6831      	ldr	r1, [r6, #0]
 8009ea2:	061f      	lsls	r7, r3, #24
 8009ea4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ea8:	d402      	bmi.n	8009eb0 <_printf_i+0x188>
 8009eaa:	065f      	lsls	r7, r3, #25
 8009eac:	bf48      	it	mi
 8009eae:	b2ad      	uxthmi	r5, r5
 8009eb0:	6031      	str	r1, [r6, #0]
 8009eb2:	07d9      	lsls	r1, r3, #31
 8009eb4:	bf44      	itt	mi
 8009eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8009eba:	6023      	strmi	r3, [r4, #0]
 8009ebc:	b11d      	cbz	r5, 8009ec6 <_printf_i+0x19e>
 8009ebe:	2310      	movs	r3, #16
 8009ec0:	e7ac      	b.n	8009e1c <_printf_i+0xf4>
 8009ec2:	4827      	ldr	r0, [pc, #156]	@ (8009f60 <_printf_i+0x238>)
 8009ec4:	e7e9      	b.n	8009e9a <_printf_i+0x172>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	f023 0320 	bic.w	r3, r3, #32
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	e7f6      	b.n	8009ebe <_printf_i+0x196>
 8009ed0:	4616      	mov	r6, r2
 8009ed2:	e7bd      	b.n	8009e50 <_printf_i+0x128>
 8009ed4:	6833      	ldr	r3, [r6, #0]
 8009ed6:	6825      	ldr	r5, [r4, #0]
 8009ed8:	6961      	ldr	r1, [r4, #20]
 8009eda:	1d18      	adds	r0, r3, #4
 8009edc:	6030      	str	r0, [r6, #0]
 8009ede:	062e      	lsls	r6, r5, #24
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	d501      	bpl.n	8009ee8 <_printf_i+0x1c0>
 8009ee4:	6019      	str	r1, [r3, #0]
 8009ee6:	e002      	b.n	8009eee <_printf_i+0x1c6>
 8009ee8:	0668      	lsls	r0, r5, #25
 8009eea:	d5fb      	bpl.n	8009ee4 <_printf_i+0x1bc>
 8009eec:	8019      	strh	r1, [r3, #0]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	6123      	str	r3, [r4, #16]
 8009ef2:	4616      	mov	r6, r2
 8009ef4:	e7bc      	b.n	8009e70 <_printf_i+0x148>
 8009ef6:	6833      	ldr	r3, [r6, #0]
 8009ef8:	1d1a      	adds	r2, r3, #4
 8009efa:	6032      	str	r2, [r6, #0]
 8009efc:	681e      	ldr	r6, [r3, #0]
 8009efe:	6862      	ldr	r2, [r4, #4]
 8009f00:	2100      	movs	r1, #0
 8009f02:	4630      	mov	r0, r6
 8009f04:	f7f6 f944 	bl	8000190 <memchr>
 8009f08:	b108      	cbz	r0, 8009f0e <_printf_i+0x1e6>
 8009f0a:	1b80      	subs	r0, r0, r6
 8009f0c:	6060      	str	r0, [r4, #4]
 8009f0e:	6863      	ldr	r3, [r4, #4]
 8009f10:	6123      	str	r3, [r4, #16]
 8009f12:	2300      	movs	r3, #0
 8009f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f18:	e7aa      	b.n	8009e70 <_printf_i+0x148>
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	4632      	mov	r2, r6
 8009f1e:	4649      	mov	r1, r9
 8009f20:	4640      	mov	r0, r8
 8009f22:	47d0      	blx	sl
 8009f24:	3001      	adds	r0, #1
 8009f26:	d0ad      	beq.n	8009e84 <_printf_i+0x15c>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	079b      	lsls	r3, r3, #30
 8009f2c:	d413      	bmi.n	8009f56 <_printf_i+0x22e>
 8009f2e:	68e0      	ldr	r0, [r4, #12]
 8009f30:	9b03      	ldr	r3, [sp, #12]
 8009f32:	4298      	cmp	r0, r3
 8009f34:	bfb8      	it	lt
 8009f36:	4618      	movlt	r0, r3
 8009f38:	e7a6      	b.n	8009e88 <_printf_i+0x160>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	4649      	mov	r1, r9
 8009f40:	4640      	mov	r0, r8
 8009f42:	47d0      	blx	sl
 8009f44:	3001      	adds	r0, #1
 8009f46:	d09d      	beq.n	8009e84 <_printf_i+0x15c>
 8009f48:	3501      	adds	r5, #1
 8009f4a:	68e3      	ldr	r3, [r4, #12]
 8009f4c:	9903      	ldr	r1, [sp, #12]
 8009f4e:	1a5b      	subs	r3, r3, r1
 8009f50:	42ab      	cmp	r3, r5
 8009f52:	dcf2      	bgt.n	8009f3a <_printf_i+0x212>
 8009f54:	e7eb      	b.n	8009f2e <_printf_i+0x206>
 8009f56:	2500      	movs	r5, #0
 8009f58:	f104 0619 	add.w	r6, r4, #25
 8009f5c:	e7f5      	b.n	8009f4a <_printf_i+0x222>
 8009f5e:	bf00      	nop
 8009f60:	0800abe1 	.word	0x0800abe1
 8009f64:	0800abf2 	.word	0x0800abf2

08009f68 <memmove>:
 8009f68:	4288      	cmp	r0, r1
 8009f6a:	b510      	push	{r4, lr}
 8009f6c:	eb01 0402 	add.w	r4, r1, r2
 8009f70:	d902      	bls.n	8009f78 <memmove+0x10>
 8009f72:	4284      	cmp	r4, r0
 8009f74:	4623      	mov	r3, r4
 8009f76:	d807      	bhi.n	8009f88 <memmove+0x20>
 8009f78:	1e43      	subs	r3, r0, #1
 8009f7a:	42a1      	cmp	r1, r4
 8009f7c:	d008      	beq.n	8009f90 <memmove+0x28>
 8009f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f86:	e7f8      	b.n	8009f7a <memmove+0x12>
 8009f88:	4402      	add	r2, r0
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	428a      	cmp	r2, r1
 8009f8e:	d100      	bne.n	8009f92 <memmove+0x2a>
 8009f90:	bd10      	pop	{r4, pc}
 8009f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f9a:	e7f7      	b.n	8009f8c <memmove+0x24>

08009f9c <_sbrk_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d06      	ldr	r5, [pc, #24]	@ (8009fb8 <_sbrk_r+0x1c>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	602b      	str	r3, [r5, #0]
 8009fa8:	f7f8 f932 	bl	8002210 <_sbrk>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_sbrk_r+0x1a>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_sbrk_r+0x1a>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	20000954 	.word	0x20000954

08009fbc <_realloc_r>:
 8009fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	4615      	mov	r5, r2
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	b921      	cbnz	r1, 8009fd2 <_realloc_r+0x16>
 8009fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fcc:	4611      	mov	r1, r2
 8009fce:	f7ff bc59 	b.w	8009884 <_malloc_r>
 8009fd2:	b92a      	cbnz	r2, 8009fe0 <_realloc_r+0x24>
 8009fd4:	f7ff fbea 	bl	80097ac <_free_r>
 8009fd8:	2400      	movs	r4, #0
 8009fda:	4620      	mov	r0, r4
 8009fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe0:	f000 f81a 	bl	800a018 <_malloc_usable_size_r>
 8009fe4:	4285      	cmp	r5, r0
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	d802      	bhi.n	8009ff0 <_realloc_r+0x34>
 8009fea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009fee:	d8f4      	bhi.n	8009fda <_realloc_r+0x1e>
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	f7ff fc46 	bl	8009884 <_malloc_r>
 8009ff8:	4607      	mov	r7, r0
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d0ec      	beq.n	8009fd8 <_realloc_r+0x1c>
 8009ffe:	42b5      	cmp	r5, r6
 800a000:	462a      	mov	r2, r5
 800a002:	4621      	mov	r1, r4
 800a004:	bf28      	it	cs
 800a006:	4632      	movcs	r2, r6
 800a008:	f7ff fbc2 	bl	8009790 <memcpy>
 800a00c:	4621      	mov	r1, r4
 800a00e:	4640      	mov	r0, r8
 800a010:	f7ff fbcc 	bl	80097ac <_free_r>
 800a014:	463c      	mov	r4, r7
 800a016:	e7e0      	b.n	8009fda <_realloc_r+0x1e>

0800a018 <_malloc_usable_size_r>:
 800a018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a01c:	1f18      	subs	r0, r3, #4
 800a01e:	2b00      	cmp	r3, #0
 800a020:	bfbc      	itt	lt
 800a022:	580b      	ldrlt	r3, [r1, r0]
 800a024:	18c0      	addlt	r0, r0, r3
 800a026:	4770      	bx	lr

0800a028 <_init>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	bf00      	nop
 800a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02e:	bc08      	pop	{r3}
 800a030:	469e      	mov	lr, r3
 800a032:	4770      	bx	lr

0800a034 <_fini>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	bf00      	nop
 800a038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03a:	bc08      	pop	{r3}
 800a03c:	469e      	mov	lr, r3
 800a03e:	4770      	bx	lr
